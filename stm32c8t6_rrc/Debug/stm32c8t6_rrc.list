
stm32c8t6_rrc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007070  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08007180  08007180  00017180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007624  08007624  000202d0  2**0
                  CONTENTS
  4 .ARM          00000000  08007624  08007624  000202d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007624  08007624  000202d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007624  08007624  00017624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007628  08007628  00017628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0800762c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000444  200002d0  080078fc  000202d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000714  080078fc  00020714  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e58  00000000  00000000  000202f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000206d  00000000  00000000  00029151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  0002b1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000848  00000000  00000000  0002baf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b41  00000000  00000000  0002c338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b186  00000000  00000000  00044e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008549c  00000000  00000000  0004ffff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d549b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f0  00000000  00000000  000d54ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002d0 	.word	0x200002d0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007168 	.word	0x08007168

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002d4 	.word	0x200002d4
 800014c:	08007168 	.word	0x08007168

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	; 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	4605      	mov	r5, r0
 8000d5c:	460c      	mov	r4, r1
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2300      	movs	r3, #0
 8000d62:	4628      	mov	r0, r5
 8000d64:	4621      	mov	r1, r4
 8000d66:	f7ff fe29 	bl	80009bc <__aeabi_dcmplt>
 8000d6a:	b928      	cbnz	r0, 8000d78 <__aeabi_d2lz+0x20>
 8000d6c:	4628      	mov	r0, r5
 8000d6e:	4621      	mov	r1, r4
 8000d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d74:	f000 b80a 	b.w	8000d8c <__aeabi_d2ulz>
 8000d78:	4628      	mov	r0, r5
 8000d7a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000d7e:	f000 f805 	bl	8000d8c <__aeabi_d2ulz>
 8000d82:	4240      	negs	r0, r0
 8000d84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d88:	bd38      	pop	{r3, r4, r5, pc}
 8000d8a:	bf00      	nop

08000d8c <__aeabi_d2ulz>:
 8000d8c:	b5d0      	push	{r4, r6, r7, lr}
 8000d8e:	2200      	movs	r2, #0
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <__aeabi_d2ulz+0x34>)
 8000d92:	4606      	mov	r6, r0
 8000d94:	460f      	mov	r7, r1
 8000d96:	f7ff fb9f 	bl	80004d8 <__aeabi_dmul>
 8000d9a:	f7ff fe5f 	bl	8000a5c <__aeabi_d2uiz>
 8000d9e:	4604      	mov	r4, r0
 8000da0:	f7ff fb20 	bl	80003e4 <__aeabi_ui2d>
 8000da4:	2200      	movs	r2, #0
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <__aeabi_d2ulz+0x38>)
 8000da8:	f7ff fb96 	bl	80004d8 <__aeabi_dmul>
 8000dac:	4602      	mov	r2, r0
 8000dae:	460b      	mov	r3, r1
 8000db0:	4630      	mov	r0, r6
 8000db2:	4639      	mov	r1, r7
 8000db4:	f7ff f9d8 	bl	8000168 <__aeabi_dsub>
 8000db8:	f7ff fe50 	bl	8000a5c <__aeabi_d2uiz>
 8000dbc:	4621      	mov	r1, r4
 8000dbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000dc0:	3df00000 	.word	0x3df00000
 8000dc4:	41f00000 	.word	0x41f00000

08000dc8 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d106      	bne.n	8000dea <prv_parse_number+0x22>
        t = gh->p.term_str;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3371      	adds	r3, #113	; 0x71
 8000de0:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8000de2:	e002      	b.n	8000dea <prv_parse_number+0x22>
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	3301      	adds	r3, #1
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d003      	beq.n	8000df8 <prv_parse_number+0x30>
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b20      	cmp	r3, #32
 8000df6:	d0f5      	beq.n	8000de4 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b2d      	cmp	r3, #45	; 0x2d
 8000dfe:	d104      	bne.n	8000e0a <prv_parse_number+0x42>
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	603b      	str	r3, [r7, #0]
 8000e06:	2301      	movs	r3, #1
 8000e08:	e000      	b.n	8000e0c <prv_parse_number+0x44>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8000e0e:	e00d      	b.n	8000e2c <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	4613      	mov	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4413      	add	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	3b30      	subs	r3, #48	; 0x30
 8000e22:	4413      	add	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d007      	beq.n	8000e42 <prv_parse_number+0x7a>
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b2f      	cmp	r3, #47	; 0x2f
 8000e38:	d903      	bls.n	8000e42 <prv_parse_number+0x7a>
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b39      	cmp	r3, #57	; 0x39
 8000e40:	d9e6      	bls.n	8000e10 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8000e42:	7afb      	ldrb	r3, [r7, #11]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d002      	beq.n	8000e4e <prv_parse_number+0x86>
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	425b      	negs	r3, r3
 8000e4c:	e000      	b.n	8000e50 <prv_parse_number+0x88>
 8000e4e:	68fb      	ldr	r3, [r7, #12]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr

08000e5a <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b084      	sub	sp, #16
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d106      	bne.n	8000e78 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3371      	adds	r3, #113	; 0x71
 8000e6e:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8000e70:	e002      	b.n	8000e78 <prv_parse_float_number+0x1e>
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	3301      	adds	r3, #1
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <prv_parse_float_number+0x2c>
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b20      	cmp	r3, #32
 8000e84:	d0f5      	beq.n	8000e72 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8000e86:	2100      	movs	r1, #0
 8000e88:	6838      	ldr	r0, [r7, #0]
 8000e8a:	f004 f909 	bl	80050a0 <strtod>
 8000e8e:	e9c7 0102 	strd	r0, r1, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 8000e92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000e96:	4610      	mov	r0, r2
 8000e98:	4619      	mov	r1, r3
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ffd5 	bl	8000e5a <prv_parse_float_number>
 8000eb0:	e9c7 0106 	strd	r0, r1, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8000eb4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000eb8:	f7ff fda8 	bl	8000a0c <__aeabi_d2iz>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	4a1b      	ldr	r2, [pc, #108]	; (8000f2c <prv_parse_lat_long+0x8c>)
 8000ec0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ec4:	1152      	asrs	r2, r2, #5
 8000ec6:	17db      	asrs	r3, r3, #31
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fa9a 	bl	8000404 <__aeabi_i2d>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <prv_parse_lat_long+0x90>)
 8000ede:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000ee2:	f7ff faf9 	bl	80004d8 <__aeabi_dmul>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000eee:	f7ff f93b 	bl	8000168 <__aeabi_dsub>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <prv_parse_lat_long+0x94>)
 8000f00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f04:	f7ff fc12 	bl	800072c <__aeabi_ddiv>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f10:	f7ff f92c 	bl	800016c <__adddf3>
 8000f14:	4602      	mov	r2, r0
 8000f16:	460b      	mov	r3, r1
 8000f18:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8000f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	3720      	adds	r7, #32
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	51eb851f 	.word	0x51eb851f
 8000f30:	40590000 	.word	0x40590000
 8000f34:	404e0000 	.word	0x404e0000

08000f38 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 8000f38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	d169      	bne.n	8001020 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3371      	adds	r3, #113	; 0x71
 8000f50:	2206      	movs	r2, #6
 8000f52:	49b6      	ldr	r1, [pc, #728]	; (800122c <prv_parse_term+0x2f4>)
 8000f54:	4618      	mov	r0, r3
 8000f56:	f003 fa85 	bl	8004464 <strncmp>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d009      	beq.n	8000f74 <prv_parse_term+0x3c>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3371      	adds	r3, #113	; 0x71
 8000f64:	2206      	movs	r2, #6
 8000f66:	49b2      	ldr	r1, [pc, #712]	; (8001230 <prv_parse_term+0x2f8>)
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f003 fa7b 	bl	8004464 <strncmp>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d104      	bne.n	8000f7e <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8000f7c:	e04e      	b.n	800101c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3371      	adds	r3, #113	; 0x71
 8000f82:	2206      	movs	r2, #6
 8000f84:	49ab      	ldr	r1, [pc, #684]	; (8001234 <prv_parse_term+0x2fc>)
 8000f86:	4618      	mov	r0, r3
 8000f88:	f003 fa6c 	bl	8004464 <strncmp>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d009      	beq.n	8000fa6 <prv_parse_term+0x6e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3371      	adds	r3, #113	; 0x71
 8000f96:	2206      	movs	r2, #6
 8000f98:	49a7      	ldr	r1, [pc, #668]	; (8001238 <prv_parse_term+0x300>)
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f003 fa62 	bl	8004464 <strncmp>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d104      	bne.n	8000fb0 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2202      	movs	r2, #2
 8000faa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8000fae:	e035      	b.n	800101c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3371      	adds	r3, #113	; 0x71
 8000fb4:	2206      	movs	r2, #6
 8000fb6:	49a1      	ldr	r1, [pc, #644]	; (800123c <prv_parse_term+0x304>)
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f003 fa53 	bl	8004464 <strncmp>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d009      	beq.n	8000fd8 <prv_parse_term+0xa0>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3371      	adds	r3, #113	; 0x71
 8000fc8:	2206      	movs	r2, #6
 8000fca:	499d      	ldr	r1, [pc, #628]	; (8001240 <prv_parse_term+0x308>)
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f003 fa49 	bl	8004464 <strncmp>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d104      	bne.n	8000fe2 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2203      	movs	r2, #3
 8000fdc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8000fe0:	e01c      	b.n	800101c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3371      	adds	r3, #113	; 0x71
 8000fe6:	2206      	movs	r2, #6
 8000fe8:	4996      	ldr	r1, [pc, #600]	; (8001244 <prv_parse_term+0x30c>)
 8000fea:	4618      	mov	r0, r3
 8000fec:	f003 fa3a 	bl	8004464 <strncmp>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d009      	beq.n	800100a <prv_parse_term+0xd2>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3371      	adds	r3, #113	; 0x71
 8000ffa:	2206      	movs	r2, #6
 8000ffc:	4992      	ldr	r1, [pc, #584]	; (8001248 <prv_parse_term+0x310>)
 8000ffe:	4618      	mov	r0, r3
 8001000:	f003 fa30 	bl	8004464 <strncmp>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d104      	bne.n	8001014 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2204      	movs	r2, #4
 800100e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001012:	e003      	b.n	800101c <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 800101c:	2301      	movs	r3, #1
 800101e:	e21f      	b.n	8001460 <prv_parse_term+0x528>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001026:	2900      	cmp	r1, #0
 8001028:	f000 8219 	beq.w	800145e <prv_parse_term+0x526>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001032:	2901      	cmp	r1, #1
 8001034:	f040 80c1 	bne.w	80011ba <prv_parse_term+0x282>
        switch (gh->p.term_num) {
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800103e:	3b01      	subs	r3, #1
 8001040:	2b0a      	cmp	r3, #10
 8001042:	f200 81ff 	bhi.w	8001444 <prv_parse_term+0x50c>
 8001046:	a201      	add	r2, pc, #4	; (adr r2, 800104c <prv_parse_term+0x114>)
 8001048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104c:	08001079 	.word	0x08001079
 8001050:	080010f3 	.word	0x080010f3
 8001054:	08001105 	.word	0x08001105
 8001058:	0800112f 	.word	0x0800112f
 800105c:	08001141 	.word	0x08001141
 8001060:	0800116b 	.word	0x0800116b
 8001064:	0800117f 	.word	0x0800117f
 8001068:	08001445 	.word	0x08001445
 800106c:	08001193 	.word	0x08001193
 8001070:	08001445 	.word	0x08001445
 8001074:	080011a7 	.word	0x080011a7
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800107e:	3b30      	subs	r3, #48	; 0x30
 8001080:	b2db      	uxtb	r3, r3
 8001082:	461a      	mov	r2, r3
 8001084:	0092      	lsls	r2, r2, #2
 8001086:	4413      	add	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	b2da      	uxtb	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001092:	4413      	add	r3, r2
 8001094:	b2db      	uxtb	r3, r3
 8001096:	3b30      	subs	r3, #48	; 0x30
 8001098:	b2da      	uxtb	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80010a6:	3b30      	subs	r3, #48	; 0x30
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	461a      	mov	r2, r3
 80010ac:	0092      	lsls	r2, r2, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80010ba:	4413      	add	r3, r2
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	3b30      	subs	r3, #48	; 0x30
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80010ce:	3b30      	subs	r3, #48	; 0x30
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	461a      	mov	r2, r3
 80010d4:	0092      	lsls	r2, r2, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80010e2:	4413      	add	r3, r2
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	3b30      	subs	r3, #48	; 0x30
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 80010f0:	e1b5      	b.n	800145e <prv_parse_term+0x526>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff fed4 	bl	8000ea0 <prv_parse_lat_long>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
                break;
 8001102:	e1ac      	b.n	800145e <prv_parse_term+0x526>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800110a:	2b53      	cmp	r3, #83	; 0x53
 800110c:	d005      	beq.n	800111a <prv_parse_term+0x1e2>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001114:	2b73      	cmp	r3, #115	; 0x73
 8001116:	f040 8197 	bne.w	8001448 <prv_parse_term+0x510>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001120:	4690      	mov	r8, r2
 8001122:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 800112c:	e18c      	b.n	8001448 <prv_parse_term+0x510>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff feb6 	bl	8000ea0 <prv_parse_lat_long>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
                break;
 800113e:	e18e      	b.n	800145e <prv_parse_term+0x526>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001146:	2b57      	cmp	r3, #87	; 0x57
 8001148:	d005      	beq.n	8001156 <prv_parse_term+0x21e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001150:	2b77      	cmp	r3, #119	; 0x77
 8001152:	f040 817b 	bne.w	800144c <prv_parse_term+0x514>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800115c:	4614      	mov	r4, r2
 800115e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 8001168:	e170      	b.n	800144c <prv_parse_term+0x514>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 800116a:	2100      	movs	r1, #0
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff fe2b 	bl	8000dc8 <prv_parse_number>
 8001172:	4603      	mov	r3, r0
 8001174:	b2da      	uxtb	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 800117c:	e16f      	b.n	800145e <prv_parse_term+0x526>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 800117e:	2100      	movs	r1, #0
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff fe21 	bl	8000dc8 <prv_parse_number>
 8001186:	4603      	mov	r3, r0
 8001188:	b2da      	uxtb	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 8001190:	e165      	b.n	800145e <prv_parse_term+0x526>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 8001192:	2100      	movs	r1, #0
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff fe60 	bl	8000e5a <prv_parse_float_number>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
                break;
 80011a4:	e15b      	b.n	800145e <prv_parse_term+0x526>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 80011a6:	2100      	movs	r1, #0
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff fe56 	bl	8000e5a <prv_parse_float_number>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                break;
 80011b8:	e151      	b.n	800145e <prv_parse_term+0x526>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80011c0:	2902      	cmp	r1, #2
 80011c2:	d17d      	bne.n	80012c0 <prv_parse_term+0x388>
        switch (gh->p.term_num) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80011ca:	3b02      	subs	r3, #2
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d85b      	bhi.n	8001288 <prv_parse_term+0x350>
 80011d0:	a201      	add	r2, pc, #4	; (adr r2, 80011d8 <prv_parse_term+0x2a0>)
 80011d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d6:	bf00      	nop
 80011d8:	08001219 	.word	0x08001219
 80011dc:	08001289 	.word	0x08001289
 80011e0:	08001289 	.word	0x08001289
 80011e4:	08001289 	.word	0x08001289
 80011e8:	08001289 	.word	0x08001289
 80011ec:	08001289 	.word	0x08001289
 80011f0:	08001289 	.word	0x08001289
 80011f4:	08001289 	.word	0x08001289
 80011f8:	08001289 	.word	0x08001289
 80011fc:	08001289 	.word	0x08001289
 8001200:	08001289 	.word	0x08001289
 8001204:	08001289 	.word	0x08001289
 8001208:	08001289 	.word	0x08001289
 800120c:	0800124d 	.word	0x0800124d
 8001210:	08001261 	.word	0x08001261
 8001214:	08001275 	.word	0x08001275
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8001218:	2100      	movs	r1, #0
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fdd4 	bl	8000dc8 <prv_parse_number>
 8001220:	4603      	mov	r3, r0
 8001222:	b2da      	uxtb	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 800122a:	e118      	b.n	800145e <prv_parse_term+0x526>
 800122c:	08007180 	.word	0x08007180
 8001230:	08007188 	.word	0x08007188
 8001234:	08007190 	.word	0x08007190
 8001238:	08007198 	.word	0x08007198
 800123c:	080071a0 	.word	0x080071a0
 8001240:	080071a8 	.word	0x080071a8
 8001244:	080071b0 	.word	0x080071b0
 8001248:	080071b8 	.word	0x080071b8
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 800124c:	2100      	movs	r1, #0
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff fe03 	bl	8000e5a <prv_parse_float_number>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
                break;
 800125e:	e0fe      	b.n	800145e <prv_parse_term+0x526>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8001260:	2100      	movs	r1, #0
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fdf9 	bl	8000e5a <prv_parse_float_number>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
                break;
 8001272:	e0f4      	b.n	800145e <prv_parse_term+0x526>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8001274:	2100      	movs	r1, #0
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff fdef 	bl	8000e5a <prv_parse_float_number>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	6879      	ldr	r1, [r7, #4]
 8001282:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
                break;
 8001286:	e0ea      	b.n	800145e <prv_parse_term+0x526>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800128e:	2b02      	cmp	r3, #2
 8001290:	f240 80de 	bls.w	8001450 <prv_parse_term+0x518>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800129a:	2b0e      	cmp	r3, #14
 800129c:	f200 80d8 	bhi.w	8001450 <prv_parse_term+0x518>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 80012a0:	2100      	movs	r1, #0
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff fd90 	bl	8000dc8 <prv_parse_number>
 80012a8:	4602      	mov	r2, r0
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80012b0:	3b03      	subs	r3, #3
 80012b2:	b2d1      	uxtb	r1, r2
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	4413      	add	r3, r2
 80012b8:	460a      	mov	r2, r1
 80012ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 80012be:	e0c7      	b.n	8001450 <prv_parse_term+0x518>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80012c6:	2903      	cmp	r1, #3
 80012c8:	d11b      	bne.n	8001302 <prv_parse_term+0x3ca>
        switch (gh->p.term_num) {
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d002      	beq.n	80012da <prv_parse_term+0x3a2>
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	d00a      	beq.n	80012ee <prv_parse_term+0x3b6>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 80012d8:	e0c1      	b.n	800145e <prv_parse_term+0x526>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 80012da:	2100      	movs	r1, #0
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff fd73 	bl	8000dc8 <prv_parse_number>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 80012ec:	e0b7      	b.n	800145e <prv_parse_term+0x526>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 80012ee:	2100      	movs	r1, #0
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff fd69 	bl	8000dc8 <prv_parse_number>
 80012f6:	4603      	mov	r3, r0
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8001300:	e0ad      	b.n	800145e <prv_parse_term+0x526>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001308:	2904      	cmp	r1, #4
 800130a:	f040 80a3 	bne.w	8001454 <prv_parse_term+0x51c>
        switch (gh->p.term_num) {
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8001314:	3902      	subs	r1, #2
 8001316:	2909      	cmp	r1, #9
 8001318:	f200 809e 	bhi.w	8001458 <prv_parse_term+0x520>
 800131c:	a001      	add	r0, pc, #4	; (adr r0, 8001324 <prv_parse_term+0x3ec>)
 800131e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8001322:	bf00      	nop
 8001324:	0800134d 	.word	0x0800134d
 8001328:	08001459 	.word	0x08001459
 800132c:	08001459 	.word	0x08001459
 8001330:	08001459 	.word	0x08001459
 8001334:	08001459 	.word	0x08001459
 8001338:	08001367 	.word	0x08001367
 800133c:	0800137b 	.word	0x0800137b
 8001340:	0800138f 	.word	0x0800138f
 8001344:	08001409 	.word	0x08001409
 8001348:	0800141d 	.word	0x0800141d
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001352:	2b41      	cmp	r3, #65	; 0x41
 8001354:	bf0c      	ite	eq
 8001356:	2301      	moveq	r3, #1
 8001358:	2300      	movne	r3, #0
 800135a:	b2db      	uxtb	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8001364:	e07b      	b.n	800145e <prv_parse_term+0x526>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 8001366:	2100      	movs	r1, #0
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff fd76 	bl	8000e5a <prv_parse_float_number>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
                break;
 8001378:	e071      	b.n	800145e <prv_parse_term+0x526>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 800137a:	2100      	movs	r1, #0
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff fd6c 	bl	8000e5a <prv_parse_float_number>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
                break;
 800138c:	e067      	b.n	800145e <prv_parse_term+0x526>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001394:	3b30      	subs	r3, #48	; 0x30
 8001396:	b2db      	uxtb	r3, r3
 8001398:	461a      	mov	r2, r3
 800139a:	0092      	lsls	r2, r2, #2
 800139c:	4413      	add	r3, r2
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80013a8:	4413      	add	r3, r2
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	3b30      	subs	r3, #48	; 0x30
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80013bc:	3b30      	subs	r3, #48	; 0x30
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	461a      	mov	r2, r3
 80013c2:	0092      	lsls	r2, r2, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80013d0:	4413      	add	r3, r2
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	3b30      	subs	r3, #48	; 0x30
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80013e4:	3b30      	subs	r3, #48	; 0x30
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	0092      	lsls	r2, r2, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80013f8:	4413      	add	r3, r2
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	3b30      	subs	r3, #48	; 0x30
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 8001406:	e02a      	b.n	800145e <prv_parse_term+0x526>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8001408:	2100      	movs	r1, #0
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fd25 	bl	8000e5a <prv_parse_float_number>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                break;
 800141a:	e020      	b.n	800145e <prv_parse_term+0x526>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8001422:	2957      	cmp	r1, #87	; 0x57
 8001424:	d004      	beq.n	8001430 <prv_parse_term+0x4f8>
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 800142c:	2977      	cmp	r1, #119	; 0x77
 800142e:	d115      	bne.n	800145c <prv_parse_term+0x524>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 8001436:	4602      	mov	r2, r0
 8001438:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 8001442:	e00b      	b.n	800145c <prv_parse_term+0x524>
                break;
 8001444:	bf00      	nop
 8001446:	e00a      	b.n	800145e <prv_parse_term+0x526>
                break;
 8001448:	bf00      	nop
 800144a:	e008      	b.n	800145e <prv_parse_term+0x526>
                break;
 800144c:	bf00      	nop
 800144e:	e006      	b.n	800145e <prv_parse_term+0x526>
                break;
 8001450:	bf00      	nop
 8001452:	e004      	b.n	800145e <prv_parse_term+0x526>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
 8001454:	bf00      	nop
 8001456:	e002      	b.n	800145e <prv_parse_term+0x526>
                break;
 8001458:	bf00      	nop
 800145a:	e000      	b.n	800145e <prv_parse_term+0x526>
                break;
 800145c:	bf00      	nop
    return 1;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800146a:	bf00      	nop

0800146c <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800147a:	2b2f      	cmp	r3, #47	; 0x2f
 800147c:	d90d      	bls.n	800149a <prv_check_crc+0x2e>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001484:	2b39      	cmp	r3, #57	; 0x39
 8001486:	d808      	bhi.n	800149a <prv_check_crc+0x2e>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800148e:	3b30      	subs	r3, #48	; 0x30
 8001490:	b2db      	uxtb	r3, r3
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	b2db      	uxtb	r3, r3
 8001496:	b25a      	sxtb	r2, r3
 8001498:	e026      	b.n	80014e8 <prv_check_crc+0x7c>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80014a0:	2b60      	cmp	r3, #96	; 0x60
 80014a2:	d90d      	bls.n	80014c0 <prv_check_crc+0x54>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80014aa:	2b7a      	cmp	r3, #122	; 0x7a
 80014ac:	d808      	bhi.n	80014c0 <prv_check_crc+0x54>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80014b4:	3b57      	subs	r3, #87	; 0x57
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	b25a      	sxtb	r2, r3
 80014be:	e013      	b.n	80014e8 <prv_check_crc+0x7c>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80014c6:	2b40      	cmp	r3, #64	; 0x40
 80014c8:	d90d      	bls.n	80014e6 <prv_check_crc+0x7a>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80014d0:	2b5a      	cmp	r3, #90	; 0x5a
 80014d2:	d808      	bhi.n	80014e6 <prv_check_crc+0x7a>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80014da:	3b37      	subs	r3, #55	; 0x37
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	b25a      	sxtb	r2, r3
 80014e4:	e000      	b.n	80014e8 <prv_check_crc+0x7c>
 80014e6:	2200      	movs	r2, #0
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80014ee:	2b2f      	cmp	r3, #47	; 0x2f
 80014f0:	d90c      	bls.n	800150c <prv_check_crc+0xa0>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80014f8:	2b39      	cmp	r3, #57	; 0x39
 80014fa:	d807      	bhi.n	800150c <prv_check_crc+0xa0>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001502:	b25b      	sxtb	r3, r3
 8001504:	f003 030f 	and.w	r3, r3, #15
 8001508:	b25b      	sxtb	r3, r3
 800150a:	e028      	b.n	800155e <prv_check_crc+0xf2>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001512:	2b60      	cmp	r3, #96	; 0x60
 8001514:	d90e      	bls.n	8001534 <prv_check_crc+0xc8>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800151c:	2b7a      	cmp	r3, #122	; 0x7a
 800151e:	d809      	bhi.n	8001534 <prv_check_crc+0xc8>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001526:	3b57      	subs	r3, #87	; 0x57
 8001528:	b2db      	uxtb	r3, r3
 800152a:	b25b      	sxtb	r3, r3
 800152c:	f003 030f 	and.w	r3, r3, #15
 8001530:	b25b      	sxtb	r3, r3
 8001532:	e014      	b.n	800155e <prv_check_crc+0xf2>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800153a:	2b40      	cmp	r3, #64	; 0x40
 800153c:	d90e      	bls.n	800155c <prv_check_crc+0xf0>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001544:	2b5a      	cmp	r3, #90	; 0x5a
 8001546:	d809      	bhi.n	800155c <prv_check_crc+0xf0>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800154e:	3b37      	subs	r3, #55	; 0x37
 8001550:	b2db      	uxtb	r3, r3
 8001552:	b25b      	sxtb	r3, r3
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	b25b      	sxtb	r3, r3
 800155a:	e000      	b.n	800155e <prv_check_crc+0xf2>
 800155c:	2300      	movs	r3, #0
 800155e:	4313      	orrs	r3, r2
 8001560:	b25b      	sxtb	r3, r3
 8001562:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800156a:	7bfa      	ldrb	r2, [r7, #15]
 800156c:	429a      	cmp	r2, r3
 800156e:	bf0c      	ite	eq
 8001570:	2301      	moveq	r3, #1
 8001572:	2300      	movne	r3, #0
 8001574:	b2db      	uxtb	r3, r3
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800158e:	2b01      	cmp	r3, #1
 8001590:	d136      	bne.n	8001600 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80015fe:	e061      	b.n	80016c4 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001606:	2b02      	cmp	r3, #2
 8001608:	d121      	bne.n	800164e <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	33a1      	adds	r3, #161	; 0xa1
 8001644:	220c      	movs	r2, #12
 8001646:	4619      	mov	r1, r3
 8001648:	f002 fef6 	bl	8004438 <memcpy>
 800164c:	e03a      	b.n	80016c4 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001654:	2b03      	cmp	r3, #3
 8001656:	d106      	bne.n	8001666 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001664:	e02e      	b.n	80016c4 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800166c:	2b04      	cmp	r3, #4
 800166e:	d129      	bne.n	80016c4 <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 80016c4:	2301      	movs	r3, #1
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 80016d6:	22b0      	movs	r2, #176	; 0xb0
 80016d8:	2100      	movs	r1, #0
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f002 feba 	bl	8004454 <memset>
    return 1;
 80016e0:	2301      	movs	r3, #1
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 80016fa:	e0ad      	b.n	8001858 <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b24      	cmp	r3, #36	; 0x24
 8001702:	d128      	bne.n	8001756 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	3370      	adds	r3, #112	; 0x70
 8001708:	2240      	movs	r2, #64	; 0x40
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f002 fea1 	bl	8004454 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001718:	2b0b      	cmp	r3, #11
 800171a:	f200 8097 	bhi.w	800184c <lwgps_process+0x162>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001724:	4619      	mov	r1, r3
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	781a      	ldrb	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	440b      	add	r3, r1
 800172e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001738:	3301      	adds	r3, #1
 800173a:	b2da      	uxtb	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001748:	461a      	mov	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4413      	add	r3, r2
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001754:	e07a      	b.n	800184c <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b2c      	cmp	r3, #44	; 0x2c
 800175c:	d11d      	bne.n	800179a <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f7ff fbea 	bl	8000f38 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	4053      	eors	r3, r2
 8001770:	b2da      	uxtb	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800178e:	3301      	adds	r3, #1
 8001790:	b2da      	uxtb	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001798:	e058      	b.n	800184c <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b2a      	cmp	r3, #42	; 0x2a
 80017a0:	d117      	bne.n	80017d2 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f7ff fbc8 	bl	8000f38 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80017c6:	3301      	adds	r3, #1
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80017d0:	e03c      	b.n	800184c <lwgps_process+0x162>
        } else if (*d == '\r') {
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b0d      	cmp	r3, #13
 80017d8:	d109      	bne.n	80017ee <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f7ff fe46 	bl	800146c <prv_check_crc>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d032      	beq.n	800184c <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f7ff feca 	bl	8001580 <prv_copy_from_tmp_memory>
 80017ec:	e02e      	b.n	800184c <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d109      	bne.n	800180c <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	4053      	eors	r3, r2
 8001804:	b2da      	uxtb	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001812:	2b0b      	cmp	r3, #11
 8001814:	d81a      	bhi.n	800184c <lwgps_process+0x162>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800181c:	4619      	mov	r1, r3
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	781a      	ldrb	r2, [r3, #0]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	440b      	add	r3, r1
 8001826:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001830:	3301      	adds	r3, #1
 8001832:	b2da      	uxtb	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001840:	461a      	mov	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4413      	add	r3, r2
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	3301      	adds	r3, #1
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3b01      	subs	r3, #1
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	f47f af4e 	bne.w	80016fc <lwgps_process+0x12>
        }
    }
    return 1;
 8001860:	2301      	movs	r3, #1
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <E32_WaitForAux>:
static uint8_t _currentConfig[] = {0xc0,0xff,0xff,0x1,0x4,0x44};
volatile uint8_t _dataAvailable = 0;
uint8_t _disableAuxIrq = 0;

static E32_STATUS E32_WaitForAux(uint8_t state)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]

	uint16_t count = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	81fb      	strh	r3, [r7, #14]
	while(HAL_GPIO_ReadPin(_auxPort, _auxPin) != state)
 800187a:	e00b      	b.n	8001894 <E32_WaitForAux+0x28>
	{
		if (count++ > 2500)
 800187c:	89fb      	ldrh	r3, [r7, #14]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	81fa      	strh	r2, [r7, #14]
 8001882:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001886:	4293      	cmp	r3, r2
 8001888:	d901      	bls.n	800188e <E32_WaitForAux+0x22>
			return E32_TIMEOUT;
 800188a:	2301      	movs	r3, #1
 800188c:	e013      	b.n	80018b6 <E32_WaitForAux+0x4a>

		HAL_Delay(1);
 800188e:	2001      	movs	r0, #1
 8001890:	f001 f806 	bl	80028a0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(_auxPort, _auxPin) != state)
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <E32_WaitForAux+0x54>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <E32_WaitForAux+0x58>)
 800189a:	8812      	ldrh	r2, [r2, #0]
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f001 fb64 	bl	8002f6c <HAL_GPIO_ReadPin>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d1e6      	bne.n	800187c <E32_WaitForAux+0x10>
	}

	_dataAvailable = 0;
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <E32_WaitForAux+0x5c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
	return E32_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000300 	.word	0x20000300
 80018c4:	20000304 	.word	0x20000304
 80018c8:	2000030a 	.word	0x2000030a

080018cc <E32_ConfigResponse>:

static E32_STATUS E32_ConfigResponse(uint8_t *response, uint8_t responseLength)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	70fb      	strb	r3, [r7, #3]
	E32_STATUS error;
	if ((error = E32_WaitForAux(0)) != E32_OK)
 80018d8:	2000      	movs	r0, #0
 80018da:	f7ff ffc7 	bl	800186c <E32_WaitForAux>
 80018de:	4603      	mov	r3, r0
 80018e0:	73fb      	strb	r3, [r7, #15]
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <E32_ConfigResponse+0x20>
		return error;
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	e015      	b.n	8001918 <E32_ConfigResponse+0x4c>

	//HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
	HAL_StatusTypeDef status = HAL_UART_Receive(_huart, response, responseLength, 2000);
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <E32_ConfigResponse+0x54>)
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	f002 f878 	bl	80039ee <HAL_UART_Receive>
 80018fe:	4603      	mov	r3, r0
 8001900:	73bb      	strb	r3, [r7, #14]
	if (status == HAL_TIMEOUT)
 8001902:	7bbb      	ldrb	r3, [r7, #14]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d101      	bne.n	800190c <E32_ConfigResponse+0x40>
		return E32_TIMEOUT;
 8001908:	2301      	movs	r3, #1
 800190a:	e005      	b.n	8001918 <E32_ConfigResponse+0x4c>
	else if (status != HAL_OK)
 800190c:	7bbb      	ldrb	r3, [r7, #14]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <E32_ConfigResponse+0x4a>
		return status;
 8001912:	7bbb      	ldrb	r3, [r7, #14]
 8001914:	e000      	b.n	8001918 <E32_ConfigResponse+0x4c>

	return E32_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	200002ec 	.word	0x200002ec

08001924 <E32_ConfigRequest>:

static E32_STATUS E32_ConfigRequest(uint8_t *request, uint8_t requestLength,
		uint8_t *response, uint8_t responseLength)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	461a      	mov	r2, r3
 8001930:	460b      	mov	r3, r1
 8001932:	72fb      	strb	r3, [r7, #11]
 8001934:	4613      	mov	r3, r2
 8001936:	72bb      	strb	r3, [r7, #10]
	E32_STATUS error;

	uint8_t status = HAL_UART_Transmit(_huart, request, requestLength, 2000);
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <E32_ConfigRequest+0x68>)
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	7afb      	ldrb	r3, [r7, #11]
 800193e:	b29a      	uxth	r2, r3
 8001940:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001944:	68f9      	ldr	r1, [r7, #12]
 8001946:	f001 ffc0 	bl	80038ca <HAL_UART_Transmit>
 800194a:	4603      	mov	r3, r0
 800194c:	75fb      	strb	r3, [r7, #23]

	if (status == HAL_TIMEOUT)
 800194e:	7dfb      	ldrb	r3, [r7, #23]
 8001950:	2b03      	cmp	r3, #3
 8001952:	d101      	bne.n	8001958 <E32_ConfigRequest+0x34>
		return E32_TIMEOUT;
 8001954:	2301      	movs	r3, #1
 8001956:	e014      	b.n	8001982 <E32_ConfigRequest+0x5e>
	else if (status != HAL_OK)
 8001958:	7dfb      	ldrb	r3, [r7, #23]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <E32_ConfigRequest+0x3e>
		return status;
 800195e:	7dfb      	ldrb	r3, [r7, #23]
 8001960:	e00f      	b.n	8001982 <E32_ConfigRequest+0x5e>

	if(response != NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00b      	beq.n	8001980 <E32_ConfigRequest+0x5c>
		if ((error = E32_ConfigResponse(response, responseLength)) != E32_OK)
 8001968:	7abb      	ldrb	r3, [r7, #10]
 800196a:	4619      	mov	r1, r3
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ffad 	bl	80018cc <E32_ConfigResponse>
 8001972:	4603      	mov	r3, r0
 8001974:	75bb      	strb	r3, [r7, #22]
 8001976:	7dbb      	ldrb	r3, [r7, #22]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <E32_ConfigRequest+0x5c>
			return error;
 800197c:	7dbb      	ldrb	r3, [r7, #22]
 800197e:	e000      	b.n	8001982 <E32_ConfigRequest+0x5e>

	return E32_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200002ec 	.word	0x200002ec

08001990 <E32_GetBaud>:

static uint32_t E32_GetBaud() {
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
	return _baudRateList[(_currentConfig[3] & 0x38) >> 3];
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <E32_GetBaud+0x1c>)
 8001996:	78db      	ldrb	r3, [r3, #3]
 8001998:	10db      	asrs	r3, r3, #3
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <E32_GetBaud+0x20>)
 80019a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	20000020 	.word	0x20000020
 80019b0:	20000000 	.word	0x20000000

080019b4 <E32_Init>:


E32_STATUS E32_Init(GPIO_TypeDef* portM0, uint16_t pinM0, GPIO_TypeDef* portM1, uint16_t pinM1,
		GPIO_TypeDef* portAux, uint16_t pinAux, UART_HandleTypeDef *h)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	461a      	mov	r2, r3
 80019c0:	460b      	mov	r3, r1
 80019c2:	817b      	strh	r3, [r7, #10]
 80019c4:	4613      	mov	r3, r2
 80019c6:	813b      	strh	r3, [r7, #8]
	_huart = h;
 80019c8:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <E32_Init+0x50>)
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	6013      	str	r3, [r2, #0]

	_m0Port = portM0;
 80019ce:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <E32_Init+0x54>)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6013      	str	r3, [r2, #0]
	_m0Pin = pinM0;
 80019d4:	4a0d      	ldr	r2, [pc, #52]	; (8001a0c <E32_Init+0x58>)
 80019d6:	897b      	ldrh	r3, [r7, #10]
 80019d8:	8013      	strh	r3, [r2, #0]

	_m1Port = portM1;
 80019da:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <E32_Init+0x5c>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6013      	str	r3, [r2, #0]
	_m1Pin = pinM1;
 80019e0:	4a0c      	ldr	r2, [pc, #48]	; (8001a14 <E32_Init+0x60>)
 80019e2:	893b      	ldrh	r3, [r7, #8]
 80019e4:	8013      	strh	r3, [r2, #0]

	_auxPort = portAux;
 80019e6:	4a0c      	ldr	r2, [pc, #48]	; (8001a18 <E32_Init+0x64>)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	6013      	str	r3, [r2, #0]
	_auxPin = pinAux;
 80019ec:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <E32_Init+0x68>)
 80019ee:	8bbb      	ldrh	r3, [r7, #28]
 80019f0:	8013      	strh	r3, [r2, #0]

	return E32_SetMode(NORMAL_MODE);
 80019f2:	2000      	movs	r0, #0
 80019f4:	f000 f814 	bl	8001a20 <E32_SetMode>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200002ec 	.word	0x200002ec
 8001a08:	200002f0 	.word	0x200002f0
 8001a0c:	200002f4 	.word	0x200002f4
 8001a10:	200002f8 	.word	0x200002f8
 8001a14:	200002fc 	.word	0x200002fc
 8001a18:	20000300 	.word	0x20000300
 8001a1c:	20000304 	.word	0x20000304

08001a20 <E32_SetMode>:

	return error;

}
E32_STATUS E32_SetMode(uint8_t mode)
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]

	uint8_t prevMode = E32_GetMode();
 8001a2a:	f000 f88f 	bl	8001b4c <E32_GetMode>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	73fb      	strb	r3, [r7, #15]
	if (mode == prevMode)
 8001a32:	79fa      	ldrb	r2, [r7, #7]
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d101      	bne.n	8001a3e <E32_SetMode+0x1e>
			return E32_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e072      	b.n	8001b24 <E32_SetMode+0x104>

	_disableAuxIrq = 1;
 8001a3e:	4b3b      	ldr	r3, [pc, #236]	; (8001b2c <E32_SetMode+0x10c>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
	if (E32_WaitForAux(1) != E32_OK) {
 8001a44:	2001      	movs	r0, #1
 8001a46:	f7ff ff11 	bl	800186c <E32_WaitForAux>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <E32_SetMode+0x34>
		return E32_ERROR;
 8001a50:	2364      	movs	r3, #100	; 0x64
 8001a52:	e067      	b.n	8001b24 <E32_SetMode+0x104>
	}

	HAL_GPIO_WritePin(_m0Port, _m0Pin, (mode & 1));
 8001a54:	4b36      	ldr	r3, [pc, #216]	; (8001b30 <E32_SetMode+0x110>)
 8001a56:	6818      	ldr	r0, [r3, #0]
 8001a58:	4b36      	ldr	r3, [pc, #216]	; (8001b34 <E32_SetMode+0x114>)
 8001a5a:	8819      	ldrh	r1, [r3, #0]
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	461a      	mov	r2, r3
 8001a66:	f001 fa98 	bl	8002f9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_m1Port, _m1Pin, (mode & 2));
 8001a6a:	4b33      	ldr	r3, [pc, #204]	; (8001b38 <E32_SetMode+0x118>)
 8001a6c:	6818      	ldr	r0, [r3, #0]
 8001a6e:	4b33      	ldr	r3, [pc, #204]	; (8001b3c <E32_SetMode+0x11c>)
 8001a70:	8819      	ldrh	r1, [r3, #0]
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f001 fa8d 	bl	8002f9a <HAL_GPIO_WritePin>

	// Got to delay to catch the falling edge and then wait for rise again
	HAL_Delay(2);
 8001a80:	2002      	movs	r0, #2
 8001a82:	f000 ff0d 	bl	80028a0 <HAL_Delay>
	if (E32_WaitForAux(1) != E32_OK) {
 8001a86:	2001      	movs	r0, #1
 8001a88:	f7ff fef0 	bl	800186c <E32_WaitForAux>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <E32_SetMode+0x76>
		return E32_ERROR;
 8001a92:	2364      	movs	r3, #100	; 0x64
 8001a94:	e046      	b.n	8001b24 <E32_SetMode+0x104>
	}

	if (mode == SLEEP_MODE)
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d105      	bne.n	8001aa8 <E32_SetMode+0x88>
		_huart->Init.BaudRate = 9600;
 8001a9c:	4b28      	ldr	r3, [pc, #160]	; (8001b40 <E32_SetMode+0x120>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	e009      	b.n	8001abc <E32_SetMode+0x9c>
	else if (_currentConfig[0] != 0xff)
 8001aa8:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <E32_SetMode+0x124>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2bff      	cmp	r3, #255	; 0xff
 8001aae:	d005      	beq.n	8001abc <E32_SetMode+0x9c>
		_huart->Init.BaudRate = E32_GetBaud();
 8001ab0:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <E32_SetMode+0x120>)
 8001ab2:	681c      	ldr	r4, [r3, #0]
 8001ab4:	f7ff ff6c 	bl	8001990 <E32_GetBaud>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	6063      	str	r3, [r4, #4]

	HAL_UART_Init(_huart);
 8001abc:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <E32_SetMode+0x120>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f001 feb5 	bl	8003830 <HAL_UART_Init>

	//Wake up needs a 200ms delay before things start to work
	if(prevMode == SLEEP_MODE) {
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d106      	bne.n	8001ada <E32_SetMode+0xba>
		HAL_Delay(250);
 8001acc:	20fa      	movs	r0, #250	; 0xfa
 8001ace:	f000 fee7 	bl	80028a0 <HAL_Delay>
		_disableAuxIrq=0;
 8001ad2:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <E32_SetMode+0x10c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
 8001ad8:	e023      	b.n	8001b22 <E32_SetMode+0x102>
	}
	else if(mode==CONFIG_MODE) {
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	2b07      	cmp	r3, #7
 8001ade:	d11a      	bne.n	8001b16 <E32_SetMode+0xf6>
		uint8_t message[]={0xc1, 0xc1, 0xc1 };
 8001ae0:	4a19      	ldr	r2, [pc, #100]	; (8001b48 <E32_SetMode+0x128>)
 8001ae2:	f107 0308 	add.w	r3, r7, #8
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	4611      	mov	r1, r2
 8001aea:	8019      	strh	r1, [r3, #0]
 8001aec:	3302      	adds	r3, #2
 8001aee:	0c12      	lsrs	r2, r2, #16
 8001af0:	701a      	strb	r2, [r3, #0]
		E32_STATUS error = E32_ConfigRequest(message, 3, _currentConfig, 6);
 8001af2:	f107 0008 	add.w	r0, r7, #8
 8001af6:	2306      	movs	r3, #6
 8001af8:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <E32_SetMode+0x124>)
 8001afa:	2103      	movs	r1, #3
 8001afc:	f7ff ff12 	bl	8001924 <E32_ConfigRequest>
 8001b00:	4603      	mov	r3, r0
 8001b02:	73bb      	strb	r3, [r7, #14]
		if(error != E32_OK)
 8001b04:	7bbb      	ldrb	r3, [r7, #14]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <E32_SetMode+0xee>
			return error;
 8001b0a:	7bbb      	ldrb	r3, [r7, #14]
 8001b0c:	e00a      	b.n	8001b24 <E32_SetMode+0x104>
		_disableAuxIrq = 1;
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <E32_SetMode+0x10c>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	701a      	strb	r2, [r3, #0]
 8001b14:	e005      	b.n	8001b22 <E32_SetMode+0x102>
	}
	else {
		HAL_Delay(50);
 8001b16:	2032      	movs	r0, #50	; 0x32
 8001b18:	f000 fec2 	bl	80028a0 <HAL_Delay>
		_disableAuxIrq = 0;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <E32_SetMode+0x10c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
	}

	return E32_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd90      	pop	{r4, r7, pc}
 8001b2c:	2000030b 	.word	0x2000030b
 8001b30:	200002f0 	.word	0x200002f0
 8001b34:	200002f4 	.word	0x200002f4
 8001b38:	200002f8 	.word	0x200002f8
 8001b3c:	200002fc 	.word	0x200002fc
 8001b40:	200002ec 	.word	0x200002ec
 8001b44:	20000020 	.word	0x20000020
 8001b48:	080071c0 	.word	0x080071c0

08001b4c <E32_GetMode>:

uint8_t E32_GetMode()
{
 8001b4c:	b598      	push	{r3, r4, r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
	return (HAL_GPIO_ReadPin(_m1Port, _m1Pin) << 1) |
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <E32_GetMode+0x38>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0c      	ldr	r2, [pc, #48]	; (8001b88 <E32_GetMode+0x3c>)
 8001b56:	8812      	ldrh	r2, [r2, #0]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f001 fa06 	bl	8002f6c <HAL_GPIO_ReadPin>
 8001b60:	4603      	mov	r3, r0
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(_m0Port, _m0Pin));
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <E32_GetMode+0x40>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a09      	ldr	r2, [pc, #36]	; (8001b90 <E32_GetMode+0x44>)
 8001b6c:	8812      	ldrh	r2, [r2, #0]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f001 f9fb 	bl	8002f6c <HAL_GPIO_ReadPin>
 8001b76:	4603      	mov	r3, r0
 8001b78:	b25b      	sxtb	r3, r3
	return (HAL_GPIO_ReadPin(_m1Port, _m1Pin) << 1) |
 8001b7a:	4323      	orrs	r3, r4
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	bd98      	pop	{r3, r4, r7, pc}
 8001b84:	200002f8 	.word	0x200002f8
 8001b88:	200002fc 	.word	0x200002fc
 8001b8c:	200002f0 	.word	0x200002f0
 8001b90:	200002f4 	.word	0x200002f4

08001b94 <E32_Transmit>:
	_targetAddress = addr;

	return E32_OK;
}

E32_STATUS E32_Transmit(uint8_t *message, uint16_t length) {
 8001b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b98:	b085      	sub	sp, #20
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	807b      	strh	r3, [r7, #2]
	if (E32_GetMode() == SLEEP_MODE)
 8001ba2:	f7ff ffd3 	bl	8001b4c <E32_GetMode>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d101      	bne.n	8001bb0 <E32_Transmit+0x1c>
		return E32_INVALID_MODE;
 8001bac:	2366      	movs	r3, #102	; 0x66
 8001bae:	e06d      	b.n	8001c8c <E32_Transmit+0xf8>

	if (length > 512)
 8001bb0:	887b      	ldrh	r3, [r7, #2]
 8001bb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bb6:	d901      	bls.n	8001bbc <E32_Transmit+0x28>
		return E32_MESSAGE_TOO_LONG;
 8001bb8:	2365      	movs	r3, #101	; 0x65
 8001bba:	e067      	b.n	8001c8c <E32_Transmit+0xf8>

	if (_currentConfig[5] & 0x80) {
 8001bbc:	4b36      	ldr	r3, [pc, #216]	; (8001c98 <E32_Transmit+0x104>)
 8001bbe:	795b      	ldrb	r3, [r3, #5]
 8001bc0:	b25b      	sxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	da54      	bge.n	8001c70 <E32_Transmit+0xdc>
 8001bc6:	466b      	mov	r3, sp
 8001bc8:	461e      	mov	r6, r3
		if(length > 509)
 8001bca:	887b      	ldrh	r3, [r7, #2]
 8001bcc:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001bd0:	d301      	bcc.n	8001bd6 <E32_Transmit+0x42>
			return E32_MESSAGE_TOO_LONG;
 8001bd2:	2365      	movs	r3, #101	; 0x65
 8001bd4:	e04a      	b.n	8001c6c <E32_Transmit+0xd8>
		uint8_t header[3 + length];
 8001bd6:	887b      	ldrh	r3, [r7, #2]
 8001bd8:	1cd9      	adds	r1, r3, #3
 8001bda:	1e4b      	subs	r3, r1, #1
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	460a      	mov	r2, r1
 8001be0:	2300      	movs	r3, #0
 8001be2:	4690      	mov	r8, r2
 8001be4:	4699      	mov	r9, r3
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bfa:	460a      	mov	r2, r1
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	4614      	mov	r4, r2
 8001c00:	461d      	mov	r5, r3
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	00eb      	lsls	r3, r5, #3
 8001c0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c10:	00e2      	lsls	r2, r4, #3
 8001c12:	460b      	mov	r3, r1
 8001c14:	3307      	adds	r3, #7
 8001c16:	08db      	lsrs	r3, r3, #3
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	ebad 0d03 	sub.w	sp, sp, r3
 8001c1e:	466b      	mov	r3, sp
 8001c20:	3300      	adds	r3, #0
 8001c22:	60bb      	str	r3, [r7, #8]
		header[0] = (_targetAddress & 0xFF) >> 8;
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
		header[1] = _targetAddress &0xff;
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <E32_Transmit+0x108>)
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	705a      	strb	r2, [r3, #1]
		header[2] = _targetChannel;
 8001c34:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <E32_Transmit+0x10c>)
 8001c36:	781a      	ldrb	r2, [r3, #0]
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	709a      	strb	r2, [r3, #2]
		memcpy(&header[3],message,length);
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	3303      	adds	r3, #3
 8001c40:	887a      	ldrh	r2, [r7, #2]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f002 fbf7 	bl	8004438 <memcpy>
		if(HAL_UART_Transmit(_huart, header, length+3, 2000) != HAL_OK)
 8001c4a:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <E32_Transmit+0x110>)
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	887b      	ldrh	r3, [r7, #2]
 8001c50:	3303      	adds	r3, #3
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	f001 fe36 	bl	80038ca <HAL_UART_Transmit>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <E32_Transmit+0xd4>
			return E32_ERROR;
 8001c64:	2364      	movs	r3, #100	; 0x64
 8001c66:	e001      	b.n	8001c6c <E32_Transmit+0xd8>
 8001c68:	46b5      	mov	sp, r6
 8001c6a:	e00e      	b.n	8001c8a <E32_Transmit+0xf6>
 8001c6c:	46b5      	mov	sp, r6
 8001c6e:	e00d      	b.n	8001c8c <E32_Transmit+0xf8>
	}
	else
		if(HAL_UART_Transmit(_huart, message, length, 2000) != HAL_OK)
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <E32_Transmit+0x110>)
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	887a      	ldrh	r2, [r7, #2]
 8001c76:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	f001 fe25 	bl	80038ca <HAL_UART_Transmit>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <E32_Transmit+0xf6>
			return E32_ERROR;
 8001c86:	2364      	movs	r3, #100	; 0x64
 8001c88:	e000      	b.n	8001c8c <E32_Transmit+0xf8>

	return E32_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c96:	bf00      	nop
 8001c98:	20000020 	.word	0x20000020
 8001c9c:	20000308 	.word	0x20000308
 8001ca0:	20000306 	.word	0x20000306
 8001ca4:	200002ec 	.word	0x200002ec

08001ca8 <HAL_GPIO_EXTI_Callback>:
uint8_t E32_DataAvailable(void) {
	return _dataAvailable;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	80fb      	strh	r3, [r7, #6]

	if ((GPIO_Pin == AUX_Pin) & (!_disableAuxIrq)) {
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	2b10      	cmp	r3, #16
 8001cb6:	bf0c      	ite	eq
 8001cb8:	2301      	moveq	r3, #1
 8001cba:	2300      	movne	r3, #0
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	bf0c      	ite	eq
 8001cc6:	2301      	moveq	r3, #1
 8001cc8:	2300      	movne	r3, #0
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	4013      	ands	r3, r2
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <HAL_GPIO_EXTI_Callback+0x32>
		_dataAvailable=1;
 8001cd4:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x40>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	701a      	strb	r2, [r3, #0]
	}
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr
 8001ce4:	2000030b 	.word	0x2000030b
 8001ce8:	2000030a 	.word	0x2000030a

08001cec <check_sum_hesapla>:
#include "stm32f1xx.h"



uint8_t check_sum_hesapla( const uint8_t * const ptVeri , const uint8_t START_IDX , const uint8_t END_IDX )
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	70fb      	strb	r3, [r7, #3]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	70bb      	strb	r3, [r7, #2]
    uint32_t check_sum = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]

    for( uint8_t i = START_IDX ; i < END_IDX ; i++ )
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	72fb      	strb	r3, [r7, #11]
 8001d04:	e00a      	b.n	8001d1c <check_sum_hesapla+0x30>
    {
        check_sum += ptVeri[i];
 8001d06:	7afb      	ldrb	r3, [r7, #11]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
    for( uint8_t i = START_IDX ; i < END_IDX ; i++ )
 8001d16:	7afb      	ldrb	r3, [r7, #11]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	72fb      	strb	r3, [r7, #11]
 8001d1c:	7afa      	ldrb	r2, [r7, #11]
 8001d1e:	78bb      	ldrb	r3, [r7, #2]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d3f0      	bcc.n	8001d06 <check_sum_hesapla+0x1a>
    }
    return ( uint8_t ) ( check_sum % 256 ) ;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	b2db      	uxtb	r3, r3
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr

08001d32 <veriPaketle>:

void veriPaketle ( dataPaket_t * const pkt , const  dataStruct_t * const data )
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	6039      	str	r1, [r7, #0]
    memcpy ( &( pkt->data ) , data , sizeof( dataStruct_t ) );
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3306      	adds	r3, #6
 8001d40:	222d      	movs	r2, #45	; 0x2d
 8001d42:	6839      	ldr	r1, [r7, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f002 fb77 	bl	8004438 <memcpy>
    pkt->u8_crc_data = check_sum_hesapla( pkt->u8_array , 4 , sizeof( dataPaket_t )-3 );
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2233      	movs	r2, #51	; 0x33
 8001d4e:	2104      	movs	r1, #4
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ffcb 	bl	8001cec <check_sum_hesapla>
 8001d56:	4603      	mov	r3, r0
 8001d58:	461a      	mov	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <verileriYolla>:

void verileriYolla(uint8_t* ptVeri, const uint8_t veriLength)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	70fb      	strb	r3, [r7, #3]

	uint8_t status=0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	73fb      	strb	r3, [r7, #15]
    status=E32_Transmit(ptVeri, veriLength);
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ff08 	bl	8001b94 <E32_Transmit>
 8001d84:	4603      	mov	r3, r0
 8001d86:	73fb      	strb	r3, [r7, #15]
    //status = HAL_UART_Transmit(&_huart, ptVeri, veriLength, 1000);

}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <initDataPaket>:

void initDataPaket( dataPaket_t * const pkt , const uint8_t WHICH_NODE )
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	70fb      	strb	r3, [r7, #3]
    memset( pkt->u8_array , 0 , sizeof( dataPaket_t ) );
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2236      	movs	r2, #54	; 0x36
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f002 fb56 	bl	8004454 <memset>
    pkt->u32_start_header       = 0x5254FFFF; // 4
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f04f 32ff 	mov.w	r2, #4294967295
 8001dae:	701a      	strb	r2, [r3, #0]
 8001db0:	f04f 32ff 	mov.w	r2, #4294967295
 8001db4:	705a      	strb	r2, [r3, #1]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f042 0254 	orr.w	r2, r2, #84	; 0x54
 8001dbc:	709a      	strb	r2, [r3, #2]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f042 0252 	orr.w	r2, r2, #82	; 0x52
 8001dc4:	70da      	strb	r2, [r3, #3]
    pkt->u8_node_information    = WHICH_NODE ;  // 1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	78fa      	ldrb	r2, [r7, #3]
 8001dca:	711a      	strb	r2, [r3, #4]
    pkt->u8_package_length      = sizeof( dataPaket_t );
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2236      	movs	r2, #54	; 0x36
 8001dd0:	715a      	strb	r2, [r3, #5]
    pkt->u16_end_header         = 0x0A0D;   // 2
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f042 020d 	orr.w	r2, r2, #13
 8001dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8001dde:	2200      	movs	r2, #0
 8001de0:	f042 020a 	orr.w	r2, r2, #10
 8001de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df6:	f107 0310 	add.w	r3, r7, #16
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e04:	4b32      	ldr	r3, [pc, #200]	; (8001ed0 <MX_GPIO_Init+0xe0>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	4a31      	ldr	r2, [pc, #196]	; (8001ed0 <MX_GPIO_Init+0xe0>)
 8001e0a:	f043 0320 	orr.w	r3, r3, #32
 8001e0e:	6193      	str	r3, [r2, #24]
 8001e10:	4b2f      	ldr	r3, [pc, #188]	; (8001ed0 <MX_GPIO_Init+0xe0>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0320 	and.w	r3, r3, #32
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1c:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <MX_GPIO_Init+0xe0>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	4a2b      	ldr	r2, [pc, #172]	; (8001ed0 <MX_GPIO_Init+0xe0>)
 8001e22:	f043 0304 	orr.w	r3, r3, #4
 8001e26:	6193      	str	r3, [r2, #24]
 8001e28:	4b29      	ldr	r3, [pc, #164]	; (8001ed0 <MX_GPIO_Init+0xe0>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e34:	4b26      	ldr	r3, [pc, #152]	; (8001ed0 <MX_GPIO_Init+0xe0>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	4a25      	ldr	r2, [pc, #148]	; (8001ed0 <MX_GPIO_Init+0xe0>)
 8001e3a:	f043 0308 	orr.w	r3, r3, #8
 8001e3e:	6193      	str	r3, [r2, #24]
 8001e40:	4b23      	ldr	r3, [pc, #140]	; (8001ed0 <MX_GPIO_Init+0xe0>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|rrc_trig_Pin, GPIO_PIN_RESET);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f248 0108 	movw	r1, #32776	; 0x8008
 8001e52:	4820      	ldr	r0, [pc, #128]	; (8001ed4 <MX_GPIO_Init+0xe4>)
 8001e54:	f001 f8a1 	bl	8002f9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, GPIO_PIN_RESET);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e5e:	481e      	ldr	r0, [pc, #120]	; (8001ed8 <MX_GPIO_Init+0xe8>)
 8001e60:	f001 f89b 	bl	8002f9a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = M1_Pin|rrc_trig_Pin;
 8001e64:	f248 0308 	movw	r3, #32776	; 0x8008
 8001e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2302      	movs	r3, #2
 8001e74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e76:	f107 0310 	add.w	r3, r7, #16
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4815      	ldr	r0, [pc, #84]	; (8001ed4 <MX_GPIO_Init+0xe4>)
 8001e7e:	f000 fef1 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M0_Pin;
 8001e82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2302      	movs	r3, #2
 8001e92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M0_GPIO_Port, &GPIO_InitStruct);
 8001e94:	f107 0310 	add.w	r3, r7, #16
 8001e98:	4619      	mov	r1, r3
 8001e9a:	480f      	ldr	r0, [pc, #60]	; (8001ed8 <MX_GPIO_Init+0xe8>)
 8001e9c:	f000 fee2 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUX_Pin;
 8001ea0:	2310      	movs	r3, #16
 8001ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <MX_GPIO_Init+0xec>)
 8001ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 8001eac:	f107 0310 	add.w	r3, r7, #16
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4808      	ldr	r0, [pc, #32]	; (8001ed4 <MX_GPIO_Init+0xe4>)
 8001eb4:	f000 fed6 	bl	8002c64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2100      	movs	r1, #0
 8001ebc:	200a      	movs	r0, #10
 8001ebe:	f000 fdea 	bl	8002a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001ec2:	200a      	movs	r0, #10
 8001ec4:	f000 fe03 	bl	8002ace <HAL_NVIC_EnableIRQ>

}
 8001ec8:	bf00      	nop
 8001eca:	3720      	adds	r7, #32
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40010c00 	.word	0x40010c00
 8001ed8:	40010800 	.word	0x40010800
 8001edc:	10110000 	.word	0x10110000

08001ee0 <HAL_UART_RxCpltCallback>:
uint8_t rrc_index = 0;
uint8_t rrc_data=0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)	//interrupt ile tetiklenerek gps verilerini alır
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) //gpsin bağlı olduğu uart kanalı
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a2b      	ldr	r2, [pc, #172]	; (8001f98 <HAL_UART_RxCpltCallback+0xb8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d122      	bne.n	8001f36 <HAL_UART_RxCpltCallback+0x56>
	{
		if(gpsrx_data != '\n' && gpsrx_index < sizeof(gpsrx_buffer)) {
 8001ef0:	4b2a      	ldr	r3, [pc, #168]	; (8001f9c <HAL_UART_RxCpltCallback+0xbc>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b0a      	cmp	r3, #10
 8001ef6:	d00b      	beq.n	8001f10 <HAL_UART_RxCpltCallback+0x30>
			gpsrx_buffer[gpsrx_index++] = gpsrx_data; //buffera data aktarılır
 8001ef8:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <HAL_UART_RxCpltCallback+0xc0>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	b2d1      	uxtb	r1, r2
 8001f00:	4a27      	ldr	r2, [pc, #156]	; (8001fa0 <HAL_UART_RxCpltCallback+0xc0>)
 8001f02:	7011      	strb	r1, [r2, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <HAL_UART_RxCpltCallback+0xbc>)
 8001f08:	7819      	ldrb	r1, [r3, #0]
 8001f0a:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <HAL_UART_RxCpltCallback+0xc4>)
 8001f0c:	5499      	strb	r1, [r3, r2]
 8001f0e:	e00d      	b.n	8001f2c <HAL_UART_RxCpltCallback+0x4c>
		} else {
			lwgps_process(&gps, gpsrx_buffer, gpsrx_index+1);//data parser
 8001f10:	4b23      	ldr	r3, [pc, #140]	; (8001fa0 <HAL_UART_RxCpltCallback+0xc0>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	3301      	adds	r3, #1
 8001f16:	461a      	mov	r2, r3
 8001f18:	4922      	ldr	r1, [pc, #136]	; (8001fa4 <HAL_UART_RxCpltCallback+0xc4>)
 8001f1a:	4823      	ldr	r0, [pc, #140]	; (8001fa8 <HAL_UART_RxCpltCallback+0xc8>)
 8001f1c:	f7ff fbe5 	bl	80016ea <lwgps_process>
			gpsrx_index = 0;
 8001f20:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <HAL_UART_RxCpltCallback+0xc0>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
			gpsrx_data = 0;//gelen data tekrar sıfıra eşitlenir
 8001f26:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <HAL_UART_RxCpltCallback+0xbc>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, &gpsrx_data, 1);
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	491b      	ldr	r1, [pc, #108]	; (8001f9c <HAL_UART_RxCpltCallback+0xbc>)
 8001f30:	4819      	ldr	r0, [pc, #100]	; (8001f98 <HAL_UART_RxCpltCallback+0xb8>)
 8001f32:	f001 fdfe 	bl	8003b32 <HAL_UART_Receive_IT>
	}

	if(huart == &huart3) //RRCnin bağlı olduğu uart kanalı
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a1c      	ldr	r2, [pc, #112]	; (8001fac <HAL_UART_RxCpltCallback+0xcc>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d127      	bne.n	8001f8e <HAL_UART_RxCpltCallback+0xae>
		{
			if(rrc_data != '\r' && rrc_index < sizeof(rrc_buffer)) {
 8001f3e:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <HAL_UART_RxCpltCallback+0xd0>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b0d      	cmp	r3, #13
 8001f44:	d00b      	beq.n	8001f5e <HAL_UART_RxCpltCallback+0x7e>
				rrc_buffer[rrc_index++] = rrc_data; //buffera data aktarılır
 8001f46:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <HAL_UART_RxCpltCallback+0xd4>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	b2d1      	uxtb	r1, r2
 8001f4e:	4a19      	ldr	r2, [pc, #100]	; (8001fb4 <HAL_UART_RxCpltCallback+0xd4>)
 8001f50:	7011      	strb	r1, [r2, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <HAL_UART_RxCpltCallback+0xd0>)
 8001f56:	7819      	ldrb	r1, [r3, #0]
 8001f58:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <HAL_UART_RxCpltCallback+0xd8>)
 8001f5a:	5499      	strb	r1, [r3, r2]
 8001f5c:	e012      	b.n	8001f84 <HAL_UART_RxCpltCallback+0xa4>
			} else {
				//lwgps_process(&rrc, rrc_buffer, rrc_index+1);//data parser
				rrc_index = 0;
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <HAL_UART_RxCpltCallback+0xd4>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
				rrc_data = 0;//gelen data tekrar sıfıra eşitlenir
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_UART_RxCpltCallback+0xd0>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
				for(uint8_t i=0 ; i<50 ; i++){
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	73fb      	strb	r3, [r7, #15]
 8001f6e:	e006      	b.n	8001f7e <HAL_UART_RxCpltCallback+0x9e>

					rrc_buffer[i]=0;
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	4a11      	ldr	r2, [pc, #68]	; (8001fb8 <HAL_UART_RxCpltCallback+0xd8>)
 8001f74:	2100      	movs	r1, #0
 8001f76:	54d1      	strb	r1, [r2, r3]
				for(uint8_t i=0 ; i<50 ; i++){
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	73fb      	strb	r3, [r7, #15]
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	2b31      	cmp	r3, #49	; 0x31
 8001f82:	d9f5      	bls.n	8001f70 <HAL_UART_RxCpltCallback+0x90>
				}
			}
			HAL_UART_Receive_IT(&huart3, &rrc_data, 1);
 8001f84:	2201      	movs	r2, #1
 8001f86:	490a      	ldr	r1, [pc, #40]	; (8001fb0 <HAL_UART_RxCpltCallback+0xd0>)
 8001f88:	4808      	ldr	r0, [pc, #32]	; (8001fac <HAL_UART_RxCpltCallback+0xcc>)
 8001f8a:	f001 fdd2 	bl	8003b32 <HAL_UART_Receive_IT>





}
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000634 	.word	0x20000634
 8001f9c:	20000529 	.word	0x20000529
 8001fa0:	20000528 	.word	0x20000528
 8001fa4:	20000428 	.word	0x20000428
 8001fa8:	20000310 	.word	0x20000310
 8001fac:	200006bc 	.word	0x200006bc
 8001fb0:	2000062d 	.word	0x2000062d
 8001fb4:	2000062c 	.word	0x2000062c
 8001fb8:	2000052c 	.word	0x2000052c

08001fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fc2:	f000 fc0b 	bl	80027dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fc6:	f000 f915 	bl	80021f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fca:	f7ff ff11 	bl	8001df0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001fce:	f000 fa91 	bl	80024f4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001fd2:	f000 fab9 	bl	8002548 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001fd6:	f000 fae1 	bl	800259c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  lwgps_init(&gps);
 8001fda:	4875      	ldr	r0, [pc, #468]	; (80021b0 <main+0x1f4>)
 8001fdc:	f7ff fb77 	bl	80016ce <lwgps_init>
  //lora lib init
  E32_Init(M0_GPIO_Port, M0_Pin, M1_GPIO_Port, M1_Pin, AUX_GPIO_Port, AUX_Pin, &huart2);
 8001fe0:	4b74      	ldr	r3, [pc, #464]	; (80021b4 <main+0x1f8>)
 8001fe2:	9302      	str	r3, [sp, #8]
 8001fe4:	2310      	movs	r3, #16
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	4b73      	ldr	r3, [pc, #460]	; (80021b8 <main+0x1fc>)
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ff0:	4a71      	ldr	r2, [pc, #452]	; (80021b8 <main+0x1fc>)
 8001ff2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ff6:	4871      	ldr	r0, [pc, #452]	; (80021bc <main+0x200>)
 8001ff8:	f7ff fcdc 	bl	80019b4 <E32_Init>
  E32_SetMode(SLEEP_MODE);
 8001ffc:	2003      	movs	r0, #3
 8001ffe:	f7ff fd0f 	bl	8001a20 <E32_SetMode>
  HAL_Delay(50);
 8002002:	2032      	movs	r0, #50	; 0x32
 8002004:	f000 fc4c 	bl	80028a0 <HAL_Delay>

  // Lora'nın , var olan configini okuyoruz.*********************
  uint8_t status = HAL_UART_Transmit(&huart2, message, MESSAGE_LENGTH , 2000);
 8002008:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800200c:	2203      	movs	r2, #3
 800200e:	496c      	ldr	r1, [pc, #432]	; (80021c0 <main+0x204>)
 8002010:	4868      	ldr	r0, [pc, #416]	; (80021b4 <main+0x1f8>)
 8002012:	f001 fc5a 	bl	80038ca <HAL_UART_Transmit>
 8002016:	4603      	mov	r3, r0
 8002018:	71bb      	strb	r3, [r7, #6]
  status = HAL_UART_Receive(&huart2,recv, RECV_LENTH,2000);//config oku
 800201a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800201e:	2206      	movs	r2, #6
 8002020:	4968      	ldr	r1, [pc, #416]	; (80021c4 <main+0x208>)
 8002022:	4864      	ldr	r0, [pc, #400]	; (80021b4 <main+0x1f8>)
 8002024:	f001 fce3 	bl	80039ee <HAL_UART_Receive>
 8002028:	4603      	mov	r3, r0
 800202a:	71bb      	strb	r3, [r7, #6]
  HAL_Delay(50);
 800202c:	2032      	movs	r0, #50	; 0x32
 800202e:	f000 fc37 	bl	80028a0 <HAL_Delay>

  //activate lora normal mod
  HAL_GPIO_WritePin(M0_GPIO_Port ,M0_Pin, GPIO_PIN_RESET);
 8002032:	2200      	movs	r2, #0
 8002034:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002038:	4860      	ldr	r0, [pc, #384]	; (80021bc <main+0x200>)
 800203a:	f000 ffae 	bl	8002f9a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, GPIO_PIN_RESET);
 800203e:	2200      	movs	r2, #0
 8002040:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002044:	485c      	ldr	r0, [pc, #368]	; (80021b8 <main+0x1fc>)
 8002046:	f000 ffa8 	bl	8002f9a <HAL_GPIO_WritePin>
  HAL_Delay(200);
 800204a:	20c8      	movs	r0, #200	; 0xc8
 800204c:	f000 fc28 	bl	80028a0 <HAL_Delay>

  HAL_UART_Receive_IT(&huart1, &gpsrx_data, 1);//uart1den gelen interruptları almak için
 8002050:	2201      	movs	r2, #1
 8002052:	495d      	ldr	r1, [pc, #372]	; (80021c8 <main+0x20c>)
 8002054:	485d      	ldr	r0, [pc, #372]	; (80021cc <main+0x210>)
 8002056:	f001 fd6c 	bl	8003b32 <HAL_UART_Receive_IT>


  HAL_UART_Receive_IT(&huart3, &rrc_data, 1);
 800205a:	2201      	movs	r2, #1
 800205c:	495c      	ldr	r1, [pc, #368]	; (80021d0 <main+0x214>)
 800205e:	485d      	ldr	r0, [pc, #372]	; (80021d4 <main+0x218>)
 8002060:	f001 fd67 	bl	8003b32 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if ( variable.firstinit )
 8002064:	4b5c      	ldr	r3, [pc, #368]	; (80021d8 <main+0x21c>)
 8002066:	791b      	ldrb	r3, [r3, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d010      	beq.n	800208e <main+0xd2>
	  	  	{
	  	  		initDataPaket( &paket,  CURRENT_NODE );
 800206c:	21ab      	movs	r1, #171	; 0xab
 800206e:	485b      	ldr	r0, [pc, #364]	; (80021dc <main+0x220>)
 8002070:	f7ff fe8e 	bl	8001d90 <initDataPaket>
	  	  		variable.firstinit  = 0;
 8002074:	4b58      	ldr	r3, [pc, #352]	; (80021d8 <main+0x21c>)
 8002076:	2200      	movs	r2, #0
 8002078:	711a      	strb	r2, [r3, #4]
	  	  		memset( &data , 0  , sizeof( dataStruct_t ) );
 800207a:	222d      	movs	r2, #45	; 0x2d
 800207c:	2100      	movs	r1, #0
 800207e:	4858      	ldr	r0, [pc, #352]	; (80021e0 <main+0x224>)
 8002080:	f002 f9e8 	bl	8004454 <memset>
	  	  		variable.telemTimer = HAL_GetTick();
 8002084:	f000 fc02 	bl	800288c <HAL_GetTick>
 8002088:	4603      	mov	r3, r0
 800208a:	4a53      	ldr	r2, [pc, #332]	; (80021d8 <main+0x21c>)
 800208c:	6013      	str	r3, [r2, #0]


	  	  	}


	  	  data.roket_gps_enlem= gps.latitude;
 800208e:	4b48      	ldr	r3, [pc, #288]	; (80021b0 <main+0x1f4>)
 8002090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	f7fe fd00 	bl	8000a9c <__aeabi_d2f>
 800209c:	4603      	mov	r3, r0
 800209e:	4a50      	ldr	r2, [pc, #320]	; (80021e0 <main+0x224>)
 80020a0:	6093      	str	r3, [r2, #8]
	  	  data.roket_gps_boylam = gps.longitude;
 80020a2:	4b43      	ldr	r3, [pc, #268]	; (80021b0 <main+0x1f4>)
 80020a4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	f7fe fcf6 	bl	8000a9c <__aeabi_d2f>
 80020b0:	4603      	mov	r3, r0
 80020b2:	4a4b      	ldr	r2, [pc, #300]	; (80021e0 <main+0x224>)
 80020b4:	60d3      	str	r3, [r2, #12]
	  /*
	  	  data.roket_gps_enlem = 39.927170 ;
	  	  data.roket_gps_boylam = 32.835861;
	  */
	  	  data.roket_gps_irtifa = gps.altitude;
 80020b6:	4b3e      	ldr	r3, [pc, #248]	; (80021b0 <main+0x1f4>)
 80020b8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80020bc:	4610      	mov	r0, r2
 80020be:	4619      	mov	r1, r3
 80020c0:	f7fe fcec 	bl	8000a9c <__aeabi_d2f>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4a46      	ldr	r2, [pc, #280]	; (80021e0 <main+0x224>)
 80020c8:	6053      	str	r3, [r2, #4]
	  	  data.acc_x+= 1;
 80020ca:	4b45      	ldr	r3, [pc, #276]	; (80021e0 <main+0x224>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fd38 	bl	8000b48 <__addsf3>
 80020d8:	4603      	mov	r3, r0
 80020da:	461a      	mov	r2, r3
 80020dc:	4b40      	ldr	r3, [pc, #256]	; (80021e0 <main+0x224>)
 80020de:	61da      	str	r2, [r3, #28]
	  	  data.acc_y+=2;
 80020e0:	4b3f      	ldr	r3, [pc, #252]	; (80021e0 <main+0x224>)
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe fd2d 	bl	8000b48 <__addsf3>
 80020ee:	4603      	mov	r3, r0
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b3b      	ldr	r3, [pc, #236]	; (80021e0 <main+0x224>)
 80020f4:	621a      	str	r2, [r3, #32]
	  	  data.acc_z+=3;
 80020f6:	4b3a      	ldr	r3, [pc, #232]	; (80021e0 <main+0x224>)
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	493a      	ldr	r1, [pc, #232]	; (80021e4 <main+0x228>)
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe fd23 	bl	8000b48 <__addsf3>
 8002102:	4603      	mov	r3, r0
 8002104:	461a      	mov	r2, r3
 8002106:	4b36      	ldr	r3, [pc, #216]	; (80021e0 <main+0x224>)
 8002108:	625a      	str	r2, [r3, #36]	; 0x24
	  	  data.angle+=4;
 800210a:	4b35      	ldr	r3, [pc, #212]	; (80021e0 <main+0x224>)
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fd18 	bl	8000b48 <__addsf3>
 8002118:	4603      	mov	r3, r0
 800211a:	461a      	mov	r2, r3
 800211c:	4b30      	ldr	r3, [pc, #192]	; (80021e0 <main+0x224>)
 800211e:	629a      	str	r2, [r3, #40]	; 0x28
	  	  data.gyro_x+=5;
 8002120:	4b2f      	ldr	r3, [pc, #188]	; (80021e0 <main+0x224>)
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	4930      	ldr	r1, [pc, #192]	; (80021e8 <main+0x22c>)
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fd0e 	bl	8000b48 <__addsf3>
 800212c:	4603      	mov	r3, r0
 800212e:	461a      	mov	r2, r3
 8002130:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <main+0x224>)
 8002132:	611a      	str	r2, [r3, #16]
	  	  data.gyro_y+=6;
 8002134:	4b2a      	ldr	r3, [pc, #168]	; (80021e0 <main+0x224>)
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	492c      	ldr	r1, [pc, #176]	; (80021ec <main+0x230>)
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fd04 	bl	8000b48 <__addsf3>
 8002140:	4603      	mov	r3, r0
 8002142:	461a      	mov	r2, r3
 8002144:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <main+0x224>)
 8002146:	615a      	str	r2, [r3, #20]
	  	  data.gyro_z+=7;
 8002148:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <main+0x224>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	4928      	ldr	r1, [pc, #160]	; (80021f0 <main+0x234>)
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fcfa 	bl	8000b48 <__addsf3>
 8002154:	4603      	mov	r3, r0
 8002156:	461a      	mov	r2, r3
 8002158:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <main+0x224>)
 800215a:	619a      	str	r2, [r3, #24]
	  	  data.irtifa = gps.altitude;
 800215c:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <main+0x1f4>)
 800215e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002162:	4610      	mov	r0, r2
 8002164:	4619      	mov	r1, r3
 8002166:	f7fe fc99 	bl	8000a9c <__aeabi_d2f>
 800216a:	4603      	mov	r3, r0
 800216c:	4a1c      	ldr	r2, [pc, #112]	; (80021e0 <main+0x224>)
 800216e:	6013      	str	r3, [r2, #0]
	  	  data.status=+2;
 8002170:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <main+0x224>)
 8002172:	2202      	movs	r2, #2
 8002174:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c


	  if ( HAL_GetTick() - (variable.telemTimer)  >= 3000 )
 8002178:	f000 fb88 	bl	800288c <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <main+0x21c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002188:	4293      	cmp	r3, r2
 800218a:	f67f af6b 	bls.w	8002064 <main+0xa8>
	  	{

		  veriPaketle( &paket,  &data);
 800218e:	4914      	ldr	r1, [pc, #80]	; (80021e0 <main+0x224>)
 8002190:	4812      	ldr	r0, [pc, #72]	; (80021dc <main+0x220>)
 8002192:	f7ff fdce 	bl	8001d32 <veriPaketle>
		  verileriYolla( paket.u8_array , DATA_PKT_LENGTH );
 8002196:	2136      	movs	r1, #54	; 0x36
 8002198:	4810      	ldr	r0, [pc, #64]	; (80021dc <main+0x220>)
 800219a:	f7ff fde5 	bl	8001d68 <verileriYolla>
		  lrdly++;
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	3301      	adds	r3, #1
 80021a2:	71fb      	strb	r3, [r7, #7]
		  variable.telemTimer = HAL_GetTick();
 80021a4:	f000 fb72 	bl	800288c <HAL_GetTick>
 80021a8:	4603      	mov	r3, r0
 80021aa:	4a0b      	ldr	r2, [pc, #44]	; (80021d8 <main+0x21c>)
 80021ac:	6013      	str	r3, [r2, #0]
	  if ( variable.firstinit )
 80021ae:	e759      	b.n	8002064 <main+0xa8>
 80021b0:	20000310 	.word	0x20000310
 80021b4:	20000678 	.word	0x20000678
 80021b8:	40010c00 	.word	0x40010c00
 80021bc:	40010800 	.word	0x40010800
 80021c0:	200000e4 	.word	0x200000e4
 80021c4:	200000e8 	.word	0x200000e8
 80021c8:	20000529 	.word	0x20000529
 80021cc:	20000634 	.word	0x20000634
 80021d0:	2000062d 	.word	0x2000062d
 80021d4:	200006bc 	.word	0x200006bc
 80021d8:	20000028 	.word	0x20000028
 80021dc:	200003c0 	.word	0x200003c0
 80021e0:	200003f8 	.word	0x200003f8
 80021e4:	40400000 	.word	0x40400000
 80021e8:	40a00000 	.word	0x40a00000
 80021ec:	40c00000 	.word	0x40c00000
 80021f0:	40e00000 	.word	0x40e00000

080021f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b090      	sub	sp, #64	; 0x40
 80021f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021fa:	f107 0318 	add.w	r3, r7, #24
 80021fe:	2228      	movs	r2, #40	; 0x28
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f002 f926 	bl	8004454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002208:	1d3b      	adds	r3, r7, #4
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002216:	2302      	movs	r3, #2
 8002218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800221a:	2301      	movs	r3, #1
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800221e:	2310      	movs	r3, #16
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002222:	2302      	movs	r3, #2
 8002224:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002226:	2300      	movs	r3, #0
 8002228:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800222a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800222e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002230:	f107 0318 	add.w	r3, r7, #24
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fee1 	bl	8002ffc <HAL_RCC_OscConfig>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002240:	f000 f819 	bl	8002276 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002244:	230f      	movs	r3, #15
 8002246:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002248:	2302      	movs	r3, #2
 800224a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002254:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	2102      	movs	r1, #2
 800225e:	4618      	mov	r0, r3
 8002260:	f001 f94e 	bl	8003500 <HAL_RCC_ClockConfig>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800226a:	f000 f804 	bl	8002276 <Error_Handler>
  }
}
 800226e:	bf00      	nop
 8002270:	3740      	adds	r7, #64	; 0x40
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800227a:	b672      	cpsid	i
}
 800227c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800227e:	e7fe      	b.n	800227e <Error_Handler+0x8>

08002280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <HAL_MspInit+0x5c>)
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	4a14      	ldr	r2, [pc, #80]	; (80022dc <HAL_MspInit+0x5c>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6193      	str	r3, [r2, #24]
 8002292:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_MspInit+0x5c>)
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <HAL_MspInit+0x5c>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	4a0e      	ldr	r2, [pc, #56]	; (80022dc <HAL_MspInit+0x5c>)
 80022a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a8:	61d3      	str	r3, [r2, #28]
 80022aa:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <HAL_MspInit+0x5c>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_MspInit+0x60>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <HAL_MspInit+0x60>)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40010000 	.word	0x40010000

080022e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <NMI_Handler+0x4>

080022ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ee:	e7fe      	b.n	80022ee <HardFault_Handler+0x4>

080022f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <MemManage_Handler+0x4>

080022f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022fa:	e7fe      	b.n	80022fa <BusFault_Handler+0x4>

080022fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002300:	e7fe      	b.n	8002300 <UsageFault_Handler+0x4>

08002302 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr

0800230e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr

0800231a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800232a:	f000 fa9d 	bl	8002868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}

08002332 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AUX_Pin);
 8002336:	2010      	movs	r0, #16
 8002338:	f000 fe48 	bl	8002fcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}

08002340 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002344:	4802      	ldr	r0, [pc, #8]	; (8002350 <USART1_IRQHandler+0x10>)
 8002346:	f001 fc25 	bl	8003b94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000634 	.word	0x20000634

08002354 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002358:	4802      	ldr	r0, [pc, #8]	; (8002364 <USART3_IRQHandler+0x10>)
 800235a:	f001 fc1b 	bl	8003b94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	200006bc 	.word	0x200006bc

08002368 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return 1;
 800236c:	2301      	movs	r3, #1
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr

08002376 <_kill>:

int _kill(int pid, int sig)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002380:	f002 f830 	bl	80043e4 <__errno>
 8002384:	4603      	mov	r3, r0
 8002386:	2216      	movs	r2, #22
 8002388:	601a      	str	r2, [r3, #0]
  return -1;
 800238a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <_exit>:

void _exit (int status)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800239e:	f04f 31ff 	mov.w	r1, #4294967295
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff ffe7 	bl	8002376 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023a8:	e7fe      	b.n	80023a8 <_exit+0x12>

080023aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b086      	sub	sp, #24
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	e00a      	b.n	80023d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023bc:	f3af 8000 	nop.w
 80023c0:	4601      	mov	r1, r0
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	60ba      	str	r2, [r7, #8]
 80023c8:	b2ca      	uxtb	r2, r1
 80023ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	3301      	adds	r3, #1
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	dbf0      	blt.n	80023bc <_read+0x12>
  }

  return len;
 80023da:	687b      	ldr	r3, [r7, #4]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	e009      	b.n	800240a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	60ba      	str	r2, [r7, #8]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	3301      	adds	r3, #1
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	429a      	cmp	r2, r3
 8002410:	dbf1      	blt.n	80023f6 <_write+0x12>
  }
  return len;
 8002412:	687b      	ldr	r3, [r7, #4]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <_close>:

int _close(int file)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002424:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002442:	605a      	str	r2, [r3, #4]
  return 0;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <_isatty>:

int _isatty(int file)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002458:	2301      	movs	r3, #1
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002484:	4a14      	ldr	r2, [pc, #80]	; (80024d8 <_sbrk+0x5c>)
 8002486:	4b15      	ldr	r3, [pc, #84]	; (80024dc <_sbrk+0x60>)
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002490:	4b13      	ldr	r3, [pc, #76]	; (80024e0 <_sbrk+0x64>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002498:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <_sbrk+0x64>)
 800249a:	4a12      	ldr	r2, [pc, #72]	; (80024e4 <_sbrk+0x68>)
 800249c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800249e:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <_sbrk+0x64>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d207      	bcs.n	80024bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024ac:	f001 ff9a 	bl	80043e4 <__errno>
 80024b0:	4603      	mov	r3, r0
 80024b2:	220c      	movs	r2, #12
 80024b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ba:	e009      	b.n	80024d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024bc:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <_sbrk+0x64>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024c2:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <_sbrk+0x64>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	4a05      	ldr	r2, [pc, #20]	; (80024e0 <_sbrk+0x64>)
 80024cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ce:	68fb      	ldr	r3, [r7, #12]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20005000 	.word	0x20005000
 80024dc:	00000400 	.word	0x00000400
 80024e0:	20000630 	.word	0x20000630
 80024e4:	20000718 	.word	0x20000718

080024e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr

080024f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 80024fa:	4a12      	ldr	r2, [pc, #72]	; (8002544 <MX_USART1_UART_Init+0x50>)
 80024fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 8002500:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002504:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002506:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 800250e:	2200      	movs	r2, #0
 8002510:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002512:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 8002514:	2200      	movs	r2, #0
 8002516:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002518:	4b09      	ldr	r3, [pc, #36]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 800251a:	220c      	movs	r2, #12
 800251c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800251e:	4b08      	ldr	r3, [pc, #32]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 8002526:	2200      	movs	r2, #0
 8002528:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800252a:	4805      	ldr	r0, [pc, #20]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 800252c:	f001 f980 	bl	8003830 <HAL_UART_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002536:	f7ff fe9e 	bl	8002276 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000634 	.word	0x20000634
 8002544:	40013800 	.word	0x40013800

08002548 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <MX_USART2_UART_Init+0x4c>)
 800254e:	4a12      	ldr	r2, [pc, #72]	; (8002598 <MX_USART2_UART_Init+0x50>)
 8002550:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <MX_USART2_UART_Init+0x4c>)
 8002554:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002558:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800255a:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <MX_USART2_UART_Init+0x4c>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <MX_USART2_UART_Init+0x4c>)
 8002562:	2200      	movs	r2, #0
 8002564:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <MX_USART2_UART_Init+0x4c>)
 8002568:	2200      	movs	r2, #0
 800256a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800256c:	4b09      	ldr	r3, [pc, #36]	; (8002594 <MX_USART2_UART_Init+0x4c>)
 800256e:	220c      	movs	r2, #12
 8002570:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002572:	4b08      	ldr	r3, [pc, #32]	; (8002594 <MX_USART2_UART_Init+0x4c>)
 8002574:	2200      	movs	r2, #0
 8002576:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <MX_USART2_UART_Init+0x4c>)
 800257a:	2200      	movs	r2, #0
 800257c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800257e:	4805      	ldr	r0, [pc, #20]	; (8002594 <MX_USART2_UART_Init+0x4c>)
 8002580:	f001 f956 	bl	8003830 <HAL_UART_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800258a:	f7ff fe74 	bl	8002276 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000678 	.word	0x20000678
 8002598:	40004400 	.word	0x40004400

0800259c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <MX_USART3_UART_Init+0x4c>)
 80025a2:	4a12      	ldr	r2, [pc, #72]	; (80025ec <MX_USART3_UART_Init+0x50>)
 80025a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <MX_USART3_UART_Init+0x4c>)
 80025a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80025ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025ae:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <MX_USART3_UART_Init+0x4c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <MX_USART3_UART_Init+0x4c>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025ba:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <MX_USART3_UART_Init+0x4c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025c0:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <MX_USART3_UART_Init+0x4c>)
 80025c2:	220c      	movs	r2, #12
 80025c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025c6:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <MX_USART3_UART_Init+0x4c>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <MX_USART3_UART_Init+0x4c>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025d2:	4805      	ldr	r0, [pc, #20]	; (80025e8 <MX_USART3_UART_Init+0x4c>)
 80025d4:	f001 f92c 	bl	8003830 <HAL_UART_Init>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80025de:	f7ff fe4a 	bl	8002276 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200006bc 	.word	0x200006bc
 80025ec:	40004800 	.word	0x40004800

080025f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08c      	sub	sp, #48	; 0x30
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	f107 0320 	add.w	r3, r7, #32
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a5b      	ldr	r2, [pc, #364]	; (8002778 <HAL_UART_MspInit+0x188>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d13a      	bne.n	8002686 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002610:	4b5a      	ldr	r3, [pc, #360]	; (800277c <HAL_UART_MspInit+0x18c>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	4a59      	ldr	r2, [pc, #356]	; (800277c <HAL_UART_MspInit+0x18c>)
 8002616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800261a:	6193      	str	r3, [r2, #24]
 800261c:	4b57      	ldr	r3, [pc, #348]	; (800277c <HAL_UART_MspInit+0x18c>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002628:	4b54      	ldr	r3, [pc, #336]	; (800277c <HAL_UART_MspInit+0x18c>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	4a53      	ldr	r2, [pc, #332]	; (800277c <HAL_UART_MspInit+0x18c>)
 800262e:	f043 0304 	orr.w	r3, r3, #4
 8002632:	6193      	str	r3, [r2, #24]
 8002634:	4b51      	ldr	r3, [pc, #324]	; (800277c <HAL_UART_MspInit+0x18c>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	61bb      	str	r3, [r7, #24]
 800263e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002646:	2302      	movs	r3, #2
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800264a:	2303      	movs	r3, #3
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264e:	f107 0320 	add.w	r3, r7, #32
 8002652:	4619      	mov	r1, r3
 8002654:	484a      	ldr	r0, [pc, #296]	; (8002780 <HAL_UART_MspInit+0x190>)
 8002656:	f000 fb05 	bl	8002c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800265a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800265e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002660:	2300      	movs	r3, #0
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002668:	f107 0320 	add.w	r3, r7, #32
 800266c:	4619      	mov	r1, r3
 800266e:	4844      	ldr	r0, [pc, #272]	; (8002780 <HAL_UART_MspInit+0x190>)
 8002670:	f000 faf8 	bl	8002c64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002674:	2200      	movs	r2, #0
 8002676:	2100      	movs	r1, #0
 8002678:	2025      	movs	r0, #37	; 0x25
 800267a:	f000 fa0c 	bl	8002a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800267e:	2025      	movs	r0, #37	; 0x25
 8002680:	f000 fa25 	bl	8002ace <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002684:	e074      	b.n	8002770 <HAL_UART_MspInit+0x180>
  else if(uartHandle->Instance==USART2)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a3e      	ldr	r2, [pc, #248]	; (8002784 <HAL_UART_MspInit+0x194>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d130      	bne.n	80026f2 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002690:	4b3a      	ldr	r3, [pc, #232]	; (800277c <HAL_UART_MspInit+0x18c>)
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	4a39      	ldr	r2, [pc, #228]	; (800277c <HAL_UART_MspInit+0x18c>)
 8002696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800269a:	61d3      	str	r3, [r2, #28]
 800269c:	4b37      	ldr	r3, [pc, #220]	; (800277c <HAL_UART_MspInit+0x18c>)
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a8:	4b34      	ldr	r3, [pc, #208]	; (800277c <HAL_UART_MspInit+0x18c>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	4a33      	ldr	r2, [pc, #204]	; (800277c <HAL_UART_MspInit+0x18c>)
 80026ae:	f043 0304 	orr.w	r3, r3, #4
 80026b2:	6193      	str	r3, [r2, #24]
 80026b4:	4b31      	ldr	r3, [pc, #196]	; (800277c <HAL_UART_MspInit+0x18c>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026c0:	2304      	movs	r3, #4
 80026c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c4:	2302      	movs	r3, #2
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026c8:	2303      	movs	r3, #3
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026cc:	f107 0320 	add.w	r3, r7, #32
 80026d0:	4619      	mov	r1, r3
 80026d2:	482b      	ldr	r0, [pc, #172]	; (8002780 <HAL_UART_MspInit+0x190>)
 80026d4:	f000 fac6 	bl	8002c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026d8:	2308      	movs	r3, #8
 80026da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026dc:	2300      	movs	r3, #0
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e4:	f107 0320 	add.w	r3, r7, #32
 80026e8:	4619      	mov	r1, r3
 80026ea:	4825      	ldr	r0, [pc, #148]	; (8002780 <HAL_UART_MspInit+0x190>)
 80026ec:	f000 faba 	bl	8002c64 <HAL_GPIO_Init>
}
 80026f0:	e03e      	b.n	8002770 <HAL_UART_MspInit+0x180>
  else if(uartHandle->Instance==USART3)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a24      	ldr	r2, [pc, #144]	; (8002788 <HAL_UART_MspInit+0x198>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d139      	bne.n	8002770 <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART3_CLK_ENABLE();
 80026fc:	4b1f      	ldr	r3, [pc, #124]	; (800277c <HAL_UART_MspInit+0x18c>)
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	4a1e      	ldr	r2, [pc, #120]	; (800277c <HAL_UART_MspInit+0x18c>)
 8002702:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002706:	61d3      	str	r3, [r2, #28]
 8002708:	4b1c      	ldr	r3, [pc, #112]	; (800277c <HAL_UART_MspInit+0x18c>)
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002714:	4b19      	ldr	r3, [pc, #100]	; (800277c <HAL_UART_MspInit+0x18c>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	4a18      	ldr	r2, [pc, #96]	; (800277c <HAL_UART_MspInit+0x18c>)
 800271a:	f043 0308 	orr.w	r3, r3, #8
 800271e:	6193      	str	r3, [r2, #24]
 8002720:	4b16      	ldr	r3, [pc, #88]	; (800277c <HAL_UART_MspInit+0x18c>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800272c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002732:	2302      	movs	r3, #2
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002736:	2303      	movs	r3, #3
 8002738:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800273a:	f107 0320 	add.w	r3, r7, #32
 800273e:	4619      	mov	r1, r3
 8002740:	4812      	ldr	r0, [pc, #72]	; (800278c <HAL_UART_MspInit+0x19c>)
 8002742:	f000 fa8f 	bl	8002c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002746:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800274a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800274c:	2300      	movs	r3, #0
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002754:	f107 0320 	add.w	r3, r7, #32
 8002758:	4619      	mov	r1, r3
 800275a:	480c      	ldr	r0, [pc, #48]	; (800278c <HAL_UART_MspInit+0x19c>)
 800275c:	f000 fa82 	bl	8002c64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002760:	2200      	movs	r2, #0
 8002762:	2100      	movs	r1, #0
 8002764:	2027      	movs	r0, #39	; 0x27
 8002766:	f000 f996 	bl	8002a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800276a:	2027      	movs	r0, #39	; 0x27
 800276c:	f000 f9af 	bl	8002ace <HAL_NVIC_EnableIRQ>
}
 8002770:	bf00      	nop
 8002772:	3730      	adds	r7, #48	; 0x30
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40013800 	.word	0x40013800
 800277c:	40021000 	.word	0x40021000
 8002780:	40010800 	.word	0x40010800
 8002784:	40004400 	.word	0x40004400
 8002788:	40004800 	.word	0x40004800
 800278c:	40010c00 	.word	0x40010c00

08002790 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002790:	480c      	ldr	r0, [pc, #48]	; (80027c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002792:	490d      	ldr	r1, [pc, #52]	; (80027c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002794:	4a0d      	ldr	r2, [pc, #52]	; (80027cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002798:	e002      	b.n	80027a0 <LoopCopyDataInit>

0800279a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800279a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800279c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800279e:	3304      	adds	r3, #4

080027a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027a4:	d3f9      	bcc.n	800279a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027a6:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027a8:	4c0a      	ldr	r4, [pc, #40]	; (80027d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027ac:	e001      	b.n	80027b2 <LoopFillZerobss>

080027ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b0:	3204      	adds	r2, #4

080027b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027b4:	d3fb      	bcc.n	80027ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027b6:	f7ff fe97 	bl	80024e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027ba:	f001 fe19 	bl	80043f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027be:	f7ff fbfd 	bl	8001fbc <main>
  bx lr
 80027c2:	4770      	bx	lr
  ldr r0, =_sdata
 80027c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027c8:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 80027cc:	0800762c 	.word	0x0800762c
  ldr r2, =_sbss
 80027d0:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 80027d4:	20000714 	.word	0x20000714

080027d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027d8:	e7fe      	b.n	80027d8 <ADC1_2_IRQHandler>
	...

080027dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027e0:	4b08      	ldr	r3, [pc, #32]	; (8002804 <HAL_Init+0x28>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a07      	ldr	r2, [pc, #28]	; (8002804 <HAL_Init+0x28>)
 80027e6:	f043 0310 	orr.w	r3, r3, #16
 80027ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ec:	2003      	movs	r0, #3
 80027ee:	f000 f947 	bl	8002a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027f2:	200f      	movs	r0, #15
 80027f4:	f000 f808 	bl	8002808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027f8:	f7ff fd42 	bl	8002280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40022000 	.word	0x40022000

08002808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002810:	4b12      	ldr	r3, [pc, #72]	; (800285c <HAL_InitTick+0x54>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <HAL_InitTick+0x58>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	4619      	mov	r1, r3
 800281a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800281e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002822:	fbb2 f3f3 	udiv	r3, r2, r3
 8002826:	4618      	mov	r0, r3
 8002828:	f000 f95f 	bl	8002aea <HAL_SYSTICK_Config>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e00e      	b.n	8002854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b0f      	cmp	r3, #15
 800283a:	d80a      	bhi.n	8002852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800283c:	2200      	movs	r2, #0
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	f04f 30ff 	mov.w	r0, #4294967295
 8002844:	f000 f927 	bl	8002a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002848:	4a06      	ldr	r2, [pc, #24]	; (8002864 <HAL_InitTick+0x5c>)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	e000      	b.n	8002854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	200000f0 	.word	0x200000f0
 8002860:	200000f8 	.word	0x200000f8
 8002864:	200000f4 	.word	0x200000f4

08002868 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_IncTick+0x1c>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_IncTick+0x20>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4413      	add	r3, r2
 8002878:	4a03      	ldr	r2, [pc, #12]	; (8002888 <HAL_IncTick+0x20>)
 800287a:	6013      	str	r3, [r2, #0]
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	200000f8 	.word	0x200000f8
 8002888:	20000700 	.word	0x20000700

0800288c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return uwTick;
 8002890:	4b02      	ldr	r3, [pc, #8]	; (800289c <HAL_GetTick+0x10>)
 8002892:	681b      	ldr	r3, [r3, #0]
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	20000700 	.word	0x20000700

080028a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028a8:	f7ff fff0 	bl	800288c <HAL_GetTick>
 80028ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b8:	d005      	beq.n	80028c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_Delay+0x44>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4413      	add	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028c6:	bf00      	nop
 80028c8:	f7ff ffe0 	bl	800288c <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d8f7      	bhi.n	80028c8 <HAL_Delay+0x28>
  {
  }
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200000f8 	.word	0x200000f8

080028e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f8:	4b0c      	ldr	r3, [pc, #48]	; (800292c <__NVIC_SetPriorityGrouping+0x44>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002904:	4013      	ands	r3, r2
 8002906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800291a:	4a04      	ldr	r2, [pc, #16]	; (800292c <__NVIC_SetPriorityGrouping+0x44>)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	60d3      	str	r3, [r2, #12]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002934:	4b04      	ldr	r3, [pc, #16]	; (8002948 <__NVIC_GetPriorityGrouping+0x18>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	0a1b      	lsrs	r3, r3, #8
 800293a:	f003 0307 	and.w	r3, r3, #7
}
 800293e:	4618      	mov	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	2b00      	cmp	r3, #0
 800295c:	db0b      	blt.n	8002976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	f003 021f 	and.w	r2, r3, #31
 8002964:	4906      	ldr	r1, [pc, #24]	; (8002980 <__NVIC_EnableIRQ+0x34>)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	2001      	movs	r0, #1
 800296e:	fa00 f202 	lsl.w	r2, r0, r2
 8002972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	e000e100 	.word	0xe000e100

08002984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	6039      	str	r1, [r7, #0]
 800298e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002994:	2b00      	cmp	r3, #0
 8002996:	db0a      	blt.n	80029ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	490c      	ldr	r1, [pc, #48]	; (80029d0 <__NVIC_SetPriority+0x4c>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	0112      	lsls	r2, r2, #4
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	440b      	add	r3, r1
 80029a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029ac:	e00a      	b.n	80029c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4908      	ldr	r1, [pc, #32]	; (80029d4 <__NVIC_SetPriority+0x50>)
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	3b04      	subs	r3, #4
 80029bc:	0112      	lsls	r2, r2, #4
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	440b      	add	r3, r1
 80029c2:	761a      	strb	r2, [r3, #24]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	e000e100 	.word	0xe000e100
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d8:	b480      	push	{r7}
 80029da:	b089      	sub	sp, #36	; 0x24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f1c3 0307 	rsb	r3, r3, #7
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	bf28      	it	cs
 80029f6:	2304      	movcs	r3, #4
 80029f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3304      	adds	r3, #4
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	d902      	bls.n	8002a08 <NVIC_EncodePriority+0x30>
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	3b03      	subs	r3, #3
 8002a06:	e000      	b.n	8002a0a <NVIC_EncodePriority+0x32>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43da      	mvns	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a20:	f04f 31ff 	mov.w	r1, #4294967295
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2a:	43d9      	mvns	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a30:	4313      	orrs	r3, r2
         );
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3724      	adds	r7, #36	; 0x24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a4c:	d301      	bcc.n	8002a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e00f      	b.n	8002a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a52:	4a0a      	ldr	r2, [pc, #40]	; (8002a7c <SysTick_Config+0x40>)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a5a:	210f      	movs	r1, #15
 8002a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a60:	f7ff ff90 	bl	8002984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <SysTick_Config+0x40>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a6a:	4b04      	ldr	r3, [pc, #16]	; (8002a7c <SysTick_Config+0x40>)
 8002a6c:	2207      	movs	r2, #7
 8002a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	e000e010 	.word	0xe000e010

08002a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff ff2d 	bl	80028e8 <__NVIC_SetPriorityGrouping>
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b086      	sub	sp, #24
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa8:	f7ff ff42 	bl	8002930 <__NVIC_GetPriorityGrouping>
 8002aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	6978      	ldr	r0, [r7, #20]
 8002ab4:	f7ff ff90 	bl	80029d8 <NVIC_EncodePriority>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff5f 	bl	8002984 <__NVIC_SetPriority>
}
 8002ac6:	bf00      	nop
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ff35 	bl	800294c <__NVIC_EnableIRQ>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff ffa2 	bl	8002a3c <SysTick_Config>
 8002af8:	4603      	mov	r3, r0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b085      	sub	sp, #20
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d008      	beq.n	8002b2a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e020      	b.n	8002b6c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 020e 	bic.w	r2, r2, #14
 8002b38:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0201 	bic.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b52:	2101      	movs	r1, #1
 8002b54:	fa01 f202 	lsl.w	r2, r1, r2
 8002b58:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
	...

08002b78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d005      	beq.n	8002b9a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2204      	movs	r2, #4
 8002b92:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
 8002b98:	e051      	b.n	8002c3e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 020e 	bic.w	r2, r2, #14
 8002ba8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0201 	bic.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a22      	ldr	r2, [pc, #136]	; (8002c48 <HAL_DMA_Abort_IT+0xd0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d029      	beq.n	8002c18 <HAL_DMA_Abort_IT+0xa0>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a20      	ldr	r2, [pc, #128]	; (8002c4c <HAL_DMA_Abort_IT+0xd4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d022      	beq.n	8002c14 <HAL_DMA_Abort_IT+0x9c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1f      	ldr	r2, [pc, #124]	; (8002c50 <HAL_DMA_Abort_IT+0xd8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d01a      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x96>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a1d      	ldr	r2, [pc, #116]	; (8002c54 <HAL_DMA_Abort_IT+0xdc>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d012      	beq.n	8002c08 <HAL_DMA_Abort_IT+0x90>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a1c      	ldr	r2, [pc, #112]	; (8002c58 <HAL_DMA_Abort_IT+0xe0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d00a      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x8a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a1a      	ldr	r2, [pc, #104]	; (8002c5c <HAL_DMA_Abort_IT+0xe4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d102      	bne.n	8002bfc <HAL_DMA_Abort_IT+0x84>
 8002bf6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bfa:	e00e      	b.n	8002c1a <HAL_DMA_Abort_IT+0xa2>
 8002bfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c00:	e00b      	b.n	8002c1a <HAL_DMA_Abort_IT+0xa2>
 8002c02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c06:	e008      	b.n	8002c1a <HAL_DMA_Abort_IT+0xa2>
 8002c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c0c:	e005      	b.n	8002c1a <HAL_DMA_Abort_IT+0xa2>
 8002c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c12:	e002      	b.n	8002c1a <HAL_DMA_Abort_IT+0xa2>
 8002c14:	2310      	movs	r3, #16
 8002c16:	e000      	b.n	8002c1a <HAL_DMA_Abort_IT+0xa2>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	4a11      	ldr	r2, [pc, #68]	; (8002c60 <HAL_DMA_Abort_IT+0xe8>)
 8002c1c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	4798      	blx	r3
    } 
  }
  return status;
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40020008 	.word	0x40020008
 8002c4c:	4002001c 	.word	0x4002001c
 8002c50:	40020030 	.word	0x40020030
 8002c54:	40020044 	.word	0x40020044
 8002c58:	40020058 	.word	0x40020058
 8002c5c:	4002006c 	.word	0x4002006c
 8002c60:	40020000 	.word	0x40020000

08002c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b08b      	sub	sp, #44	; 0x2c
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c72:	2300      	movs	r3, #0
 8002c74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c76:	e169      	b.n	8002f4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c78:	2201      	movs	r2, #1
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	f040 8158 	bne.w	8002f46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4a9a      	ldr	r2, [pc, #616]	; (8002f04 <HAL_GPIO_Init+0x2a0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d05e      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002ca0:	4a98      	ldr	r2, [pc, #608]	; (8002f04 <HAL_GPIO_Init+0x2a0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d875      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002ca6:	4a98      	ldr	r2, [pc, #608]	; (8002f08 <HAL_GPIO_Init+0x2a4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d058      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cac:	4a96      	ldr	r2, [pc, #600]	; (8002f08 <HAL_GPIO_Init+0x2a4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d86f      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cb2:	4a96      	ldr	r2, [pc, #600]	; (8002f0c <HAL_GPIO_Init+0x2a8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d052      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cb8:	4a94      	ldr	r2, [pc, #592]	; (8002f0c <HAL_GPIO_Init+0x2a8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d869      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cbe:	4a94      	ldr	r2, [pc, #592]	; (8002f10 <HAL_GPIO_Init+0x2ac>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d04c      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cc4:	4a92      	ldr	r2, [pc, #584]	; (8002f10 <HAL_GPIO_Init+0x2ac>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d863      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cca:	4a92      	ldr	r2, [pc, #584]	; (8002f14 <HAL_GPIO_Init+0x2b0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d046      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cd0:	4a90      	ldr	r2, [pc, #576]	; (8002f14 <HAL_GPIO_Init+0x2b0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d85d      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cd6:	2b12      	cmp	r3, #18
 8002cd8:	d82a      	bhi.n	8002d30 <HAL_GPIO_Init+0xcc>
 8002cda:	2b12      	cmp	r3, #18
 8002cdc:	d859      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cde:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <HAL_GPIO_Init+0x80>)
 8002ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce4:	08002d5f 	.word	0x08002d5f
 8002ce8:	08002d39 	.word	0x08002d39
 8002cec:	08002d4b 	.word	0x08002d4b
 8002cf0:	08002d8d 	.word	0x08002d8d
 8002cf4:	08002d93 	.word	0x08002d93
 8002cf8:	08002d93 	.word	0x08002d93
 8002cfc:	08002d93 	.word	0x08002d93
 8002d00:	08002d93 	.word	0x08002d93
 8002d04:	08002d93 	.word	0x08002d93
 8002d08:	08002d93 	.word	0x08002d93
 8002d0c:	08002d93 	.word	0x08002d93
 8002d10:	08002d93 	.word	0x08002d93
 8002d14:	08002d93 	.word	0x08002d93
 8002d18:	08002d93 	.word	0x08002d93
 8002d1c:	08002d93 	.word	0x08002d93
 8002d20:	08002d93 	.word	0x08002d93
 8002d24:	08002d93 	.word	0x08002d93
 8002d28:	08002d41 	.word	0x08002d41
 8002d2c:	08002d55 	.word	0x08002d55
 8002d30:	4a79      	ldr	r2, [pc, #484]	; (8002f18 <HAL_GPIO_Init+0x2b4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d013      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d36:	e02c      	b.n	8002d92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	623b      	str	r3, [r7, #32]
          break;
 8002d3e:	e029      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	3304      	adds	r3, #4
 8002d46:	623b      	str	r3, [r7, #32]
          break;
 8002d48:	e024      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	3308      	adds	r3, #8
 8002d50:	623b      	str	r3, [r7, #32]
          break;
 8002d52:	e01f      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	330c      	adds	r3, #12
 8002d5a:	623b      	str	r3, [r7, #32]
          break;
 8002d5c:	e01a      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d102      	bne.n	8002d6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d66:	2304      	movs	r3, #4
 8002d68:	623b      	str	r3, [r7, #32]
          break;
 8002d6a:	e013      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d105      	bne.n	8002d80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d74:	2308      	movs	r3, #8
 8002d76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	611a      	str	r2, [r3, #16]
          break;
 8002d7e:	e009      	b.n	8002d94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d80:	2308      	movs	r3, #8
 8002d82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69fa      	ldr	r2, [r7, #28]
 8002d88:	615a      	str	r2, [r3, #20]
          break;
 8002d8a:	e003      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	623b      	str	r3, [r7, #32]
          break;
 8002d90:	e000      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          break;
 8002d92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2bff      	cmp	r3, #255	; 0xff
 8002d98:	d801      	bhi.n	8002d9e <HAL_GPIO_Init+0x13a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	e001      	b.n	8002da2 <HAL_GPIO_Init+0x13e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3304      	adds	r3, #4
 8002da2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2bff      	cmp	r3, #255	; 0xff
 8002da8:	d802      	bhi.n	8002db0 <HAL_GPIO_Init+0x14c>
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	e002      	b.n	8002db6 <HAL_GPIO_Init+0x152>
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	3b08      	subs	r3, #8
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	210f      	movs	r1, #15
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	6a39      	ldr	r1, [r7, #32]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80b1 	beq.w	8002f46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002de4:	4b4d      	ldr	r3, [pc, #308]	; (8002f1c <HAL_GPIO_Init+0x2b8>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	4a4c      	ldr	r2, [pc, #304]	; (8002f1c <HAL_GPIO_Init+0x2b8>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6193      	str	r3, [r2, #24]
 8002df0:	4b4a      	ldr	r3, [pc, #296]	; (8002f1c <HAL_GPIO_Init+0x2b8>)
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002dfc:	4a48      	ldr	r2, [pc, #288]	; (8002f20 <HAL_GPIO_Init+0x2bc>)
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	089b      	lsrs	r3, r3, #2
 8002e02:	3302      	adds	r3, #2
 8002e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	220f      	movs	r2, #15
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a40      	ldr	r2, [pc, #256]	; (8002f24 <HAL_GPIO_Init+0x2c0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d013      	beq.n	8002e50 <HAL_GPIO_Init+0x1ec>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a3f      	ldr	r2, [pc, #252]	; (8002f28 <HAL_GPIO_Init+0x2c4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00d      	beq.n	8002e4c <HAL_GPIO_Init+0x1e8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a3e      	ldr	r2, [pc, #248]	; (8002f2c <HAL_GPIO_Init+0x2c8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d007      	beq.n	8002e48 <HAL_GPIO_Init+0x1e4>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a3d      	ldr	r2, [pc, #244]	; (8002f30 <HAL_GPIO_Init+0x2cc>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d101      	bne.n	8002e44 <HAL_GPIO_Init+0x1e0>
 8002e40:	2303      	movs	r3, #3
 8002e42:	e006      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e44:	2304      	movs	r3, #4
 8002e46:	e004      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e002      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e50:	2300      	movs	r3, #0
 8002e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e54:	f002 0203 	and.w	r2, r2, #3
 8002e58:	0092      	lsls	r2, r2, #2
 8002e5a:	4093      	lsls	r3, r2
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e62:	492f      	ldr	r1, [pc, #188]	; (8002f20 <HAL_GPIO_Init+0x2bc>)
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	089b      	lsrs	r3, r3, #2
 8002e68:	3302      	adds	r3, #2
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d006      	beq.n	8002e8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e7c:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	492c      	ldr	r1, [pc, #176]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	600b      	str	r3, [r1, #0]
 8002e88:	e006      	b.n	8002e98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e8a:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	4928      	ldr	r1, [pc, #160]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d006      	beq.n	8002eb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ea4:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	4922      	ldr	r1, [pc, #136]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
 8002eb0:	e006      	b.n	8002ec0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002eb2:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	491e      	ldr	r1, [pc, #120]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d006      	beq.n	8002eda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	4918      	ldr	r1, [pc, #96]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	608b      	str	r3, [r1, #8]
 8002ed8:	e006      	b.n	8002ee8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002eda:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	4914      	ldr	r1, [pc, #80]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d021      	beq.n	8002f38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	490e      	ldr	r1, [pc, #56]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60cb      	str	r3, [r1, #12]
 8002f00:	e021      	b.n	8002f46 <HAL_GPIO_Init+0x2e2>
 8002f02:	bf00      	nop
 8002f04:	10320000 	.word	0x10320000
 8002f08:	10310000 	.word	0x10310000
 8002f0c:	10220000 	.word	0x10220000
 8002f10:	10210000 	.word	0x10210000
 8002f14:	10120000 	.word	0x10120000
 8002f18:	10110000 	.word	0x10110000
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40010000 	.word	0x40010000
 8002f24:	40010800 	.word	0x40010800
 8002f28:	40010c00 	.word	0x40010c00
 8002f2c:	40011000 	.word	0x40011000
 8002f30:	40011400 	.word	0x40011400
 8002f34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_GPIO_Init+0x304>)
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	4909      	ldr	r1, [pc, #36]	; (8002f68 <HAL_GPIO_Init+0x304>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	3301      	adds	r3, #1
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	fa22 f303 	lsr.w	r3, r2, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f47f ae8e 	bne.w	8002c78 <HAL_GPIO_Init+0x14>
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	372c      	adds	r7, #44	; 0x2c
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr
 8002f68:	40010400 	.word	0x40010400

08002f6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	887b      	ldrh	r3, [r7, #2]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
 8002f88:	e001      	b.n	8002f8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr

08002f9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	807b      	strh	r3, [r7, #2]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002faa:	787b      	ldrb	r3, [r7, #1]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fb0:	887a      	ldrh	r2, [r7, #2]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fb6:	e003      	b.n	8002fc0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fb8:	887b      	ldrh	r3, [r7, #2]
 8002fba:	041a      	lsls	r2, r3, #16
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	611a      	str	r2, [r3, #16]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr
	...

08002fcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fd8:	695a      	ldr	r2, [r3, #20]
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d006      	beq.n	8002ff0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fe2:	4a05      	ldr	r2, [pc, #20]	; (8002ff8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe fe5c 	bl	8001ca8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40010400 	.word	0x40010400

08002ffc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e272      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 8087 	beq.w	800312a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800301c:	4b92      	ldr	r3, [pc, #584]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 030c 	and.w	r3, r3, #12
 8003024:	2b04      	cmp	r3, #4
 8003026:	d00c      	beq.n	8003042 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003028:	4b8f      	ldr	r3, [pc, #572]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 030c 	and.w	r3, r3, #12
 8003030:	2b08      	cmp	r3, #8
 8003032:	d112      	bne.n	800305a <HAL_RCC_OscConfig+0x5e>
 8003034:	4b8c      	ldr	r3, [pc, #560]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003040:	d10b      	bne.n	800305a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003042:	4b89      	ldr	r3, [pc, #548]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d06c      	beq.n	8003128 <HAL_RCC_OscConfig+0x12c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d168      	bne.n	8003128 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e24c      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003062:	d106      	bne.n	8003072 <HAL_RCC_OscConfig+0x76>
 8003064:	4b80      	ldr	r3, [pc, #512]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a7f      	ldr	r2, [pc, #508]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800306a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	e02e      	b.n	80030d0 <HAL_RCC_OscConfig+0xd4>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10c      	bne.n	8003094 <HAL_RCC_OscConfig+0x98>
 800307a:	4b7b      	ldr	r3, [pc, #492]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a7a      	ldr	r2, [pc, #488]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	4b78      	ldr	r3, [pc, #480]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a77      	ldr	r2, [pc, #476]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800308c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	e01d      	b.n	80030d0 <HAL_RCC_OscConfig+0xd4>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800309c:	d10c      	bne.n	80030b8 <HAL_RCC_OscConfig+0xbc>
 800309e:	4b72      	ldr	r3, [pc, #456]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a71      	ldr	r2, [pc, #452]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	4b6f      	ldr	r3, [pc, #444]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a6e      	ldr	r2, [pc, #440]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e00b      	b.n	80030d0 <HAL_RCC_OscConfig+0xd4>
 80030b8:	4b6b      	ldr	r3, [pc, #428]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a6a      	ldr	r2, [pc, #424]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	4b68      	ldr	r3, [pc, #416]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a67      	ldr	r2, [pc, #412]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d013      	beq.n	8003100 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7ff fbd8 	bl	800288c <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e0:	f7ff fbd4 	bl	800288c <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b64      	cmp	r3, #100	; 0x64
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e200      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f2:	4b5d      	ldr	r3, [pc, #372]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0xe4>
 80030fe:	e014      	b.n	800312a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7ff fbc4 	bl	800288c <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003108:	f7ff fbc0 	bl	800288c <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b64      	cmp	r3, #100	; 0x64
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e1ec      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311a:	4b53      	ldr	r3, [pc, #332]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f0      	bne.n	8003108 <HAL_RCC_OscConfig+0x10c>
 8003126:	e000      	b.n	800312a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d063      	beq.n	80031fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003136:	4b4c      	ldr	r3, [pc, #304]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 030c 	and.w	r3, r3, #12
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00b      	beq.n	800315a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003142:	4b49      	ldr	r3, [pc, #292]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 030c 	and.w	r3, r3, #12
 800314a:	2b08      	cmp	r3, #8
 800314c:	d11c      	bne.n	8003188 <HAL_RCC_OscConfig+0x18c>
 800314e:	4b46      	ldr	r3, [pc, #280]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d116      	bne.n	8003188 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315a:	4b43      	ldr	r3, [pc, #268]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d005      	beq.n	8003172 <HAL_RCC_OscConfig+0x176>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d001      	beq.n	8003172 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e1c0      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003172:	4b3d      	ldr	r3, [pc, #244]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4939      	ldr	r1, [pc, #228]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003186:	e03a      	b.n	80031fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d020      	beq.n	80031d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003190:	4b36      	ldr	r3, [pc, #216]	; (800326c <HAL_RCC_OscConfig+0x270>)
 8003192:	2201      	movs	r2, #1
 8003194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003196:	f7ff fb79 	bl	800288c <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800319e:	f7ff fb75 	bl	800288c <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e1a1      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b0:	4b2d      	ldr	r3, [pc, #180]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031bc:	4b2a      	ldr	r3, [pc, #168]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4927      	ldr	r1, [pc, #156]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	600b      	str	r3, [r1, #0]
 80031d0:	e015      	b.n	80031fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d2:	4b26      	ldr	r3, [pc, #152]	; (800326c <HAL_RCC_OscConfig+0x270>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d8:	f7ff fb58 	bl	800288c <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e0:	f7ff fb54 	bl	800288c <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e180      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f2:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d03a      	beq.n	8003280 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d019      	beq.n	8003246 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003212:	4b17      	ldr	r3, [pc, #92]	; (8003270 <HAL_RCC_OscConfig+0x274>)
 8003214:	2201      	movs	r2, #1
 8003216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003218:	f7ff fb38 	bl	800288c <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003220:	f7ff fb34 	bl	800288c <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e160      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003232:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800323e:	2001      	movs	r0, #1
 8003240:	f000 fad8 	bl	80037f4 <RCC_Delay>
 8003244:	e01c      	b.n	8003280 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003246:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <HAL_RCC_OscConfig+0x274>)
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324c:	f7ff fb1e 	bl	800288c <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003252:	e00f      	b.n	8003274 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003254:	f7ff fb1a 	bl	800288c <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d908      	bls.n	8003274 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e146      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
 8003266:	bf00      	nop
 8003268:	40021000 	.word	0x40021000
 800326c:	42420000 	.word	0x42420000
 8003270:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003274:	4b92      	ldr	r3, [pc, #584]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1e9      	bne.n	8003254 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80a6 	beq.w	80033da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800328e:	2300      	movs	r3, #0
 8003290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003292:	4b8b      	ldr	r3, [pc, #556]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10d      	bne.n	80032ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800329e:	4b88      	ldr	r3, [pc, #544]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	4a87      	ldr	r2, [pc, #540]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a8:	61d3      	str	r3, [r2, #28]
 80032aa:	4b85      	ldr	r3, [pc, #532]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b6:	2301      	movs	r3, #1
 80032b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ba:	4b82      	ldr	r3, [pc, #520]	; (80034c4 <HAL_RCC_OscConfig+0x4c8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d118      	bne.n	80032f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032c6:	4b7f      	ldr	r3, [pc, #508]	; (80034c4 <HAL_RCC_OscConfig+0x4c8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a7e      	ldr	r2, [pc, #504]	; (80034c4 <HAL_RCC_OscConfig+0x4c8>)
 80032cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032d2:	f7ff fadb 	bl	800288c <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032da:	f7ff fad7 	bl	800288c <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b64      	cmp	r3, #100	; 0x64
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e103      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ec:	4b75      	ldr	r3, [pc, #468]	; (80034c4 <HAL_RCC_OscConfig+0x4c8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0f0      	beq.n	80032da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d106      	bne.n	800330e <HAL_RCC_OscConfig+0x312>
 8003300:	4b6f      	ldr	r3, [pc, #444]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	4a6e      	ldr	r2, [pc, #440]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	6213      	str	r3, [r2, #32]
 800330c:	e02d      	b.n	800336a <HAL_RCC_OscConfig+0x36e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10c      	bne.n	8003330 <HAL_RCC_OscConfig+0x334>
 8003316:	4b6a      	ldr	r3, [pc, #424]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	4a69      	ldr	r2, [pc, #420]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	f023 0301 	bic.w	r3, r3, #1
 8003320:	6213      	str	r3, [r2, #32]
 8003322:	4b67      	ldr	r3, [pc, #412]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	4a66      	ldr	r2, [pc, #408]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	f023 0304 	bic.w	r3, r3, #4
 800332c:	6213      	str	r3, [r2, #32]
 800332e:	e01c      	b.n	800336a <HAL_RCC_OscConfig+0x36e>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	2b05      	cmp	r3, #5
 8003336:	d10c      	bne.n	8003352 <HAL_RCC_OscConfig+0x356>
 8003338:	4b61      	ldr	r3, [pc, #388]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4a60      	ldr	r2, [pc, #384]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 800333e:	f043 0304 	orr.w	r3, r3, #4
 8003342:	6213      	str	r3, [r2, #32]
 8003344:	4b5e      	ldr	r3, [pc, #376]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	4a5d      	ldr	r2, [pc, #372]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	6213      	str	r3, [r2, #32]
 8003350:	e00b      	b.n	800336a <HAL_RCC_OscConfig+0x36e>
 8003352:	4b5b      	ldr	r3, [pc, #364]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	4a5a      	ldr	r2, [pc, #360]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003358:	f023 0301 	bic.w	r3, r3, #1
 800335c:	6213      	str	r3, [r2, #32]
 800335e:	4b58      	ldr	r3, [pc, #352]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	4a57      	ldr	r2, [pc, #348]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003364:	f023 0304 	bic.w	r3, r3, #4
 8003368:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d015      	beq.n	800339e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003372:	f7ff fa8b 	bl	800288c <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003378:	e00a      	b.n	8003390 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337a:	f7ff fa87 	bl	800288c <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	f241 3288 	movw	r2, #5000	; 0x1388
 8003388:	4293      	cmp	r3, r2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e0b1      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003390:	4b4b      	ldr	r3, [pc, #300]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0ee      	beq.n	800337a <HAL_RCC_OscConfig+0x37e>
 800339c:	e014      	b.n	80033c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339e:	f7ff fa75 	bl	800288c <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a4:	e00a      	b.n	80033bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a6:	f7ff fa71 	bl	800288c <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e09b      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033bc:	4b40      	ldr	r3, [pc, #256]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1ee      	bne.n	80033a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d105      	bne.n	80033da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ce:	4b3c      	ldr	r3, [pc, #240]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	4a3b      	ldr	r2, [pc, #236]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80033d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 8087 	beq.w	80034f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033e4:	4b36      	ldr	r3, [pc, #216]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 030c 	and.w	r3, r3, #12
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d061      	beq.n	80034b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d146      	bne.n	8003486 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f8:	4b33      	ldr	r3, [pc, #204]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fe:	f7ff fa45 	bl	800288c <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003406:	f7ff fa41 	bl	800288c <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e06d      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003418:	4b29      	ldr	r3, [pc, #164]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f0      	bne.n	8003406 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342c:	d108      	bne.n	8003440 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800342e:	4b24      	ldr	r3, [pc, #144]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	4921      	ldr	r1, [pc, #132]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003440:	4b1f      	ldr	r3, [pc, #124]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a19      	ldr	r1, [r3, #32]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	430b      	orrs	r3, r1
 8003452:	491b      	ldr	r1, [pc, #108]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003458:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345e:	f7ff fa15 	bl	800288c <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003466:	f7ff fa11 	bl	800288c <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e03d      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003478:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x46a>
 8003484:	e035      	b.n	80034f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <HAL_RCC_OscConfig+0x4cc>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7ff f9fe 	bl	800288c <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003494:	f7ff f9fa 	bl	800288c <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e026      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a6:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x498>
 80034b2:	e01e      	b.n	80034f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d107      	bne.n	80034cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e019      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40007000 	.word	0x40007000
 80034c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCC_OscConfig+0x500>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d106      	bne.n	80034ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d001      	beq.n	80034f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40021000 	.word	0x40021000

08003500 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0d0      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003514:	4b6a      	ldr	r3, [pc, #424]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d910      	bls.n	8003544 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003522:	4b67      	ldr	r3, [pc, #412]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 0207 	bic.w	r2, r3, #7
 800352a:	4965      	ldr	r1, [pc, #404]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	4b63      	ldr	r3, [pc, #396]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0b8      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d020      	beq.n	8003592 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800355c:	4b59      	ldr	r3, [pc, #356]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	4a58      	ldr	r2, [pc, #352]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003562:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003566:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003574:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4a52      	ldr	r2, [pc, #328]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800357e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4b50      	ldr	r3, [pc, #320]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	494d      	ldr	r1, [pc, #308]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	4313      	orrs	r3, r2
 8003590:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d040      	beq.n	8003620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	4b47      	ldr	r3, [pc, #284]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d115      	bne.n	80035de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e07f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d107      	bne.n	80035ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035be:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e073      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ce:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e06b      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035de:	4b39      	ldr	r3, [pc, #228]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f023 0203 	bic.w	r2, r3, #3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4936      	ldr	r1, [pc, #216]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f0:	f7ff f94c 	bl	800288c <HAL_GetTick>
 80035f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f6:	e00a      	b.n	800360e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f8:	f7ff f948 	bl	800288c <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	; 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e053      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	4b2d      	ldr	r3, [pc, #180]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 020c 	and.w	r2, r3, #12
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	429a      	cmp	r2, r3
 800361e:	d1eb      	bne.n	80035f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003620:	4b27      	ldr	r3, [pc, #156]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d210      	bcs.n	8003650 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362e:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 0207 	bic.w	r2, r3, #7
 8003636:	4922      	ldr	r1, [pc, #136]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363e:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e032      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800365c:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4916      	ldr	r1, [pc, #88]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800366a:	4313      	orrs	r3, r2
 800366c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800367a:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	490e      	ldr	r1, [pc, #56]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 800368a:	4313      	orrs	r3, r2
 800368c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800368e:	f000 f821 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8003692:	4602      	mov	r2, r0
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	490a      	ldr	r1, [pc, #40]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 80036a0:	5ccb      	ldrb	r3, [r1, r3]
 80036a2:	fa22 f303 	lsr.w	r3, r2, r3
 80036a6:	4a09      	ldr	r2, [pc, #36]	; (80036cc <HAL_RCC_ClockConfig+0x1cc>)
 80036a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036aa:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <HAL_RCC_ClockConfig+0x1d0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff f8aa 	bl	8002808 <HAL_InitTick>

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40022000 	.word	0x40022000
 80036c4:	40021000 	.word	0x40021000
 80036c8:	080071dc 	.word	0x080071dc
 80036cc:	200000f0 	.word	0x200000f0
 80036d0:	200000f4 	.word	0x200000f4

080036d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d4:	b490      	push	{r4, r7}
 80036d6:	b08a      	sub	sp, #40	; 0x28
 80036d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036da:	4b29      	ldr	r3, [pc, #164]	; (8003780 <HAL_RCC_GetSysClockFreq+0xac>)
 80036dc:	1d3c      	adds	r4, r7, #4
 80036de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036e4:	f240 2301 	movw	r3, #513	; 0x201
 80036e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	2300      	movs	r3, #0
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036fe:	4b21      	ldr	r3, [pc, #132]	; (8003784 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b04      	cmp	r3, #4
 800370c:	d002      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0x40>
 800370e:	2b08      	cmp	r3, #8
 8003710:	d003      	beq.n	800371a <HAL_RCC_GetSysClockFreq+0x46>
 8003712:	e02b      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003714:	4b1c      	ldr	r3, [pc, #112]	; (8003788 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003716:	623b      	str	r3, [r7, #32]
      break;
 8003718:	e02b      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	0c9b      	lsrs	r3, r3, #18
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	3328      	adds	r3, #40	; 0x28
 8003724:	443b      	add	r3, r7
 8003726:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800372a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d012      	beq.n	800375c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003736:	4b13      	ldr	r3, [pc, #76]	; (8003784 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	0c5b      	lsrs	r3, r3, #17
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	3328      	adds	r3, #40	; 0x28
 8003742:	443b      	add	r3, r7
 8003744:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003748:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	4a0e      	ldr	r2, [pc, #56]	; (8003788 <HAL_RCC_GetSysClockFreq+0xb4>)
 800374e:	fb03 f202 	mul.w	r2, r3, r2
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	fbb2 f3f3 	udiv	r3, r2, r3
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
 800375a:	e004      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	4a0b      	ldr	r2, [pc, #44]	; (800378c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003760:	fb02 f303 	mul.w	r3, r2, r3
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	623b      	str	r3, [r7, #32]
      break;
 800376a:	e002      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800376c:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_RCC_GetSysClockFreq+0xb4>)
 800376e:	623b      	str	r3, [r7, #32]
      break;
 8003770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003772:	6a3b      	ldr	r3, [r7, #32]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3728      	adds	r7, #40	; 0x28
 8003778:	46bd      	mov	sp, r7
 800377a:	bc90      	pop	{r4, r7}
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	080071cc 	.word	0x080071cc
 8003784:	40021000 	.word	0x40021000
 8003788:	007a1200 	.word	0x007a1200
 800378c:	003d0900 	.word	0x003d0900

08003790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003794:	4b02      	ldr	r3, [pc, #8]	; (80037a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003796:	681b      	ldr	r3, [r3, #0]
}
 8003798:	4618      	mov	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr
 80037a0:	200000f0 	.word	0x200000f0

080037a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037a8:	f7ff fff2 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 80037ac:	4602      	mov	r2, r0
 80037ae:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	0a1b      	lsrs	r3, r3, #8
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	4903      	ldr	r1, [pc, #12]	; (80037c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ba:	5ccb      	ldrb	r3, [r1, r3]
 80037bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40021000 	.word	0x40021000
 80037c8:	080071ec 	.word	0x080071ec

080037cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037d0:	f7ff ffde 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 80037d4:	4602      	mov	r2, r0
 80037d6:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	0adb      	lsrs	r3, r3, #11
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	4903      	ldr	r1, [pc, #12]	; (80037f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037e2:	5ccb      	ldrb	r3, [r1, r3]
 80037e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40021000 	.word	0x40021000
 80037f0:	080071ec 	.word	0x080071ec

080037f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037fc:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <RCC_Delay+0x34>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a0a      	ldr	r2, [pc, #40]	; (800382c <RCC_Delay+0x38>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	0a5b      	lsrs	r3, r3, #9
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003810:	bf00      	nop
  }
  while (Delay --);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1e5a      	subs	r2, r3, #1
 8003816:	60fa      	str	r2, [r7, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1f9      	bne.n	8003810 <RCC_Delay+0x1c>
}
 800381c:	bf00      	nop
 800381e:	bf00      	nop
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr
 8003828:	200000f0 	.word	0x200000f0
 800382c:	10624dd3 	.word	0x10624dd3

08003830 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e03f      	b.n	80038c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fe feca 	bl	80025f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2224      	movs	r2, #36	; 0x24
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003872:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 fd27 	bl	80042c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003888:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695a      	ldr	r2, [r3, #20]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003898:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b08a      	sub	sp, #40	; 0x28
 80038ce:	af02      	add	r7, sp, #8
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	603b      	str	r3, [r7, #0]
 80038d6:	4613      	mov	r3, r2
 80038d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d17c      	bne.n	80039e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <HAL_UART_Transmit+0x2c>
 80038f0:	88fb      	ldrh	r3, [r7, #6]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e075      	b.n	80039e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003900:	2b01      	cmp	r3, #1
 8003902:	d101      	bne.n	8003908 <HAL_UART_Transmit+0x3e>
 8003904:	2302      	movs	r3, #2
 8003906:	e06e      	b.n	80039e6 <HAL_UART_Transmit+0x11c>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2221      	movs	r2, #33	; 0x21
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800391e:	f7fe ffb5 	bl	800288c <HAL_GetTick>
 8003922:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	88fa      	ldrh	r2, [r7, #6]
 8003928:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	88fa      	ldrh	r2, [r7, #6]
 800392e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003938:	d108      	bne.n	800394c <HAL_UART_Transmit+0x82>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d104      	bne.n	800394c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	61bb      	str	r3, [r7, #24]
 800394a:	e003      	b.n	8003954 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003950:	2300      	movs	r3, #0
 8003952:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800395c:	e02a      	b.n	80039b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2200      	movs	r2, #0
 8003966:	2180      	movs	r1, #128	; 0x80
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 fada 	bl	8003f22 <UART_WaitOnFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e036      	b.n	80039e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10b      	bne.n	8003996 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800398c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	3302      	adds	r3, #2
 8003992:	61bb      	str	r3, [r7, #24]
 8003994:	e007      	b.n	80039a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	3301      	adds	r3, #1
 80039a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1cf      	bne.n	800395e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2200      	movs	r2, #0
 80039c6:	2140      	movs	r1, #64	; 0x40
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 faaa 	bl	8003f22 <UART_WaitOnFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e006      	b.n	80039e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	e000      	b.n	80039e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039e4:	2302      	movs	r3, #2
  }
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b08a      	sub	sp, #40	; 0x28
 80039f2:	af02      	add	r7, sp, #8
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	603b      	str	r3, [r7, #0]
 80039fa:	4613      	mov	r3, r2
 80039fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	f040 808c 	bne.w	8003b28 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_UART_Receive+0x2e>
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e084      	b.n	8003b2a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_UART_Receive+0x40>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e07d      	b.n	8003b2a <HAL_UART_Receive+0x13c>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2222      	movs	r2, #34	; 0x22
 8003a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a4a:	f7fe ff1f 	bl	800288c <HAL_GetTick>
 8003a4e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	88fa      	ldrh	r2, [r7, #6]
 8003a54:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	88fa      	ldrh	r2, [r7, #6]
 8003a5a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a64:	d108      	bne.n	8003a78 <HAL_UART_Receive+0x8a>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d104      	bne.n	8003a78 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	e003      	b.n	8003a80 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003a88:	e043      	b.n	8003b12 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2200      	movs	r2, #0
 8003a92:	2120      	movs	r1, #32
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 fa44 	bl	8003f22 <UART_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e042      	b.n	8003b2a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	3302      	adds	r3, #2
 8003ac0:	61bb      	str	r3, [r7, #24]
 8003ac2:	e01f      	b.n	8003b04 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003acc:	d007      	beq.n	8003ade <HAL_UART_Receive+0xf0>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <HAL_UART_Receive+0xfe>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	701a      	strb	r2, [r3, #0]
 8003aea:	e008      	b.n	8003afe <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	3301      	adds	r3, #1
 8003b02:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1b6      	bne.n	8003a8a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	e000      	b.n	8003b2a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003b28:	2302      	movs	r3, #2
  }
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3720      	adds	r7, #32
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b20      	cmp	r3, #32
 8003b4a:	d11d      	bne.n	8003b88 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <HAL_UART_Receive_IT+0x26>
 8003b52:	88fb      	ldrh	r3, [r7, #6]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e016      	b.n	8003b8a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_UART_Receive_IT+0x38>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e00f      	b.n	8003b8a <HAL_UART_Receive_IT+0x58>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003b78:	88fb      	ldrh	r3, [r7, #6]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68b9      	ldr	r1, [r7, #8]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 fa19 	bl	8003fb6 <UART_Start_Receive_IT>
 8003b84:	4603      	mov	r3, r0
 8003b86:	e000      	b.n	8003b8a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003b88:	2302      	movs	r3, #2
  }
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	; 0x28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10d      	bne.n	8003be6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	f003 0320 	and.w	r3, r3, #32
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_UART_IRQHandler+0x52>
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	f003 0320 	and.w	r3, r3, #32
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fac9 	bl	8004176 <UART_Receive_IT>
      return;
 8003be4:	e17b      	b.n	8003ede <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80b1 	beq.w	8003d50 <HAL_UART_IRQHandler+0x1bc>
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d105      	bne.n	8003c04 <HAL_UART_IRQHandler+0x70>
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 80a6 	beq.w	8003d50 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <HAL_UART_IRQHandler+0x90>
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	f043 0201 	orr.w	r2, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <HAL_UART_IRQHandler+0xb0>
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	f043 0202 	orr.w	r2, r3, #2
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <HAL_UART_IRQHandler+0xd0>
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	f043 0204 	orr.w	r2, r3, #4
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00f      	beq.n	8003c8e <HAL_UART_IRQHandler+0xfa>
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d104      	bne.n	8003c82 <HAL_UART_IRQHandler+0xee>
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f043 0208 	orr.w	r2, r3, #8
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 811e 	beq.w	8003ed4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x11e>
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	f003 0320 	and.w	r3, r3, #32
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fa62 	bl	8004176 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bf14      	ite	ne
 8003cc0:	2301      	movne	r3, #1
 8003cc2:	2300      	moveq	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d102      	bne.n	8003cda <HAL_UART_IRQHandler+0x146>
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d031      	beq.n	8003d3e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f9a4 	bl	8004028 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d023      	beq.n	8003d36 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695a      	ldr	r2, [r3, #20]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cfc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d013      	beq.n	8003d2e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0a:	4a76      	ldr	r2, [pc, #472]	; (8003ee4 <HAL_UART_IRQHandler+0x350>)
 8003d0c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fe ff30 	bl	8002b78 <HAL_DMA_Abort_IT>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d016      	beq.n	8003d4c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d28:	4610      	mov	r0, r2
 8003d2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d2c:	e00e      	b.n	8003d4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f8e3 	bl	8003efa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d34:	e00a      	b.n	8003d4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f8df 	bl	8003efa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d3c:	e006      	b.n	8003d4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f8db 	bl	8003efa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d4a:	e0c3      	b.n	8003ed4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d4c:	bf00      	nop
    return;
 8003d4e:	e0c1      	b.n	8003ed4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	f040 80a1 	bne.w	8003e9c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 809b 	beq.w	8003e9c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	f003 0310 	and.w	r3, r3, #16
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 8095 	beq.w	8003e9c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d04e      	beq.n	8003e34 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003da0:	8a3b      	ldrh	r3, [r7, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 8098 	beq.w	8003ed8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dac:	8a3a      	ldrh	r2, [r7, #16]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	f080 8092 	bcs.w	8003ed8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	8a3a      	ldrh	r2, [r7, #16]
 8003db8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d02b      	beq.n	8003e1c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dd2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695a      	ldr	r2, [r3, #20]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0201 	bic.w	r2, r2, #1
 8003de2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695a      	ldr	r2, [r3, #20]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0210 	bic.w	r2, r2, #16
 8003e10:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fe fe73 	bl	8002b02 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f86d 	bl	8003f0c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e32:	e051      	b.n	8003ed8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d047      	beq.n	8003edc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003e4c:	8a7b      	ldrh	r3, [r7, #18]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d044      	beq.n	8003edc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e60:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695a      	ldr	r2, [r3, #20]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0201 	bic.w	r2, r2, #1
 8003e70:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0210 	bic.w	r2, r2, #16
 8003e8e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e90:	8a7b      	ldrh	r3, [r7, #18]
 8003e92:	4619      	mov	r1, r3
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f839 	bl	8003f0c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e9a:	e01f      	b.n	8003edc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d008      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x324>
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f8f9 	bl	80040a8 <UART_Transmit_IT>
    return;
 8003eb6:	e012      	b.n	8003ede <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00d      	beq.n	8003ede <HAL_UART_IRQHandler+0x34a>
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f93a 	bl	8004146 <UART_EndTransmit_IT>
    return;
 8003ed2:	e004      	b.n	8003ede <HAL_UART_IRQHandler+0x34a>
    return;
 8003ed4:	bf00      	nop
 8003ed6:	e002      	b.n	8003ede <HAL_UART_IRQHandler+0x34a>
      return;
 8003ed8:	bf00      	nop
 8003eda:	e000      	b.n	8003ede <HAL_UART_IRQHandler+0x34a>
      return;
 8003edc:	bf00      	nop
  }
}
 8003ede:	3728      	adds	r7, #40	; 0x28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	08004081 	.word	0x08004081

08003ee8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr

08003efa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr

08003f0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc80      	pop	{r7}
 8003f20:	4770      	bx	lr

08003f22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	603b      	str	r3, [r7, #0]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f32:	e02c      	b.n	8003f8e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3a:	d028      	beq.n	8003f8e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d007      	beq.n	8003f52 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f42:	f7fe fca3 	bl	800288c <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d21d      	bcs.n	8003f8e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f60:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695a      	ldr	r2, [r3, #20]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0201 	bic.w	r2, r2, #1
 8003f70:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e00f      	b.n	8003fae <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	4013      	ands	r3, r2
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	bf0c      	ite	eq
 8003f9e:	2301      	moveq	r3, #1
 8003fa0:	2300      	movne	r3, #0
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d0c3      	beq.n	8003f34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b085      	sub	sp, #20
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	88fa      	ldrh	r2, [r7, #6]
 8003fce:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	88fa      	ldrh	r2, [r7, #6]
 8003fd4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2222      	movs	r2, #34	; 0x22
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ffa:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695a      	ldr	r2, [r3, #20]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0220 	orr.w	r2, r2, #32
 800401a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800403e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695a      	ldr	r2, [r3, #20]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0201 	bic.w	r2, r2, #1
 800404e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	2b01      	cmp	r3, #1
 8004056:	d107      	bne.n	8004068 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0210 	bic.w	r2, r2, #16
 8004066:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr

08004080 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f7ff ff2d 	bl	8003efa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040a0:	bf00      	nop
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b21      	cmp	r3, #33	; 0x21
 80040ba:	d13e      	bne.n	800413a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c4:	d114      	bne.n	80040f0 <UART_Transmit_IT+0x48>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d110      	bne.n	80040f0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	461a      	mov	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	1c9a      	adds	r2, r3, #2
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	621a      	str	r2, [r3, #32]
 80040ee:	e008      	b.n	8004102 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	1c59      	adds	r1, r3, #1
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6211      	str	r1, [r2, #32]
 80040fa:	781a      	ldrb	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004106:	b29b      	uxth	r3, r3
 8004108:	3b01      	subs	r3, #1
 800410a:	b29b      	uxth	r3, r3
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	4619      	mov	r1, r3
 8004110:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10f      	bne.n	8004136 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004124:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004134:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	e000      	b.n	800413c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800413a:	2302      	movs	r3, #2
  }
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr

08004146 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b082      	sub	sp, #8
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800415c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff febe 	bl	8003ee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b086      	sub	sp, #24
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b22      	cmp	r3, #34	; 0x22
 8004188:	f040 8099 	bne.w	80042be <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004194:	d117      	bne.n	80041c6 <UART_Receive_IT+0x50>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d113      	bne.n	80041c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041be:	1c9a      	adds	r2, r3, #2
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	629a      	str	r2, [r3, #40]	; 0x28
 80041c4:	e026      	b.n	8004214 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d8:	d007      	beq.n	80041ea <UART_Receive_IT+0x74>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <UART_Receive_IT+0x82>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	e008      	b.n	800420a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004204:	b2da      	uxtb	r2, r3
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004218:	b29b      	uxth	r3, r3
 800421a:	3b01      	subs	r3, #1
 800421c:	b29b      	uxth	r3, r3
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	4619      	mov	r1, r3
 8004222:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004224:	2b00      	cmp	r3, #0
 8004226:	d148      	bne.n	80042ba <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0220 	bic.w	r2, r2, #32
 8004236:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004246:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695a      	ldr	r2, [r3, #20]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0201 	bic.w	r2, r2, #1
 8004256:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	2b01      	cmp	r3, #1
 8004266:	d123      	bne.n	80042b0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0210 	bic.w	r2, r2, #16
 800427c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	2b10      	cmp	r3, #16
 800428a:	d10a      	bne.n	80042a2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800428c:	2300      	movs	r3, #0
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042a6:	4619      	mov	r1, r3
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff fe2f 	bl	8003f0c <HAL_UARTEx_RxEventCallback>
 80042ae:	e002      	b.n	80042b6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7fd fe15 	bl	8001ee0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	e002      	b.n	80042c0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	e000      	b.n	80042c0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80042be:	2302      	movs	r3, #2
  }
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004302:	f023 030c 	bic.w	r3, r3, #12
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	68b9      	ldr	r1, [r7, #8]
 800430c:	430b      	orrs	r3, r1
 800430e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a2c      	ldr	r2, [pc, #176]	; (80043dc <UART_SetConfig+0x114>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d103      	bne.n	8004338 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004330:	f7ff fa4c 	bl	80037cc <HAL_RCC_GetPCLK2Freq>
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	e002      	b.n	800433e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004338:	f7ff fa34 	bl	80037a4 <HAL_RCC_GetPCLK1Freq>
 800433c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	4613      	mov	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	009a      	lsls	r2, r3, #2
 8004348:	441a      	add	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	fbb2 f3f3 	udiv	r3, r2, r3
 8004354:	4a22      	ldr	r2, [pc, #136]	; (80043e0 <UART_SetConfig+0x118>)
 8004356:	fba2 2303 	umull	r2, r3, r2, r3
 800435a:	095b      	lsrs	r3, r3, #5
 800435c:	0119      	lsls	r1, r3, #4
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4613      	mov	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	009a      	lsls	r2, r3, #2
 8004368:	441a      	add	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	fbb2 f2f3 	udiv	r2, r2, r3
 8004374:	4b1a      	ldr	r3, [pc, #104]	; (80043e0 <UART_SetConfig+0x118>)
 8004376:	fba3 0302 	umull	r0, r3, r3, r2
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	2064      	movs	r0, #100	; 0x64
 800437e:	fb00 f303 	mul.w	r3, r0, r3
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	3332      	adds	r3, #50	; 0x32
 8004388:	4a15      	ldr	r2, [pc, #84]	; (80043e0 <UART_SetConfig+0x118>)
 800438a:	fba2 2303 	umull	r2, r3, r2, r3
 800438e:	095b      	lsrs	r3, r3, #5
 8004390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004394:	4419      	add	r1, r3
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	009a      	lsls	r2, r3, #2
 80043a0:	441a      	add	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80043ac:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <UART_SetConfig+0x118>)
 80043ae:	fba3 0302 	umull	r0, r3, r3, r2
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	2064      	movs	r0, #100	; 0x64
 80043b6:	fb00 f303 	mul.w	r3, r0, r3
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	3332      	adds	r3, #50	; 0x32
 80043c0:	4a07      	ldr	r2, [pc, #28]	; (80043e0 <UART_SetConfig+0x118>)
 80043c2:	fba2 2303 	umull	r2, r3, r2, r3
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	f003 020f 	and.w	r2, r3, #15
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	440a      	add	r2, r1
 80043d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80043d4:	bf00      	nop
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40013800 	.word	0x40013800
 80043e0:	51eb851f 	.word	0x51eb851f

080043e4 <__errno>:
 80043e4:	4b01      	ldr	r3, [pc, #4]	; (80043ec <__errno+0x8>)
 80043e6:	6818      	ldr	r0, [r3, #0]
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	200000fc 	.word	0x200000fc

080043f0 <__libc_init_array>:
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	2600      	movs	r6, #0
 80043f4:	4d0c      	ldr	r5, [pc, #48]	; (8004428 <__libc_init_array+0x38>)
 80043f6:	4c0d      	ldr	r4, [pc, #52]	; (800442c <__libc_init_array+0x3c>)
 80043f8:	1b64      	subs	r4, r4, r5
 80043fa:	10a4      	asrs	r4, r4, #2
 80043fc:	42a6      	cmp	r6, r4
 80043fe:	d109      	bne.n	8004414 <__libc_init_array+0x24>
 8004400:	f002 feb2 	bl	8007168 <_init>
 8004404:	2600      	movs	r6, #0
 8004406:	4d0a      	ldr	r5, [pc, #40]	; (8004430 <__libc_init_array+0x40>)
 8004408:	4c0a      	ldr	r4, [pc, #40]	; (8004434 <__libc_init_array+0x44>)
 800440a:	1b64      	subs	r4, r4, r5
 800440c:	10a4      	asrs	r4, r4, #2
 800440e:	42a6      	cmp	r6, r4
 8004410:	d105      	bne.n	800441e <__libc_init_array+0x2e>
 8004412:	bd70      	pop	{r4, r5, r6, pc}
 8004414:	f855 3b04 	ldr.w	r3, [r5], #4
 8004418:	4798      	blx	r3
 800441a:	3601      	adds	r6, #1
 800441c:	e7ee      	b.n	80043fc <__libc_init_array+0xc>
 800441e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004422:	4798      	blx	r3
 8004424:	3601      	adds	r6, #1
 8004426:	e7f2      	b.n	800440e <__libc_init_array+0x1e>
 8004428:	08007624 	.word	0x08007624
 800442c:	08007624 	.word	0x08007624
 8004430:	08007624 	.word	0x08007624
 8004434:	08007628 	.word	0x08007628

08004438 <memcpy>:
 8004438:	440a      	add	r2, r1
 800443a:	4291      	cmp	r1, r2
 800443c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004440:	d100      	bne.n	8004444 <memcpy+0xc>
 8004442:	4770      	bx	lr
 8004444:	b510      	push	{r4, lr}
 8004446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800444a:	4291      	cmp	r1, r2
 800444c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004450:	d1f9      	bne.n	8004446 <memcpy+0xe>
 8004452:	bd10      	pop	{r4, pc}

08004454 <memset>:
 8004454:	4603      	mov	r3, r0
 8004456:	4402      	add	r2, r0
 8004458:	4293      	cmp	r3, r2
 800445a:	d100      	bne.n	800445e <memset+0xa>
 800445c:	4770      	bx	lr
 800445e:	f803 1b01 	strb.w	r1, [r3], #1
 8004462:	e7f9      	b.n	8004458 <memset+0x4>

08004464 <strncmp>:
 8004464:	4603      	mov	r3, r0
 8004466:	b510      	push	{r4, lr}
 8004468:	b172      	cbz	r2, 8004488 <strncmp+0x24>
 800446a:	3901      	subs	r1, #1
 800446c:	1884      	adds	r4, r0, r2
 800446e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004472:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004476:	4290      	cmp	r0, r2
 8004478:	d101      	bne.n	800447e <strncmp+0x1a>
 800447a:	42a3      	cmp	r3, r4
 800447c:	d101      	bne.n	8004482 <strncmp+0x1e>
 800447e:	1a80      	subs	r0, r0, r2
 8004480:	bd10      	pop	{r4, pc}
 8004482:	2800      	cmp	r0, #0
 8004484:	d1f3      	bne.n	800446e <strncmp+0xa>
 8004486:	e7fa      	b.n	800447e <strncmp+0x1a>
 8004488:	4610      	mov	r0, r2
 800448a:	e7f9      	b.n	8004480 <strncmp+0x1c>

0800448c <sulp>:
 800448c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004490:	460f      	mov	r7, r1
 8004492:	4690      	mov	r8, r2
 8004494:	f001 fcf8 	bl	8005e88 <__ulp>
 8004498:	4604      	mov	r4, r0
 800449a:	460d      	mov	r5, r1
 800449c:	f1b8 0f00 	cmp.w	r8, #0
 80044a0:	d011      	beq.n	80044c6 <sulp+0x3a>
 80044a2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80044a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	dd0b      	ble.n	80044c6 <sulp+0x3a>
 80044ae:	2400      	movs	r4, #0
 80044b0:	051b      	lsls	r3, r3, #20
 80044b2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80044b6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80044ba:	4622      	mov	r2, r4
 80044bc:	462b      	mov	r3, r5
 80044be:	f7fc f80b 	bl	80004d8 <__aeabi_dmul>
 80044c2:	4604      	mov	r4, r0
 80044c4:	460d      	mov	r5, r1
 80044c6:	4620      	mov	r0, r4
 80044c8:	4629      	mov	r1, r5
 80044ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080044d0 <_strtod_l>:
 80044d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d4:	469b      	mov	fp, r3
 80044d6:	2300      	movs	r3, #0
 80044d8:	b09f      	sub	sp, #124	; 0x7c
 80044da:	931a      	str	r3, [sp, #104]	; 0x68
 80044dc:	4b9e      	ldr	r3, [pc, #632]	; (8004758 <_strtod_l+0x288>)
 80044de:	4682      	mov	sl, r0
 80044e0:	681f      	ldr	r7, [r3, #0]
 80044e2:	460e      	mov	r6, r1
 80044e4:	4638      	mov	r0, r7
 80044e6:	9215      	str	r2, [sp, #84]	; 0x54
 80044e8:	f7fb fe32 	bl	8000150 <strlen>
 80044ec:	f04f 0800 	mov.w	r8, #0
 80044f0:	4604      	mov	r4, r0
 80044f2:	f04f 0900 	mov.w	r9, #0
 80044f6:	9619      	str	r6, [sp, #100]	; 0x64
 80044f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80044fa:	781a      	ldrb	r2, [r3, #0]
 80044fc:	2a2b      	cmp	r2, #43	; 0x2b
 80044fe:	d04c      	beq.n	800459a <_strtod_l+0xca>
 8004500:	d83a      	bhi.n	8004578 <_strtod_l+0xa8>
 8004502:	2a0d      	cmp	r2, #13
 8004504:	d833      	bhi.n	800456e <_strtod_l+0x9e>
 8004506:	2a08      	cmp	r2, #8
 8004508:	d833      	bhi.n	8004572 <_strtod_l+0xa2>
 800450a:	2a00      	cmp	r2, #0
 800450c:	d03d      	beq.n	800458a <_strtod_l+0xba>
 800450e:	2300      	movs	r3, #0
 8004510:	930a      	str	r3, [sp, #40]	; 0x28
 8004512:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004514:	782b      	ldrb	r3, [r5, #0]
 8004516:	2b30      	cmp	r3, #48	; 0x30
 8004518:	f040 80aa 	bne.w	8004670 <_strtod_l+0x1a0>
 800451c:	786b      	ldrb	r3, [r5, #1]
 800451e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004522:	2b58      	cmp	r3, #88	; 0x58
 8004524:	d166      	bne.n	80045f4 <_strtod_l+0x124>
 8004526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004528:	4650      	mov	r0, sl
 800452a:	9301      	str	r3, [sp, #4]
 800452c:	ab1a      	add	r3, sp, #104	; 0x68
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	4a8a      	ldr	r2, [pc, #552]	; (800475c <_strtod_l+0x28c>)
 8004532:	f8cd b008 	str.w	fp, [sp, #8]
 8004536:	ab1b      	add	r3, sp, #108	; 0x6c
 8004538:	a919      	add	r1, sp, #100	; 0x64
 800453a:	f000 fe25 	bl	8005188 <__gethex>
 800453e:	f010 0607 	ands.w	r6, r0, #7
 8004542:	4604      	mov	r4, r0
 8004544:	d005      	beq.n	8004552 <_strtod_l+0x82>
 8004546:	2e06      	cmp	r6, #6
 8004548:	d129      	bne.n	800459e <_strtod_l+0xce>
 800454a:	2300      	movs	r3, #0
 800454c:	3501      	adds	r5, #1
 800454e:	9519      	str	r5, [sp, #100]	; 0x64
 8004550:	930a      	str	r3, [sp, #40]	; 0x28
 8004552:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004554:	2b00      	cmp	r3, #0
 8004556:	f040 858a 	bne.w	800506e <_strtod_l+0xb9e>
 800455a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800455c:	b1d3      	cbz	r3, 8004594 <_strtod_l+0xc4>
 800455e:	4642      	mov	r2, r8
 8004560:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004564:	4610      	mov	r0, r2
 8004566:	4619      	mov	r1, r3
 8004568:	b01f      	add	sp, #124	; 0x7c
 800456a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800456e:	2a20      	cmp	r2, #32
 8004570:	d1cd      	bne.n	800450e <_strtod_l+0x3e>
 8004572:	3301      	adds	r3, #1
 8004574:	9319      	str	r3, [sp, #100]	; 0x64
 8004576:	e7bf      	b.n	80044f8 <_strtod_l+0x28>
 8004578:	2a2d      	cmp	r2, #45	; 0x2d
 800457a:	d1c8      	bne.n	800450e <_strtod_l+0x3e>
 800457c:	2201      	movs	r2, #1
 800457e:	920a      	str	r2, [sp, #40]	; 0x28
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	9219      	str	r2, [sp, #100]	; 0x64
 8004584:	785b      	ldrb	r3, [r3, #1]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1c3      	bne.n	8004512 <_strtod_l+0x42>
 800458a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800458c:	9619      	str	r6, [sp, #100]	; 0x64
 800458e:	2b00      	cmp	r3, #0
 8004590:	f040 856b 	bne.w	800506a <_strtod_l+0xb9a>
 8004594:	4642      	mov	r2, r8
 8004596:	464b      	mov	r3, r9
 8004598:	e7e4      	b.n	8004564 <_strtod_l+0x94>
 800459a:	2200      	movs	r2, #0
 800459c:	e7ef      	b.n	800457e <_strtod_l+0xae>
 800459e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80045a0:	b13a      	cbz	r2, 80045b2 <_strtod_l+0xe2>
 80045a2:	2135      	movs	r1, #53	; 0x35
 80045a4:	a81c      	add	r0, sp, #112	; 0x70
 80045a6:	f001 fd73 	bl	8006090 <__copybits>
 80045aa:	4650      	mov	r0, sl
 80045ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80045ae:	f001 f93b 	bl	8005828 <_Bfree>
 80045b2:	3e01      	subs	r6, #1
 80045b4:	2e04      	cmp	r6, #4
 80045b6:	d806      	bhi.n	80045c6 <_strtod_l+0xf6>
 80045b8:	e8df f006 	tbb	[pc, r6]
 80045bc:	1714030a 	.word	0x1714030a
 80045c0:	0a          	.byte	0x0a
 80045c1:	00          	.byte	0x00
 80045c2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80045c6:	0721      	lsls	r1, r4, #28
 80045c8:	d5c3      	bpl.n	8004552 <_strtod_l+0x82>
 80045ca:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80045ce:	e7c0      	b.n	8004552 <_strtod_l+0x82>
 80045d0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80045d2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80045d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80045da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80045de:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80045e2:	e7f0      	b.n	80045c6 <_strtod_l+0xf6>
 80045e4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004760 <_strtod_l+0x290>
 80045e8:	e7ed      	b.n	80045c6 <_strtod_l+0xf6>
 80045ea:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80045ee:	f04f 38ff 	mov.w	r8, #4294967295
 80045f2:	e7e8      	b.n	80045c6 <_strtod_l+0xf6>
 80045f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	9219      	str	r2, [sp, #100]	; 0x64
 80045fa:	785b      	ldrb	r3, [r3, #1]
 80045fc:	2b30      	cmp	r3, #48	; 0x30
 80045fe:	d0f9      	beq.n	80045f4 <_strtod_l+0x124>
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0a6      	beq.n	8004552 <_strtod_l+0x82>
 8004604:	2301      	movs	r3, #1
 8004606:	9307      	str	r3, [sp, #28]
 8004608:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800460a:	220a      	movs	r2, #10
 800460c:	9308      	str	r3, [sp, #32]
 800460e:	2300      	movs	r3, #0
 8004610:	469b      	mov	fp, r3
 8004612:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004616:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004618:	7805      	ldrb	r5, [r0, #0]
 800461a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800461e:	b2d9      	uxtb	r1, r3
 8004620:	2909      	cmp	r1, #9
 8004622:	d927      	bls.n	8004674 <_strtod_l+0x1a4>
 8004624:	4622      	mov	r2, r4
 8004626:	4639      	mov	r1, r7
 8004628:	f7ff ff1c 	bl	8004464 <strncmp>
 800462c:	2800      	cmp	r0, #0
 800462e:	d033      	beq.n	8004698 <_strtod_l+0x1c8>
 8004630:	2000      	movs	r0, #0
 8004632:	462a      	mov	r2, r5
 8004634:	465c      	mov	r4, fp
 8004636:	4603      	mov	r3, r0
 8004638:	9004      	str	r0, [sp, #16]
 800463a:	2a65      	cmp	r2, #101	; 0x65
 800463c:	d001      	beq.n	8004642 <_strtod_l+0x172>
 800463e:	2a45      	cmp	r2, #69	; 0x45
 8004640:	d114      	bne.n	800466c <_strtod_l+0x19c>
 8004642:	b91c      	cbnz	r4, 800464c <_strtod_l+0x17c>
 8004644:	9a07      	ldr	r2, [sp, #28]
 8004646:	4302      	orrs	r2, r0
 8004648:	d09f      	beq.n	800458a <_strtod_l+0xba>
 800464a:	2400      	movs	r4, #0
 800464c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800464e:	1c72      	adds	r2, r6, #1
 8004650:	9219      	str	r2, [sp, #100]	; 0x64
 8004652:	7872      	ldrb	r2, [r6, #1]
 8004654:	2a2b      	cmp	r2, #43	; 0x2b
 8004656:	d079      	beq.n	800474c <_strtod_l+0x27c>
 8004658:	2a2d      	cmp	r2, #45	; 0x2d
 800465a:	f000 8083 	beq.w	8004764 <_strtod_l+0x294>
 800465e:	2700      	movs	r7, #0
 8004660:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004664:	2909      	cmp	r1, #9
 8004666:	f240 8083 	bls.w	8004770 <_strtod_l+0x2a0>
 800466a:	9619      	str	r6, [sp, #100]	; 0x64
 800466c:	2500      	movs	r5, #0
 800466e:	e09f      	b.n	80047b0 <_strtod_l+0x2e0>
 8004670:	2300      	movs	r3, #0
 8004672:	e7c8      	b.n	8004606 <_strtod_l+0x136>
 8004674:	f1bb 0f08 	cmp.w	fp, #8
 8004678:	bfd5      	itete	le
 800467a:	9906      	ldrle	r1, [sp, #24]
 800467c:	9905      	ldrgt	r1, [sp, #20]
 800467e:	fb02 3301 	mlale	r3, r2, r1, r3
 8004682:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004686:	f100 0001 	add.w	r0, r0, #1
 800468a:	bfd4      	ite	le
 800468c:	9306      	strle	r3, [sp, #24]
 800468e:	9305      	strgt	r3, [sp, #20]
 8004690:	f10b 0b01 	add.w	fp, fp, #1
 8004694:	9019      	str	r0, [sp, #100]	; 0x64
 8004696:	e7be      	b.n	8004616 <_strtod_l+0x146>
 8004698:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800469a:	191a      	adds	r2, r3, r4
 800469c:	9219      	str	r2, [sp, #100]	; 0x64
 800469e:	5d1a      	ldrb	r2, [r3, r4]
 80046a0:	f1bb 0f00 	cmp.w	fp, #0
 80046a4:	d036      	beq.n	8004714 <_strtod_l+0x244>
 80046a6:	465c      	mov	r4, fp
 80046a8:	9004      	str	r0, [sp, #16]
 80046aa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80046ae:	2b09      	cmp	r3, #9
 80046b0:	d912      	bls.n	80046d8 <_strtod_l+0x208>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e7c1      	b.n	800463a <_strtod_l+0x16a>
 80046b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80046b8:	3001      	adds	r0, #1
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	9219      	str	r2, [sp, #100]	; 0x64
 80046be:	785a      	ldrb	r2, [r3, #1]
 80046c0:	2a30      	cmp	r2, #48	; 0x30
 80046c2:	d0f8      	beq.n	80046b6 <_strtod_l+0x1e6>
 80046c4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	f200 84d5 	bhi.w	8005078 <_strtod_l+0xba8>
 80046ce:	9004      	str	r0, [sp, #16]
 80046d0:	2000      	movs	r0, #0
 80046d2:	4604      	mov	r4, r0
 80046d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80046d6:	9308      	str	r3, [sp, #32]
 80046d8:	3a30      	subs	r2, #48	; 0x30
 80046da:	f100 0301 	add.w	r3, r0, #1
 80046de:	d013      	beq.n	8004708 <_strtod_l+0x238>
 80046e0:	9904      	ldr	r1, [sp, #16]
 80046e2:	1905      	adds	r5, r0, r4
 80046e4:	4419      	add	r1, r3
 80046e6:	9104      	str	r1, [sp, #16]
 80046e8:	4623      	mov	r3, r4
 80046ea:	210a      	movs	r1, #10
 80046ec:	42ab      	cmp	r3, r5
 80046ee:	d113      	bne.n	8004718 <_strtod_l+0x248>
 80046f0:	1823      	adds	r3, r4, r0
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	f104 0401 	add.w	r4, r4, #1
 80046f8:	4404      	add	r4, r0
 80046fa:	dc1b      	bgt.n	8004734 <_strtod_l+0x264>
 80046fc:	230a      	movs	r3, #10
 80046fe:	9906      	ldr	r1, [sp, #24]
 8004700:	fb03 2301 	mla	r3, r3, r1, r2
 8004704:	9306      	str	r3, [sp, #24]
 8004706:	2300      	movs	r3, #0
 8004708:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800470a:	4618      	mov	r0, r3
 800470c:	1c51      	adds	r1, r2, #1
 800470e:	9119      	str	r1, [sp, #100]	; 0x64
 8004710:	7852      	ldrb	r2, [r2, #1]
 8004712:	e7ca      	b.n	80046aa <_strtod_l+0x1da>
 8004714:	4658      	mov	r0, fp
 8004716:	e7d3      	b.n	80046c0 <_strtod_l+0x1f0>
 8004718:	2b08      	cmp	r3, #8
 800471a:	dc04      	bgt.n	8004726 <_strtod_l+0x256>
 800471c:	9f06      	ldr	r7, [sp, #24]
 800471e:	434f      	muls	r7, r1
 8004720:	9706      	str	r7, [sp, #24]
 8004722:	3301      	adds	r3, #1
 8004724:	e7e2      	b.n	80046ec <_strtod_l+0x21c>
 8004726:	1c5f      	adds	r7, r3, #1
 8004728:	2f10      	cmp	r7, #16
 800472a:	bfde      	ittt	le
 800472c:	9f05      	ldrle	r7, [sp, #20]
 800472e:	434f      	mulle	r7, r1
 8004730:	9705      	strle	r7, [sp, #20]
 8004732:	e7f6      	b.n	8004722 <_strtod_l+0x252>
 8004734:	2c10      	cmp	r4, #16
 8004736:	bfdf      	itttt	le
 8004738:	230a      	movle	r3, #10
 800473a:	9905      	ldrle	r1, [sp, #20]
 800473c:	fb03 2301 	mlale	r3, r3, r1, r2
 8004740:	9305      	strle	r3, [sp, #20]
 8004742:	e7e0      	b.n	8004706 <_strtod_l+0x236>
 8004744:	2300      	movs	r3, #0
 8004746:	9304      	str	r3, [sp, #16]
 8004748:	2301      	movs	r3, #1
 800474a:	e77b      	b.n	8004644 <_strtod_l+0x174>
 800474c:	2700      	movs	r7, #0
 800474e:	1cb2      	adds	r2, r6, #2
 8004750:	9219      	str	r2, [sp, #100]	; 0x64
 8004752:	78b2      	ldrb	r2, [r6, #2]
 8004754:	e784      	b.n	8004660 <_strtod_l+0x190>
 8004756:	bf00      	nop
 8004758:	080072d0 	.word	0x080072d0
 800475c:	08007204 	.word	0x08007204
 8004760:	7ff00000 	.word	0x7ff00000
 8004764:	2701      	movs	r7, #1
 8004766:	e7f2      	b.n	800474e <_strtod_l+0x27e>
 8004768:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800476a:	1c51      	adds	r1, r2, #1
 800476c:	9119      	str	r1, [sp, #100]	; 0x64
 800476e:	7852      	ldrb	r2, [r2, #1]
 8004770:	2a30      	cmp	r2, #48	; 0x30
 8004772:	d0f9      	beq.n	8004768 <_strtod_l+0x298>
 8004774:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004778:	2908      	cmp	r1, #8
 800477a:	f63f af77 	bhi.w	800466c <_strtod_l+0x19c>
 800477e:	f04f 0e0a 	mov.w	lr, #10
 8004782:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8004786:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004788:	9209      	str	r2, [sp, #36]	; 0x24
 800478a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800478c:	1c51      	adds	r1, r2, #1
 800478e:	9119      	str	r1, [sp, #100]	; 0x64
 8004790:	7852      	ldrb	r2, [r2, #1]
 8004792:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8004796:	2d09      	cmp	r5, #9
 8004798:	d935      	bls.n	8004806 <_strtod_l+0x336>
 800479a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800479c:	1b49      	subs	r1, r1, r5
 800479e:	2908      	cmp	r1, #8
 80047a0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80047a4:	dc02      	bgt.n	80047ac <_strtod_l+0x2dc>
 80047a6:	4565      	cmp	r5, ip
 80047a8:	bfa8      	it	ge
 80047aa:	4665      	movge	r5, ip
 80047ac:	b107      	cbz	r7, 80047b0 <_strtod_l+0x2e0>
 80047ae:	426d      	negs	r5, r5
 80047b0:	2c00      	cmp	r4, #0
 80047b2:	d14c      	bne.n	800484e <_strtod_l+0x37e>
 80047b4:	9907      	ldr	r1, [sp, #28]
 80047b6:	4301      	orrs	r1, r0
 80047b8:	f47f aecb 	bne.w	8004552 <_strtod_l+0x82>
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f47f aee4 	bne.w	800458a <_strtod_l+0xba>
 80047c2:	2a69      	cmp	r2, #105	; 0x69
 80047c4:	d026      	beq.n	8004814 <_strtod_l+0x344>
 80047c6:	dc23      	bgt.n	8004810 <_strtod_l+0x340>
 80047c8:	2a49      	cmp	r2, #73	; 0x49
 80047ca:	d023      	beq.n	8004814 <_strtod_l+0x344>
 80047cc:	2a4e      	cmp	r2, #78	; 0x4e
 80047ce:	f47f aedc 	bne.w	800458a <_strtod_l+0xba>
 80047d2:	499d      	ldr	r1, [pc, #628]	; (8004a48 <_strtod_l+0x578>)
 80047d4:	a819      	add	r0, sp, #100	; 0x64
 80047d6:	f000 ff25 	bl	8005624 <__match>
 80047da:	2800      	cmp	r0, #0
 80047dc:	f43f aed5 	beq.w	800458a <_strtod_l+0xba>
 80047e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b28      	cmp	r3, #40	; 0x28
 80047e6:	d12c      	bne.n	8004842 <_strtod_l+0x372>
 80047e8:	4998      	ldr	r1, [pc, #608]	; (8004a4c <_strtod_l+0x57c>)
 80047ea:	aa1c      	add	r2, sp, #112	; 0x70
 80047ec:	a819      	add	r0, sp, #100	; 0x64
 80047ee:	f000 ff2d 	bl	800564c <__hexnan>
 80047f2:	2805      	cmp	r0, #5
 80047f4:	d125      	bne.n	8004842 <_strtod_l+0x372>
 80047f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80047f8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80047fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004800:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004804:	e6a5      	b.n	8004552 <_strtod_l+0x82>
 8004806:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800480a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800480e:	e7bc      	b.n	800478a <_strtod_l+0x2ba>
 8004810:	2a6e      	cmp	r2, #110	; 0x6e
 8004812:	e7dc      	b.n	80047ce <_strtod_l+0x2fe>
 8004814:	498e      	ldr	r1, [pc, #568]	; (8004a50 <_strtod_l+0x580>)
 8004816:	a819      	add	r0, sp, #100	; 0x64
 8004818:	f000 ff04 	bl	8005624 <__match>
 800481c:	2800      	cmp	r0, #0
 800481e:	f43f aeb4 	beq.w	800458a <_strtod_l+0xba>
 8004822:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004824:	498b      	ldr	r1, [pc, #556]	; (8004a54 <_strtod_l+0x584>)
 8004826:	3b01      	subs	r3, #1
 8004828:	a819      	add	r0, sp, #100	; 0x64
 800482a:	9319      	str	r3, [sp, #100]	; 0x64
 800482c:	f000 fefa 	bl	8005624 <__match>
 8004830:	b910      	cbnz	r0, 8004838 <_strtod_l+0x368>
 8004832:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004834:	3301      	adds	r3, #1
 8004836:	9319      	str	r3, [sp, #100]	; 0x64
 8004838:	f04f 0800 	mov.w	r8, #0
 800483c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8004a58 <_strtod_l+0x588>
 8004840:	e687      	b.n	8004552 <_strtod_l+0x82>
 8004842:	4886      	ldr	r0, [pc, #536]	; (8004a5c <_strtod_l+0x58c>)
 8004844:	f001 fd10 	bl	8006268 <nan>
 8004848:	4680      	mov	r8, r0
 800484a:	4689      	mov	r9, r1
 800484c:	e681      	b.n	8004552 <_strtod_l+0x82>
 800484e:	9b04      	ldr	r3, [sp, #16]
 8004850:	f1bb 0f00 	cmp.w	fp, #0
 8004854:	bf08      	it	eq
 8004856:	46a3      	moveq	fp, r4
 8004858:	1aeb      	subs	r3, r5, r3
 800485a:	2c10      	cmp	r4, #16
 800485c:	9806      	ldr	r0, [sp, #24]
 800485e:	4626      	mov	r6, r4
 8004860:	9307      	str	r3, [sp, #28]
 8004862:	bfa8      	it	ge
 8004864:	2610      	movge	r6, #16
 8004866:	f7fb fdbd 	bl	80003e4 <__aeabi_ui2d>
 800486a:	2c09      	cmp	r4, #9
 800486c:	4680      	mov	r8, r0
 800486e:	4689      	mov	r9, r1
 8004870:	dd13      	ble.n	800489a <_strtod_l+0x3ca>
 8004872:	4b7b      	ldr	r3, [pc, #492]	; (8004a60 <_strtod_l+0x590>)
 8004874:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004878:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800487c:	f7fb fe2c 	bl	80004d8 <__aeabi_dmul>
 8004880:	4680      	mov	r8, r0
 8004882:	9805      	ldr	r0, [sp, #20]
 8004884:	4689      	mov	r9, r1
 8004886:	f7fb fdad 	bl	80003e4 <__aeabi_ui2d>
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	4640      	mov	r0, r8
 8004890:	4649      	mov	r1, r9
 8004892:	f7fb fc6b 	bl	800016c <__adddf3>
 8004896:	4680      	mov	r8, r0
 8004898:	4689      	mov	r9, r1
 800489a:	2c0f      	cmp	r4, #15
 800489c:	dc36      	bgt.n	800490c <_strtod_l+0x43c>
 800489e:	9b07      	ldr	r3, [sp, #28]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f43f ae56 	beq.w	8004552 <_strtod_l+0x82>
 80048a6:	dd22      	ble.n	80048ee <_strtod_l+0x41e>
 80048a8:	2b16      	cmp	r3, #22
 80048aa:	dc09      	bgt.n	80048c0 <_strtod_l+0x3f0>
 80048ac:	496c      	ldr	r1, [pc, #432]	; (8004a60 <_strtod_l+0x590>)
 80048ae:	4642      	mov	r2, r8
 80048b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80048b4:	464b      	mov	r3, r9
 80048b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048ba:	f7fb fe0d 	bl	80004d8 <__aeabi_dmul>
 80048be:	e7c3      	b.n	8004848 <_strtod_l+0x378>
 80048c0:	9a07      	ldr	r2, [sp, #28]
 80048c2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80048c6:	4293      	cmp	r3, r2
 80048c8:	db20      	blt.n	800490c <_strtod_l+0x43c>
 80048ca:	4d65      	ldr	r5, [pc, #404]	; (8004a60 <_strtod_l+0x590>)
 80048cc:	f1c4 040f 	rsb	r4, r4, #15
 80048d0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80048d4:	4642      	mov	r2, r8
 80048d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048da:	464b      	mov	r3, r9
 80048dc:	f7fb fdfc 	bl	80004d8 <__aeabi_dmul>
 80048e0:	9b07      	ldr	r3, [sp, #28]
 80048e2:	1b1c      	subs	r4, r3, r4
 80048e4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80048e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80048ec:	e7e5      	b.n	80048ba <_strtod_l+0x3ea>
 80048ee:	9b07      	ldr	r3, [sp, #28]
 80048f0:	3316      	adds	r3, #22
 80048f2:	db0b      	blt.n	800490c <_strtod_l+0x43c>
 80048f4:	9b04      	ldr	r3, [sp, #16]
 80048f6:	4640      	mov	r0, r8
 80048f8:	1b5d      	subs	r5, r3, r5
 80048fa:	4b59      	ldr	r3, [pc, #356]	; (8004a60 <_strtod_l+0x590>)
 80048fc:	4649      	mov	r1, r9
 80048fe:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004902:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004906:	f7fb ff11 	bl	800072c <__aeabi_ddiv>
 800490a:	e79d      	b.n	8004848 <_strtod_l+0x378>
 800490c:	9b07      	ldr	r3, [sp, #28]
 800490e:	1ba6      	subs	r6, r4, r6
 8004910:	441e      	add	r6, r3
 8004912:	2e00      	cmp	r6, #0
 8004914:	dd74      	ble.n	8004a00 <_strtod_l+0x530>
 8004916:	f016 030f 	ands.w	r3, r6, #15
 800491a:	d00a      	beq.n	8004932 <_strtod_l+0x462>
 800491c:	4950      	ldr	r1, [pc, #320]	; (8004a60 <_strtod_l+0x590>)
 800491e:	4642      	mov	r2, r8
 8004920:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004924:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004928:	464b      	mov	r3, r9
 800492a:	f7fb fdd5 	bl	80004d8 <__aeabi_dmul>
 800492e:	4680      	mov	r8, r0
 8004930:	4689      	mov	r9, r1
 8004932:	f036 060f 	bics.w	r6, r6, #15
 8004936:	d052      	beq.n	80049de <_strtod_l+0x50e>
 8004938:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800493c:	dd27      	ble.n	800498e <_strtod_l+0x4be>
 800493e:	f04f 0b00 	mov.w	fp, #0
 8004942:	f8cd b010 	str.w	fp, [sp, #16]
 8004946:	f8cd b020 	str.w	fp, [sp, #32]
 800494a:	f8cd b018 	str.w	fp, [sp, #24]
 800494e:	2322      	movs	r3, #34	; 0x22
 8004950:	f04f 0800 	mov.w	r8, #0
 8004954:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8004a58 <_strtod_l+0x588>
 8004958:	f8ca 3000 	str.w	r3, [sl]
 800495c:	9b08      	ldr	r3, [sp, #32]
 800495e:	2b00      	cmp	r3, #0
 8004960:	f43f adf7 	beq.w	8004552 <_strtod_l+0x82>
 8004964:	4650      	mov	r0, sl
 8004966:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004968:	f000 ff5e 	bl	8005828 <_Bfree>
 800496c:	4650      	mov	r0, sl
 800496e:	9906      	ldr	r1, [sp, #24]
 8004970:	f000 ff5a 	bl	8005828 <_Bfree>
 8004974:	4650      	mov	r0, sl
 8004976:	9904      	ldr	r1, [sp, #16]
 8004978:	f000 ff56 	bl	8005828 <_Bfree>
 800497c:	4650      	mov	r0, sl
 800497e:	9908      	ldr	r1, [sp, #32]
 8004980:	f000 ff52 	bl	8005828 <_Bfree>
 8004984:	4659      	mov	r1, fp
 8004986:	4650      	mov	r0, sl
 8004988:	f000 ff4e 	bl	8005828 <_Bfree>
 800498c:	e5e1      	b.n	8004552 <_strtod_l+0x82>
 800498e:	4b35      	ldr	r3, [pc, #212]	; (8004a64 <_strtod_l+0x594>)
 8004990:	4640      	mov	r0, r8
 8004992:	9305      	str	r3, [sp, #20]
 8004994:	2300      	movs	r3, #0
 8004996:	4649      	mov	r1, r9
 8004998:	461f      	mov	r7, r3
 800499a:	1136      	asrs	r6, r6, #4
 800499c:	2e01      	cmp	r6, #1
 800499e:	dc21      	bgt.n	80049e4 <_strtod_l+0x514>
 80049a0:	b10b      	cbz	r3, 80049a6 <_strtod_l+0x4d6>
 80049a2:	4680      	mov	r8, r0
 80049a4:	4689      	mov	r9, r1
 80049a6:	4b2f      	ldr	r3, [pc, #188]	; (8004a64 <_strtod_l+0x594>)
 80049a8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80049ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80049b0:	4642      	mov	r2, r8
 80049b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049b6:	464b      	mov	r3, r9
 80049b8:	f7fb fd8e 	bl	80004d8 <__aeabi_dmul>
 80049bc:	4b26      	ldr	r3, [pc, #152]	; (8004a58 <_strtod_l+0x588>)
 80049be:	460a      	mov	r2, r1
 80049c0:	400b      	ands	r3, r1
 80049c2:	4929      	ldr	r1, [pc, #164]	; (8004a68 <_strtod_l+0x598>)
 80049c4:	4680      	mov	r8, r0
 80049c6:	428b      	cmp	r3, r1
 80049c8:	d8b9      	bhi.n	800493e <_strtod_l+0x46e>
 80049ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80049ce:	428b      	cmp	r3, r1
 80049d0:	bf86      	itte	hi
 80049d2:	f04f 38ff 	movhi.w	r8, #4294967295
 80049d6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8004a6c <_strtod_l+0x59c>
 80049da:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80049de:	2300      	movs	r3, #0
 80049e0:	9305      	str	r3, [sp, #20]
 80049e2:	e07f      	b.n	8004ae4 <_strtod_l+0x614>
 80049e4:	07f2      	lsls	r2, r6, #31
 80049e6:	d505      	bpl.n	80049f4 <_strtod_l+0x524>
 80049e8:	9b05      	ldr	r3, [sp, #20]
 80049ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ee:	f7fb fd73 	bl	80004d8 <__aeabi_dmul>
 80049f2:	2301      	movs	r3, #1
 80049f4:	9a05      	ldr	r2, [sp, #20]
 80049f6:	3701      	adds	r7, #1
 80049f8:	3208      	adds	r2, #8
 80049fa:	1076      	asrs	r6, r6, #1
 80049fc:	9205      	str	r2, [sp, #20]
 80049fe:	e7cd      	b.n	800499c <_strtod_l+0x4cc>
 8004a00:	d0ed      	beq.n	80049de <_strtod_l+0x50e>
 8004a02:	4276      	negs	r6, r6
 8004a04:	f016 020f 	ands.w	r2, r6, #15
 8004a08:	d00a      	beq.n	8004a20 <_strtod_l+0x550>
 8004a0a:	4b15      	ldr	r3, [pc, #84]	; (8004a60 <_strtod_l+0x590>)
 8004a0c:	4640      	mov	r0, r8
 8004a0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a12:	4649      	mov	r1, r9
 8004a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a18:	f7fb fe88 	bl	800072c <__aeabi_ddiv>
 8004a1c:	4680      	mov	r8, r0
 8004a1e:	4689      	mov	r9, r1
 8004a20:	1136      	asrs	r6, r6, #4
 8004a22:	d0dc      	beq.n	80049de <_strtod_l+0x50e>
 8004a24:	2e1f      	cmp	r6, #31
 8004a26:	dd23      	ble.n	8004a70 <_strtod_l+0x5a0>
 8004a28:	f04f 0b00 	mov.w	fp, #0
 8004a2c:	f8cd b010 	str.w	fp, [sp, #16]
 8004a30:	f8cd b020 	str.w	fp, [sp, #32]
 8004a34:	f8cd b018 	str.w	fp, [sp, #24]
 8004a38:	2322      	movs	r3, #34	; 0x22
 8004a3a:	f04f 0800 	mov.w	r8, #0
 8004a3e:	f04f 0900 	mov.w	r9, #0
 8004a42:	f8ca 3000 	str.w	r3, [sl]
 8004a46:	e789      	b.n	800495c <_strtod_l+0x48c>
 8004a48:	08007201 	.word	0x08007201
 8004a4c:	08007218 	.word	0x08007218
 8004a50:	080071f8 	.word	0x080071f8
 8004a54:	080071fb 	.word	0x080071fb
 8004a58:	7ff00000 	.word	0x7ff00000
 8004a5c:	0800748f 	.word	0x0800748f
 8004a60:	08007380 	.word	0x08007380
 8004a64:	08007358 	.word	0x08007358
 8004a68:	7ca00000 	.word	0x7ca00000
 8004a6c:	7fefffff 	.word	0x7fefffff
 8004a70:	f016 0310 	ands.w	r3, r6, #16
 8004a74:	bf18      	it	ne
 8004a76:	236a      	movne	r3, #106	; 0x6a
 8004a78:	4640      	mov	r0, r8
 8004a7a:	9305      	str	r3, [sp, #20]
 8004a7c:	4649      	mov	r1, r9
 8004a7e:	2300      	movs	r3, #0
 8004a80:	4fb0      	ldr	r7, [pc, #704]	; (8004d44 <_strtod_l+0x874>)
 8004a82:	07f2      	lsls	r2, r6, #31
 8004a84:	d504      	bpl.n	8004a90 <_strtod_l+0x5c0>
 8004a86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a8a:	f7fb fd25 	bl	80004d8 <__aeabi_dmul>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	1076      	asrs	r6, r6, #1
 8004a92:	f107 0708 	add.w	r7, r7, #8
 8004a96:	d1f4      	bne.n	8004a82 <_strtod_l+0x5b2>
 8004a98:	b10b      	cbz	r3, 8004a9e <_strtod_l+0x5ce>
 8004a9a:	4680      	mov	r8, r0
 8004a9c:	4689      	mov	r9, r1
 8004a9e:	9b05      	ldr	r3, [sp, #20]
 8004aa0:	b1c3      	cbz	r3, 8004ad4 <_strtod_l+0x604>
 8004aa2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8004aa6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	4649      	mov	r1, r9
 8004aae:	dd11      	ble.n	8004ad4 <_strtod_l+0x604>
 8004ab0:	2b1f      	cmp	r3, #31
 8004ab2:	f340 8127 	ble.w	8004d04 <_strtod_l+0x834>
 8004ab6:	2b34      	cmp	r3, #52	; 0x34
 8004ab8:	bfd8      	it	le
 8004aba:	f04f 33ff 	movle.w	r3, #4294967295
 8004abe:	f04f 0800 	mov.w	r8, #0
 8004ac2:	bfcf      	iteee	gt
 8004ac4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004ac8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004acc:	fa03 f202 	lslle.w	r2, r3, r2
 8004ad0:	ea02 0901 	andle.w	r9, r2, r1
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	4640      	mov	r0, r8
 8004ada:	4649      	mov	r1, r9
 8004adc:	f7fb ff64 	bl	80009a8 <__aeabi_dcmpeq>
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	d1a1      	bne.n	8004a28 <_strtod_l+0x558>
 8004ae4:	9b06      	ldr	r3, [sp, #24]
 8004ae6:	465a      	mov	r2, fp
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	4650      	mov	r0, sl
 8004aec:	4623      	mov	r3, r4
 8004aee:	9908      	ldr	r1, [sp, #32]
 8004af0:	f000 ff02 	bl	80058f8 <__s2b>
 8004af4:	9008      	str	r0, [sp, #32]
 8004af6:	2800      	cmp	r0, #0
 8004af8:	f43f af21 	beq.w	800493e <_strtod_l+0x46e>
 8004afc:	9b04      	ldr	r3, [sp, #16]
 8004afe:	f04f 0b00 	mov.w	fp, #0
 8004b02:	1b5d      	subs	r5, r3, r5
 8004b04:	9b07      	ldr	r3, [sp, #28]
 8004b06:	f8cd b010 	str.w	fp, [sp, #16]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	bfb4      	ite	lt
 8004b0e:	462b      	movlt	r3, r5
 8004b10:	2300      	movge	r3, #0
 8004b12:	930e      	str	r3, [sp, #56]	; 0x38
 8004b14:	9b07      	ldr	r3, [sp, #28]
 8004b16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004b1a:	9314      	str	r3, [sp, #80]	; 0x50
 8004b1c:	9b08      	ldr	r3, [sp, #32]
 8004b1e:	4650      	mov	r0, sl
 8004b20:	6859      	ldr	r1, [r3, #4]
 8004b22:	f000 fe41 	bl	80057a8 <_Balloc>
 8004b26:	9006      	str	r0, [sp, #24]
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	f43f af10 	beq.w	800494e <_strtod_l+0x47e>
 8004b2e:	9b08      	ldr	r3, [sp, #32]
 8004b30:	300c      	adds	r0, #12
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	f103 010c 	add.w	r1, r3, #12
 8004b38:	3202      	adds	r2, #2
 8004b3a:	0092      	lsls	r2, r2, #2
 8004b3c:	f7ff fc7c 	bl	8004438 <memcpy>
 8004b40:	ab1c      	add	r3, sp, #112	; 0x70
 8004b42:	9301      	str	r3, [sp, #4]
 8004b44:	ab1b      	add	r3, sp, #108	; 0x6c
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	4642      	mov	r2, r8
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	4650      	mov	r0, sl
 8004b4e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8004b52:	f001 fa13 	bl	8005f7c <__d2b>
 8004b56:	901a      	str	r0, [sp, #104]	; 0x68
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	f43f aef8 	beq.w	800494e <_strtod_l+0x47e>
 8004b5e:	2101      	movs	r1, #1
 8004b60:	4650      	mov	r0, sl
 8004b62:	f000 ff61 	bl	8005a28 <__i2b>
 8004b66:	4603      	mov	r3, r0
 8004b68:	9004      	str	r0, [sp, #16]
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	f43f aeef 	beq.w	800494e <_strtod_l+0x47e>
 8004b70:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004b72:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004b74:	2d00      	cmp	r5, #0
 8004b76:	bfab      	itete	ge
 8004b78:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004b7a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8004b7c:	18ee      	addge	r6, r5, r3
 8004b7e:	1b5c      	sublt	r4, r3, r5
 8004b80:	9b05      	ldr	r3, [sp, #20]
 8004b82:	bfa8      	it	ge
 8004b84:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8004b86:	eba5 0503 	sub.w	r5, r5, r3
 8004b8a:	4415      	add	r5, r2
 8004b8c:	4b6e      	ldr	r3, [pc, #440]	; (8004d48 <_strtod_l+0x878>)
 8004b8e:	f105 35ff 	add.w	r5, r5, #4294967295
 8004b92:	bfb8      	it	lt
 8004b94:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004b96:	429d      	cmp	r5, r3
 8004b98:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004b9c:	f280 80c4 	bge.w	8004d28 <_strtod_l+0x858>
 8004ba0:	1b5b      	subs	r3, r3, r5
 8004ba2:	2b1f      	cmp	r3, #31
 8004ba4:	f04f 0701 	mov.w	r7, #1
 8004ba8:	eba2 0203 	sub.w	r2, r2, r3
 8004bac:	f300 80b1 	bgt.w	8004d12 <_strtod_l+0x842>
 8004bb0:	2500      	movs	r5, #0
 8004bb2:	fa07 f303 	lsl.w	r3, r7, r3
 8004bb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004bb8:	18b7      	adds	r7, r6, r2
 8004bba:	9b05      	ldr	r3, [sp, #20]
 8004bbc:	42be      	cmp	r6, r7
 8004bbe:	4414      	add	r4, r2
 8004bc0:	441c      	add	r4, r3
 8004bc2:	4633      	mov	r3, r6
 8004bc4:	bfa8      	it	ge
 8004bc6:	463b      	movge	r3, r7
 8004bc8:	42a3      	cmp	r3, r4
 8004bca:	bfa8      	it	ge
 8004bcc:	4623      	movge	r3, r4
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	bfc2      	ittt	gt
 8004bd2:	1aff      	subgt	r7, r7, r3
 8004bd4:	1ae4      	subgt	r4, r4, r3
 8004bd6:	1af6      	subgt	r6, r6, r3
 8004bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	dd17      	ble.n	8004c0e <_strtod_l+0x73e>
 8004bde:	461a      	mov	r2, r3
 8004be0:	4650      	mov	r0, sl
 8004be2:	9904      	ldr	r1, [sp, #16]
 8004be4:	f000 ffde 	bl	8005ba4 <__pow5mult>
 8004be8:	9004      	str	r0, [sp, #16]
 8004bea:	2800      	cmp	r0, #0
 8004bec:	f43f aeaf 	beq.w	800494e <_strtod_l+0x47e>
 8004bf0:	4601      	mov	r1, r0
 8004bf2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004bf4:	4650      	mov	r0, sl
 8004bf6:	f000 ff2d 	bl	8005a54 <__multiply>
 8004bfa:	9009      	str	r0, [sp, #36]	; 0x24
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	f43f aea6 	beq.w	800494e <_strtod_l+0x47e>
 8004c02:	4650      	mov	r0, sl
 8004c04:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004c06:	f000 fe0f 	bl	8005828 <_Bfree>
 8004c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c0c:	931a      	str	r3, [sp, #104]	; 0x68
 8004c0e:	2f00      	cmp	r7, #0
 8004c10:	f300 808e 	bgt.w	8004d30 <_strtod_l+0x860>
 8004c14:	9b07      	ldr	r3, [sp, #28]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	dd08      	ble.n	8004c2c <_strtod_l+0x75c>
 8004c1a:	4650      	mov	r0, sl
 8004c1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004c1e:	9906      	ldr	r1, [sp, #24]
 8004c20:	f000 ffc0 	bl	8005ba4 <__pow5mult>
 8004c24:	9006      	str	r0, [sp, #24]
 8004c26:	2800      	cmp	r0, #0
 8004c28:	f43f ae91 	beq.w	800494e <_strtod_l+0x47e>
 8004c2c:	2c00      	cmp	r4, #0
 8004c2e:	dd08      	ble.n	8004c42 <_strtod_l+0x772>
 8004c30:	4622      	mov	r2, r4
 8004c32:	4650      	mov	r0, sl
 8004c34:	9906      	ldr	r1, [sp, #24]
 8004c36:	f001 f80f 	bl	8005c58 <__lshift>
 8004c3a:	9006      	str	r0, [sp, #24]
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	f43f ae86 	beq.w	800494e <_strtod_l+0x47e>
 8004c42:	2e00      	cmp	r6, #0
 8004c44:	dd08      	ble.n	8004c58 <_strtod_l+0x788>
 8004c46:	4632      	mov	r2, r6
 8004c48:	4650      	mov	r0, sl
 8004c4a:	9904      	ldr	r1, [sp, #16]
 8004c4c:	f001 f804 	bl	8005c58 <__lshift>
 8004c50:	9004      	str	r0, [sp, #16]
 8004c52:	2800      	cmp	r0, #0
 8004c54:	f43f ae7b 	beq.w	800494e <_strtod_l+0x47e>
 8004c58:	4650      	mov	r0, sl
 8004c5a:	9a06      	ldr	r2, [sp, #24]
 8004c5c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004c5e:	f001 f887 	bl	8005d70 <__mdiff>
 8004c62:	4683      	mov	fp, r0
 8004c64:	2800      	cmp	r0, #0
 8004c66:	f43f ae72 	beq.w	800494e <_strtod_l+0x47e>
 8004c6a:	2400      	movs	r4, #0
 8004c6c:	68c3      	ldr	r3, [r0, #12]
 8004c6e:	9904      	ldr	r1, [sp, #16]
 8004c70:	60c4      	str	r4, [r0, #12]
 8004c72:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c74:	f001 f860 	bl	8005d38 <__mcmp>
 8004c78:	42a0      	cmp	r0, r4
 8004c7a:	da6b      	bge.n	8004d54 <_strtod_l+0x884>
 8004c7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c7e:	ea53 0308 	orrs.w	r3, r3, r8
 8004c82:	f040 8091 	bne.w	8004da8 <_strtod_l+0x8d8>
 8004c86:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f040 808c 	bne.w	8004da8 <_strtod_l+0x8d8>
 8004c90:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004c94:	0d1b      	lsrs	r3, r3, #20
 8004c96:	051b      	lsls	r3, r3, #20
 8004c98:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004c9c:	f240 8084 	bls.w	8004da8 <_strtod_l+0x8d8>
 8004ca0:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004ca4:	b91b      	cbnz	r3, 8004cae <_strtod_l+0x7de>
 8004ca6:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	dd7c      	ble.n	8004da8 <_strtod_l+0x8d8>
 8004cae:	4659      	mov	r1, fp
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	4650      	mov	r0, sl
 8004cb4:	f000 ffd0 	bl	8005c58 <__lshift>
 8004cb8:	9904      	ldr	r1, [sp, #16]
 8004cba:	4683      	mov	fp, r0
 8004cbc:	f001 f83c 	bl	8005d38 <__mcmp>
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	dd71      	ble.n	8004da8 <_strtod_l+0x8d8>
 8004cc4:	9905      	ldr	r1, [sp, #20]
 8004cc6:	464b      	mov	r3, r9
 8004cc8:	4a20      	ldr	r2, [pc, #128]	; (8004d4c <_strtod_l+0x87c>)
 8004cca:	2900      	cmp	r1, #0
 8004ccc:	f000 808c 	beq.w	8004de8 <_strtod_l+0x918>
 8004cd0:	ea02 0109 	and.w	r1, r2, r9
 8004cd4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004cd8:	f300 8086 	bgt.w	8004de8 <_strtod_l+0x918>
 8004cdc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004ce0:	f77f aeaa 	ble.w	8004a38 <_strtod_l+0x568>
 8004ce4:	4640      	mov	r0, r8
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	4b19      	ldr	r3, [pc, #100]	; (8004d50 <_strtod_l+0x880>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	f7fb fbf4 	bl	80004d8 <__aeabi_dmul>
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4303      	orrs	r3, r0
 8004cf4:	bf08      	it	eq
 8004cf6:	2322      	moveq	r3, #34	; 0x22
 8004cf8:	4680      	mov	r8, r0
 8004cfa:	4689      	mov	r9, r1
 8004cfc:	bf08      	it	eq
 8004cfe:	f8ca 3000 	streq.w	r3, [sl]
 8004d02:	e62f      	b.n	8004964 <_strtod_l+0x494>
 8004d04:	f04f 32ff 	mov.w	r2, #4294967295
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	ea03 0808 	and.w	r8, r3, r8
 8004d10:	e6e0      	b.n	8004ad4 <_strtod_l+0x604>
 8004d12:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004d16:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004d1a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004d1e:	35e2      	adds	r5, #226	; 0xe2
 8004d20:	fa07 f505 	lsl.w	r5, r7, r5
 8004d24:	970f      	str	r7, [sp, #60]	; 0x3c
 8004d26:	e747      	b.n	8004bb8 <_strtod_l+0x6e8>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	2500      	movs	r5, #0
 8004d2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d2e:	e743      	b.n	8004bb8 <_strtod_l+0x6e8>
 8004d30:	463a      	mov	r2, r7
 8004d32:	4650      	mov	r0, sl
 8004d34:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004d36:	f000 ff8f 	bl	8005c58 <__lshift>
 8004d3a:	901a      	str	r0, [sp, #104]	; 0x68
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	f47f af69 	bne.w	8004c14 <_strtod_l+0x744>
 8004d42:	e604      	b.n	800494e <_strtod_l+0x47e>
 8004d44:	08007230 	.word	0x08007230
 8004d48:	fffffc02 	.word	0xfffffc02
 8004d4c:	7ff00000 	.word	0x7ff00000
 8004d50:	39500000 	.word	0x39500000
 8004d54:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004d58:	d165      	bne.n	8004e26 <_strtod_l+0x956>
 8004d5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d60:	b35a      	cbz	r2, 8004dba <_strtod_l+0x8ea>
 8004d62:	4a99      	ldr	r2, [pc, #612]	; (8004fc8 <_strtod_l+0xaf8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d12b      	bne.n	8004dc0 <_strtod_l+0x8f0>
 8004d68:	9b05      	ldr	r3, [sp, #20]
 8004d6a:	4641      	mov	r1, r8
 8004d6c:	b303      	cbz	r3, 8004db0 <_strtod_l+0x8e0>
 8004d6e:	464a      	mov	r2, r9
 8004d70:	4b96      	ldr	r3, [pc, #600]	; (8004fcc <_strtod_l+0xafc>)
 8004d72:	4013      	ands	r3, r2
 8004d74:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004d78:	f04f 32ff 	mov.w	r2, #4294967295
 8004d7c:	d81b      	bhi.n	8004db6 <_strtod_l+0x8e6>
 8004d7e:	0d1b      	lsrs	r3, r3, #20
 8004d80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	4299      	cmp	r1, r3
 8004d8a:	d119      	bne.n	8004dc0 <_strtod_l+0x8f0>
 8004d8c:	4b90      	ldr	r3, [pc, #576]	; (8004fd0 <_strtod_l+0xb00>)
 8004d8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d102      	bne.n	8004d9a <_strtod_l+0x8ca>
 8004d94:	3101      	adds	r1, #1
 8004d96:	f43f adda 	beq.w	800494e <_strtod_l+0x47e>
 8004d9a:	f04f 0800 	mov.w	r8, #0
 8004d9e:	4b8b      	ldr	r3, [pc, #556]	; (8004fcc <_strtod_l+0xafc>)
 8004da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004da2:	401a      	ands	r2, r3
 8004da4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004da8:	9b05      	ldr	r3, [sp, #20]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d19a      	bne.n	8004ce4 <_strtod_l+0x814>
 8004dae:	e5d9      	b.n	8004964 <_strtod_l+0x494>
 8004db0:	f04f 33ff 	mov.w	r3, #4294967295
 8004db4:	e7e8      	b.n	8004d88 <_strtod_l+0x8b8>
 8004db6:	4613      	mov	r3, r2
 8004db8:	e7e6      	b.n	8004d88 <_strtod_l+0x8b8>
 8004dba:	ea53 0308 	orrs.w	r3, r3, r8
 8004dbe:	d081      	beq.n	8004cc4 <_strtod_l+0x7f4>
 8004dc0:	b1e5      	cbz	r5, 8004dfc <_strtod_l+0x92c>
 8004dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dc4:	421d      	tst	r5, r3
 8004dc6:	d0ef      	beq.n	8004da8 <_strtod_l+0x8d8>
 8004dc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dca:	4640      	mov	r0, r8
 8004dcc:	4649      	mov	r1, r9
 8004dce:	9a05      	ldr	r2, [sp, #20]
 8004dd0:	b1c3      	cbz	r3, 8004e04 <_strtod_l+0x934>
 8004dd2:	f7ff fb5b 	bl	800448c <sulp>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004dde:	f7fb f9c5 	bl	800016c <__adddf3>
 8004de2:	4680      	mov	r8, r0
 8004de4:	4689      	mov	r9, r1
 8004de6:	e7df      	b.n	8004da8 <_strtod_l+0x8d8>
 8004de8:	4013      	ands	r3, r2
 8004dea:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004dee:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004df2:	f04f 38ff 	mov.w	r8, #4294967295
 8004df6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004dfa:	e7d5      	b.n	8004da8 <_strtod_l+0x8d8>
 8004dfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004dfe:	ea13 0f08 	tst.w	r3, r8
 8004e02:	e7e0      	b.n	8004dc6 <_strtod_l+0x8f6>
 8004e04:	f7ff fb42 	bl	800448c <sulp>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e10:	f7fb f9aa 	bl	8000168 <__aeabi_dsub>
 8004e14:	2200      	movs	r2, #0
 8004e16:	2300      	movs	r3, #0
 8004e18:	4680      	mov	r8, r0
 8004e1a:	4689      	mov	r9, r1
 8004e1c:	f7fb fdc4 	bl	80009a8 <__aeabi_dcmpeq>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d0c1      	beq.n	8004da8 <_strtod_l+0x8d8>
 8004e24:	e608      	b.n	8004a38 <_strtod_l+0x568>
 8004e26:	4658      	mov	r0, fp
 8004e28:	9904      	ldr	r1, [sp, #16]
 8004e2a:	f001 f903 	bl	8006034 <__ratio>
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e34:	4606      	mov	r6, r0
 8004e36:	460f      	mov	r7, r1
 8004e38:	f7fb fdca 	bl	80009d0 <__aeabi_dcmple>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d070      	beq.n	8004f22 <_strtod_l+0xa52>
 8004e40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d042      	beq.n	8004ecc <_strtod_l+0x9fc>
 8004e46:	2600      	movs	r6, #0
 8004e48:	4f62      	ldr	r7, [pc, #392]	; (8004fd4 <_strtod_l+0xb04>)
 8004e4a:	4d62      	ldr	r5, [pc, #392]	; (8004fd4 <_strtod_l+0xb04>)
 8004e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e52:	0d1b      	lsrs	r3, r3, #20
 8004e54:	051b      	lsls	r3, r3, #20
 8004e56:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e5a:	4b5f      	ldr	r3, [pc, #380]	; (8004fd8 <_strtod_l+0xb08>)
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	f040 80c3 	bne.w	8004fe8 <_strtod_l+0xb18>
 8004e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e64:	4640      	mov	r0, r8
 8004e66:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	f001 f80c 	bl	8005e88 <__ulp>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4630      	mov	r0, r6
 8004e76:	4639      	mov	r1, r7
 8004e78:	f7fb fb2e 	bl	80004d8 <__aeabi_dmul>
 8004e7c:	4642      	mov	r2, r8
 8004e7e:	464b      	mov	r3, r9
 8004e80:	f7fb f974 	bl	800016c <__adddf3>
 8004e84:	460b      	mov	r3, r1
 8004e86:	4951      	ldr	r1, [pc, #324]	; (8004fcc <_strtod_l+0xafc>)
 8004e88:	4a54      	ldr	r2, [pc, #336]	; (8004fdc <_strtod_l+0xb0c>)
 8004e8a:	4019      	ands	r1, r3
 8004e8c:	4291      	cmp	r1, r2
 8004e8e:	4680      	mov	r8, r0
 8004e90:	d95d      	bls.n	8004f4e <_strtod_l+0xa7e>
 8004e92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e94:	4b4e      	ldr	r3, [pc, #312]	; (8004fd0 <_strtod_l+0xb00>)
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d103      	bne.n	8004ea2 <_strtod_l+0x9d2>
 8004e9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	f43f ad56 	beq.w	800494e <_strtod_l+0x47e>
 8004ea2:	f04f 38ff 	mov.w	r8, #4294967295
 8004ea6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004fd0 <_strtod_l+0xb00>
 8004eaa:	4650      	mov	r0, sl
 8004eac:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004eae:	f000 fcbb 	bl	8005828 <_Bfree>
 8004eb2:	4650      	mov	r0, sl
 8004eb4:	9906      	ldr	r1, [sp, #24]
 8004eb6:	f000 fcb7 	bl	8005828 <_Bfree>
 8004eba:	4650      	mov	r0, sl
 8004ebc:	9904      	ldr	r1, [sp, #16]
 8004ebe:	f000 fcb3 	bl	8005828 <_Bfree>
 8004ec2:	4659      	mov	r1, fp
 8004ec4:	4650      	mov	r0, sl
 8004ec6:	f000 fcaf 	bl	8005828 <_Bfree>
 8004eca:	e627      	b.n	8004b1c <_strtod_l+0x64c>
 8004ecc:	f1b8 0f00 	cmp.w	r8, #0
 8004ed0:	d119      	bne.n	8004f06 <_strtod_l+0xa36>
 8004ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ed8:	b9e3      	cbnz	r3, 8004f14 <_strtod_l+0xa44>
 8004eda:	2200      	movs	r2, #0
 8004edc:	4630      	mov	r0, r6
 8004ede:	4639      	mov	r1, r7
 8004ee0:	4b3c      	ldr	r3, [pc, #240]	; (8004fd4 <_strtod_l+0xb04>)
 8004ee2:	f7fb fd6b 	bl	80009bc <__aeabi_dcmplt>
 8004ee6:	b9c8      	cbnz	r0, 8004f1c <_strtod_l+0xa4c>
 8004ee8:	2200      	movs	r2, #0
 8004eea:	4630      	mov	r0, r6
 8004eec:	4639      	mov	r1, r7
 8004eee:	4b3c      	ldr	r3, [pc, #240]	; (8004fe0 <_strtod_l+0xb10>)
 8004ef0:	f7fb faf2 	bl	80004d8 <__aeabi_dmul>
 8004ef4:	4604      	mov	r4, r0
 8004ef6:	460d      	mov	r5, r1
 8004ef8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004efc:	9416      	str	r4, [sp, #88]	; 0x58
 8004efe:	9317      	str	r3, [sp, #92]	; 0x5c
 8004f00:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8004f04:	e7a2      	b.n	8004e4c <_strtod_l+0x97c>
 8004f06:	f1b8 0f01 	cmp.w	r8, #1
 8004f0a:	d103      	bne.n	8004f14 <_strtod_l+0xa44>
 8004f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f43f ad92 	beq.w	8004a38 <_strtod_l+0x568>
 8004f14:	2600      	movs	r6, #0
 8004f16:	2400      	movs	r4, #0
 8004f18:	4f32      	ldr	r7, [pc, #200]	; (8004fe4 <_strtod_l+0xb14>)
 8004f1a:	e796      	b.n	8004e4a <_strtod_l+0x97a>
 8004f1c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004f1e:	4d30      	ldr	r5, [pc, #192]	; (8004fe0 <_strtod_l+0xb10>)
 8004f20:	e7ea      	b.n	8004ef8 <_strtod_l+0xa28>
 8004f22:	4b2f      	ldr	r3, [pc, #188]	; (8004fe0 <_strtod_l+0xb10>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	4630      	mov	r0, r6
 8004f28:	4639      	mov	r1, r7
 8004f2a:	f7fb fad5 	bl	80004d8 <__aeabi_dmul>
 8004f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f30:	4604      	mov	r4, r0
 8004f32:	460d      	mov	r5, r1
 8004f34:	b933      	cbnz	r3, 8004f44 <_strtod_l+0xa74>
 8004f36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f3a:	9010      	str	r0, [sp, #64]	; 0x40
 8004f3c:	9311      	str	r3, [sp, #68]	; 0x44
 8004f3e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004f42:	e783      	b.n	8004e4c <_strtod_l+0x97c>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004f4c:	e7f7      	b.n	8004f3e <_strtod_l+0xa6e>
 8004f4e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004f52:	9b05      	ldr	r3, [sp, #20]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1a8      	bne.n	8004eaa <_strtod_l+0x9da>
 8004f58:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f5e:	0d1b      	lsrs	r3, r3, #20
 8004f60:	051b      	lsls	r3, r3, #20
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d1a1      	bne.n	8004eaa <_strtod_l+0x9da>
 8004f66:	4620      	mov	r0, r4
 8004f68:	4629      	mov	r1, r5
 8004f6a:	f7fb fef5 	bl	8000d58 <__aeabi_d2lz>
 8004f6e:	f7fb fa85 	bl	800047c <__aeabi_l2d>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4620      	mov	r0, r4
 8004f78:	4629      	mov	r1, r5
 8004f7a:	f7fb f8f5 	bl	8000168 <__aeabi_dsub>
 8004f7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f84:	ea43 0308 	orr.w	r3, r3, r8
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	460d      	mov	r5, r1
 8004f8e:	d066      	beq.n	800505e <_strtod_l+0xb8e>
 8004f90:	a309      	add	r3, pc, #36	; (adr r3, 8004fb8 <_strtod_l+0xae8>)
 8004f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f96:	f7fb fd11 	bl	80009bc <__aeabi_dcmplt>
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	f47f ace2 	bne.w	8004964 <_strtod_l+0x494>
 8004fa0:	a307      	add	r3, pc, #28	; (adr r3, 8004fc0 <_strtod_l+0xaf0>)
 8004fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	4629      	mov	r1, r5
 8004faa:	f7fb fd25 	bl	80009f8 <__aeabi_dcmpgt>
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	f43f af7b 	beq.w	8004eaa <_strtod_l+0x9da>
 8004fb4:	e4d6      	b.n	8004964 <_strtod_l+0x494>
 8004fb6:	bf00      	nop
 8004fb8:	94a03595 	.word	0x94a03595
 8004fbc:	3fdfffff 	.word	0x3fdfffff
 8004fc0:	35afe535 	.word	0x35afe535
 8004fc4:	3fe00000 	.word	0x3fe00000
 8004fc8:	000fffff 	.word	0x000fffff
 8004fcc:	7ff00000 	.word	0x7ff00000
 8004fd0:	7fefffff 	.word	0x7fefffff
 8004fd4:	3ff00000 	.word	0x3ff00000
 8004fd8:	7fe00000 	.word	0x7fe00000
 8004fdc:	7c9fffff 	.word	0x7c9fffff
 8004fe0:	3fe00000 	.word	0x3fe00000
 8004fe4:	bff00000 	.word	0xbff00000
 8004fe8:	9b05      	ldr	r3, [sp, #20]
 8004fea:	b313      	cbz	r3, 8005032 <_strtod_l+0xb62>
 8004fec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004ff2:	d81e      	bhi.n	8005032 <_strtod_l+0xb62>
 8004ff4:	a326      	add	r3, pc, #152	; (adr r3, 8005090 <_strtod_l+0xbc0>)
 8004ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	f7fb fce7 	bl	80009d0 <__aeabi_dcmple>
 8005002:	b190      	cbz	r0, 800502a <_strtod_l+0xb5a>
 8005004:	4629      	mov	r1, r5
 8005006:	4620      	mov	r0, r4
 8005008:	f7fb fd28 	bl	8000a5c <__aeabi_d2uiz>
 800500c:	2801      	cmp	r0, #1
 800500e:	bf38      	it	cc
 8005010:	2001      	movcc	r0, #1
 8005012:	f7fb f9e7 	bl	80003e4 <__aeabi_ui2d>
 8005016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005018:	4604      	mov	r4, r0
 800501a:	460d      	mov	r5, r1
 800501c:	b9d3      	cbnz	r3, 8005054 <_strtod_l+0xb84>
 800501e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005022:	9012      	str	r0, [sp, #72]	; 0x48
 8005024:	9313      	str	r3, [sp, #76]	; 0x4c
 8005026:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800502a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800502c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005030:	1a9f      	subs	r7, r3, r2
 8005032:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005036:	f000 ff27 	bl	8005e88 <__ulp>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4630      	mov	r0, r6
 8005040:	4639      	mov	r1, r7
 8005042:	f7fb fa49 	bl	80004d8 <__aeabi_dmul>
 8005046:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800504a:	f7fb f88f 	bl	800016c <__adddf3>
 800504e:	4680      	mov	r8, r0
 8005050:	4689      	mov	r9, r1
 8005052:	e77e      	b.n	8004f52 <_strtod_l+0xa82>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800505c:	e7e3      	b.n	8005026 <_strtod_l+0xb56>
 800505e:	a30e      	add	r3, pc, #56	; (adr r3, 8005098 <_strtod_l+0xbc8>)
 8005060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005064:	f7fb fcaa 	bl	80009bc <__aeabi_dcmplt>
 8005068:	e7a1      	b.n	8004fae <_strtod_l+0xade>
 800506a:	2300      	movs	r3, #0
 800506c:	930a      	str	r3, [sp, #40]	; 0x28
 800506e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005070:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	f7ff ba71 	b.w	800455a <_strtod_l+0x8a>
 8005078:	2a65      	cmp	r2, #101	; 0x65
 800507a:	f43f ab63 	beq.w	8004744 <_strtod_l+0x274>
 800507e:	2a45      	cmp	r2, #69	; 0x45
 8005080:	f43f ab60 	beq.w	8004744 <_strtod_l+0x274>
 8005084:	2301      	movs	r3, #1
 8005086:	f7ff bb95 	b.w	80047b4 <_strtod_l+0x2e4>
 800508a:	bf00      	nop
 800508c:	f3af 8000 	nop.w
 8005090:	ffc00000 	.word	0xffc00000
 8005094:	41dfffff 	.word	0x41dfffff
 8005098:	94a03595 	.word	0x94a03595
 800509c:	3fcfffff 	.word	0x3fcfffff

080050a0 <strtod>:
 80050a0:	460a      	mov	r2, r1
 80050a2:	4601      	mov	r1, r0
 80050a4:	4802      	ldr	r0, [pc, #8]	; (80050b0 <strtod+0x10>)
 80050a6:	4b03      	ldr	r3, [pc, #12]	; (80050b4 <strtod+0x14>)
 80050a8:	6800      	ldr	r0, [r0, #0]
 80050aa:	f7ff ba11 	b.w	80044d0 <_strtod_l>
 80050ae:	bf00      	nop
 80050b0:	200000fc 	.word	0x200000fc
 80050b4:	20000164 	.word	0x20000164

080050b8 <rshift>:
 80050b8:	6903      	ldr	r3, [r0, #16]
 80050ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80050c2:	f100 0414 	add.w	r4, r0, #20
 80050c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80050ca:	dd46      	ble.n	800515a <rshift+0xa2>
 80050cc:	f011 011f 	ands.w	r1, r1, #31
 80050d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80050d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80050d8:	d10c      	bne.n	80050f4 <rshift+0x3c>
 80050da:	4629      	mov	r1, r5
 80050dc:	f100 0710 	add.w	r7, r0, #16
 80050e0:	42b1      	cmp	r1, r6
 80050e2:	d335      	bcc.n	8005150 <rshift+0x98>
 80050e4:	1a9b      	subs	r3, r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	1eea      	subs	r2, r5, #3
 80050ea:	4296      	cmp	r6, r2
 80050ec:	bf38      	it	cc
 80050ee:	2300      	movcc	r3, #0
 80050f0:	4423      	add	r3, r4
 80050f2:	e015      	b.n	8005120 <rshift+0x68>
 80050f4:	46a1      	mov	r9, r4
 80050f6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80050fa:	f1c1 0820 	rsb	r8, r1, #32
 80050fe:	40cf      	lsrs	r7, r1
 8005100:	f105 0e04 	add.w	lr, r5, #4
 8005104:	4576      	cmp	r6, lr
 8005106:	46f4      	mov	ip, lr
 8005108:	d816      	bhi.n	8005138 <rshift+0x80>
 800510a:	1a9a      	subs	r2, r3, r2
 800510c:	0092      	lsls	r2, r2, #2
 800510e:	3a04      	subs	r2, #4
 8005110:	3501      	adds	r5, #1
 8005112:	42ae      	cmp	r6, r5
 8005114:	bf38      	it	cc
 8005116:	2200      	movcc	r2, #0
 8005118:	18a3      	adds	r3, r4, r2
 800511a:	50a7      	str	r7, [r4, r2]
 800511c:	b107      	cbz	r7, 8005120 <rshift+0x68>
 800511e:	3304      	adds	r3, #4
 8005120:	42a3      	cmp	r3, r4
 8005122:	eba3 0204 	sub.w	r2, r3, r4
 8005126:	bf08      	it	eq
 8005128:	2300      	moveq	r3, #0
 800512a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800512e:	6102      	str	r2, [r0, #16]
 8005130:	bf08      	it	eq
 8005132:	6143      	streq	r3, [r0, #20]
 8005134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005138:	f8dc c000 	ldr.w	ip, [ip]
 800513c:	fa0c fc08 	lsl.w	ip, ip, r8
 8005140:	ea4c 0707 	orr.w	r7, ip, r7
 8005144:	f849 7b04 	str.w	r7, [r9], #4
 8005148:	f85e 7b04 	ldr.w	r7, [lr], #4
 800514c:	40cf      	lsrs	r7, r1
 800514e:	e7d9      	b.n	8005104 <rshift+0x4c>
 8005150:	f851 cb04 	ldr.w	ip, [r1], #4
 8005154:	f847 cf04 	str.w	ip, [r7, #4]!
 8005158:	e7c2      	b.n	80050e0 <rshift+0x28>
 800515a:	4623      	mov	r3, r4
 800515c:	e7e0      	b.n	8005120 <rshift+0x68>

0800515e <__hexdig_fun>:
 800515e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005162:	2b09      	cmp	r3, #9
 8005164:	d802      	bhi.n	800516c <__hexdig_fun+0xe>
 8005166:	3820      	subs	r0, #32
 8005168:	b2c0      	uxtb	r0, r0
 800516a:	4770      	bx	lr
 800516c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005170:	2b05      	cmp	r3, #5
 8005172:	d801      	bhi.n	8005178 <__hexdig_fun+0x1a>
 8005174:	3847      	subs	r0, #71	; 0x47
 8005176:	e7f7      	b.n	8005168 <__hexdig_fun+0xa>
 8005178:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800517c:	2b05      	cmp	r3, #5
 800517e:	d801      	bhi.n	8005184 <__hexdig_fun+0x26>
 8005180:	3827      	subs	r0, #39	; 0x27
 8005182:	e7f1      	b.n	8005168 <__hexdig_fun+0xa>
 8005184:	2000      	movs	r0, #0
 8005186:	4770      	bx	lr

08005188 <__gethex>:
 8005188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800518c:	b08b      	sub	sp, #44	; 0x2c
 800518e:	9305      	str	r3, [sp, #20]
 8005190:	4bb2      	ldr	r3, [pc, #712]	; (800545c <__gethex+0x2d4>)
 8005192:	9002      	str	r0, [sp, #8]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	468b      	mov	fp, r1
 8005198:	4618      	mov	r0, r3
 800519a:	4690      	mov	r8, r2
 800519c:	9303      	str	r3, [sp, #12]
 800519e:	f7fa ffd7 	bl	8000150 <strlen>
 80051a2:	4682      	mov	sl, r0
 80051a4:	9b03      	ldr	r3, [sp, #12]
 80051a6:	f8db 2000 	ldr.w	r2, [fp]
 80051aa:	4403      	add	r3, r0
 80051ac:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80051b0:	9306      	str	r3, [sp, #24]
 80051b2:	1c93      	adds	r3, r2, #2
 80051b4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80051b8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80051bc:	32fe      	adds	r2, #254	; 0xfe
 80051be:	18d1      	adds	r1, r2, r3
 80051c0:	461f      	mov	r7, r3
 80051c2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80051c6:	9101      	str	r1, [sp, #4]
 80051c8:	2830      	cmp	r0, #48	; 0x30
 80051ca:	d0f8      	beq.n	80051be <__gethex+0x36>
 80051cc:	f7ff ffc7 	bl	800515e <__hexdig_fun>
 80051d0:	4604      	mov	r4, r0
 80051d2:	2800      	cmp	r0, #0
 80051d4:	d13a      	bne.n	800524c <__gethex+0xc4>
 80051d6:	4652      	mov	r2, sl
 80051d8:	4638      	mov	r0, r7
 80051da:	9903      	ldr	r1, [sp, #12]
 80051dc:	f7ff f942 	bl	8004464 <strncmp>
 80051e0:	4605      	mov	r5, r0
 80051e2:	2800      	cmp	r0, #0
 80051e4:	d166      	bne.n	80052b4 <__gethex+0x12c>
 80051e6:	f817 000a 	ldrb.w	r0, [r7, sl]
 80051ea:	eb07 060a 	add.w	r6, r7, sl
 80051ee:	f7ff ffb6 	bl	800515e <__hexdig_fun>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	d060      	beq.n	80052b8 <__gethex+0x130>
 80051f6:	4633      	mov	r3, r6
 80051f8:	7818      	ldrb	r0, [r3, #0]
 80051fa:	461f      	mov	r7, r3
 80051fc:	2830      	cmp	r0, #48	; 0x30
 80051fe:	f103 0301 	add.w	r3, r3, #1
 8005202:	d0f9      	beq.n	80051f8 <__gethex+0x70>
 8005204:	f7ff ffab 	bl	800515e <__hexdig_fun>
 8005208:	2301      	movs	r3, #1
 800520a:	fab0 f480 	clz	r4, r0
 800520e:	4635      	mov	r5, r6
 8005210:	0964      	lsrs	r4, r4, #5
 8005212:	9301      	str	r3, [sp, #4]
 8005214:	463a      	mov	r2, r7
 8005216:	4616      	mov	r6, r2
 8005218:	7830      	ldrb	r0, [r6, #0]
 800521a:	3201      	adds	r2, #1
 800521c:	f7ff ff9f 	bl	800515e <__hexdig_fun>
 8005220:	2800      	cmp	r0, #0
 8005222:	d1f8      	bne.n	8005216 <__gethex+0x8e>
 8005224:	4652      	mov	r2, sl
 8005226:	4630      	mov	r0, r6
 8005228:	9903      	ldr	r1, [sp, #12]
 800522a:	f7ff f91b 	bl	8004464 <strncmp>
 800522e:	b980      	cbnz	r0, 8005252 <__gethex+0xca>
 8005230:	b94d      	cbnz	r5, 8005246 <__gethex+0xbe>
 8005232:	eb06 050a 	add.w	r5, r6, sl
 8005236:	462a      	mov	r2, r5
 8005238:	4616      	mov	r6, r2
 800523a:	7830      	ldrb	r0, [r6, #0]
 800523c:	3201      	adds	r2, #1
 800523e:	f7ff ff8e 	bl	800515e <__hexdig_fun>
 8005242:	2800      	cmp	r0, #0
 8005244:	d1f8      	bne.n	8005238 <__gethex+0xb0>
 8005246:	1bad      	subs	r5, r5, r6
 8005248:	00ad      	lsls	r5, r5, #2
 800524a:	e004      	b.n	8005256 <__gethex+0xce>
 800524c:	2400      	movs	r4, #0
 800524e:	4625      	mov	r5, r4
 8005250:	e7e0      	b.n	8005214 <__gethex+0x8c>
 8005252:	2d00      	cmp	r5, #0
 8005254:	d1f7      	bne.n	8005246 <__gethex+0xbe>
 8005256:	7833      	ldrb	r3, [r6, #0]
 8005258:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800525c:	2b50      	cmp	r3, #80	; 0x50
 800525e:	d139      	bne.n	80052d4 <__gethex+0x14c>
 8005260:	7873      	ldrb	r3, [r6, #1]
 8005262:	2b2b      	cmp	r3, #43	; 0x2b
 8005264:	d02a      	beq.n	80052bc <__gethex+0x134>
 8005266:	2b2d      	cmp	r3, #45	; 0x2d
 8005268:	d02c      	beq.n	80052c4 <__gethex+0x13c>
 800526a:	f04f 0900 	mov.w	r9, #0
 800526e:	1c71      	adds	r1, r6, #1
 8005270:	7808      	ldrb	r0, [r1, #0]
 8005272:	f7ff ff74 	bl	800515e <__hexdig_fun>
 8005276:	1e43      	subs	r3, r0, #1
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b18      	cmp	r3, #24
 800527c:	d82a      	bhi.n	80052d4 <__gethex+0x14c>
 800527e:	f1a0 0210 	sub.w	r2, r0, #16
 8005282:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005286:	f7ff ff6a 	bl	800515e <__hexdig_fun>
 800528a:	1e43      	subs	r3, r0, #1
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b18      	cmp	r3, #24
 8005290:	d91b      	bls.n	80052ca <__gethex+0x142>
 8005292:	f1b9 0f00 	cmp.w	r9, #0
 8005296:	d000      	beq.n	800529a <__gethex+0x112>
 8005298:	4252      	negs	r2, r2
 800529a:	4415      	add	r5, r2
 800529c:	f8cb 1000 	str.w	r1, [fp]
 80052a0:	b1d4      	cbz	r4, 80052d8 <__gethex+0x150>
 80052a2:	9b01      	ldr	r3, [sp, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	bf14      	ite	ne
 80052a8:	2700      	movne	r7, #0
 80052aa:	2706      	moveq	r7, #6
 80052ac:	4638      	mov	r0, r7
 80052ae:	b00b      	add	sp, #44	; 0x2c
 80052b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052b4:	463e      	mov	r6, r7
 80052b6:	4625      	mov	r5, r4
 80052b8:	2401      	movs	r4, #1
 80052ba:	e7cc      	b.n	8005256 <__gethex+0xce>
 80052bc:	f04f 0900 	mov.w	r9, #0
 80052c0:	1cb1      	adds	r1, r6, #2
 80052c2:	e7d5      	b.n	8005270 <__gethex+0xe8>
 80052c4:	f04f 0901 	mov.w	r9, #1
 80052c8:	e7fa      	b.n	80052c0 <__gethex+0x138>
 80052ca:	230a      	movs	r3, #10
 80052cc:	fb03 0202 	mla	r2, r3, r2, r0
 80052d0:	3a10      	subs	r2, #16
 80052d2:	e7d6      	b.n	8005282 <__gethex+0xfa>
 80052d4:	4631      	mov	r1, r6
 80052d6:	e7e1      	b.n	800529c <__gethex+0x114>
 80052d8:	4621      	mov	r1, r4
 80052da:	1bf3      	subs	r3, r6, r7
 80052dc:	3b01      	subs	r3, #1
 80052de:	2b07      	cmp	r3, #7
 80052e0:	dc0a      	bgt.n	80052f8 <__gethex+0x170>
 80052e2:	9802      	ldr	r0, [sp, #8]
 80052e4:	f000 fa60 	bl	80057a8 <_Balloc>
 80052e8:	4604      	mov	r4, r0
 80052ea:	b940      	cbnz	r0, 80052fe <__gethex+0x176>
 80052ec:	4602      	mov	r2, r0
 80052ee:	21de      	movs	r1, #222	; 0xde
 80052f0:	4b5b      	ldr	r3, [pc, #364]	; (8005460 <__gethex+0x2d8>)
 80052f2:	485c      	ldr	r0, [pc, #368]	; (8005464 <__gethex+0x2dc>)
 80052f4:	f000 ffdc 	bl	80062b0 <__assert_func>
 80052f8:	3101      	adds	r1, #1
 80052fa:	105b      	asrs	r3, r3, #1
 80052fc:	e7ef      	b.n	80052de <__gethex+0x156>
 80052fe:	f04f 0b00 	mov.w	fp, #0
 8005302:	f100 0914 	add.w	r9, r0, #20
 8005306:	f1ca 0301 	rsb	r3, sl, #1
 800530a:	f8cd 9010 	str.w	r9, [sp, #16]
 800530e:	f8cd b004 	str.w	fp, [sp, #4]
 8005312:	9308      	str	r3, [sp, #32]
 8005314:	42b7      	cmp	r7, r6
 8005316:	d33f      	bcc.n	8005398 <__gethex+0x210>
 8005318:	9f04      	ldr	r7, [sp, #16]
 800531a:	9b01      	ldr	r3, [sp, #4]
 800531c:	f847 3b04 	str.w	r3, [r7], #4
 8005320:	eba7 0709 	sub.w	r7, r7, r9
 8005324:	10bf      	asrs	r7, r7, #2
 8005326:	6127      	str	r7, [r4, #16]
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fb2f 	bl	800598c <__hi0bits>
 800532e:	017f      	lsls	r7, r7, #5
 8005330:	f8d8 6000 	ldr.w	r6, [r8]
 8005334:	1a3f      	subs	r7, r7, r0
 8005336:	42b7      	cmp	r7, r6
 8005338:	dd62      	ble.n	8005400 <__gethex+0x278>
 800533a:	1bbf      	subs	r7, r7, r6
 800533c:	4639      	mov	r1, r7
 800533e:	4620      	mov	r0, r4
 8005340:	f000 fec9 	bl	80060d6 <__any_on>
 8005344:	4682      	mov	sl, r0
 8005346:	b1a8      	cbz	r0, 8005374 <__gethex+0x1ec>
 8005348:	f04f 0a01 	mov.w	sl, #1
 800534c:	1e7b      	subs	r3, r7, #1
 800534e:	1159      	asrs	r1, r3, #5
 8005350:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005354:	f003 021f 	and.w	r2, r3, #31
 8005358:	fa0a f202 	lsl.w	r2, sl, r2
 800535c:	420a      	tst	r2, r1
 800535e:	d009      	beq.n	8005374 <__gethex+0x1ec>
 8005360:	4553      	cmp	r3, sl
 8005362:	dd05      	ble.n	8005370 <__gethex+0x1e8>
 8005364:	4620      	mov	r0, r4
 8005366:	1eb9      	subs	r1, r7, #2
 8005368:	f000 feb5 	bl	80060d6 <__any_on>
 800536c:	2800      	cmp	r0, #0
 800536e:	d144      	bne.n	80053fa <__gethex+0x272>
 8005370:	f04f 0a02 	mov.w	sl, #2
 8005374:	4639      	mov	r1, r7
 8005376:	4620      	mov	r0, r4
 8005378:	f7ff fe9e 	bl	80050b8 <rshift>
 800537c:	443d      	add	r5, r7
 800537e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005382:	42ab      	cmp	r3, r5
 8005384:	da4a      	bge.n	800541c <__gethex+0x294>
 8005386:	4621      	mov	r1, r4
 8005388:	9802      	ldr	r0, [sp, #8]
 800538a:	f000 fa4d 	bl	8005828 <_Bfree>
 800538e:	2300      	movs	r3, #0
 8005390:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005392:	27a3      	movs	r7, #163	; 0xa3
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	e789      	b.n	80052ac <__gethex+0x124>
 8005398:	1e73      	subs	r3, r6, #1
 800539a:	9a06      	ldr	r2, [sp, #24]
 800539c:	9307      	str	r3, [sp, #28]
 800539e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d019      	beq.n	80053da <__gethex+0x252>
 80053a6:	f1bb 0f20 	cmp.w	fp, #32
 80053aa:	d107      	bne.n	80053bc <__gethex+0x234>
 80053ac:	9b04      	ldr	r3, [sp, #16]
 80053ae:	9a01      	ldr	r2, [sp, #4]
 80053b0:	f843 2b04 	str.w	r2, [r3], #4
 80053b4:	9304      	str	r3, [sp, #16]
 80053b6:	2300      	movs	r3, #0
 80053b8:	469b      	mov	fp, r3
 80053ba:	9301      	str	r3, [sp, #4]
 80053bc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80053c0:	f7ff fecd 	bl	800515e <__hexdig_fun>
 80053c4:	9b01      	ldr	r3, [sp, #4]
 80053c6:	f000 000f 	and.w	r0, r0, #15
 80053ca:	fa00 f00b 	lsl.w	r0, r0, fp
 80053ce:	4303      	orrs	r3, r0
 80053d0:	9301      	str	r3, [sp, #4]
 80053d2:	f10b 0b04 	add.w	fp, fp, #4
 80053d6:	9b07      	ldr	r3, [sp, #28]
 80053d8:	e00d      	b.n	80053f6 <__gethex+0x26e>
 80053da:	9a08      	ldr	r2, [sp, #32]
 80053dc:	1e73      	subs	r3, r6, #1
 80053de:	4413      	add	r3, r2
 80053e0:	42bb      	cmp	r3, r7
 80053e2:	d3e0      	bcc.n	80053a6 <__gethex+0x21e>
 80053e4:	4618      	mov	r0, r3
 80053e6:	4652      	mov	r2, sl
 80053e8:	9903      	ldr	r1, [sp, #12]
 80053ea:	9309      	str	r3, [sp, #36]	; 0x24
 80053ec:	f7ff f83a 	bl	8004464 <strncmp>
 80053f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f2:	2800      	cmp	r0, #0
 80053f4:	d1d7      	bne.n	80053a6 <__gethex+0x21e>
 80053f6:	461e      	mov	r6, r3
 80053f8:	e78c      	b.n	8005314 <__gethex+0x18c>
 80053fa:	f04f 0a03 	mov.w	sl, #3
 80053fe:	e7b9      	b.n	8005374 <__gethex+0x1ec>
 8005400:	da09      	bge.n	8005416 <__gethex+0x28e>
 8005402:	1bf7      	subs	r7, r6, r7
 8005404:	4621      	mov	r1, r4
 8005406:	463a      	mov	r2, r7
 8005408:	9802      	ldr	r0, [sp, #8]
 800540a:	f000 fc25 	bl	8005c58 <__lshift>
 800540e:	4604      	mov	r4, r0
 8005410:	1bed      	subs	r5, r5, r7
 8005412:	f100 0914 	add.w	r9, r0, #20
 8005416:	f04f 0a00 	mov.w	sl, #0
 800541a:	e7b0      	b.n	800537e <__gethex+0x1f6>
 800541c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005420:	42a8      	cmp	r0, r5
 8005422:	dd72      	ble.n	800550a <__gethex+0x382>
 8005424:	1b45      	subs	r5, r0, r5
 8005426:	42ae      	cmp	r6, r5
 8005428:	dc35      	bgt.n	8005496 <__gethex+0x30e>
 800542a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d029      	beq.n	8005486 <__gethex+0x2fe>
 8005432:	2b03      	cmp	r3, #3
 8005434:	d02b      	beq.n	800548e <__gethex+0x306>
 8005436:	2b01      	cmp	r3, #1
 8005438:	d11c      	bne.n	8005474 <__gethex+0x2ec>
 800543a:	42ae      	cmp	r6, r5
 800543c:	d11a      	bne.n	8005474 <__gethex+0x2ec>
 800543e:	2e01      	cmp	r6, #1
 8005440:	d112      	bne.n	8005468 <__gethex+0x2e0>
 8005442:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005446:	9a05      	ldr	r2, [sp, #20]
 8005448:	2762      	movs	r7, #98	; 0x62
 800544a:	6013      	str	r3, [r2, #0]
 800544c:	2301      	movs	r3, #1
 800544e:	6123      	str	r3, [r4, #16]
 8005450:	f8c9 3000 	str.w	r3, [r9]
 8005454:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005456:	601c      	str	r4, [r3, #0]
 8005458:	e728      	b.n	80052ac <__gethex+0x124>
 800545a:	bf00      	nop
 800545c:	080072d0 	.word	0x080072d0
 8005460:	08007258 	.word	0x08007258
 8005464:	08007269 	.word	0x08007269
 8005468:	4620      	mov	r0, r4
 800546a:	1e71      	subs	r1, r6, #1
 800546c:	f000 fe33 	bl	80060d6 <__any_on>
 8005470:	2800      	cmp	r0, #0
 8005472:	d1e6      	bne.n	8005442 <__gethex+0x2ba>
 8005474:	4621      	mov	r1, r4
 8005476:	9802      	ldr	r0, [sp, #8]
 8005478:	f000 f9d6 	bl	8005828 <_Bfree>
 800547c:	2300      	movs	r3, #0
 800547e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005480:	2750      	movs	r7, #80	; 0x50
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	e712      	b.n	80052ac <__gethex+0x124>
 8005486:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1f3      	bne.n	8005474 <__gethex+0x2ec>
 800548c:	e7d9      	b.n	8005442 <__gethex+0x2ba>
 800548e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1d6      	bne.n	8005442 <__gethex+0x2ba>
 8005494:	e7ee      	b.n	8005474 <__gethex+0x2ec>
 8005496:	1e6f      	subs	r7, r5, #1
 8005498:	f1ba 0f00 	cmp.w	sl, #0
 800549c:	d132      	bne.n	8005504 <__gethex+0x37c>
 800549e:	b127      	cbz	r7, 80054aa <__gethex+0x322>
 80054a0:	4639      	mov	r1, r7
 80054a2:	4620      	mov	r0, r4
 80054a4:	f000 fe17 	bl	80060d6 <__any_on>
 80054a8:	4682      	mov	sl, r0
 80054aa:	2101      	movs	r1, #1
 80054ac:	117b      	asrs	r3, r7, #5
 80054ae:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80054b2:	f007 071f 	and.w	r7, r7, #31
 80054b6:	fa01 f707 	lsl.w	r7, r1, r7
 80054ba:	421f      	tst	r7, r3
 80054bc:	f04f 0702 	mov.w	r7, #2
 80054c0:	4629      	mov	r1, r5
 80054c2:	4620      	mov	r0, r4
 80054c4:	bf18      	it	ne
 80054c6:	f04a 0a02 	orrne.w	sl, sl, #2
 80054ca:	1b76      	subs	r6, r6, r5
 80054cc:	f7ff fdf4 	bl	80050b8 <rshift>
 80054d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80054d4:	f1ba 0f00 	cmp.w	sl, #0
 80054d8:	d048      	beq.n	800556c <__gethex+0x3e4>
 80054da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d015      	beq.n	800550e <__gethex+0x386>
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d017      	beq.n	8005516 <__gethex+0x38e>
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d109      	bne.n	80054fe <__gethex+0x376>
 80054ea:	f01a 0f02 	tst.w	sl, #2
 80054ee:	d006      	beq.n	80054fe <__gethex+0x376>
 80054f0:	f8d9 0000 	ldr.w	r0, [r9]
 80054f4:	ea4a 0a00 	orr.w	sl, sl, r0
 80054f8:	f01a 0f01 	tst.w	sl, #1
 80054fc:	d10e      	bne.n	800551c <__gethex+0x394>
 80054fe:	f047 0710 	orr.w	r7, r7, #16
 8005502:	e033      	b.n	800556c <__gethex+0x3e4>
 8005504:	f04f 0a01 	mov.w	sl, #1
 8005508:	e7cf      	b.n	80054aa <__gethex+0x322>
 800550a:	2701      	movs	r7, #1
 800550c:	e7e2      	b.n	80054d4 <__gethex+0x34c>
 800550e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005510:	f1c3 0301 	rsb	r3, r3, #1
 8005514:	9315      	str	r3, [sp, #84]	; 0x54
 8005516:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0f0      	beq.n	80054fe <__gethex+0x376>
 800551c:	f04f 0c00 	mov.w	ip, #0
 8005520:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005524:	f104 0314 	add.w	r3, r4, #20
 8005528:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800552c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005530:	4618      	mov	r0, r3
 8005532:	f853 2b04 	ldr.w	r2, [r3], #4
 8005536:	f1b2 3fff 	cmp.w	r2, #4294967295
 800553a:	d01c      	beq.n	8005576 <__gethex+0x3ee>
 800553c:	3201      	adds	r2, #1
 800553e:	6002      	str	r2, [r0, #0]
 8005540:	2f02      	cmp	r7, #2
 8005542:	f104 0314 	add.w	r3, r4, #20
 8005546:	d13d      	bne.n	80055c4 <__gethex+0x43c>
 8005548:	f8d8 2000 	ldr.w	r2, [r8]
 800554c:	3a01      	subs	r2, #1
 800554e:	42b2      	cmp	r2, r6
 8005550:	d10a      	bne.n	8005568 <__gethex+0x3e0>
 8005552:	2201      	movs	r2, #1
 8005554:	1171      	asrs	r1, r6, #5
 8005556:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800555a:	f006 061f 	and.w	r6, r6, #31
 800555e:	fa02 f606 	lsl.w	r6, r2, r6
 8005562:	421e      	tst	r6, r3
 8005564:	bf18      	it	ne
 8005566:	4617      	movne	r7, r2
 8005568:	f047 0720 	orr.w	r7, r7, #32
 800556c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800556e:	601c      	str	r4, [r3, #0]
 8005570:	9b05      	ldr	r3, [sp, #20]
 8005572:	601d      	str	r5, [r3, #0]
 8005574:	e69a      	b.n	80052ac <__gethex+0x124>
 8005576:	4299      	cmp	r1, r3
 8005578:	f843 cc04 	str.w	ip, [r3, #-4]
 800557c:	d8d8      	bhi.n	8005530 <__gethex+0x3a8>
 800557e:	68a3      	ldr	r3, [r4, #8]
 8005580:	459b      	cmp	fp, r3
 8005582:	db17      	blt.n	80055b4 <__gethex+0x42c>
 8005584:	6861      	ldr	r1, [r4, #4]
 8005586:	9802      	ldr	r0, [sp, #8]
 8005588:	3101      	adds	r1, #1
 800558a:	f000 f90d 	bl	80057a8 <_Balloc>
 800558e:	4681      	mov	r9, r0
 8005590:	b918      	cbnz	r0, 800559a <__gethex+0x412>
 8005592:	4602      	mov	r2, r0
 8005594:	2184      	movs	r1, #132	; 0x84
 8005596:	4b19      	ldr	r3, [pc, #100]	; (80055fc <__gethex+0x474>)
 8005598:	e6ab      	b.n	80052f2 <__gethex+0x16a>
 800559a:	6922      	ldr	r2, [r4, #16]
 800559c:	f104 010c 	add.w	r1, r4, #12
 80055a0:	3202      	adds	r2, #2
 80055a2:	0092      	lsls	r2, r2, #2
 80055a4:	300c      	adds	r0, #12
 80055a6:	f7fe ff47 	bl	8004438 <memcpy>
 80055aa:	4621      	mov	r1, r4
 80055ac:	9802      	ldr	r0, [sp, #8]
 80055ae:	f000 f93b 	bl	8005828 <_Bfree>
 80055b2:	464c      	mov	r4, r9
 80055b4:	6923      	ldr	r3, [r4, #16]
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	6122      	str	r2, [r4, #16]
 80055ba:	2201      	movs	r2, #1
 80055bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80055c0:	615a      	str	r2, [r3, #20]
 80055c2:	e7bd      	b.n	8005540 <__gethex+0x3b8>
 80055c4:	6922      	ldr	r2, [r4, #16]
 80055c6:	455a      	cmp	r2, fp
 80055c8:	dd0b      	ble.n	80055e2 <__gethex+0x45a>
 80055ca:	2101      	movs	r1, #1
 80055cc:	4620      	mov	r0, r4
 80055ce:	f7ff fd73 	bl	80050b8 <rshift>
 80055d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80055d6:	3501      	adds	r5, #1
 80055d8:	42ab      	cmp	r3, r5
 80055da:	f6ff aed4 	blt.w	8005386 <__gethex+0x1fe>
 80055de:	2701      	movs	r7, #1
 80055e0:	e7c2      	b.n	8005568 <__gethex+0x3e0>
 80055e2:	f016 061f 	ands.w	r6, r6, #31
 80055e6:	d0fa      	beq.n	80055de <__gethex+0x456>
 80055e8:	4453      	add	r3, sl
 80055ea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80055ee:	f000 f9cd 	bl	800598c <__hi0bits>
 80055f2:	f1c6 0620 	rsb	r6, r6, #32
 80055f6:	42b0      	cmp	r0, r6
 80055f8:	dbe7      	blt.n	80055ca <__gethex+0x442>
 80055fa:	e7f0      	b.n	80055de <__gethex+0x456>
 80055fc:	08007258 	.word	0x08007258

08005600 <L_shift>:
 8005600:	f1c2 0208 	rsb	r2, r2, #8
 8005604:	0092      	lsls	r2, r2, #2
 8005606:	b570      	push	{r4, r5, r6, lr}
 8005608:	f1c2 0620 	rsb	r6, r2, #32
 800560c:	6843      	ldr	r3, [r0, #4]
 800560e:	6804      	ldr	r4, [r0, #0]
 8005610:	fa03 f506 	lsl.w	r5, r3, r6
 8005614:	432c      	orrs	r4, r5
 8005616:	40d3      	lsrs	r3, r2
 8005618:	6004      	str	r4, [r0, #0]
 800561a:	f840 3f04 	str.w	r3, [r0, #4]!
 800561e:	4288      	cmp	r0, r1
 8005620:	d3f4      	bcc.n	800560c <L_shift+0xc>
 8005622:	bd70      	pop	{r4, r5, r6, pc}

08005624 <__match>:
 8005624:	b530      	push	{r4, r5, lr}
 8005626:	6803      	ldr	r3, [r0, #0]
 8005628:	3301      	adds	r3, #1
 800562a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800562e:	b914      	cbnz	r4, 8005636 <__match+0x12>
 8005630:	6003      	str	r3, [r0, #0]
 8005632:	2001      	movs	r0, #1
 8005634:	bd30      	pop	{r4, r5, pc}
 8005636:	f813 2b01 	ldrb.w	r2, [r3], #1
 800563a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800563e:	2d19      	cmp	r5, #25
 8005640:	bf98      	it	ls
 8005642:	3220      	addls	r2, #32
 8005644:	42a2      	cmp	r2, r4
 8005646:	d0f0      	beq.n	800562a <__match+0x6>
 8005648:	2000      	movs	r0, #0
 800564a:	e7f3      	b.n	8005634 <__match+0x10>

0800564c <__hexnan>:
 800564c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005650:	2500      	movs	r5, #0
 8005652:	680b      	ldr	r3, [r1, #0]
 8005654:	4682      	mov	sl, r0
 8005656:	115e      	asrs	r6, r3, #5
 8005658:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800565c:	f013 031f 	ands.w	r3, r3, #31
 8005660:	bf18      	it	ne
 8005662:	3604      	addne	r6, #4
 8005664:	1f37      	subs	r7, r6, #4
 8005666:	46b9      	mov	r9, r7
 8005668:	463c      	mov	r4, r7
 800566a:	46ab      	mov	fp, r5
 800566c:	b087      	sub	sp, #28
 800566e:	4690      	mov	r8, r2
 8005670:	6802      	ldr	r2, [r0, #0]
 8005672:	9301      	str	r3, [sp, #4]
 8005674:	f846 5c04 	str.w	r5, [r6, #-4]
 8005678:	9502      	str	r5, [sp, #8]
 800567a:	7851      	ldrb	r1, [r2, #1]
 800567c:	1c53      	adds	r3, r2, #1
 800567e:	9303      	str	r3, [sp, #12]
 8005680:	b341      	cbz	r1, 80056d4 <__hexnan+0x88>
 8005682:	4608      	mov	r0, r1
 8005684:	9205      	str	r2, [sp, #20]
 8005686:	9104      	str	r1, [sp, #16]
 8005688:	f7ff fd69 	bl	800515e <__hexdig_fun>
 800568c:	2800      	cmp	r0, #0
 800568e:	d14f      	bne.n	8005730 <__hexnan+0xe4>
 8005690:	9904      	ldr	r1, [sp, #16]
 8005692:	9a05      	ldr	r2, [sp, #20]
 8005694:	2920      	cmp	r1, #32
 8005696:	d818      	bhi.n	80056ca <__hexnan+0x7e>
 8005698:	9b02      	ldr	r3, [sp, #8]
 800569a:	459b      	cmp	fp, r3
 800569c:	dd13      	ble.n	80056c6 <__hexnan+0x7a>
 800569e:	454c      	cmp	r4, r9
 80056a0:	d206      	bcs.n	80056b0 <__hexnan+0x64>
 80056a2:	2d07      	cmp	r5, #7
 80056a4:	dc04      	bgt.n	80056b0 <__hexnan+0x64>
 80056a6:	462a      	mov	r2, r5
 80056a8:	4649      	mov	r1, r9
 80056aa:	4620      	mov	r0, r4
 80056ac:	f7ff ffa8 	bl	8005600 <L_shift>
 80056b0:	4544      	cmp	r4, r8
 80056b2:	d950      	bls.n	8005756 <__hexnan+0x10a>
 80056b4:	2300      	movs	r3, #0
 80056b6:	f1a4 0904 	sub.w	r9, r4, #4
 80056ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80056be:	461d      	mov	r5, r3
 80056c0:	464c      	mov	r4, r9
 80056c2:	f8cd b008 	str.w	fp, [sp, #8]
 80056c6:	9a03      	ldr	r2, [sp, #12]
 80056c8:	e7d7      	b.n	800567a <__hexnan+0x2e>
 80056ca:	2929      	cmp	r1, #41	; 0x29
 80056cc:	d156      	bne.n	800577c <__hexnan+0x130>
 80056ce:	3202      	adds	r2, #2
 80056d0:	f8ca 2000 	str.w	r2, [sl]
 80056d4:	f1bb 0f00 	cmp.w	fp, #0
 80056d8:	d050      	beq.n	800577c <__hexnan+0x130>
 80056da:	454c      	cmp	r4, r9
 80056dc:	d206      	bcs.n	80056ec <__hexnan+0xa0>
 80056de:	2d07      	cmp	r5, #7
 80056e0:	dc04      	bgt.n	80056ec <__hexnan+0xa0>
 80056e2:	462a      	mov	r2, r5
 80056e4:	4649      	mov	r1, r9
 80056e6:	4620      	mov	r0, r4
 80056e8:	f7ff ff8a 	bl	8005600 <L_shift>
 80056ec:	4544      	cmp	r4, r8
 80056ee:	d934      	bls.n	800575a <__hexnan+0x10e>
 80056f0:	4623      	mov	r3, r4
 80056f2:	f1a8 0204 	sub.w	r2, r8, #4
 80056f6:	f853 1b04 	ldr.w	r1, [r3], #4
 80056fa:	429f      	cmp	r7, r3
 80056fc:	f842 1f04 	str.w	r1, [r2, #4]!
 8005700:	d2f9      	bcs.n	80056f6 <__hexnan+0xaa>
 8005702:	1b3b      	subs	r3, r7, r4
 8005704:	f023 0303 	bic.w	r3, r3, #3
 8005708:	3304      	adds	r3, #4
 800570a:	3401      	adds	r4, #1
 800570c:	3e03      	subs	r6, #3
 800570e:	42b4      	cmp	r4, r6
 8005710:	bf88      	it	hi
 8005712:	2304      	movhi	r3, #4
 8005714:	2200      	movs	r2, #0
 8005716:	4443      	add	r3, r8
 8005718:	f843 2b04 	str.w	r2, [r3], #4
 800571c:	429f      	cmp	r7, r3
 800571e:	d2fb      	bcs.n	8005718 <__hexnan+0xcc>
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	b91b      	cbnz	r3, 800572c <__hexnan+0xe0>
 8005724:	4547      	cmp	r7, r8
 8005726:	d127      	bne.n	8005778 <__hexnan+0x12c>
 8005728:	2301      	movs	r3, #1
 800572a:	603b      	str	r3, [r7, #0]
 800572c:	2005      	movs	r0, #5
 800572e:	e026      	b.n	800577e <__hexnan+0x132>
 8005730:	3501      	adds	r5, #1
 8005732:	2d08      	cmp	r5, #8
 8005734:	f10b 0b01 	add.w	fp, fp, #1
 8005738:	dd06      	ble.n	8005748 <__hexnan+0xfc>
 800573a:	4544      	cmp	r4, r8
 800573c:	d9c3      	bls.n	80056c6 <__hexnan+0x7a>
 800573e:	2300      	movs	r3, #0
 8005740:	2501      	movs	r5, #1
 8005742:	f844 3c04 	str.w	r3, [r4, #-4]
 8005746:	3c04      	subs	r4, #4
 8005748:	6822      	ldr	r2, [r4, #0]
 800574a:	f000 000f 	and.w	r0, r0, #15
 800574e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005752:	6022      	str	r2, [r4, #0]
 8005754:	e7b7      	b.n	80056c6 <__hexnan+0x7a>
 8005756:	2508      	movs	r5, #8
 8005758:	e7b5      	b.n	80056c6 <__hexnan+0x7a>
 800575a:	9b01      	ldr	r3, [sp, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0df      	beq.n	8005720 <__hexnan+0xd4>
 8005760:	f04f 32ff 	mov.w	r2, #4294967295
 8005764:	f1c3 0320 	rsb	r3, r3, #32
 8005768:	fa22 f303 	lsr.w	r3, r2, r3
 800576c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005770:	401a      	ands	r2, r3
 8005772:	f846 2c04 	str.w	r2, [r6, #-4]
 8005776:	e7d3      	b.n	8005720 <__hexnan+0xd4>
 8005778:	3f04      	subs	r7, #4
 800577a:	e7d1      	b.n	8005720 <__hexnan+0xd4>
 800577c:	2004      	movs	r0, #4
 800577e:	b007      	add	sp, #28
 8005780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005784 <__ascii_mbtowc>:
 8005784:	b082      	sub	sp, #8
 8005786:	b901      	cbnz	r1, 800578a <__ascii_mbtowc+0x6>
 8005788:	a901      	add	r1, sp, #4
 800578a:	b142      	cbz	r2, 800579e <__ascii_mbtowc+0x1a>
 800578c:	b14b      	cbz	r3, 80057a2 <__ascii_mbtowc+0x1e>
 800578e:	7813      	ldrb	r3, [r2, #0]
 8005790:	600b      	str	r3, [r1, #0]
 8005792:	7812      	ldrb	r2, [r2, #0]
 8005794:	1e10      	subs	r0, r2, #0
 8005796:	bf18      	it	ne
 8005798:	2001      	movne	r0, #1
 800579a:	b002      	add	sp, #8
 800579c:	4770      	bx	lr
 800579e:	4610      	mov	r0, r2
 80057a0:	e7fb      	b.n	800579a <__ascii_mbtowc+0x16>
 80057a2:	f06f 0001 	mvn.w	r0, #1
 80057a6:	e7f8      	b.n	800579a <__ascii_mbtowc+0x16>

080057a8 <_Balloc>:
 80057a8:	b570      	push	{r4, r5, r6, lr}
 80057aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80057ac:	4604      	mov	r4, r0
 80057ae:	460d      	mov	r5, r1
 80057b0:	b976      	cbnz	r6, 80057d0 <_Balloc+0x28>
 80057b2:	2010      	movs	r0, #16
 80057b4:	f000 fdac 	bl	8006310 <malloc>
 80057b8:	4602      	mov	r2, r0
 80057ba:	6260      	str	r0, [r4, #36]	; 0x24
 80057bc:	b920      	cbnz	r0, 80057c8 <_Balloc+0x20>
 80057be:	2166      	movs	r1, #102	; 0x66
 80057c0:	4b17      	ldr	r3, [pc, #92]	; (8005820 <_Balloc+0x78>)
 80057c2:	4818      	ldr	r0, [pc, #96]	; (8005824 <_Balloc+0x7c>)
 80057c4:	f000 fd74 	bl	80062b0 <__assert_func>
 80057c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80057cc:	6006      	str	r6, [r0, #0]
 80057ce:	60c6      	str	r6, [r0, #12]
 80057d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80057d2:	68f3      	ldr	r3, [r6, #12]
 80057d4:	b183      	cbz	r3, 80057f8 <_Balloc+0x50>
 80057d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80057de:	b9b8      	cbnz	r0, 8005810 <_Balloc+0x68>
 80057e0:	2101      	movs	r1, #1
 80057e2:	fa01 f605 	lsl.w	r6, r1, r5
 80057e6:	1d72      	adds	r2, r6, #5
 80057e8:	4620      	mov	r0, r4
 80057ea:	0092      	lsls	r2, r2, #2
 80057ec:	f000 fc94 	bl	8006118 <_calloc_r>
 80057f0:	b160      	cbz	r0, 800580c <_Balloc+0x64>
 80057f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80057f6:	e00e      	b.n	8005816 <_Balloc+0x6e>
 80057f8:	2221      	movs	r2, #33	; 0x21
 80057fa:	2104      	movs	r1, #4
 80057fc:	4620      	mov	r0, r4
 80057fe:	f000 fc8b 	bl	8006118 <_calloc_r>
 8005802:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005804:	60f0      	str	r0, [r6, #12]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e4      	bne.n	80057d6 <_Balloc+0x2e>
 800580c:	2000      	movs	r0, #0
 800580e:	bd70      	pop	{r4, r5, r6, pc}
 8005810:	6802      	ldr	r2, [r0, #0]
 8005812:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005816:	2300      	movs	r3, #0
 8005818:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800581c:	e7f7      	b.n	800580e <_Balloc+0x66>
 800581e:	bf00      	nop
 8005820:	080072e4 	.word	0x080072e4
 8005824:	080072fb 	.word	0x080072fb

08005828 <_Bfree>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800582c:	4605      	mov	r5, r0
 800582e:	460c      	mov	r4, r1
 8005830:	b976      	cbnz	r6, 8005850 <_Bfree+0x28>
 8005832:	2010      	movs	r0, #16
 8005834:	f000 fd6c 	bl	8006310 <malloc>
 8005838:	4602      	mov	r2, r0
 800583a:	6268      	str	r0, [r5, #36]	; 0x24
 800583c:	b920      	cbnz	r0, 8005848 <_Bfree+0x20>
 800583e:	218a      	movs	r1, #138	; 0x8a
 8005840:	4b08      	ldr	r3, [pc, #32]	; (8005864 <_Bfree+0x3c>)
 8005842:	4809      	ldr	r0, [pc, #36]	; (8005868 <_Bfree+0x40>)
 8005844:	f000 fd34 	bl	80062b0 <__assert_func>
 8005848:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800584c:	6006      	str	r6, [r0, #0]
 800584e:	60c6      	str	r6, [r0, #12]
 8005850:	b13c      	cbz	r4, 8005862 <_Bfree+0x3a>
 8005852:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005854:	6862      	ldr	r2, [r4, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800585c:	6021      	str	r1, [r4, #0]
 800585e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005862:	bd70      	pop	{r4, r5, r6, pc}
 8005864:	080072e4 	.word	0x080072e4
 8005868:	080072fb 	.word	0x080072fb

0800586c <__multadd>:
 800586c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005870:	4607      	mov	r7, r0
 8005872:	460c      	mov	r4, r1
 8005874:	461e      	mov	r6, r3
 8005876:	2000      	movs	r0, #0
 8005878:	690d      	ldr	r5, [r1, #16]
 800587a:	f101 0c14 	add.w	ip, r1, #20
 800587e:	f8dc 3000 	ldr.w	r3, [ip]
 8005882:	3001      	adds	r0, #1
 8005884:	b299      	uxth	r1, r3
 8005886:	fb02 6101 	mla	r1, r2, r1, r6
 800588a:	0c1e      	lsrs	r6, r3, #16
 800588c:	0c0b      	lsrs	r3, r1, #16
 800588e:	fb02 3306 	mla	r3, r2, r6, r3
 8005892:	b289      	uxth	r1, r1
 8005894:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005898:	4285      	cmp	r5, r0
 800589a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800589e:	f84c 1b04 	str.w	r1, [ip], #4
 80058a2:	dcec      	bgt.n	800587e <__multadd+0x12>
 80058a4:	b30e      	cbz	r6, 80058ea <__multadd+0x7e>
 80058a6:	68a3      	ldr	r3, [r4, #8]
 80058a8:	42ab      	cmp	r3, r5
 80058aa:	dc19      	bgt.n	80058e0 <__multadd+0x74>
 80058ac:	6861      	ldr	r1, [r4, #4]
 80058ae:	4638      	mov	r0, r7
 80058b0:	3101      	adds	r1, #1
 80058b2:	f7ff ff79 	bl	80057a8 <_Balloc>
 80058b6:	4680      	mov	r8, r0
 80058b8:	b928      	cbnz	r0, 80058c6 <__multadd+0x5a>
 80058ba:	4602      	mov	r2, r0
 80058bc:	21b5      	movs	r1, #181	; 0xb5
 80058be:	4b0c      	ldr	r3, [pc, #48]	; (80058f0 <__multadd+0x84>)
 80058c0:	480c      	ldr	r0, [pc, #48]	; (80058f4 <__multadd+0x88>)
 80058c2:	f000 fcf5 	bl	80062b0 <__assert_func>
 80058c6:	6922      	ldr	r2, [r4, #16]
 80058c8:	f104 010c 	add.w	r1, r4, #12
 80058cc:	3202      	adds	r2, #2
 80058ce:	0092      	lsls	r2, r2, #2
 80058d0:	300c      	adds	r0, #12
 80058d2:	f7fe fdb1 	bl	8004438 <memcpy>
 80058d6:	4621      	mov	r1, r4
 80058d8:	4638      	mov	r0, r7
 80058da:	f7ff ffa5 	bl	8005828 <_Bfree>
 80058de:	4644      	mov	r4, r8
 80058e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80058e4:	3501      	adds	r5, #1
 80058e6:	615e      	str	r6, [r3, #20]
 80058e8:	6125      	str	r5, [r4, #16]
 80058ea:	4620      	mov	r0, r4
 80058ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058f0:	08007258 	.word	0x08007258
 80058f4:	080072fb 	.word	0x080072fb

080058f8 <__s2b>:
 80058f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058fc:	4615      	mov	r5, r2
 80058fe:	2209      	movs	r2, #9
 8005900:	461f      	mov	r7, r3
 8005902:	3308      	adds	r3, #8
 8005904:	460c      	mov	r4, r1
 8005906:	fb93 f3f2 	sdiv	r3, r3, r2
 800590a:	4606      	mov	r6, r0
 800590c:	2201      	movs	r2, #1
 800590e:	2100      	movs	r1, #0
 8005910:	429a      	cmp	r2, r3
 8005912:	db09      	blt.n	8005928 <__s2b+0x30>
 8005914:	4630      	mov	r0, r6
 8005916:	f7ff ff47 	bl	80057a8 <_Balloc>
 800591a:	b940      	cbnz	r0, 800592e <__s2b+0x36>
 800591c:	4602      	mov	r2, r0
 800591e:	21ce      	movs	r1, #206	; 0xce
 8005920:	4b18      	ldr	r3, [pc, #96]	; (8005984 <__s2b+0x8c>)
 8005922:	4819      	ldr	r0, [pc, #100]	; (8005988 <__s2b+0x90>)
 8005924:	f000 fcc4 	bl	80062b0 <__assert_func>
 8005928:	0052      	lsls	r2, r2, #1
 800592a:	3101      	adds	r1, #1
 800592c:	e7f0      	b.n	8005910 <__s2b+0x18>
 800592e:	9b08      	ldr	r3, [sp, #32]
 8005930:	2d09      	cmp	r5, #9
 8005932:	6143      	str	r3, [r0, #20]
 8005934:	f04f 0301 	mov.w	r3, #1
 8005938:	6103      	str	r3, [r0, #16]
 800593a:	dd16      	ble.n	800596a <__s2b+0x72>
 800593c:	f104 0909 	add.w	r9, r4, #9
 8005940:	46c8      	mov	r8, r9
 8005942:	442c      	add	r4, r5
 8005944:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005948:	4601      	mov	r1, r0
 800594a:	220a      	movs	r2, #10
 800594c:	4630      	mov	r0, r6
 800594e:	3b30      	subs	r3, #48	; 0x30
 8005950:	f7ff ff8c 	bl	800586c <__multadd>
 8005954:	45a0      	cmp	r8, r4
 8005956:	d1f5      	bne.n	8005944 <__s2b+0x4c>
 8005958:	f1a5 0408 	sub.w	r4, r5, #8
 800595c:	444c      	add	r4, r9
 800595e:	1b2d      	subs	r5, r5, r4
 8005960:	1963      	adds	r3, r4, r5
 8005962:	42bb      	cmp	r3, r7
 8005964:	db04      	blt.n	8005970 <__s2b+0x78>
 8005966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800596a:	2509      	movs	r5, #9
 800596c:	340a      	adds	r4, #10
 800596e:	e7f6      	b.n	800595e <__s2b+0x66>
 8005970:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005974:	4601      	mov	r1, r0
 8005976:	220a      	movs	r2, #10
 8005978:	4630      	mov	r0, r6
 800597a:	3b30      	subs	r3, #48	; 0x30
 800597c:	f7ff ff76 	bl	800586c <__multadd>
 8005980:	e7ee      	b.n	8005960 <__s2b+0x68>
 8005982:	bf00      	nop
 8005984:	08007258 	.word	0x08007258
 8005988:	080072fb 	.word	0x080072fb

0800598c <__hi0bits>:
 800598c:	0c02      	lsrs	r2, r0, #16
 800598e:	0412      	lsls	r2, r2, #16
 8005990:	4603      	mov	r3, r0
 8005992:	b9ca      	cbnz	r2, 80059c8 <__hi0bits+0x3c>
 8005994:	0403      	lsls	r3, r0, #16
 8005996:	2010      	movs	r0, #16
 8005998:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800599c:	bf04      	itt	eq
 800599e:	021b      	lsleq	r3, r3, #8
 80059a0:	3008      	addeq	r0, #8
 80059a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80059a6:	bf04      	itt	eq
 80059a8:	011b      	lsleq	r3, r3, #4
 80059aa:	3004      	addeq	r0, #4
 80059ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80059b0:	bf04      	itt	eq
 80059b2:	009b      	lsleq	r3, r3, #2
 80059b4:	3002      	addeq	r0, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	db05      	blt.n	80059c6 <__hi0bits+0x3a>
 80059ba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80059be:	f100 0001 	add.w	r0, r0, #1
 80059c2:	bf08      	it	eq
 80059c4:	2020      	moveq	r0, #32
 80059c6:	4770      	bx	lr
 80059c8:	2000      	movs	r0, #0
 80059ca:	e7e5      	b.n	8005998 <__hi0bits+0xc>

080059cc <__lo0bits>:
 80059cc:	6803      	ldr	r3, [r0, #0]
 80059ce:	4602      	mov	r2, r0
 80059d0:	f013 0007 	ands.w	r0, r3, #7
 80059d4:	d00b      	beq.n	80059ee <__lo0bits+0x22>
 80059d6:	07d9      	lsls	r1, r3, #31
 80059d8:	d421      	bmi.n	8005a1e <__lo0bits+0x52>
 80059da:	0798      	lsls	r0, r3, #30
 80059dc:	bf49      	itett	mi
 80059de:	085b      	lsrmi	r3, r3, #1
 80059e0:	089b      	lsrpl	r3, r3, #2
 80059e2:	2001      	movmi	r0, #1
 80059e4:	6013      	strmi	r3, [r2, #0]
 80059e6:	bf5c      	itt	pl
 80059e8:	2002      	movpl	r0, #2
 80059ea:	6013      	strpl	r3, [r2, #0]
 80059ec:	4770      	bx	lr
 80059ee:	b299      	uxth	r1, r3
 80059f0:	b909      	cbnz	r1, 80059f6 <__lo0bits+0x2a>
 80059f2:	2010      	movs	r0, #16
 80059f4:	0c1b      	lsrs	r3, r3, #16
 80059f6:	b2d9      	uxtb	r1, r3
 80059f8:	b909      	cbnz	r1, 80059fe <__lo0bits+0x32>
 80059fa:	3008      	adds	r0, #8
 80059fc:	0a1b      	lsrs	r3, r3, #8
 80059fe:	0719      	lsls	r1, r3, #28
 8005a00:	bf04      	itt	eq
 8005a02:	091b      	lsreq	r3, r3, #4
 8005a04:	3004      	addeq	r0, #4
 8005a06:	0799      	lsls	r1, r3, #30
 8005a08:	bf04      	itt	eq
 8005a0a:	089b      	lsreq	r3, r3, #2
 8005a0c:	3002      	addeq	r0, #2
 8005a0e:	07d9      	lsls	r1, r3, #31
 8005a10:	d403      	bmi.n	8005a1a <__lo0bits+0x4e>
 8005a12:	085b      	lsrs	r3, r3, #1
 8005a14:	f100 0001 	add.w	r0, r0, #1
 8005a18:	d003      	beq.n	8005a22 <__lo0bits+0x56>
 8005a1a:	6013      	str	r3, [r2, #0]
 8005a1c:	4770      	bx	lr
 8005a1e:	2000      	movs	r0, #0
 8005a20:	4770      	bx	lr
 8005a22:	2020      	movs	r0, #32
 8005a24:	4770      	bx	lr
	...

08005a28 <__i2b>:
 8005a28:	b510      	push	{r4, lr}
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	f7ff febb 	bl	80057a8 <_Balloc>
 8005a32:	4602      	mov	r2, r0
 8005a34:	b928      	cbnz	r0, 8005a42 <__i2b+0x1a>
 8005a36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005a3a:	4b04      	ldr	r3, [pc, #16]	; (8005a4c <__i2b+0x24>)
 8005a3c:	4804      	ldr	r0, [pc, #16]	; (8005a50 <__i2b+0x28>)
 8005a3e:	f000 fc37 	bl	80062b0 <__assert_func>
 8005a42:	2301      	movs	r3, #1
 8005a44:	6144      	str	r4, [r0, #20]
 8005a46:	6103      	str	r3, [r0, #16]
 8005a48:	bd10      	pop	{r4, pc}
 8005a4a:	bf00      	nop
 8005a4c:	08007258 	.word	0x08007258
 8005a50:	080072fb 	.word	0x080072fb

08005a54 <__multiply>:
 8005a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a58:	4691      	mov	r9, r2
 8005a5a:	690a      	ldr	r2, [r1, #16]
 8005a5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005a60:	460c      	mov	r4, r1
 8005a62:	429a      	cmp	r2, r3
 8005a64:	bfbe      	ittt	lt
 8005a66:	460b      	movlt	r3, r1
 8005a68:	464c      	movlt	r4, r9
 8005a6a:	4699      	movlt	r9, r3
 8005a6c:	6927      	ldr	r7, [r4, #16]
 8005a6e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005a72:	68a3      	ldr	r3, [r4, #8]
 8005a74:	6861      	ldr	r1, [r4, #4]
 8005a76:	eb07 060a 	add.w	r6, r7, sl
 8005a7a:	42b3      	cmp	r3, r6
 8005a7c:	b085      	sub	sp, #20
 8005a7e:	bfb8      	it	lt
 8005a80:	3101      	addlt	r1, #1
 8005a82:	f7ff fe91 	bl	80057a8 <_Balloc>
 8005a86:	b930      	cbnz	r0, 8005a96 <__multiply+0x42>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	f240 115d 	movw	r1, #349	; 0x15d
 8005a8e:	4b43      	ldr	r3, [pc, #268]	; (8005b9c <__multiply+0x148>)
 8005a90:	4843      	ldr	r0, [pc, #268]	; (8005ba0 <__multiply+0x14c>)
 8005a92:	f000 fc0d 	bl	80062b0 <__assert_func>
 8005a96:	f100 0514 	add.w	r5, r0, #20
 8005a9a:	462b      	mov	r3, r5
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005aa2:	4543      	cmp	r3, r8
 8005aa4:	d321      	bcc.n	8005aea <__multiply+0x96>
 8005aa6:	f104 0314 	add.w	r3, r4, #20
 8005aaa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005aae:	f109 0314 	add.w	r3, r9, #20
 8005ab2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005ab6:	9202      	str	r2, [sp, #8]
 8005ab8:	1b3a      	subs	r2, r7, r4
 8005aba:	3a15      	subs	r2, #21
 8005abc:	f022 0203 	bic.w	r2, r2, #3
 8005ac0:	3204      	adds	r2, #4
 8005ac2:	f104 0115 	add.w	r1, r4, #21
 8005ac6:	428f      	cmp	r7, r1
 8005ac8:	bf38      	it	cc
 8005aca:	2204      	movcc	r2, #4
 8005acc:	9201      	str	r2, [sp, #4]
 8005ace:	9a02      	ldr	r2, [sp, #8]
 8005ad0:	9303      	str	r3, [sp, #12]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d80c      	bhi.n	8005af0 <__multiply+0x9c>
 8005ad6:	2e00      	cmp	r6, #0
 8005ad8:	dd03      	ble.n	8005ae2 <__multiply+0x8e>
 8005ada:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d059      	beq.n	8005b96 <__multiply+0x142>
 8005ae2:	6106      	str	r6, [r0, #16]
 8005ae4:	b005      	add	sp, #20
 8005ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aea:	f843 2b04 	str.w	r2, [r3], #4
 8005aee:	e7d8      	b.n	8005aa2 <__multiply+0x4e>
 8005af0:	f8b3 a000 	ldrh.w	sl, [r3]
 8005af4:	f1ba 0f00 	cmp.w	sl, #0
 8005af8:	d023      	beq.n	8005b42 <__multiply+0xee>
 8005afa:	46a9      	mov	r9, r5
 8005afc:	f04f 0c00 	mov.w	ip, #0
 8005b00:	f104 0e14 	add.w	lr, r4, #20
 8005b04:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005b08:	f8d9 1000 	ldr.w	r1, [r9]
 8005b0c:	fa1f fb82 	uxth.w	fp, r2
 8005b10:	b289      	uxth	r1, r1
 8005b12:	fb0a 110b 	mla	r1, sl, fp, r1
 8005b16:	4461      	add	r1, ip
 8005b18:	f8d9 c000 	ldr.w	ip, [r9]
 8005b1c:	0c12      	lsrs	r2, r2, #16
 8005b1e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005b22:	fb0a c202 	mla	r2, sl, r2, ip
 8005b26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b2a:	b289      	uxth	r1, r1
 8005b2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005b30:	4577      	cmp	r7, lr
 8005b32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b36:	f849 1b04 	str.w	r1, [r9], #4
 8005b3a:	d8e3      	bhi.n	8005b04 <__multiply+0xb0>
 8005b3c:	9a01      	ldr	r2, [sp, #4]
 8005b3e:	f845 c002 	str.w	ip, [r5, r2]
 8005b42:	9a03      	ldr	r2, [sp, #12]
 8005b44:	3304      	adds	r3, #4
 8005b46:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005b4a:	f1b9 0f00 	cmp.w	r9, #0
 8005b4e:	d020      	beq.n	8005b92 <__multiply+0x13e>
 8005b50:	46ae      	mov	lr, r5
 8005b52:	f04f 0a00 	mov.w	sl, #0
 8005b56:	6829      	ldr	r1, [r5, #0]
 8005b58:	f104 0c14 	add.w	ip, r4, #20
 8005b5c:	f8bc b000 	ldrh.w	fp, [ip]
 8005b60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005b64:	b289      	uxth	r1, r1
 8005b66:	fb09 220b 	mla	r2, r9, fp, r2
 8005b6a:	4492      	add	sl, r2
 8005b6c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005b70:	f84e 1b04 	str.w	r1, [lr], #4
 8005b74:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005b78:	f8be 1000 	ldrh.w	r1, [lr]
 8005b7c:	0c12      	lsrs	r2, r2, #16
 8005b7e:	fb09 1102 	mla	r1, r9, r2, r1
 8005b82:	4567      	cmp	r7, ip
 8005b84:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005b88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005b8c:	d8e6      	bhi.n	8005b5c <__multiply+0x108>
 8005b8e:	9a01      	ldr	r2, [sp, #4]
 8005b90:	50a9      	str	r1, [r5, r2]
 8005b92:	3504      	adds	r5, #4
 8005b94:	e79b      	b.n	8005ace <__multiply+0x7a>
 8005b96:	3e01      	subs	r6, #1
 8005b98:	e79d      	b.n	8005ad6 <__multiply+0x82>
 8005b9a:	bf00      	nop
 8005b9c:	08007258 	.word	0x08007258
 8005ba0:	080072fb 	.word	0x080072fb

08005ba4 <__pow5mult>:
 8005ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ba8:	4615      	mov	r5, r2
 8005baa:	f012 0203 	ands.w	r2, r2, #3
 8005bae:	4606      	mov	r6, r0
 8005bb0:	460f      	mov	r7, r1
 8005bb2:	d007      	beq.n	8005bc4 <__pow5mult+0x20>
 8005bb4:	4c25      	ldr	r4, [pc, #148]	; (8005c4c <__pow5mult+0xa8>)
 8005bb6:	3a01      	subs	r2, #1
 8005bb8:	2300      	movs	r3, #0
 8005bba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005bbe:	f7ff fe55 	bl	800586c <__multadd>
 8005bc2:	4607      	mov	r7, r0
 8005bc4:	10ad      	asrs	r5, r5, #2
 8005bc6:	d03d      	beq.n	8005c44 <__pow5mult+0xa0>
 8005bc8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005bca:	b97c      	cbnz	r4, 8005bec <__pow5mult+0x48>
 8005bcc:	2010      	movs	r0, #16
 8005bce:	f000 fb9f 	bl	8006310 <malloc>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	6270      	str	r0, [r6, #36]	; 0x24
 8005bd6:	b928      	cbnz	r0, 8005be4 <__pow5mult+0x40>
 8005bd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005bdc:	4b1c      	ldr	r3, [pc, #112]	; (8005c50 <__pow5mult+0xac>)
 8005bde:	481d      	ldr	r0, [pc, #116]	; (8005c54 <__pow5mult+0xb0>)
 8005be0:	f000 fb66 	bl	80062b0 <__assert_func>
 8005be4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005be8:	6004      	str	r4, [r0, #0]
 8005bea:	60c4      	str	r4, [r0, #12]
 8005bec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005bf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005bf4:	b94c      	cbnz	r4, 8005c0a <__pow5mult+0x66>
 8005bf6:	f240 2171 	movw	r1, #625	; 0x271
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	f7ff ff14 	bl	8005a28 <__i2b>
 8005c00:	2300      	movs	r3, #0
 8005c02:	4604      	mov	r4, r0
 8005c04:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c08:	6003      	str	r3, [r0, #0]
 8005c0a:	f04f 0900 	mov.w	r9, #0
 8005c0e:	07eb      	lsls	r3, r5, #31
 8005c10:	d50a      	bpl.n	8005c28 <__pow5mult+0x84>
 8005c12:	4639      	mov	r1, r7
 8005c14:	4622      	mov	r2, r4
 8005c16:	4630      	mov	r0, r6
 8005c18:	f7ff ff1c 	bl	8005a54 <__multiply>
 8005c1c:	4680      	mov	r8, r0
 8005c1e:	4639      	mov	r1, r7
 8005c20:	4630      	mov	r0, r6
 8005c22:	f7ff fe01 	bl	8005828 <_Bfree>
 8005c26:	4647      	mov	r7, r8
 8005c28:	106d      	asrs	r5, r5, #1
 8005c2a:	d00b      	beq.n	8005c44 <__pow5mult+0xa0>
 8005c2c:	6820      	ldr	r0, [r4, #0]
 8005c2e:	b938      	cbnz	r0, 8005c40 <__pow5mult+0x9c>
 8005c30:	4622      	mov	r2, r4
 8005c32:	4621      	mov	r1, r4
 8005c34:	4630      	mov	r0, r6
 8005c36:	f7ff ff0d 	bl	8005a54 <__multiply>
 8005c3a:	6020      	str	r0, [r4, #0]
 8005c3c:	f8c0 9000 	str.w	r9, [r0]
 8005c40:	4604      	mov	r4, r0
 8005c42:	e7e4      	b.n	8005c0e <__pow5mult+0x6a>
 8005c44:	4638      	mov	r0, r7
 8005c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c4a:	bf00      	nop
 8005c4c:	08007448 	.word	0x08007448
 8005c50:	080072e4 	.word	0x080072e4
 8005c54:	080072fb 	.word	0x080072fb

08005c58 <__lshift>:
 8005c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c5c:	460c      	mov	r4, r1
 8005c5e:	4607      	mov	r7, r0
 8005c60:	4691      	mov	r9, r2
 8005c62:	6923      	ldr	r3, [r4, #16]
 8005c64:	6849      	ldr	r1, [r1, #4]
 8005c66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c6a:	68a3      	ldr	r3, [r4, #8]
 8005c6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c70:	f108 0601 	add.w	r6, r8, #1
 8005c74:	42b3      	cmp	r3, r6
 8005c76:	db0b      	blt.n	8005c90 <__lshift+0x38>
 8005c78:	4638      	mov	r0, r7
 8005c7a:	f7ff fd95 	bl	80057a8 <_Balloc>
 8005c7e:	4605      	mov	r5, r0
 8005c80:	b948      	cbnz	r0, 8005c96 <__lshift+0x3e>
 8005c82:	4602      	mov	r2, r0
 8005c84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005c88:	4b29      	ldr	r3, [pc, #164]	; (8005d30 <__lshift+0xd8>)
 8005c8a:	482a      	ldr	r0, [pc, #168]	; (8005d34 <__lshift+0xdc>)
 8005c8c:	f000 fb10 	bl	80062b0 <__assert_func>
 8005c90:	3101      	adds	r1, #1
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	e7ee      	b.n	8005c74 <__lshift+0x1c>
 8005c96:	2300      	movs	r3, #0
 8005c98:	f100 0114 	add.w	r1, r0, #20
 8005c9c:	f100 0210 	add.w	r2, r0, #16
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	4553      	cmp	r3, sl
 8005ca4:	db37      	blt.n	8005d16 <__lshift+0xbe>
 8005ca6:	6920      	ldr	r0, [r4, #16]
 8005ca8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005cac:	f104 0314 	add.w	r3, r4, #20
 8005cb0:	f019 091f 	ands.w	r9, r9, #31
 8005cb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005cb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005cbc:	d02f      	beq.n	8005d1e <__lshift+0xc6>
 8005cbe:	468a      	mov	sl, r1
 8005cc0:	f04f 0c00 	mov.w	ip, #0
 8005cc4:	f1c9 0e20 	rsb	lr, r9, #32
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	fa02 f209 	lsl.w	r2, r2, r9
 8005cce:	ea42 020c 	orr.w	r2, r2, ip
 8005cd2:	f84a 2b04 	str.w	r2, [sl], #4
 8005cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cda:	4298      	cmp	r0, r3
 8005cdc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005ce0:	d8f2      	bhi.n	8005cc8 <__lshift+0x70>
 8005ce2:	1b03      	subs	r3, r0, r4
 8005ce4:	3b15      	subs	r3, #21
 8005ce6:	f023 0303 	bic.w	r3, r3, #3
 8005cea:	3304      	adds	r3, #4
 8005cec:	f104 0215 	add.w	r2, r4, #21
 8005cf0:	4290      	cmp	r0, r2
 8005cf2:	bf38      	it	cc
 8005cf4:	2304      	movcc	r3, #4
 8005cf6:	f841 c003 	str.w	ip, [r1, r3]
 8005cfa:	f1bc 0f00 	cmp.w	ip, #0
 8005cfe:	d001      	beq.n	8005d04 <__lshift+0xac>
 8005d00:	f108 0602 	add.w	r6, r8, #2
 8005d04:	3e01      	subs	r6, #1
 8005d06:	4638      	mov	r0, r7
 8005d08:	4621      	mov	r1, r4
 8005d0a:	612e      	str	r6, [r5, #16]
 8005d0c:	f7ff fd8c 	bl	8005828 <_Bfree>
 8005d10:	4628      	mov	r0, r5
 8005d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d16:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	e7c1      	b.n	8005ca2 <__lshift+0x4a>
 8005d1e:	3904      	subs	r1, #4
 8005d20:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d24:	4298      	cmp	r0, r3
 8005d26:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d2a:	d8f9      	bhi.n	8005d20 <__lshift+0xc8>
 8005d2c:	e7ea      	b.n	8005d04 <__lshift+0xac>
 8005d2e:	bf00      	nop
 8005d30:	08007258 	.word	0x08007258
 8005d34:	080072fb 	.word	0x080072fb

08005d38 <__mcmp>:
 8005d38:	4603      	mov	r3, r0
 8005d3a:	690a      	ldr	r2, [r1, #16]
 8005d3c:	6900      	ldr	r0, [r0, #16]
 8005d3e:	b530      	push	{r4, r5, lr}
 8005d40:	1a80      	subs	r0, r0, r2
 8005d42:	d10d      	bne.n	8005d60 <__mcmp+0x28>
 8005d44:	3314      	adds	r3, #20
 8005d46:	3114      	adds	r1, #20
 8005d48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005d4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005d50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d58:	4295      	cmp	r5, r2
 8005d5a:	d002      	beq.n	8005d62 <__mcmp+0x2a>
 8005d5c:	d304      	bcc.n	8005d68 <__mcmp+0x30>
 8005d5e:	2001      	movs	r0, #1
 8005d60:	bd30      	pop	{r4, r5, pc}
 8005d62:	42a3      	cmp	r3, r4
 8005d64:	d3f4      	bcc.n	8005d50 <__mcmp+0x18>
 8005d66:	e7fb      	b.n	8005d60 <__mcmp+0x28>
 8005d68:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6c:	e7f8      	b.n	8005d60 <__mcmp+0x28>
	...

08005d70 <__mdiff>:
 8005d70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d74:	460d      	mov	r5, r1
 8005d76:	4607      	mov	r7, r0
 8005d78:	4611      	mov	r1, r2
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	4614      	mov	r4, r2
 8005d7e:	f7ff ffdb 	bl	8005d38 <__mcmp>
 8005d82:	1e06      	subs	r6, r0, #0
 8005d84:	d111      	bne.n	8005daa <__mdiff+0x3a>
 8005d86:	4631      	mov	r1, r6
 8005d88:	4638      	mov	r0, r7
 8005d8a:	f7ff fd0d 	bl	80057a8 <_Balloc>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	b928      	cbnz	r0, 8005d9e <__mdiff+0x2e>
 8005d92:	f240 2132 	movw	r1, #562	; 0x232
 8005d96:	4b3a      	ldr	r3, [pc, #232]	; (8005e80 <__mdiff+0x110>)
 8005d98:	483a      	ldr	r0, [pc, #232]	; (8005e84 <__mdiff+0x114>)
 8005d9a:	f000 fa89 	bl	80062b0 <__assert_func>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005da4:	4610      	mov	r0, r2
 8005da6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005daa:	bfa4      	itt	ge
 8005dac:	4623      	movge	r3, r4
 8005dae:	462c      	movge	r4, r5
 8005db0:	4638      	mov	r0, r7
 8005db2:	6861      	ldr	r1, [r4, #4]
 8005db4:	bfa6      	itte	ge
 8005db6:	461d      	movge	r5, r3
 8005db8:	2600      	movge	r6, #0
 8005dba:	2601      	movlt	r6, #1
 8005dbc:	f7ff fcf4 	bl	80057a8 <_Balloc>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	b918      	cbnz	r0, 8005dcc <__mdiff+0x5c>
 8005dc4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005dc8:	4b2d      	ldr	r3, [pc, #180]	; (8005e80 <__mdiff+0x110>)
 8005dca:	e7e5      	b.n	8005d98 <__mdiff+0x28>
 8005dcc:	f102 0814 	add.w	r8, r2, #20
 8005dd0:	46c2      	mov	sl, r8
 8005dd2:	f04f 0c00 	mov.w	ip, #0
 8005dd6:	6927      	ldr	r7, [r4, #16]
 8005dd8:	60c6      	str	r6, [r0, #12]
 8005dda:	692e      	ldr	r6, [r5, #16]
 8005ddc:	f104 0014 	add.w	r0, r4, #20
 8005de0:	f105 0914 	add.w	r9, r5, #20
 8005de4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005de8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005dec:	3410      	adds	r4, #16
 8005dee:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005df2:	f859 3b04 	ldr.w	r3, [r9], #4
 8005df6:	fa1f f18b 	uxth.w	r1, fp
 8005dfa:	448c      	add	ip, r1
 8005dfc:	b299      	uxth	r1, r3
 8005dfe:	0c1b      	lsrs	r3, r3, #16
 8005e00:	ebac 0101 	sub.w	r1, ip, r1
 8005e04:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e08:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005e0c:	b289      	uxth	r1, r1
 8005e0e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005e12:	454e      	cmp	r6, r9
 8005e14:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005e18:	f84a 3b04 	str.w	r3, [sl], #4
 8005e1c:	d8e7      	bhi.n	8005dee <__mdiff+0x7e>
 8005e1e:	1b73      	subs	r3, r6, r5
 8005e20:	3b15      	subs	r3, #21
 8005e22:	f023 0303 	bic.w	r3, r3, #3
 8005e26:	3515      	adds	r5, #21
 8005e28:	3304      	adds	r3, #4
 8005e2a:	42ae      	cmp	r6, r5
 8005e2c:	bf38      	it	cc
 8005e2e:	2304      	movcc	r3, #4
 8005e30:	4418      	add	r0, r3
 8005e32:	4443      	add	r3, r8
 8005e34:	461e      	mov	r6, r3
 8005e36:	4605      	mov	r5, r0
 8005e38:	4575      	cmp	r5, lr
 8005e3a:	d30e      	bcc.n	8005e5a <__mdiff+0xea>
 8005e3c:	f10e 0103 	add.w	r1, lr, #3
 8005e40:	1a09      	subs	r1, r1, r0
 8005e42:	f021 0103 	bic.w	r1, r1, #3
 8005e46:	3803      	subs	r0, #3
 8005e48:	4586      	cmp	lr, r0
 8005e4a:	bf38      	it	cc
 8005e4c:	2100      	movcc	r1, #0
 8005e4e:	4419      	add	r1, r3
 8005e50:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005e54:	b18b      	cbz	r3, 8005e7a <__mdiff+0x10a>
 8005e56:	6117      	str	r7, [r2, #16]
 8005e58:	e7a4      	b.n	8005da4 <__mdiff+0x34>
 8005e5a:	f855 8b04 	ldr.w	r8, [r5], #4
 8005e5e:	fa1f f188 	uxth.w	r1, r8
 8005e62:	4461      	add	r1, ip
 8005e64:	140c      	asrs	r4, r1, #16
 8005e66:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005e6a:	b289      	uxth	r1, r1
 8005e6c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005e70:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005e74:	f846 1b04 	str.w	r1, [r6], #4
 8005e78:	e7de      	b.n	8005e38 <__mdiff+0xc8>
 8005e7a:	3f01      	subs	r7, #1
 8005e7c:	e7e8      	b.n	8005e50 <__mdiff+0xe0>
 8005e7e:	bf00      	nop
 8005e80:	08007258 	.word	0x08007258
 8005e84:	080072fb 	.word	0x080072fb

08005e88 <__ulp>:
 8005e88:	4b11      	ldr	r3, [pc, #68]	; (8005ed0 <__ulp+0x48>)
 8005e8a:	400b      	ands	r3, r1
 8005e8c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	dd02      	ble.n	8005e9a <__ulp+0x12>
 8005e94:	2000      	movs	r0, #0
 8005e96:	4619      	mov	r1, r3
 8005e98:	4770      	bx	lr
 8005e9a:	425b      	negs	r3, r3
 8005e9c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005ea0:	f04f 0000 	mov.w	r0, #0
 8005ea4:	f04f 0100 	mov.w	r1, #0
 8005ea8:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005eac:	da04      	bge.n	8005eb8 <__ulp+0x30>
 8005eae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005eb2:	fa43 f102 	asr.w	r1, r3, r2
 8005eb6:	4770      	bx	lr
 8005eb8:	f1a2 0314 	sub.w	r3, r2, #20
 8005ebc:	2b1e      	cmp	r3, #30
 8005ebe:	bfd6      	itet	le
 8005ec0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8005ec4:	2301      	movgt	r3, #1
 8005ec6:	fa22 f303 	lsrle.w	r3, r2, r3
 8005eca:	4618      	mov	r0, r3
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	7ff00000 	.word	0x7ff00000

08005ed4 <__b2d>:
 8005ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ed8:	6907      	ldr	r7, [r0, #16]
 8005eda:	f100 0914 	add.w	r9, r0, #20
 8005ede:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8005ee2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8005ee6:	f1a7 0804 	sub.w	r8, r7, #4
 8005eea:	4630      	mov	r0, r6
 8005eec:	f7ff fd4e 	bl	800598c <__hi0bits>
 8005ef0:	f1c0 0320 	rsb	r3, r0, #32
 8005ef4:	280a      	cmp	r0, #10
 8005ef6:	600b      	str	r3, [r1, #0]
 8005ef8:	491f      	ldr	r1, [pc, #124]	; (8005f78 <__b2d+0xa4>)
 8005efa:	dc17      	bgt.n	8005f2c <__b2d+0x58>
 8005efc:	45c1      	cmp	r9, r8
 8005efe:	bf28      	it	cs
 8005f00:	2200      	movcs	r2, #0
 8005f02:	f1c0 0c0b 	rsb	ip, r0, #11
 8005f06:	fa26 f30c 	lsr.w	r3, r6, ip
 8005f0a:	bf38      	it	cc
 8005f0c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005f10:	ea43 0501 	orr.w	r5, r3, r1
 8005f14:	f100 0315 	add.w	r3, r0, #21
 8005f18:	fa06 f303 	lsl.w	r3, r6, r3
 8005f1c:	fa22 f20c 	lsr.w	r2, r2, ip
 8005f20:	ea43 0402 	orr.w	r4, r3, r2
 8005f24:	4620      	mov	r0, r4
 8005f26:	4629      	mov	r1, r5
 8005f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f2c:	45c1      	cmp	r9, r8
 8005f2e:	bf2e      	itee	cs
 8005f30:	2200      	movcs	r2, #0
 8005f32:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005f36:	f1a7 0808 	subcc.w	r8, r7, #8
 8005f3a:	f1b0 030b 	subs.w	r3, r0, #11
 8005f3e:	d016      	beq.n	8005f6e <__b2d+0x9a>
 8005f40:	f1c3 0720 	rsb	r7, r3, #32
 8005f44:	fa22 f107 	lsr.w	r1, r2, r7
 8005f48:	45c8      	cmp	r8, r9
 8005f4a:	fa06 f603 	lsl.w	r6, r6, r3
 8005f4e:	ea46 0601 	orr.w	r6, r6, r1
 8005f52:	bf94      	ite	ls
 8005f54:	2100      	movls	r1, #0
 8005f56:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8005f5a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8005f5e:	fa02 f003 	lsl.w	r0, r2, r3
 8005f62:	40f9      	lsrs	r1, r7
 8005f64:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005f68:	ea40 0401 	orr.w	r4, r0, r1
 8005f6c:	e7da      	b.n	8005f24 <__b2d+0x50>
 8005f6e:	4614      	mov	r4, r2
 8005f70:	ea46 0501 	orr.w	r5, r6, r1
 8005f74:	e7d6      	b.n	8005f24 <__b2d+0x50>
 8005f76:	bf00      	nop
 8005f78:	3ff00000 	.word	0x3ff00000

08005f7c <__d2b>:
 8005f7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005f80:	2101      	movs	r1, #1
 8005f82:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005f86:	4690      	mov	r8, r2
 8005f88:	461d      	mov	r5, r3
 8005f8a:	f7ff fc0d 	bl	80057a8 <_Balloc>
 8005f8e:	4604      	mov	r4, r0
 8005f90:	b930      	cbnz	r0, 8005fa0 <__d2b+0x24>
 8005f92:	4602      	mov	r2, r0
 8005f94:	f240 310a 	movw	r1, #778	; 0x30a
 8005f98:	4b24      	ldr	r3, [pc, #144]	; (800602c <__d2b+0xb0>)
 8005f9a:	4825      	ldr	r0, [pc, #148]	; (8006030 <__d2b+0xb4>)
 8005f9c:	f000 f988 	bl	80062b0 <__assert_func>
 8005fa0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005fa4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005fa8:	bb2d      	cbnz	r5, 8005ff6 <__d2b+0x7a>
 8005faa:	9301      	str	r3, [sp, #4]
 8005fac:	f1b8 0300 	subs.w	r3, r8, #0
 8005fb0:	d026      	beq.n	8006000 <__d2b+0x84>
 8005fb2:	4668      	mov	r0, sp
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	f7ff fd09 	bl	80059cc <__lo0bits>
 8005fba:	9900      	ldr	r1, [sp, #0]
 8005fbc:	b1f0      	cbz	r0, 8005ffc <__d2b+0x80>
 8005fbe:	9a01      	ldr	r2, [sp, #4]
 8005fc0:	f1c0 0320 	rsb	r3, r0, #32
 8005fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc8:	430b      	orrs	r3, r1
 8005fca:	40c2      	lsrs	r2, r0
 8005fcc:	6163      	str	r3, [r4, #20]
 8005fce:	9201      	str	r2, [sp, #4]
 8005fd0:	9b01      	ldr	r3, [sp, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	bf14      	ite	ne
 8005fd6:	2102      	movne	r1, #2
 8005fd8:	2101      	moveq	r1, #1
 8005fda:	61a3      	str	r3, [r4, #24]
 8005fdc:	6121      	str	r1, [r4, #16]
 8005fde:	b1c5      	cbz	r5, 8006012 <__d2b+0x96>
 8005fe0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005fe4:	4405      	add	r5, r0
 8005fe6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005fea:	603d      	str	r5, [r7, #0]
 8005fec:	6030      	str	r0, [r6, #0]
 8005fee:	4620      	mov	r0, r4
 8005ff0:	b002      	add	sp, #8
 8005ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ffa:	e7d6      	b.n	8005faa <__d2b+0x2e>
 8005ffc:	6161      	str	r1, [r4, #20]
 8005ffe:	e7e7      	b.n	8005fd0 <__d2b+0x54>
 8006000:	a801      	add	r0, sp, #4
 8006002:	f7ff fce3 	bl	80059cc <__lo0bits>
 8006006:	2101      	movs	r1, #1
 8006008:	9b01      	ldr	r3, [sp, #4]
 800600a:	6121      	str	r1, [r4, #16]
 800600c:	6163      	str	r3, [r4, #20]
 800600e:	3020      	adds	r0, #32
 8006010:	e7e5      	b.n	8005fde <__d2b+0x62>
 8006012:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006016:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800601a:	6038      	str	r0, [r7, #0]
 800601c:	6918      	ldr	r0, [r3, #16]
 800601e:	f7ff fcb5 	bl	800598c <__hi0bits>
 8006022:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006026:	6031      	str	r1, [r6, #0]
 8006028:	e7e1      	b.n	8005fee <__d2b+0x72>
 800602a:	bf00      	nop
 800602c:	08007258 	.word	0x08007258
 8006030:	080072fb 	.word	0x080072fb

08006034 <__ratio>:
 8006034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006038:	4688      	mov	r8, r1
 800603a:	4669      	mov	r1, sp
 800603c:	4681      	mov	r9, r0
 800603e:	f7ff ff49 	bl	8005ed4 <__b2d>
 8006042:	460f      	mov	r7, r1
 8006044:	4604      	mov	r4, r0
 8006046:	460d      	mov	r5, r1
 8006048:	4640      	mov	r0, r8
 800604a:	a901      	add	r1, sp, #4
 800604c:	f7ff ff42 	bl	8005ed4 <__b2d>
 8006050:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006054:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006058:	468b      	mov	fp, r1
 800605a:	eba3 0c02 	sub.w	ip, r3, r2
 800605e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006062:	1a9b      	subs	r3, r3, r2
 8006064:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006068:	2b00      	cmp	r3, #0
 800606a:	bfd5      	itete	le
 800606c:	460a      	movle	r2, r1
 800606e:	462a      	movgt	r2, r5
 8006070:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006074:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006078:	bfd8      	it	le
 800607a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800607e:	465b      	mov	r3, fp
 8006080:	4602      	mov	r2, r0
 8006082:	4639      	mov	r1, r7
 8006084:	4620      	mov	r0, r4
 8006086:	f7fa fb51 	bl	800072c <__aeabi_ddiv>
 800608a:	b003      	add	sp, #12
 800608c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006090 <__copybits>:
 8006090:	3901      	subs	r1, #1
 8006092:	b570      	push	{r4, r5, r6, lr}
 8006094:	1149      	asrs	r1, r1, #5
 8006096:	6914      	ldr	r4, [r2, #16]
 8006098:	3101      	adds	r1, #1
 800609a:	f102 0314 	add.w	r3, r2, #20
 800609e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80060a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80060a6:	1f05      	subs	r5, r0, #4
 80060a8:	42a3      	cmp	r3, r4
 80060aa:	d30c      	bcc.n	80060c6 <__copybits+0x36>
 80060ac:	1aa3      	subs	r3, r4, r2
 80060ae:	3b11      	subs	r3, #17
 80060b0:	f023 0303 	bic.w	r3, r3, #3
 80060b4:	3211      	adds	r2, #17
 80060b6:	42a2      	cmp	r2, r4
 80060b8:	bf88      	it	hi
 80060ba:	2300      	movhi	r3, #0
 80060bc:	4418      	add	r0, r3
 80060be:	2300      	movs	r3, #0
 80060c0:	4288      	cmp	r0, r1
 80060c2:	d305      	bcc.n	80060d0 <__copybits+0x40>
 80060c4:	bd70      	pop	{r4, r5, r6, pc}
 80060c6:	f853 6b04 	ldr.w	r6, [r3], #4
 80060ca:	f845 6f04 	str.w	r6, [r5, #4]!
 80060ce:	e7eb      	b.n	80060a8 <__copybits+0x18>
 80060d0:	f840 3b04 	str.w	r3, [r0], #4
 80060d4:	e7f4      	b.n	80060c0 <__copybits+0x30>

080060d6 <__any_on>:
 80060d6:	f100 0214 	add.w	r2, r0, #20
 80060da:	6900      	ldr	r0, [r0, #16]
 80060dc:	114b      	asrs	r3, r1, #5
 80060de:	4298      	cmp	r0, r3
 80060e0:	b510      	push	{r4, lr}
 80060e2:	db11      	blt.n	8006108 <__any_on+0x32>
 80060e4:	dd0a      	ble.n	80060fc <__any_on+0x26>
 80060e6:	f011 011f 	ands.w	r1, r1, #31
 80060ea:	d007      	beq.n	80060fc <__any_on+0x26>
 80060ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80060f0:	fa24 f001 	lsr.w	r0, r4, r1
 80060f4:	fa00 f101 	lsl.w	r1, r0, r1
 80060f8:	428c      	cmp	r4, r1
 80060fa:	d10b      	bne.n	8006114 <__any_on+0x3e>
 80060fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006100:	4293      	cmp	r3, r2
 8006102:	d803      	bhi.n	800610c <__any_on+0x36>
 8006104:	2000      	movs	r0, #0
 8006106:	bd10      	pop	{r4, pc}
 8006108:	4603      	mov	r3, r0
 800610a:	e7f7      	b.n	80060fc <__any_on+0x26>
 800610c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006110:	2900      	cmp	r1, #0
 8006112:	d0f5      	beq.n	8006100 <__any_on+0x2a>
 8006114:	2001      	movs	r0, #1
 8006116:	e7f6      	b.n	8006106 <__any_on+0x30>

08006118 <_calloc_r>:
 8006118:	b570      	push	{r4, r5, r6, lr}
 800611a:	fba1 5402 	umull	r5, r4, r1, r2
 800611e:	b934      	cbnz	r4, 800612e <_calloc_r+0x16>
 8006120:	4629      	mov	r1, r5
 8006122:	f000 f82d 	bl	8006180 <_malloc_r>
 8006126:	4606      	mov	r6, r0
 8006128:	b928      	cbnz	r0, 8006136 <_calloc_r+0x1e>
 800612a:	4630      	mov	r0, r6
 800612c:	bd70      	pop	{r4, r5, r6, pc}
 800612e:	220c      	movs	r2, #12
 8006130:	2600      	movs	r6, #0
 8006132:	6002      	str	r2, [r0, #0]
 8006134:	e7f9      	b.n	800612a <_calloc_r+0x12>
 8006136:	462a      	mov	r2, r5
 8006138:	4621      	mov	r1, r4
 800613a:	f7fe f98b 	bl	8004454 <memset>
 800613e:	e7f4      	b.n	800612a <_calloc_r+0x12>

08006140 <sbrk_aligned>:
 8006140:	b570      	push	{r4, r5, r6, lr}
 8006142:	4e0e      	ldr	r6, [pc, #56]	; (800617c <sbrk_aligned+0x3c>)
 8006144:	460c      	mov	r4, r1
 8006146:	6831      	ldr	r1, [r6, #0]
 8006148:	4605      	mov	r5, r0
 800614a:	b911      	cbnz	r1, 8006152 <sbrk_aligned+0x12>
 800614c:	f000 f892 	bl	8006274 <_sbrk_r>
 8006150:	6030      	str	r0, [r6, #0]
 8006152:	4621      	mov	r1, r4
 8006154:	4628      	mov	r0, r5
 8006156:	f000 f88d 	bl	8006274 <_sbrk_r>
 800615a:	1c43      	adds	r3, r0, #1
 800615c:	d00a      	beq.n	8006174 <sbrk_aligned+0x34>
 800615e:	1cc4      	adds	r4, r0, #3
 8006160:	f024 0403 	bic.w	r4, r4, #3
 8006164:	42a0      	cmp	r0, r4
 8006166:	d007      	beq.n	8006178 <sbrk_aligned+0x38>
 8006168:	1a21      	subs	r1, r4, r0
 800616a:	4628      	mov	r0, r5
 800616c:	f000 f882 	bl	8006274 <_sbrk_r>
 8006170:	3001      	adds	r0, #1
 8006172:	d101      	bne.n	8006178 <sbrk_aligned+0x38>
 8006174:	f04f 34ff 	mov.w	r4, #4294967295
 8006178:	4620      	mov	r0, r4
 800617a:	bd70      	pop	{r4, r5, r6, pc}
 800617c:	20000708 	.word	0x20000708

08006180 <_malloc_r>:
 8006180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006184:	1ccd      	adds	r5, r1, #3
 8006186:	f025 0503 	bic.w	r5, r5, #3
 800618a:	3508      	adds	r5, #8
 800618c:	2d0c      	cmp	r5, #12
 800618e:	bf38      	it	cc
 8006190:	250c      	movcc	r5, #12
 8006192:	2d00      	cmp	r5, #0
 8006194:	4607      	mov	r7, r0
 8006196:	db01      	blt.n	800619c <_malloc_r+0x1c>
 8006198:	42a9      	cmp	r1, r5
 800619a:	d905      	bls.n	80061a8 <_malloc_r+0x28>
 800619c:	230c      	movs	r3, #12
 800619e:	2600      	movs	r6, #0
 80061a0:	603b      	str	r3, [r7, #0]
 80061a2:	4630      	mov	r0, r6
 80061a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061a8:	4e2e      	ldr	r6, [pc, #184]	; (8006264 <_malloc_r+0xe4>)
 80061aa:	f000 f8b9 	bl	8006320 <__malloc_lock>
 80061ae:	6833      	ldr	r3, [r6, #0]
 80061b0:	461c      	mov	r4, r3
 80061b2:	bb34      	cbnz	r4, 8006202 <_malloc_r+0x82>
 80061b4:	4629      	mov	r1, r5
 80061b6:	4638      	mov	r0, r7
 80061b8:	f7ff ffc2 	bl	8006140 <sbrk_aligned>
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	4604      	mov	r4, r0
 80061c0:	d14d      	bne.n	800625e <_malloc_r+0xde>
 80061c2:	6834      	ldr	r4, [r6, #0]
 80061c4:	4626      	mov	r6, r4
 80061c6:	2e00      	cmp	r6, #0
 80061c8:	d140      	bne.n	800624c <_malloc_r+0xcc>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	4631      	mov	r1, r6
 80061ce:	4638      	mov	r0, r7
 80061d0:	eb04 0803 	add.w	r8, r4, r3
 80061d4:	f000 f84e 	bl	8006274 <_sbrk_r>
 80061d8:	4580      	cmp	r8, r0
 80061da:	d13a      	bne.n	8006252 <_malloc_r+0xd2>
 80061dc:	6821      	ldr	r1, [r4, #0]
 80061de:	3503      	adds	r5, #3
 80061e0:	1a6d      	subs	r5, r5, r1
 80061e2:	f025 0503 	bic.w	r5, r5, #3
 80061e6:	3508      	adds	r5, #8
 80061e8:	2d0c      	cmp	r5, #12
 80061ea:	bf38      	it	cc
 80061ec:	250c      	movcc	r5, #12
 80061ee:	4638      	mov	r0, r7
 80061f0:	4629      	mov	r1, r5
 80061f2:	f7ff ffa5 	bl	8006140 <sbrk_aligned>
 80061f6:	3001      	adds	r0, #1
 80061f8:	d02b      	beq.n	8006252 <_malloc_r+0xd2>
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	442b      	add	r3, r5
 80061fe:	6023      	str	r3, [r4, #0]
 8006200:	e00e      	b.n	8006220 <_malloc_r+0xa0>
 8006202:	6822      	ldr	r2, [r4, #0]
 8006204:	1b52      	subs	r2, r2, r5
 8006206:	d41e      	bmi.n	8006246 <_malloc_r+0xc6>
 8006208:	2a0b      	cmp	r2, #11
 800620a:	d916      	bls.n	800623a <_malloc_r+0xba>
 800620c:	1961      	adds	r1, r4, r5
 800620e:	42a3      	cmp	r3, r4
 8006210:	6025      	str	r5, [r4, #0]
 8006212:	bf18      	it	ne
 8006214:	6059      	strne	r1, [r3, #4]
 8006216:	6863      	ldr	r3, [r4, #4]
 8006218:	bf08      	it	eq
 800621a:	6031      	streq	r1, [r6, #0]
 800621c:	5162      	str	r2, [r4, r5]
 800621e:	604b      	str	r3, [r1, #4]
 8006220:	4638      	mov	r0, r7
 8006222:	f104 060b 	add.w	r6, r4, #11
 8006226:	f000 f881 	bl	800632c <__malloc_unlock>
 800622a:	f026 0607 	bic.w	r6, r6, #7
 800622e:	1d23      	adds	r3, r4, #4
 8006230:	1af2      	subs	r2, r6, r3
 8006232:	d0b6      	beq.n	80061a2 <_malloc_r+0x22>
 8006234:	1b9b      	subs	r3, r3, r6
 8006236:	50a3      	str	r3, [r4, r2]
 8006238:	e7b3      	b.n	80061a2 <_malloc_r+0x22>
 800623a:	6862      	ldr	r2, [r4, #4]
 800623c:	42a3      	cmp	r3, r4
 800623e:	bf0c      	ite	eq
 8006240:	6032      	streq	r2, [r6, #0]
 8006242:	605a      	strne	r2, [r3, #4]
 8006244:	e7ec      	b.n	8006220 <_malloc_r+0xa0>
 8006246:	4623      	mov	r3, r4
 8006248:	6864      	ldr	r4, [r4, #4]
 800624a:	e7b2      	b.n	80061b2 <_malloc_r+0x32>
 800624c:	4634      	mov	r4, r6
 800624e:	6876      	ldr	r6, [r6, #4]
 8006250:	e7b9      	b.n	80061c6 <_malloc_r+0x46>
 8006252:	230c      	movs	r3, #12
 8006254:	4638      	mov	r0, r7
 8006256:	603b      	str	r3, [r7, #0]
 8006258:	f000 f868 	bl	800632c <__malloc_unlock>
 800625c:	e7a1      	b.n	80061a2 <_malloc_r+0x22>
 800625e:	6025      	str	r5, [r4, #0]
 8006260:	e7de      	b.n	8006220 <_malloc_r+0xa0>
 8006262:	bf00      	nop
 8006264:	20000704 	.word	0x20000704

08006268 <nan>:
 8006268:	2000      	movs	r0, #0
 800626a:	4901      	ldr	r1, [pc, #4]	; (8006270 <nan+0x8>)
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	7ff80000 	.word	0x7ff80000

08006274 <_sbrk_r>:
 8006274:	b538      	push	{r3, r4, r5, lr}
 8006276:	2300      	movs	r3, #0
 8006278:	4d05      	ldr	r5, [pc, #20]	; (8006290 <_sbrk_r+0x1c>)
 800627a:	4604      	mov	r4, r0
 800627c:	4608      	mov	r0, r1
 800627e:	602b      	str	r3, [r5, #0]
 8006280:	f7fc f8fc 	bl	800247c <_sbrk>
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	d102      	bne.n	800628e <_sbrk_r+0x1a>
 8006288:	682b      	ldr	r3, [r5, #0]
 800628a:	b103      	cbz	r3, 800628e <_sbrk_r+0x1a>
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	bd38      	pop	{r3, r4, r5, pc}
 8006290:	2000070c 	.word	0x2000070c

08006294 <__ascii_wctomb>:
 8006294:	4603      	mov	r3, r0
 8006296:	4608      	mov	r0, r1
 8006298:	b141      	cbz	r1, 80062ac <__ascii_wctomb+0x18>
 800629a:	2aff      	cmp	r2, #255	; 0xff
 800629c:	d904      	bls.n	80062a8 <__ascii_wctomb+0x14>
 800629e:	228a      	movs	r2, #138	; 0x8a
 80062a0:	f04f 30ff 	mov.w	r0, #4294967295
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	4770      	bx	lr
 80062a8:	2001      	movs	r0, #1
 80062aa:	700a      	strb	r2, [r1, #0]
 80062ac:	4770      	bx	lr
	...

080062b0 <__assert_func>:
 80062b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062b2:	4614      	mov	r4, r2
 80062b4:	461a      	mov	r2, r3
 80062b6:	4b09      	ldr	r3, [pc, #36]	; (80062dc <__assert_func+0x2c>)
 80062b8:	4605      	mov	r5, r0
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68d8      	ldr	r0, [r3, #12]
 80062be:	b14c      	cbz	r4, 80062d4 <__assert_func+0x24>
 80062c0:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <__assert_func+0x30>)
 80062c2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80062c6:	9100      	str	r1, [sp, #0]
 80062c8:	462b      	mov	r3, r5
 80062ca:	4906      	ldr	r1, [pc, #24]	; (80062e4 <__assert_func+0x34>)
 80062cc:	f000 f80e 	bl	80062ec <fiprintf>
 80062d0:	f000 fc28 	bl	8006b24 <abort>
 80062d4:	4b04      	ldr	r3, [pc, #16]	; (80062e8 <__assert_func+0x38>)
 80062d6:	461c      	mov	r4, r3
 80062d8:	e7f3      	b.n	80062c2 <__assert_func+0x12>
 80062da:	bf00      	nop
 80062dc:	200000fc 	.word	0x200000fc
 80062e0:	08007454 	.word	0x08007454
 80062e4:	08007461 	.word	0x08007461
 80062e8:	0800748f 	.word	0x0800748f

080062ec <fiprintf>:
 80062ec:	b40e      	push	{r1, r2, r3}
 80062ee:	b503      	push	{r0, r1, lr}
 80062f0:	4601      	mov	r1, r0
 80062f2:	ab03      	add	r3, sp, #12
 80062f4:	4805      	ldr	r0, [pc, #20]	; (800630c <fiprintf+0x20>)
 80062f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80062fa:	6800      	ldr	r0, [r0, #0]
 80062fc:	9301      	str	r3, [sp, #4]
 80062fe:	f000 f88b 	bl	8006418 <_vfiprintf_r>
 8006302:	b002      	add	sp, #8
 8006304:	f85d eb04 	ldr.w	lr, [sp], #4
 8006308:	b003      	add	sp, #12
 800630a:	4770      	bx	lr
 800630c:	200000fc 	.word	0x200000fc

08006310 <malloc>:
 8006310:	4b02      	ldr	r3, [pc, #8]	; (800631c <malloc+0xc>)
 8006312:	4601      	mov	r1, r0
 8006314:	6818      	ldr	r0, [r3, #0]
 8006316:	f7ff bf33 	b.w	8006180 <_malloc_r>
 800631a:	bf00      	nop
 800631c:	200000fc 	.word	0x200000fc

08006320 <__malloc_lock>:
 8006320:	4801      	ldr	r0, [pc, #4]	; (8006328 <__malloc_lock+0x8>)
 8006322:	f000 bdbb 	b.w	8006e9c <__retarget_lock_acquire_recursive>
 8006326:	bf00      	nop
 8006328:	20000710 	.word	0x20000710

0800632c <__malloc_unlock>:
 800632c:	4801      	ldr	r0, [pc, #4]	; (8006334 <__malloc_unlock+0x8>)
 800632e:	f000 bdb6 	b.w	8006e9e <__retarget_lock_release_recursive>
 8006332:	bf00      	nop
 8006334:	20000710 	.word	0x20000710

08006338 <_free_r>:
 8006338:	b538      	push	{r3, r4, r5, lr}
 800633a:	4605      	mov	r5, r0
 800633c:	2900      	cmp	r1, #0
 800633e:	d040      	beq.n	80063c2 <_free_r+0x8a>
 8006340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006344:	1f0c      	subs	r4, r1, #4
 8006346:	2b00      	cmp	r3, #0
 8006348:	bfb8      	it	lt
 800634a:	18e4      	addlt	r4, r4, r3
 800634c:	f7ff ffe8 	bl	8006320 <__malloc_lock>
 8006350:	4a1c      	ldr	r2, [pc, #112]	; (80063c4 <_free_r+0x8c>)
 8006352:	6813      	ldr	r3, [r2, #0]
 8006354:	b933      	cbnz	r3, 8006364 <_free_r+0x2c>
 8006356:	6063      	str	r3, [r4, #4]
 8006358:	6014      	str	r4, [r2, #0]
 800635a:	4628      	mov	r0, r5
 800635c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006360:	f7ff bfe4 	b.w	800632c <__malloc_unlock>
 8006364:	42a3      	cmp	r3, r4
 8006366:	d908      	bls.n	800637a <_free_r+0x42>
 8006368:	6820      	ldr	r0, [r4, #0]
 800636a:	1821      	adds	r1, r4, r0
 800636c:	428b      	cmp	r3, r1
 800636e:	bf01      	itttt	eq
 8006370:	6819      	ldreq	r1, [r3, #0]
 8006372:	685b      	ldreq	r3, [r3, #4]
 8006374:	1809      	addeq	r1, r1, r0
 8006376:	6021      	streq	r1, [r4, #0]
 8006378:	e7ed      	b.n	8006356 <_free_r+0x1e>
 800637a:	461a      	mov	r2, r3
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	b10b      	cbz	r3, 8006384 <_free_r+0x4c>
 8006380:	42a3      	cmp	r3, r4
 8006382:	d9fa      	bls.n	800637a <_free_r+0x42>
 8006384:	6811      	ldr	r1, [r2, #0]
 8006386:	1850      	adds	r0, r2, r1
 8006388:	42a0      	cmp	r0, r4
 800638a:	d10b      	bne.n	80063a4 <_free_r+0x6c>
 800638c:	6820      	ldr	r0, [r4, #0]
 800638e:	4401      	add	r1, r0
 8006390:	1850      	adds	r0, r2, r1
 8006392:	4283      	cmp	r3, r0
 8006394:	6011      	str	r1, [r2, #0]
 8006396:	d1e0      	bne.n	800635a <_free_r+0x22>
 8006398:	6818      	ldr	r0, [r3, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	4401      	add	r1, r0
 800639e:	6011      	str	r1, [r2, #0]
 80063a0:	6053      	str	r3, [r2, #4]
 80063a2:	e7da      	b.n	800635a <_free_r+0x22>
 80063a4:	d902      	bls.n	80063ac <_free_r+0x74>
 80063a6:	230c      	movs	r3, #12
 80063a8:	602b      	str	r3, [r5, #0]
 80063aa:	e7d6      	b.n	800635a <_free_r+0x22>
 80063ac:	6820      	ldr	r0, [r4, #0]
 80063ae:	1821      	adds	r1, r4, r0
 80063b0:	428b      	cmp	r3, r1
 80063b2:	bf01      	itttt	eq
 80063b4:	6819      	ldreq	r1, [r3, #0]
 80063b6:	685b      	ldreq	r3, [r3, #4]
 80063b8:	1809      	addeq	r1, r1, r0
 80063ba:	6021      	streq	r1, [r4, #0]
 80063bc:	6063      	str	r3, [r4, #4]
 80063be:	6054      	str	r4, [r2, #4]
 80063c0:	e7cb      	b.n	800635a <_free_r+0x22>
 80063c2:	bd38      	pop	{r3, r4, r5, pc}
 80063c4:	20000704 	.word	0x20000704

080063c8 <__sfputc_r>:
 80063c8:	6893      	ldr	r3, [r2, #8]
 80063ca:	b410      	push	{r4}
 80063cc:	3b01      	subs	r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	6093      	str	r3, [r2, #8]
 80063d2:	da07      	bge.n	80063e4 <__sfputc_r+0x1c>
 80063d4:	6994      	ldr	r4, [r2, #24]
 80063d6:	42a3      	cmp	r3, r4
 80063d8:	db01      	blt.n	80063de <__sfputc_r+0x16>
 80063da:	290a      	cmp	r1, #10
 80063dc:	d102      	bne.n	80063e4 <__sfputc_r+0x1c>
 80063de:	bc10      	pop	{r4}
 80063e0:	f000 bae0 	b.w	80069a4 <__swbuf_r>
 80063e4:	6813      	ldr	r3, [r2, #0]
 80063e6:	1c58      	adds	r0, r3, #1
 80063e8:	6010      	str	r0, [r2, #0]
 80063ea:	7019      	strb	r1, [r3, #0]
 80063ec:	4608      	mov	r0, r1
 80063ee:	bc10      	pop	{r4}
 80063f0:	4770      	bx	lr

080063f2 <__sfputs_r>:
 80063f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f4:	4606      	mov	r6, r0
 80063f6:	460f      	mov	r7, r1
 80063f8:	4614      	mov	r4, r2
 80063fa:	18d5      	adds	r5, r2, r3
 80063fc:	42ac      	cmp	r4, r5
 80063fe:	d101      	bne.n	8006404 <__sfputs_r+0x12>
 8006400:	2000      	movs	r0, #0
 8006402:	e007      	b.n	8006414 <__sfputs_r+0x22>
 8006404:	463a      	mov	r2, r7
 8006406:	4630      	mov	r0, r6
 8006408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800640c:	f7ff ffdc 	bl	80063c8 <__sfputc_r>
 8006410:	1c43      	adds	r3, r0, #1
 8006412:	d1f3      	bne.n	80063fc <__sfputs_r+0xa>
 8006414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006418 <_vfiprintf_r>:
 8006418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641c:	460d      	mov	r5, r1
 800641e:	4614      	mov	r4, r2
 8006420:	4698      	mov	r8, r3
 8006422:	4606      	mov	r6, r0
 8006424:	b09d      	sub	sp, #116	; 0x74
 8006426:	b118      	cbz	r0, 8006430 <_vfiprintf_r+0x18>
 8006428:	6983      	ldr	r3, [r0, #24]
 800642a:	b90b      	cbnz	r3, 8006430 <_vfiprintf_r+0x18>
 800642c:	f000 fc98 	bl	8006d60 <__sinit>
 8006430:	4b89      	ldr	r3, [pc, #548]	; (8006658 <_vfiprintf_r+0x240>)
 8006432:	429d      	cmp	r5, r3
 8006434:	d11b      	bne.n	800646e <_vfiprintf_r+0x56>
 8006436:	6875      	ldr	r5, [r6, #4]
 8006438:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800643a:	07d9      	lsls	r1, r3, #31
 800643c:	d405      	bmi.n	800644a <_vfiprintf_r+0x32>
 800643e:	89ab      	ldrh	r3, [r5, #12]
 8006440:	059a      	lsls	r2, r3, #22
 8006442:	d402      	bmi.n	800644a <_vfiprintf_r+0x32>
 8006444:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006446:	f000 fd29 	bl	8006e9c <__retarget_lock_acquire_recursive>
 800644a:	89ab      	ldrh	r3, [r5, #12]
 800644c:	071b      	lsls	r3, r3, #28
 800644e:	d501      	bpl.n	8006454 <_vfiprintf_r+0x3c>
 8006450:	692b      	ldr	r3, [r5, #16]
 8006452:	b9eb      	cbnz	r3, 8006490 <_vfiprintf_r+0x78>
 8006454:	4629      	mov	r1, r5
 8006456:	4630      	mov	r0, r6
 8006458:	f000 faf6 	bl	8006a48 <__swsetup_r>
 800645c:	b1c0      	cbz	r0, 8006490 <_vfiprintf_r+0x78>
 800645e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006460:	07dc      	lsls	r4, r3, #31
 8006462:	d50e      	bpl.n	8006482 <_vfiprintf_r+0x6a>
 8006464:	f04f 30ff 	mov.w	r0, #4294967295
 8006468:	b01d      	add	sp, #116	; 0x74
 800646a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800646e:	4b7b      	ldr	r3, [pc, #492]	; (800665c <_vfiprintf_r+0x244>)
 8006470:	429d      	cmp	r5, r3
 8006472:	d101      	bne.n	8006478 <_vfiprintf_r+0x60>
 8006474:	68b5      	ldr	r5, [r6, #8]
 8006476:	e7df      	b.n	8006438 <_vfiprintf_r+0x20>
 8006478:	4b79      	ldr	r3, [pc, #484]	; (8006660 <_vfiprintf_r+0x248>)
 800647a:	429d      	cmp	r5, r3
 800647c:	bf08      	it	eq
 800647e:	68f5      	ldreq	r5, [r6, #12]
 8006480:	e7da      	b.n	8006438 <_vfiprintf_r+0x20>
 8006482:	89ab      	ldrh	r3, [r5, #12]
 8006484:	0598      	lsls	r0, r3, #22
 8006486:	d4ed      	bmi.n	8006464 <_vfiprintf_r+0x4c>
 8006488:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800648a:	f000 fd08 	bl	8006e9e <__retarget_lock_release_recursive>
 800648e:	e7e9      	b.n	8006464 <_vfiprintf_r+0x4c>
 8006490:	2300      	movs	r3, #0
 8006492:	9309      	str	r3, [sp, #36]	; 0x24
 8006494:	2320      	movs	r3, #32
 8006496:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800649a:	2330      	movs	r3, #48	; 0x30
 800649c:	f04f 0901 	mov.w	r9, #1
 80064a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80064a4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006664 <_vfiprintf_r+0x24c>
 80064a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064ac:	4623      	mov	r3, r4
 80064ae:	469a      	mov	sl, r3
 80064b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064b4:	b10a      	cbz	r2, 80064ba <_vfiprintf_r+0xa2>
 80064b6:	2a25      	cmp	r2, #37	; 0x25
 80064b8:	d1f9      	bne.n	80064ae <_vfiprintf_r+0x96>
 80064ba:	ebba 0b04 	subs.w	fp, sl, r4
 80064be:	d00b      	beq.n	80064d8 <_vfiprintf_r+0xc0>
 80064c0:	465b      	mov	r3, fp
 80064c2:	4622      	mov	r2, r4
 80064c4:	4629      	mov	r1, r5
 80064c6:	4630      	mov	r0, r6
 80064c8:	f7ff ff93 	bl	80063f2 <__sfputs_r>
 80064cc:	3001      	adds	r0, #1
 80064ce:	f000 80aa 	beq.w	8006626 <_vfiprintf_r+0x20e>
 80064d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064d4:	445a      	add	r2, fp
 80064d6:	9209      	str	r2, [sp, #36]	; 0x24
 80064d8:	f89a 3000 	ldrb.w	r3, [sl]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 80a2 	beq.w	8006626 <_vfiprintf_r+0x20e>
 80064e2:	2300      	movs	r3, #0
 80064e4:	f04f 32ff 	mov.w	r2, #4294967295
 80064e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064ec:	f10a 0a01 	add.w	sl, sl, #1
 80064f0:	9304      	str	r3, [sp, #16]
 80064f2:	9307      	str	r3, [sp, #28]
 80064f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064f8:	931a      	str	r3, [sp, #104]	; 0x68
 80064fa:	4654      	mov	r4, sl
 80064fc:	2205      	movs	r2, #5
 80064fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006502:	4858      	ldr	r0, [pc, #352]	; (8006664 <_vfiprintf_r+0x24c>)
 8006504:	f000 fd32 	bl	8006f6c <memchr>
 8006508:	9a04      	ldr	r2, [sp, #16]
 800650a:	b9d8      	cbnz	r0, 8006544 <_vfiprintf_r+0x12c>
 800650c:	06d1      	lsls	r1, r2, #27
 800650e:	bf44      	itt	mi
 8006510:	2320      	movmi	r3, #32
 8006512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006516:	0713      	lsls	r3, r2, #28
 8006518:	bf44      	itt	mi
 800651a:	232b      	movmi	r3, #43	; 0x2b
 800651c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006520:	f89a 3000 	ldrb.w	r3, [sl]
 8006524:	2b2a      	cmp	r3, #42	; 0x2a
 8006526:	d015      	beq.n	8006554 <_vfiprintf_r+0x13c>
 8006528:	4654      	mov	r4, sl
 800652a:	2000      	movs	r0, #0
 800652c:	f04f 0c0a 	mov.w	ip, #10
 8006530:	9a07      	ldr	r2, [sp, #28]
 8006532:	4621      	mov	r1, r4
 8006534:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006538:	3b30      	subs	r3, #48	; 0x30
 800653a:	2b09      	cmp	r3, #9
 800653c:	d94e      	bls.n	80065dc <_vfiprintf_r+0x1c4>
 800653e:	b1b0      	cbz	r0, 800656e <_vfiprintf_r+0x156>
 8006540:	9207      	str	r2, [sp, #28]
 8006542:	e014      	b.n	800656e <_vfiprintf_r+0x156>
 8006544:	eba0 0308 	sub.w	r3, r0, r8
 8006548:	fa09 f303 	lsl.w	r3, r9, r3
 800654c:	4313      	orrs	r3, r2
 800654e:	46a2      	mov	sl, r4
 8006550:	9304      	str	r3, [sp, #16]
 8006552:	e7d2      	b.n	80064fa <_vfiprintf_r+0xe2>
 8006554:	9b03      	ldr	r3, [sp, #12]
 8006556:	1d19      	adds	r1, r3, #4
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	9103      	str	r1, [sp, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	bfbb      	ittet	lt
 8006560:	425b      	neglt	r3, r3
 8006562:	f042 0202 	orrlt.w	r2, r2, #2
 8006566:	9307      	strge	r3, [sp, #28]
 8006568:	9307      	strlt	r3, [sp, #28]
 800656a:	bfb8      	it	lt
 800656c:	9204      	strlt	r2, [sp, #16]
 800656e:	7823      	ldrb	r3, [r4, #0]
 8006570:	2b2e      	cmp	r3, #46	; 0x2e
 8006572:	d10c      	bne.n	800658e <_vfiprintf_r+0x176>
 8006574:	7863      	ldrb	r3, [r4, #1]
 8006576:	2b2a      	cmp	r3, #42	; 0x2a
 8006578:	d135      	bne.n	80065e6 <_vfiprintf_r+0x1ce>
 800657a:	9b03      	ldr	r3, [sp, #12]
 800657c:	3402      	adds	r4, #2
 800657e:	1d1a      	adds	r2, r3, #4
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	9203      	str	r2, [sp, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	bfb8      	it	lt
 8006588:	f04f 33ff 	movlt.w	r3, #4294967295
 800658c:	9305      	str	r3, [sp, #20]
 800658e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006668 <_vfiprintf_r+0x250>
 8006592:	2203      	movs	r2, #3
 8006594:	4650      	mov	r0, sl
 8006596:	7821      	ldrb	r1, [r4, #0]
 8006598:	f000 fce8 	bl	8006f6c <memchr>
 800659c:	b140      	cbz	r0, 80065b0 <_vfiprintf_r+0x198>
 800659e:	2340      	movs	r3, #64	; 0x40
 80065a0:	eba0 000a 	sub.w	r0, r0, sl
 80065a4:	fa03 f000 	lsl.w	r0, r3, r0
 80065a8:	9b04      	ldr	r3, [sp, #16]
 80065aa:	3401      	adds	r4, #1
 80065ac:	4303      	orrs	r3, r0
 80065ae:	9304      	str	r3, [sp, #16]
 80065b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b4:	2206      	movs	r2, #6
 80065b6:	482d      	ldr	r0, [pc, #180]	; (800666c <_vfiprintf_r+0x254>)
 80065b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065bc:	f000 fcd6 	bl	8006f6c <memchr>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d03f      	beq.n	8006644 <_vfiprintf_r+0x22c>
 80065c4:	4b2a      	ldr	r3, [pc, #168]	; (8006670 <_vfiprintf_r+0x258>)
 80065c6:	bb1b      	cbnz	r3, 8006610 <_vfiprintf_r+0x1f8>
 80065c8:	9b03      	ldr	r3, [sp, #12]
 80065ca:	3307      	adds	r3, #7
 80065cc:	f023 0307 	bic.w	r3, r3, #7
 80065d0:	3308      	adds	r3, #8
 80065d2:	9303      	str	r3, [sp, #12]
 80065d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065d6:	443b      	add	r3, r7
 80065d8:	9309      	str	r3, [sp, #36]	; 0x24
 80065da:	e767      	b.n	80064ac <_vfiprintf_r+0x94>
 80065dc:	460c      	mov	r4, r1
 80065de:	2001      	movs	r0, #1
 80065e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80065e4:	e7a5      	b.n	8006532 <_vfiprintf_r+0x11a>
 80065e6:	2300      	movs	r3, #0
 80065e8:	f04f 0c0a 	mov.w	ip, #10
 80065ec:	4619      	mov	r1, r3
 80065ee:	3401      	adds	r4, #1
 80065f0:	9305      	str	r3, [sp, #20]
 80065f2:	4620      	mov	r0, r4
 80065f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065f8:	3a30      	subs	r2, #48	; 0x30
 80065fa:	2a09      	cmp	r2, #9
 80065fc:	d903      	bls.n	8006606 <_vfiprintf_r+0x1ee>
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0c5      	beq.n	800658e <_vfiprintf_r+0x176>
 8006602:	9105      	str	r1, [sp, #20]
 8006604:	e7c3      	b.n	800658e <_vfiprintf_r+0x176>
 8006606:	4604      	mov	r4, r0
 8006608:	2301      	movs	r3, #1
 800660a:	fb0c 2101 	mla	r1, ip, r1, r2
 800660e:	e7f0      	b.n	80065f2 <_vfiprintf_r+0x1da>
 8006610:	ab03      	add	r3, sp, #12
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	462a      	mov	r2, r5
 8006616:	4630      	mov	r0, r6
 8006618:	4b16      	ldr	r3, [pc, #88]	; (8006674 <_vfiprintf_r+0x25c>)
 800661a:	a904      	add	r1, sp, #16
 800661c:	f3af 8000 	nop.w
 8006620:	4607      	mov	r7, r0
 8006622:	1c78      	adds	r0, r7, #1
 8006624:	d1d6      	bne.n	80065d4 <_vfiprintf_r+0x1bc>
 8006626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006628:	07d9      	lsls	r1, r3, #31
 800662a:	d405      	bmi.n	8006638 <_vfiprintf_r+0x220>
 800662c:	89ab      	ldrh	r3, [r5, #12]
 800662e:	059a      	lsls	r2, r3, #22
 8006630:	d402      	bmi.n	8006638 <_vfiprintf_r+0x220>
 8006632:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006634:	f000 fc33 	bl	8006e9e <__retarget_lock_release_recursive>
 8006638:	89ab      	ldrh	r3, [r5, #12]
 800663a:	065b      	lsls	r3, r3, #25
 800663c:	f53f af12 	bmi.w	8006464 <_vfiprintf_r+0x4c>
 8006640:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006642:	e711      	b.n	8006468 <_vfiprintf_r+0x50>
 8006644:	ab03      	add	r3, sp, #12
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	462a      	mov	r2, r5
 800664a:	4630      	mov	r0, r6
 800664c:	4b09      	ldr	r3, [pc, #36]	; (8006674 <_vfiprintf_r+0x25c>)
 800664e:	a904      	add	r1, sp, #16
 8006650:	f000 f882 	bl	8006758 <_printf_i>
 8006654:	e7e4      	b.n	8006620 <_vfiprintf_r+0x208>
 8006656:	bf00      	nop
 8006658:	080075e4 	.word	0x080075e4
 800665c:	08007604 	.word	0x08007604
 8006660:	080075c4 	.word	0x080075c4
 8006664:	08007591 	.word	0x08007591
 8006668:	08007597 	.word	0x08007597
 800666c:	0800759b 	.word	0x0800759b
 8006670:	00000000 	.word	0x00000000
 8006674:	080063f3 	.word	0x080063f3

08006678 <_printf_common>:
 8006678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800667c:	4616      	mov	r6, r2
 800667e:	4699      	mov	r9, r3
 8006680:	688a      	ldr	r2, [r1, #8]
 8006682:	690b      	ldr	r3, [r1, #16]
 8006684:	4607      	mov	r7, r0
 8006686:	4293      	cmp	r3, r2
 8006688:	bfb8      	it	lt
 800668a:	4613      	movlt	r3, r2
 800668c:	6033      	str	r3, [r6, #0]
 800668e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006692:	460c      	mov	r4, r1
 8006694:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006698:	b10a      	cbz	r2, 800669e <_printf_common+0x26>
 800669a:	3301      	adds	r3, #1
 800669c:	6033      	str	r3, [r6, #0]
 800669e:	6823      	ldr	r3, [r4, #0]
 80066a0:	0699      	lsls	r1, r3, #26
 80066a2:	bf42      	ittt	mi
 80066a4:	6833      	ldrmi	r3, [r6, #0]
 80066a6:	3302      	addmi	r3, #2
 80066a8:	6033      	strmi	r3, [r6, #0]
 80066aa:	6825      	ldr	r5, [r4, #0]
 80066ac:	f015 0506 	ands.w	r5, r5, #6
 80066b0:	d106      	bne.n	80066c0 <_printf_common+0x48>
 80066b2:	f104 0a19 	add.w	sl, r4, #25
 80066b6:	68e3      	ldr	r3, [r4, #12]
 80066b8:	6832      	ldr	r2, [r6, #0]
 80066ba:	1a9b      	subs	r3, r3, r2
 80066bc:	42ab      	cmp	r3, r5
 80066be:	dc28      	bgt.n	8006712 <_printf_common+0x9a>
 80066c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066c4:	1e13      	subs	r3, r2, #0
 80066c6:	6822      	ldr	r2, [r4, #0]
 80066c8:	bf18      	it	ne
 80066ca:	2301      	movne	r3, #1
 80066cc:	0692      	lsls	r2, r2, #26
 80066ce:	d42d      	bmi.n	800672c <_printf_common+0xb4>
 80066d0:	4649      	mov	r1, r9
 80066d2:	4638      	mov	r0, r7
 80066d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066d8:	47c0      	blx	r8
 80066da:	3001      	adds	r0, #1
 80066dc:	d020      	beq.n	8006720 <_printf_common+0xa8>
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	68e5      	ldr	r5, [r4, #12]
 80066e2:	f003 0306 	and.w	r3, r3, #6
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	bf18      	it	ne
 80066ea:	2500      	movne	r5, #0
 80066ec:	6832      	ldr	r2, [r6, #0]
 80066ee:	f04f 0600 	mov.w	r6, #0
 80066f2:	68a3      	ldr	r3, [r4, #8]
 80066f4:	bf08      	it	eq
 80066f6:	1aad      	subeq	r5, r5, r2
 80066f8:	6922      	ldr	r2, [r4, #16]
 80066fa:	bf08      	it	eq
 80066fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006700:	4293      	cmp	r3, r2
 8006702:	bfc4      	itt	gt
 8006704:	1a9b      	subgt	r3, r3, r2
 8006706:	18ed      	addgt	r5, r5, r3
 8006708:	341a      	adds	r4, #26
 800670a:	42b5      	cmp	r5, r6
 800670c:	d11a      	bne.n	8006744 <_printf_common+0xcc>
 800670e:	2000      	movs	r0, #0
 8006710:	e008      	b.n	8006724 <_printf_common+0xac>
 8006712:	2301      	movs	r3, #1
 8006714:	4652      	mov	r2, sl
 8006716:	4649      	mov	r1, r9
 8006718:	4638      	mov	r0, r7
 800671a:	47c0      	blx	r8
 800671c:	3001      	adds	r0, #1
 800671e:	d103      	bne.n	8006728 <_printf_common+0xb0>
 8006720:	f04f 30ff 	mov.w	r0, #4294967295
 8006724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006728:	3501      	adds	r5, #1
 800672a:	e7c4      	b.n	80066b6 <_printf_common+0x3e>
 800672c:	2030      	movs	r0, #48	; 0x30
 800672e:	18e1      	adds	r1, r4, r3
 8006730:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800673a:	4422      	add	r2, r4
 800673c:	3302      	adds	r3, #2
 800673e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006742:	e7c5      	b.n	80066d0 <_printf_common+0x58>
 8006744:	2301      	movs	r3, #1
 8006746:	4622      	mov	r2, r4
 8006748:	4649      	mov	r1, r9
 800674a:	4638      	mov	r0, r7
 800674c:	47c0      	blx	r8
 800674e:	3001      	adds	r0, #1
 8006750:	d0e6      	beq.n	8006720 <_printf_common+0xa8>
 8006752:	3601      	adds	r6, #1
 8006754:	e7d9      	b.n	800670a <_printf_common+0x92>
	...

08006758 <_printf_i>:
 8006758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800675c:	7e0f      	ldrb	r7, [r1, #24]
 800675e:	4691      	mov	r9, r2
 8006760:	2f78      	cmp	r7, #120	; 0x78
 8006762:	4680      	mov	r8, r0
 8006764:	460c      	mov	r4, r1
 8006766:	469a      	mov	sl, r3
 8006768:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800676a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800676e:	d807      	bhi.n	8006780 <_printf_i+0x28>
 8006770:	2f62      	cmp	r7, #98	; 0x62
 8006772:	d80a      	bhi.n	800678a <_printf_i+0x32>
 8006774:	2f00      	cmp	r7, #0
 8006776:	f000 80d9 	beq.w	800692c <_printf_i+0x1d4>
 800677a:	2f58      	cmp	r7, #88	; 0x58
 800677c:	f000 80a4 	beq.w	80068c8 <_printf_i+0x170>
 8006780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006784:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006788:	e03a      	b.n	8006800 <_printf_i+0xa8>
 800678a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800678e:	2b15      	cmp	r3, #21
 8006790:	d8f6      	bhi.n	8006780 <_printf_i+0x28>
 8006792:	a101      	add	r1, pc, #4	; (adr r1, 8006798 <_printf_i+0x40>)
 8006794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006798:	080067f1 	.word	0x080067f1
 800679c:	08006805 	.word	0x08006805
 80067a0:	08006781 	.word	0x08006781
 80067a4:	08006781 	.word	0x08006781
 80067a8:	08006781 	.word	0x08006781
 80067ac:	08006781 	.word	0x08006781
 80067b0:	08006805 	.word	0x08006805
 80067b4:	08006781 	.word	0x08006781
 80067b8:	08006781 	.word	0x08006781
 80067bc:	08006781 	.word	0x08006781
 80067c0:	08006781 	.word	0x08006781
 80067c4:	08006913 	.word	0x08006913
 80067c8:	08006835 	.word	0x08006835
 80067cc:	080068f5 	.word	0x080068f5
 80067d0:	08006781 	.word	0x08006781
 80067d4:	08006781 	.word	0x08006781
 80067d8:	08006935 	.word	0x08006935
 80067dc:	08006781 	.word	0x08006781
 80067e0:	08006835 	.word	0x08006835
 80067e4:	08006781 	.word	0x08006781
 80067e8:	08006781 	.word	0x08006781
 80067ec:	080068fd 	.word	0x080068fd
 80067f0:	682b      	ldr	r3, [r5, #0]
 80067f2:	1d1a      	adds	r2, r3, #4
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	602a      	str	r2, [r5, #0]
 80067f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006800:	2301      	movs	r3, #1
 8006802:	e0a4      	b.n	800694e <_printf_i+0x1f6>
 8006804:	6820      	ldr	r0, [r4, #0]
 8006806:	6829      	ldr	r1, [r5, #0]
 8006808:	0606      	lsls	r6, r0, #24
 800680a:	f101 0304 	add.w	r3, r1, #4
 800680e:	d50a      	bpl.n	8006826 <_printf_i+0xce>
 8006810:	680e      	ldr	r6, [r1, #0]
 8006812:	602b      	str	r3, [r5, #0]
 8006814:	2e00      	cmp	r6, #0
 8006816:	da03      	bge.n	8006820 <_printf_i+0xc8>
 8006818:	232d      	movs	r3, #45	; 0x2d
 800681a:	4276      	negs	r6, r6
 800681c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006820:	230a      	movs	r3, #10
 8006822:	485e      	ldr	r0, [pc, #376]	; (800699c <_printf_i+0x244>)
 8006824:	e019      	b.n	800685a <_printf_i+0x102>
 8006826:	680e      	ldr	r6, [r1, #0]
 8006828:	f010 0f40 	tst.w	r0, #64	; 0x40
 800682c:	602b      	str	r3, [r5, #0]
 800682e:	bf18      	it	ne
 8006830:	b236      	sxthne	r6, r6
 8006832:	e7ef      	b.n	8006814 <_printf_i+0xbc>
 8006834:	682b      	ldr	r3, [r5, #0]
 8006836:	6820      	ldr	r0, [r4, #0]
 8006838:	1d19      	adds	r1, r3, #4
 800683a:	6029      	str	r1, [r5, #0]
 800683c:	0601      	lsls	r1, r0, #24
 800683e:	d501      	bpl.n	8006844 <_printf_i+0xec>
 8006840:	681e      	ldr	r6, [r3, #0]
 8006842:	e002      	b.n	800684a <_printf_i+0xf2>
 8006844:	0646      	lsls	r6, r0, #25
 8006846:	d5fb      	bpl.n	8006840 <_printf_i+0xe8>
 8006848:	881e      	ldrh	r6, [r3, #0]
 800684a:	2f6f      	cmp	r7, #111	; 0x6f
 800684c:	bf0c      	ite	eq
 800684e:	2308      	moveq	r3, #8
 8006850:	230a      	movne	r3, #10
 8006852:	4852      	ldr	r0, [pc, #328]	; (800699c <_printf_i+0x244>)
 8006854:	2100      	movs	r1, #0
 8006856:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800685a:	6865      	ldr	r5, [r4, #4]
 800685c:	2d00      	cmp	r5, #0
 800685e:	bfa8      	it	ge
 8006860:	6821      	ldrge	r1, [r4, #0]
 8006862:	60a5      	str	r5, [r4, #8]
 8006864:	bfa4      	itt	ge
 8006866:	f021 0104 	bicge.w	r1, r1, #4
 800686a:	6021      	strge	r1, [r4, #0]
 800686c:	b90e      	cbnz	r6, 8006872 <_printf_i+0x11a>
 800686e:	2d00      	cmp	r5, #0
 8006870:	d04d      	beq.n	800690e <_printf_i+0x1b6>
 8006872:	4615      	mov	r5, r2
 8006874:	fbb6 f1f3 	udiv	r1, r6, r3
 8006878:	fb03 6711 	mls	r7, r3, r1, r6
 800687c:	5dc7      	ldrb	r7, [r0, r7]
 800687e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006882:	4637      	mov	r7, r6
 8006884:	42bb      	cmp	r3, r7
 8006886:	460e      	mov	r6, r1
 8006888:	d9f4      	bls.n	8006874 <_printf_i+0x11c>
 800688a:	2b08      	cmp	r3, #8
 800688c:	d10b      	bne.n	80068a6 <_printf_i+0x14e>
 800688e:	6823      	ldr	r3, [r4, #0]
 8006890:	07de      	lsls	r6, r3, #31
 8006892:	d508      	bpl.n	80068a6 <_printf_i+0x14e>
 8006894:	6923      	ldr	r3, [r4, #16]
 8006896:	6861      	ldr	r1, [r4, #4]
 8006898:	4299      	cmp	r1, r3
 800689a:	bfde      	ittt	le
 800689c:	2330      	movle	r3, #48	; 0x30
 800689e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068a6:	1b52      	subs	r2, r2, r5
 80068a8:	6122      	str	r2, [r4, #16]
 80068aa:	464b      	mov	r3, r9
 80068ac:	4621      	mov	r1, r4
 80068ae:	4640      	mov	r0, r8
 80068b0:	f8cd a000 	str.w	sl, [sp]
 80068b4:	aa03      	add	r2, sp, #12
 80068b6:	f7ff fedf 	bl	8006678 <_printf_common>
 80068ba:	3001      	adds	r0, #1
 80068bc:	d14c      	bne.n	8006958 <_printf_i+0x200>
 80068be:	f04f 30ff 	mov.w	r0, #4294967295
 80068c2:	b004      	add	sp, #16
 80068c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c8:	4834      	ldr	r0, [pc, #208]	; (800699c <_printf_i+0x244>)
 80068ca:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068ce:	6829      	ldr	r1, [r5, #0]
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	f851 6b04 	ldr.w	r6, [r1], #4
 80068d6:	6029      	str	r1, [r5, #0]
 80068d8:	061d      	lsls	r5, r3, #24
 80068da:	d514      	bpl.n	8006906 <_printf_i+0x1ae>
 80068dc:	07df      	lsls	r7, r3, #31
 80068de:	bf44      	itt	mi
 80068e0:	f043 0320 	orrmi.w	r3, r3, #32
 80068e4:	6023      	strmi	r3, [r4, #0]
 80068e6:	b91e      	cbnz	r6, 80068f0 <_printf_i+0x198>
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	f023 0320 	bic.w	r3, r3, #32
 80068ee:	6023      	str	r3, [r4, #0]
 80068f0:	2310      	movs	r3, #16
 80068f2:	e7af      	b.n	8006854 <_printf_i+0xfc>
 80068f4:	6823      	ldr	r3, [r4, #0]
 80068f6:	f043 0320 	orr.w	r3, r3, #32
 80068fa:	6023      	str	r3, [r4, #0]
 80068fc:	2378      	movs	r3, #120	; 0x78
 80068fe:	4828      	ldr	r0, [pc, #160]	; (80069a0 <_printf_i+0x248>)
 8006900:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006904:	e7e3      	b.n	80068ce <_printf_i+0x176>
 8006906:	0659      	lsls	r1, r3, #25
 8006908:	bf48      	it	mi
 800690a:	b2b6      	uxthmi	r6, r6
 800690c:	e7e6      	b.n	80068dc <_printf_i+0x184>
 800690e:	4615      	mov	r5, r2
 8006910:	e7bb      	b.n	800688a <_printf_i+0x132>
 8006912:	682b      	ldr	r3, [r5, #0]
 8006914:	6826      	ldr	r6, [r4, #0]
 8006916:	1d18      	adds	r0, r3, #4
 8006918:	6961      	ldr	r1, [r4, #20]
 800691a:	6028      	str	r0, [r5, #0]
 800691c:	0635      	lsls	r5, r6, #24
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	d501      	bpl.n	8006926 <_printf_i+0x1ce>
 8006922:	6019      	str	r1, [r3, #0]
 8006924:	e002      	b.n	800692c <_printf_i+0x1d4>
 8006926:	0670      	lsls	r0, r6, #25
 8006928:	d5fb      	bpl.n	8006922 <_printf_i+0x1ca>
 800692a:	8019      	strh	r1, [r3, #0]
 800692c:	2300      	movs	r3, #0
 800692e:	4615      	mov	r5, r2
 8006930:	6123      	str	r3, [r4, #16]
 8006932:	e7ba      	b.n	80068aa <_printf_i+0x152>
 8006934:	682b      	ldr	r3, [r5, #0]
 8006936:	2100      	movs	r1, #0
 8006938:	1d1a      	adds	r2, r3, #4
 800693a:	602a      	str	r2, [r5, #0]
 800693c:	681d      	ldr	r5, [r3, #0]
 800693e:	6862      	ldr	r2, [r4, #4]
 8006940:	4628      	mov	r0, r5
 8006942:	f000 fb13 	bl	8006f6c <memchr>
 8006946:	b108      	cbz	r0, 800694c <_printf_i+0x1f4>
 8006948:	1b40      	subs	r0, r0, r5
 800694a:	6060      	str	r0, [r4, #4]
 800694c:	6863      	ldr	r3, [r4, #4]
 800694e:	6123      	str	r3, [r4, #16]
 8006950:	2300      	movs	r3, #0
 8006952:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006956:	e7a8      	b.n	80068aa <_printf_i+0x152>
 8006958:	462a      	mov	r2, r5
 800695a:	4649      	mov	r1, r9
 800695c:	4640      	mov	r0, r8
 800695e:	6923      	ldr	r3, [r4, #16]
 8006960:	47d0      	blx	sl
 8006962:	3001      	adds	r0, #1
 8006964:	d0ab      	beq.n	80068be <_printf_i+0x166>
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	079b      	lsls	r3, r3, #30
 800696a:	d413      	bmi.n	8006994 <_printf_i+0x23c>
 800696c:	68e0      	ldr	r0, [r4, #12]
 800696e:	9b03      	ldr	r3, [sp, #12]
 8006970:	4298      	cmp	r0, r3
 8006972:	bfb8      	it	lt
 8006974:	4618      	movlt	r0, r3
 8006976:	e7a4      	b.n	80068c2 <_printf_i+0x16a>
 8006978:	2301      	movs	r3, #1
 800697a:	4632      	mov	r2, r6
 800697c:	4649      	mov	r1, r9
 800697e:	4640      	mov	r0, r8
 8006980:	47d0      	blx	sl
 8006982:	3001      	adds	r0, #1
 8006984:	d09b      	beq.n	80068be <_printf_i+0x166>
 8006986:	3501      	adds	r5, #1
 8006988:	68e3      	ldr	r3, [r4, #12]
 800698a:	9903      	ldr	r1, [sp, #12]
 800698c:	1a5b      	subs	r3, r3, r1
 800698e:	42ab      	cmp	r3, r5
 8006990:	dcf2      	bgt.n	8006978 <_printf_i+0x220>
 8006992:	e7eb      	b.n	800696c <_printf_i+0x214>
 8006994:	2500      	movs	r5, #0
 8006996:	f104 0619 	add.w	r6, r4, #25
 800699a:	e7f5      	b.n	8006988 <_printf_i+0x230>
 800699c:	080075a2 	.word	0x080075a2
 80069a0:	080075b3 	.word	0x080075b3

080069a4 <__swbuf_r>:
 80069a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a6:	460e      	mov	r6, r1
 80069a8:	4614      	mov	r4, r2
 80069aa:	4605      	mov	r5, r0
 80069ac:	b118      	cbz	r0, 80069b6 <__swbuf_r+0x12>
 80069ae:	6983      	ldr	r3, [r0, #24]
 80069b0:	b90b      	cbnz	r3, 80069b6 <__swbuf_r+0x12>
 80069b2:	f000 f9d5 	bl	8006d60 <__sinit>
 80069b6:	4b21      	ldr	r3, [pc, #132]	; (8006a3c <__swbuf_r+0x98>)
 80069b8:	429c      	cmp	r4, r3
 80069ba:	d12b      	bne.n	8006a14 <__swbuf_r+0x70>
 80069bc:	686c      	ldr	r4, [r5, #4]
 80069be:	69a3      	ldr	r3, [r4, #24]
 80069c0:	60a3      	str	r3, [r4, #8]
 80069c2:	89a3      	ldrh	r3, [r4, #12]
 80069c4:	071a      	lsls	r2, r3, #28
 80069c6:	d52f      	bpl.n	8006a28 <__swbuf_r+0x84>
 80069c8:	6923      	ldr	r3, [r4, #16]
 80069ca:	b36b      	cbz	r3, 8006a28 <__swbuf_r+0x84>
 80069cc:	6923      	ldr	r3, [r4, #16]
 80069ce:	6820      	ldr	r0, [r4, #0]
 80069d0:	b2f6      	uxtb	r6, r6
 80069d2:	1ac0      	subs	r0, r0, r3
 80069d4:	6963      	ldr	r3, [r4, #20]
 80069d6:	4637      	mov	r7, r6
 80069d8:	4283      	cmp	r3, r0
 80069da:	dc04      	bgt.n	80069e6 <__swbuf_r+0x42>
 80069dc:	4621      	mov	r1, r4
 80069de:	4628      	mov	r0, r5
 80069e0:	f000 f92a 	bl	8006c38 <_fflush_r>
 80069e4:	bb30      	cbnz	r0, 8006a34 <__swbuf_r+0x90>
 80069e6:	68a3      	ldr	r3, [r4, #8]
 80069e8:	3001      	adds	r0, #1
 80069ea:	3b01      	subs	r3, #1
 80069ec:	60a3      	str	r3, [r4, #8]
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	1c5a      	adds	r2, r3, #1
 80069f2:	6022      	str	r2, [r4, #0]
 80069f4:	701e      	strb	r6, [r3, #0]
 80069f6:	6963      	ldr	r3, [r4, #20]
 80069f8:	4283      	cmp	r3, r0
 80069fa:	d004      	beq.n	8006a06 <__swbuf_r+0x62>
 80069fc:	89a3      	ldrh	r3, [r4, #12]
 80069fe:	07db      	lsls	r3, r3, #31
 8006a00:	d506      	bpl.n	8006a10 <__swbuf_r+0x6c>
 8006a02:	2e0a      	cmp	r6, #10
 8006a04:	d104      	bne.n	8006a10 <__swbuf_r+0x6c>
 8006a06:	4621      	mov	r1, r4
 8006a08:	4628      	mov	r0, r5
 8006a0a:	f000 f915 	bl	8006c38 <_fflush_r>
 8006a0e:	b988      	cbnz	r0, 8006a34 <__swbuf_r+0x90>
 8006a10:	4638      	mov	r0, r7
 8006a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a14:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <__swbuf_r+0x9c>)
 8006a16:	429c      	cmp	r4, r3
 8006a18:	d101      	bne.n	8006a1e <__swbuf_r+0x7a>
 8006a1a:	68ac      	ldr	r4, [r5, #8]
 8006a1c:	e7cf      	b.n	80069be <__swbuf_r+0x1a>
 8006a1e:	4b09      	ldr	r3, [pc, #36]	; (8006a44 <__swbuf_r+0xa0>)
 8006a20:	429c      	cmp	r4, r3
 8006a22:	bf08      	it	eq
 8006a24:	68ec      	ldreq	r4, [r5, #12]
 8006a26:	e7ca      	b.n	80069be <__swbuf_r+0x1a>
 8006a28:	4621      	mov	r1, r4
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f000 f80c 	bl	8006a48 <__swsetup_r>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d0cb      	beq.n	80069cc <__swbuf_r+0x28>
 8006a34:	f04f 37ff 	mov.w	r7, #4294967295
 8006a38:	e7ea      	b.n	8006a10 <__swbuf_r+0x6c>
 8006a3a:	bf00      	nop
 8006a3c:	080075e4 	.word	0x080075e4
 8006a40:	08007604 	.word	0x08007604
 8006a44:	080075c4 	.word	0x080075c4

08006a48 <__swsetup_r>:
 8006a48:	4b32      	ldr	r3, [pc, #200]	; (8006b14 <__swsetup_r+0xcc>)
 8006a4a:	b570      	push	{r4, r5, r6, lr}
 8006a4c:	681d      	ldr	r5, [r3, #0]
 8006a4e:	4606      	mov	r6, r0
 8006a50:	460c      	mov	r4, r1
 8006a52:	b125      	cbz	r5, 8006a5e <__swsetup_r+0x16>
 8006a54:	69ab      	ldr	r3, [r5, #24]
 8006a56:	b913      	cbnz	r3, 8006a5e <__swsetup_r+0x16>
 8006a58:	4628      	mov	r0, r5
 8006a5a:	f000 f981 	bl	8006d60 <__sinit>
 8006a5e:	4b2e      	ldr	r3, [pc, #184]	; (8006b18 <__swsetup_r+0xd0>)
 8006a60:	429c      	cmp	r4, r3
 8006a62:	d10f      	bne.n	8006a84 <__swsetup_r+0x3c>
 8006a64:	686c      	ldr	r4, [r5, #4]
 8006a66:	89a3      	ldrh	r3, [r4, #12]
 8006a68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a6c:	0719      	lsls	r1, r3, #28
 8006a6e:	d42c      	bmi.n	8006aca <__swsetup_r+0x82>
 8006a70:	06dd      	lsls	r5, r3, #27
 8006a72:	d411      	bmi.n	8006a98 <__swsetup_r+0x50>
 8006a74:	2309      	movs	r3, #9
 8006a76:	6033      	str	r3, [r6, #0]
 8006a78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a80:	81a3      	strh	r3, [r4, #12]
 8006a82:	e03e      	b.n	8006b02 <__swsetup_r+0xba>
 8006a84:	4b25      	ldr	r3, [pc, #148]	; (8006b1c <__swsetup_r+0xd4>)
 8006a86:	429c      	cmp	r4, r3
 8006a88:	d101      	bne.n	8006a8e <__swsetup_r+0x46>
 8006a8a:	68ac      	ldr	r4, [r5, #8]
 8006a8c:	e7eb      	b.n	8006a66 <__swsetup_r+0x1e>
 8006a8e:	4b24      	ldr	r3, [pc, #144]	; (8006b20 <__swsetup_r+0xd8>)
 8006a90:	429c      	cmp	r4, r3
 8006a92:	bf08      	it	eq
 8006a94:	68ec      	ldreq	r4, [r5, #12]
 8006a96:	e7e6      	b.n	8006a66 <__swsetup_r+0x1e>
 8006a98:	0758      	lsls	r0, r3, #29
 8006a9a:	d512      	bpl.n	8006ac2 <__swsetup_r+0x7a>
 8006a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a9e:	b141      	cbz	r1, 8006ab2 <__swsetup_r+0x6a>
 8006aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006aa4:	4299      	cmp	r1, r3
 8006aa6:	d002      	beq.n	8006aae <__swsetup_r+0x66>
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	f7ff fc45 	bl	8006338 <_free_r>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	6363      	str	r3, [r4, #52]	; 0x34
 8006ab2:	89a3      	ldrh	r3, [r4, #12]
 8006ab4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ab8:	81a3      	strh	r3, [r4, #12]
 8006aba:	2300      	movs	r3, #0
 8006abc:	6063      	str	r3, [r4, #4]
 8006abe:	6923      	ldr	r3, [r4, #16]
 8006ac0:	6023      	str	r3, [r4, #0]
 8006ac2:	89a3      	ldrh	r3, [r4, #12]
 8006ac4:	f043 0308 	orr.w	r3, r3, #8
 8006ac8:	81a3      	strh	r3, [r4, #12]
 8006aca:	6923      	ldr	r3, [r4, #16]
 8006acc:	b94b      	cbnz	r3, 8006ae2 <__swsetup_r+0x9a>
 8006ace:	89a3      	ldrh	r3, [r4, #12]
 8006ad0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ad8:	d003      	beq.n	8006ae2 <__swsetup_r+0x9a>
 8006ada:	4621      	mov	r1, r4
 8006adc:	4630      	mov	r0, r6
 8006ade:	f000 fa05 	bl	8006eec <__smakebuf_r>
 8006ae2:	89a0      	ldrh	r0, [r4, #12]
 8006ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ae8:	f010 0301 	ands.w	r3, r0, #1
 8006aec:	d00a      	beq.n	8006b04 <__swsetup_r+0xbc>
 8006aee:	2300      	movs	r3, #0
 8006af0:	60a3      	str	r3, [r4, #8]
 8006af2:	6963      	ldr	r3, [r4, #20]
 8006af4:	425b      	negs	r3, r3
 8006af6:	61a3      	str	r3, [r4, #24]
 8006af8:	6923      	ldr	r3, [r4, #16]
 8006afa:	b943      	cbnz	r3, 8006b0e <__swsetup_r+0xc6>
 8006afc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b00:	d1ba      	bne.n	8006a78 <__swsetup_r+0x30>
 8006b02:	bd70      	pop	{r4, r5, r6, pc}
 8006b04:	0781      	lsls	r1, r0, #30
 8006b06:	bf58      	it	pl
 8006b08:	6963      	ldrpl	r3, [r4, #20]
 8006b0a:	60a3      	str	r3, [r4, #8]
 8006b0c:	e7f4      	b.n	8006af8 <__swsetup_r+0xb0>
 8006b0e:	2000      	movs	r0, #0
 8006b10:	e7f7      	b.n	8006b02 <__swsetup_r+0xba>
 8006b12:	bf00      	nop
 8006b14:	200000fc 	.word	0x200000fc
 8006b18:	080075e4 	.word	0x080075e4
 8006b1c:	08007604 	.word	0x08007604
 8006b20:	080075c4 	.word	0x080075c4

08006b24 <abort>:
 8006b24:	2006      	movs	r0, #6
 8006b26:	b508      	push	{r3, lr}
 8006b28:	f000 fa56 	bl	8006fd8 <raise>
 8006b2c:	2001      	movs	r0, #1
 8006b2e:	f7fb fc32 	bl	8002396 <_exit>
	...

08006b34 <__sflush_r>:
 8006b34:	898a      	ldrh	r2, [r1, #12]
 8006b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b38:	4605      	mov	r5, r0
 8006b3a:	0710      	lsls	r0, r2, #28
 8006b3c:	460c      	mov	r4, r1
 8006b3e:	d457      	bmi.n	8006bf0 <__sflush_r+0xbc>
 8006b40:	684b      	ldr	r3, [r1, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	dc04      	bgt.n	8006b50 <__sflush_r+0x1c>
 8006b46:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	dc01      	bgt.n	8006b50 <__sflush_r+0x1c>
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b52:	2e00      	cmp	r6, #0
 8006b54:	d0fa      	beq.n	8006b4c <__sflush_r+0x18>
 8006b56:	2300      	movs	r3, #0
 8006b58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b5c:	682f      	ldr	r7, [r5, #0]
 8006b5e:	602b      	str	r3, [r5, #0]
 8006b60:	d032      	beq.n	8006bc8 <__sflush_r+0x94>
 8006b62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b64:	89a3      	ldrh	r3, [r4, #12]
 8006b66:	075a      	lsls	r2, r3, #29
 8006b68:	d505      	bpl.n	8006b76 <__sflush_r+0x42>
 8006b6a:	6863      	ldr	r3, [r4, #4]
 8006b6c:	1ac0      	subs	r0, r0, r3
 8006b6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b70:	b10b      	cbz	r3, 8006b76 <__sflush_r+0x42>
 8006b72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b74:	1ac0      	subs	r0, r0, r3
 8006b76:	2300      	movs	r3, #0
 8006b78:	4602      	mov	r2, r0
 8006b7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	6a21      	ldr	r1, [r4, #32]
 8006b80:	47b0      	blx	r6
 8006b82:	1c43      	adds	r3, r0, #1
 8006b84:	89a3      	ldrh	r3, [r4, #12]
 8006b86:	d106      	bne.n	8006b96 <__sflush_r+0x62>
 8006b88:	6829      	ldr	r1, [r5, #0]
 8006b8a:	291d      	cmp	r1, #29
 8006b8c:	d82c      	bhi.n	8006be8 <__sflush_r+0xb4>
 8006b8e:	4a29      	ldr	r2, [pc, #164]	; (8006c34 <__sflush_r+0x100>)
 8006b90:	40ca      	lsrs	r2, r1
 8006b92:	07d6      	lsls	r6, r2, #31
 8006b94:	d528      	bpl.n	8006be8 <__sflush_r+0xb4>
 8006b96:	2200      	movs	r2, #0
 8006b98:	6062      	str	r2, [r4, #4]
 8006b9a:	6922      	ldr	r2, [r4, #16]
 8006b9c:	04d9      	lsls	r1, r3, #19
 8006b9e:	6022      	str	r2, [r4, #0]
 8006ba0:	d504      	bpl.n	8006bac <__sflush_r+0x78>
 8006ba2:	1c42      	adds	r2, r0, #1
 8006ba4:	d101      	bne.n	8006baa <__sflush_r+0x76>
 8006ba6:	682b      	ldr	r3, [r5, #0]
 8006ba8:	b903      	cbnz	r3, 8006bac <__sflush_r+0x78>
 8006baa:	6560      	str	r0, [r4, #84]	; 0x54
 8006bac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bae:	602f      	str	r7, [r5, #0]
 8006bb0:	2900      	cmp	r1, #0
 8006bb2:	d0cb      	beq.n	8006b4c <__sflush_r+0x18>
 8006bb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bb8:	4299      	cmp	r1, r3
 8006bba:	d002      	beq.n	8006bc2 <__sflush_r+0x8e>
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	f7ff fbbb 	bl	8006338 <_free_r>
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	6360      	str	r0, [r4, #52]	; 0x34
 8006bc6:	e7c2      	b.n	8006b4e <__sflush_r+0x1a>
 8006bc8:	6a21      	ldr	r1, [r4, #32]
 8006bca:	2301      	movs	r3, #1
 8006bcc:	4628      	mov	r0, r5
 8006bce:	47b0      	blx	r6
 8006bd0:	1c41      	adds	r1, r0, #1
 8006bd2:	d1c7      	bne.n	8006b64 <__sflush_r+0x30>
 8006bd4:	682b      	ldr	r3, [r5, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0c4      	beq.n	8006b64 <__sflush_r+0x30>
 8006bda:	2b1d      	cmp	r3, #29
 8006bdc:	d001      	beq.n	8006be2 <__sflush_r+0xae>
 8006bde:	2b16      	cmp	r3, #22
 8006be0:	d101      	bne.n	8006be6 <__sflush_r+0xb2>
 8006be2:	602f      	str	r7, [r5, #0]
 8006be4:	e7b2      	b.n	8006b4c <__sflush_r+0x18>
 8006be6:	89a3      	ldrh	r3, [r4, #12]
 8006be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bec:	81a3      	strh	r3, [r4, #12]
 8006bee:	e7ae      	b.n	8006b4e <__sflush_r+0x1a>
 8006bf0:	690f      	ldr	r7, [r1, #16]
 8006bf2:	2f00      	cmp	r7, #0
 8006bf4:	d0aa      	beq.n	8006b4c <__sflush_r+0x18>
 8006bf6:	0793      	lsls	r3, r2, #30
 8006bf8:	bf18      	it	ne
 8006bfa:	2300      	movne	r3, #0
 8006bfc:	680e      	ldr	r6, [r1, #0]
 8006bfe:	bf08      	it	eq
 8006c00:	694b      	ldreq	r3, [r1, #20]
 8006c02:	1bf6      	subs	r6, r6, r7
 8006c04:	600f      	str	r7, [r1, #0]
 8006c06:	608b      	str	r3, [r1, #8]
 8006c08:	2e00      	cmp	r6, #0
 8006c0a:	dd9f      	ble.n	8006b4c <__sflush_r+0x18>
 8006c0c:	4633      	mov	r3, r6
 8006c0e:	463a      	mov	r2, r7
 8006c10:	4628      	mov	r0, r5
 8006c12:	6a21      	ldr	r1, [r4, #32]
 8006c14:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006c18:	47e0      	blx	ip
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	dc06      	bgt.n	8006c2c <__sflush_r+0xf8>
 8006c1e:	89a3      	ldrh	r3, [r4, #12]
 8006c20:	f04f 30ff 	mov.w	r0, #4294967295
 8006c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c28:	81a3      	strh	r3, [r4, #12]
 8006c2a:	e790      	b.n	8006b4e <__sflush_r+0x1a>
 8006c2c:	4407      	add	r7, r0
 8006c2e:	1a36      	subs	r6, r6, r0
 8006c30:	e7ea      	b.n	8006c08 <__sflush_r+0xd4>
 8006c32:	bf00      	nop
 8006c34:	20400001 	.word	0x20400001

08006c38 <_fflush_r>:
 8006c38:	b538      	push	{r3, r4, r5, lr}
 8006c3a:	690b      	ldr	r3, [r1, #16]
 8006c3c:	4605      	mov	r5, r0
 8006c3e:	460c      	mov	r4, r1
 8006c40:	b913      	cbnz	r3, 8006c48 <_fflush_r+0x10>
 8006c42:	2500      	movs	r5, #0
 8006c44:	4628      	mov	r0, r5
 8006c46:	bd38      	pop	{r3, r4, r5, pc}
 8006c48:	b118      	cbz	r0, 8006c52 <_fflush_r+0x1a>
 8006c4a:	6983      	ldr	r3, [r0, #24]
 8006c4c:	b90b      	cbnz	r3, 8006c52 <_fflush_r+0x1a>
 8006c4e:	f000 f887 	bl	8006d60 <__sinit>
 8006c52:	4b14      	ldr	r3, [pc, #80]	; (8006ca4 <_fflush_r+0x6c>)
 8006c54:	429c      	cmp	r4, r3
 8006c56:	d11b      	bne.n	8006c90 <_fflush_r+0x58>
 8006c58:	686c      	ldr	r4, [r5, #4]
 8006c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0ef      	beq.n	8006c42 <_fflush_r+0xa>
 8006c62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c64:	07d0      	lsls	r0, r2, #31
 8006c66:	d404      	bmi.n	8006c72 <_fflush_r+0x3a>
 8006c68:	0599      	lsls	r1, r3, #22
 8006c6a:	d402      	bmi.n	8006c72 <_fflush_r+0x3a>
 8006c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c6e:	f000 f915 	bl	8006e9c <__retarget_lock_acquire_recursive>
 8006c72:	4628      	mov	r0, r5
 8006c74:	4621      	mov	r1, r4
 8006c76:	f7ff ff5d 	bl	8006b34 <__sflush_r>
 8006c7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	07da      	lsls	r2, r3, #31
 8006c80:	d4e0      	bmi.n	8006c44 <_fflush_r+0xc>
 8006c82:	89a3      	ldrh	r3, [r4, #12]
 8006c84:	059b      	lsls	r3, r3, #22
 8006c86:	d4dd      	bmi.n	8006c44 <_fflush_r+0xc>
 8006c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c8a:	f000 f908 	bl	8006e9e <__retarget_lock_release_recursive>
 8006c8e:	e7d9      	b.n	8006c44 <_fflush_r+0xc>
 8006c90:	4b05      	ldr	r3, [pc, #20]	; (8006ca8 <_fflush_r+0x70>)
 8006c92:	429c      	cmp	r4, r3
 8006c94:	d101      	bne.n	8006c9a <_fflush_r+0x62>
 8006c96:	68ac      	ldr	r4, [r5, #8]
 8006c98:	e7df      	b.n	8006c5a <_fflush_r+0x22>
 8006c9a:	4b04      	ldr	r3, [pc, #16]	; (8006cac <_fflush_r+0x74>)
 8006c9c:	429c      	cmp	r4, r3
 8006c9e:	bf08      	it	eq
 8006ca0:	68ec      	ldreq	r4, [r5, #12]
 8006ca2:	e7da      	b.n	8006c5a <_fflush_r+0x22>
 8006ca4:	080075e4 	.word	0x080075e4
 8006ca8:	08007604 	.word	0x08007604
 8006cac:	080075c4 	.word	0x080075c4

08006cb0 <std>:
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	b510      	push	{r4, lr}
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8006cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cbe:	6083      	str	r3, [r0, #8]
 8006cc0:	8181      	strh	r1, [r0, #12]
 8006cc2:	6643      	str	r3, [r0, #100]	; 0x64
 8006cc4:	81c2      	strh	r2, [r0, #14]
 8006cc6:	6183      	str	r3, [r0, #24]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	2208      	movs	r2, #8
 8006ccc:	305c      	adds	r0, #92	; 0x5c
 8006cce:	f7fd fbc1 	bl	8004454 <memset>
 8006cd2:	4b05      	ldr	r3, [pc, #20]	; (8006ce8 <std+0x38>)
 8006cd4:	6224      	str	r4, [r4, #32]
 8006cd6:	6263      	str	r3, [r4, #36]	; 0x24
 8006cd8:	4b04      	ldr	r3, [pc, #16]	; (8006cec <std+0x3c>)
 8006cda:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cdc:	4b04      	ldr	r3, [pc, #16]	; (8006cf0 <std+0x40>)
 8006cde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ce0:	4b04      	ldr	r3, [pc, #16]	; (8006cf4 <std+0x44>)
 8006ce2:	6323      	str	r3, [r4, #48]	; 0x30
 8006ce4:	bd10      	pop	{r4, pc}
 8006ce6:	bf00      	nop
 8006ce8:	08007011 	.word	0x08007011
 8006cec:	08007033 	.word	0x08007033
 8006cf0:	0800706b 	.word	0x0800706b
 8006cf4:	0800708f 	.word	0x0800708f

08006cf8 <_cleanup_r>:
 8006cf8:	4901      	ldr	r1, [pc, #4]	; (8006d00 <_cleanup_r+0x8>)
 8006cfa:	f000 b8af 	b.w	8006e5c <_fwalk_reent>
 8006cfe:	bf00      	nop
 8006d00:	08006c39 	.word	0x08006c39

08006d04 <__sfmoreglue>:
 8006d04:	2268      	movs	r2, #104	; 0x68
 8006d06:	b570      	push	{r4, r5, r6, lr}
 8006d08:	1e4d      	subs	r5, r1, #1
 8006d0a:	4355      	muls	r5, r2
 8006d0c:	460e      	mov	r6, r1
 8006d0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d12:	f7ff fa35 	bl	8006180 <_malloc_r>
 8006d16:	4604      	mov	r4, r0
 8006d18:	b140      	cbz	r0, 8006d2c <__sfmoreglue+0x28>
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	e9c0 1600 	strd	r1, r6, [r0]
 8006d20:	300c      	adds	r0, #12
 8006d22:	60a0      	str	r0, [r4, #8]
 8006d24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d28:	f7fd fb94 	bl	8004454 <memset>
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	bd70      	pop	{r4, r5, r6, pc}

08006d30 <__sfp_lock_acquire>:
 8006d30:	4801      	ldr	r0, [pc, #4]	; (8006d38 <__sfp_lock_acquire+0x8>)
 8006d32:	f000 b8b3 	b.w	8006e9c <__retarget_lock_acquire_recursive>
 8006d36:	bf00      	nop
 8006d38:	20000711 	.word	0x20000711

08006d3c <__sfp_lock_release>:
 8006d3c:	4801      	ldr	r0, [pc, #4]	; (8006d44 <__sfp_lock_release+0x8>)
 8006d3e:	f000 b8ae 	b.w	8006e9e <__retarget_lock_release_recursive>
 8006d42:	bf00      	nop
 8006d44:	20000711 	.word	0x20000711

08006d48 <__sinit_lock_acquire>:
 8006d48:	4801      	ldr	r0, [pc, #4]	; (8006d50 <__sinit_lock_acquire+0x8>)
 8006d4a:	f000 b8a7 	b.w	8006e9c <__retarget_lock_acquire_recursive>
 8006d4e:	bf00      	nop
 8006d50:	20000712 	.word	0x20000712

08006d54 <__sinit_lock_release>:
 8006d54:	4801      	ldr	r0, [pc, #4]	; (8006d5c <__sinit_lock_release+0x8>)
 8006d56:	f000 b8a2 	b.w	8006e9e <__retarget_lock_release_recursive>
 8006d5a:	bf00      	nop
 8006d5c:	20000712 	.word	0x20000712

08006d60 <__sinit>:
 8006d60:	b510      	push	{r4, lr}
 8006d62:	4604      	mov	r4, r0
 8006d64:	f7ff fff0 	bl	8006d48 <__sinit_lock_acquire>
 8006d68:	69a3      	ldr	r3, [r4, #24]
 8006d6a:	b11b      	cbz	r3, 8006d74 <__sinit+0x14>
 8006d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d70:	f7ff bff0 	b.w	8006d54 <__sinit_lock_release>
 8006d74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d78:	6523      	str	r3, [r4, #80]	; 0x50
 8006d7a:	4b13      	ldr	r3, [pc, #76]	; (8006dc8 <__sinit+0x68>)
 8006d7c:	4a13      	ldr	r2, [pc, #76]	; (8006dcc <__sinit+0x6c>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d82:	42a3      	cmp	r3, r4
 8006d84:	bf08      	it	eq
 8006d86:	2301      	moveq	r3, #1
 8006d88:	4620      	mov	r0, r4
 8006d8a:	bf08      	it	eq
 8006d8c:	61a3      	streq	r3, [r4, #24]
 8006d8e:	f000 f81f 	bl	8006dd0 <__sfp>
 8006d92:	6060      	str	r0, [r4, #4]
 8006d94:	4620      	mov	r0, r4
 8006d96:	f000 f81b 	bl	8006dd0 <__sfp>
 8006d9a:	60a0      	str	r0, [r4, #8]
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f000 f817 	bl	8006dd0 <__sfp>
 8006da2:	2200      	movs	r2, #0
 8006da4:	2104      	movs	r1, #4
 8006da6:	60e0      	str	r0, [r4, #12]
 8006da8:	6860      	ldr	r0, [r4, #4]
 8006daa:	f7ff ff81 	bl	8006cb0 <std>
 8006dae:	2201      	movs	r2, #1
 8006db0:	2109      	movs	r1, #9
 8006db2:	68a0      	ldr	r0, [r4, #8]
 8006db4:	f7ff ff7c 	bl	8006cb0 <std>
 8006db8:	2202      	movs	r2, #2
 8006dba:	2112      	movs	r1, #18
 8006dbc:	68e0      	ldr	r0, [r4, #12]
 8006dbe:	f7ff ff77 	bl	8006cb0 <std>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	61a3      	str	r3, [r4, #24]
 8006dc6:	e7d1      	b.n	8006d6c <__sinit+0xc>
 8006dc8:	080071f4 	.word	0x080071f4
 8006dcc:	08006cf9 	.word	0x08006cf9

08006dd0 <__sfp>:
 8006dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd2:	4607      	mov	r7, r0
 8006dd4:	f7ff ffac 	bl	8006d30 <__sfp_lock_acquire>
 8006dd8:	4b1e      	ldr	r3, [pc, #120]	; (8006e54 <__sfp+0x84>)
 8006dda:	681e      	ldr	r6, [r3, #0]
 8006ddc:	69b3      	ldr	r3, [r6, #24]
 8006dde:	b913      	cbnz	r3, 8006de6 <__sfp+0x16>
 8006de0:	4630      	mov	r0, r6
 8006de2:	f7ff ffbd 	bl	8006d60 <__sinit>
 8006de6:	3648      	adds	r6, #72	; 0x48
 8006de8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	d503      	bpl.n	8006df8 <__sfp+0x28>
 8006df0:	6833      	ldr	r3, [r6, #0]
 8006df2:	b30b      	cbz	r3, 8006e38 <__sfp+0x68>
 8006df4:	6836      	ldr	r6, [r6, #0]
 8006df6:	e7f7      	b.n	8006de8 <__sfp+0x18>
 8006df8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006dfc:	b9d5      	cbnz	r5, 8006e34 <__sfp+0x64>
 8006dfe:	4b16      	ldr	r3, [pc, #88]	; (8006e58 <__sfp+0x88>)
 8006e00:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e04:	60e3      	str	r3, [r4, #12]
 8006e06:	6665      	str	r5, [r4, #100]	; 0x64
 8006e08:	f000 f847 	bl	8006e9a <__retarget_lock_init_recursive>
 8006e0c:	f7ff ff96 	bl	8006d3c <__sfp_lock_release>
 8006e10:	2208      	movs	r2, #8
 8006e12:	4629      	mov	r1, r5
 8006e14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e1c:	6025      	str	r5, [r4, #0]
 8006e1e:	61a5      	str	r5, [r4, #24]
 8006e20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e24:	f7fd fb16 	bl	8004454 <memset>
 8006e28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e30:	4620      	mov	r0, r4
 8006e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e34:	3468      	adds	r4, #104	; 0x68
 8006e36:	e7d9      	b.n	8006dec <__sfp+0x1c>
 8006e38:	2104      	movs	r1, #4
 8006e3a:	4638      	mov	r0, r7
 8006e3c:	f7ff ff62 	bl	8006d04 <__sfmoreglue>
 8006e40:	4604      	mov	r4, r0
 8006e42:	6030      	str	r0, [r6, #0]
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d1d5      	bne.n	8006df4 <__sfp+0x24>
 8006e48:	f7ff ff78 	bl	8006d3c <__sfp_lock_release>
 8006e4c:	230c      	movs	r3, #12
 8006e4e:	603b      	str	r3, [r7, #0]
 8006e50:	e7ee      	b.n	8006e30 <__sfp+0x60>
 8006e52:	bf00      	nop
 8006e54:	080071f4 	.word	0x080071f4
 8006e58:	ffff0001 	.word	0xffff0001

08006e5c <_fwalk_reent>:
 8006e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e60:	4606      	mov	r6, r0
 8006e62:	4688      	mov	r8, r1
 8006e64:	2700      	movs	r7, #0
 8006e66:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e6e:	f1b9 0901 	subs.w	r9, r9, #1
 8006e72:	d505      	bpl.n	8006e80 <_fwalk_reent+0x24>
 8006e74:	6824      	ldr	r4, [r4, #0]
 8006e76:	2c00      	cmp	r4, #0
 8006e78:	d1f7      	bne.n	8006e6a <_fwalk_reent+0xe>
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e80:	89ab      	ldrh	r3, [r5, #12]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d907      	bls.n	8006e96 <_fwalk_reent+0x3a>
 8006e86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	d003      	beq.n	8006e96 <_fwalk_reent+0x3a>
 8006e8e:	4629      	mov	r1, r5
 8006e90:	4630      	mov	r0, r6
 8006e92:	47c0      	blx	r8
 8006e94:	4307      	orrs	r7, r0
 8006e96:	3568      	adds	r5, #104	; 0x68
 8006e98:	e7e9      	b.n	8006e6e <_fwalk_reent+0x12>

08006e9a <__retarget_lock_init_recursive>:
 8006e9a:	4770      	bx	lr

08006e9c <__retarget_lock_acquire_recursive>:
 8006e9c:	4770      	bx	lr

08006e9e <__retarget_lock_release_recursive>:
 8006e9e:	4770      	bx	lr

08006ea0 <__swhatbuf_r>:
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	460e      	mov	r6, r1
 8006ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea8:	4614      	mov	r4, r2
 8006eaa:	2900      	cmp	r1, #0
 8006eac:	461d      	mov	r5, r3
 8006eae:	b096      	sub	sp, #88	; 0x58
 8006eb0:	da08      	bge.n	8006ec4 <__swhatbuf_r+0x24>
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006eb8:	602a      	str	r2, [r5, #0]
 8006eba:	061a      	lsls	r2, r3, #24
 8006ebc:	d410      	bmi.n	8006ee0 <__swhatbuf_r+0x40>
 8006ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ec2:	e00e      	b.n	8006ee2 <__swhatbuf_r+0x42>
 8006ec4:	466a      	mov	r2, sp
 8006ec6:	f000 f909 	bl	80070dc <_fstat_r>
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	dbf1      	blt.n	8006eb2 <__swhatbuf_r+0x12>
 8006ece:	9a01      	ldr	r2, [sp, #4]
 8006ed0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ed4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ed8:	425a      	negs	r2, r3
 8006eda:	415a      	adcs	r2, r3
 8006edc:	602a      	str	r2, [r5, #0]
 8006ede:	e7ee      	b.n	8006ebe <__swhatbuf_r+0x1e>
 8006ee0:	2340      	movs	r3, #64	; 0x40
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	b016      	add	sp, #88	; 0x58
 8006ee8:	bd70      	pop	{r4, r5, r6, pc}
	...

08006eec <__smakebuf_r>:
 8006eec:	898b      	ldrh	r3, [r1, #12]
 8006eee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ef0:	079d      	lsls	r5, r3, #30
 8006ef2:	4606      	mov	r6, r0
 8006ef4:	460c      	mov	r4, r1
 8006ef6:	d507      	bpl.n	8006f08 <__smakebuf_r+0x1c>
 8006ef8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	6123      	str	r3, [r4, #16]
 8006f00:	2301      	movs	r3, #1
 8006f02:	6163      	str	r3, [r4, #20]
 8006f04:	b002      	add	sp, #8
 8006f06:	bd70      	pop	{r4, r5, r6, pc}
 8006f08:	466a      	mov	r2, sp
 8006f0a:	ab01      	add	r3, sp, #4
 8006f0c:	f7ff ffc8 	bl	8006ea0 <__swhatbuf_r>
 8006f10:	9900      	ldr	r1, [sp, #0]
 8006f12:	4605      	mov	r5, r0
 8006f14:	4630      	mov	r0, r6
 8006f16:	f7ff f933 	bl	8006180 <_malloc_r>
 8006f1a:	b948      	cbnz	r0, 8006f30 <__smakebuf_r+0x44>
 8006f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f20:	059a      	lsls	r2, r3, #22
 8006f22:	d4ef      	bmi.n	8006f04 <__smakebuf_r+0x18>
 8006f24:	f023 0303 	bic.w	r3, r3, #3
 8006f28:	f043 0302 	orr.w	r3, r3, #2
 8006f2c:	81a3      	strh	r3, [r4, #12]
 8006f2e:	e7e3      	b.n	8006ef8 <__smakebuf_r+0xc>
 8006f30:	4b0d      	ldr	r3, [pc, #52]	; (8006f68 <__smakebuf_r+0x7c>)
 8006f32:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f34:	89a3      	ldrh	r3, [r4, #12]
 8006f36:	6020      	str	r0, [r4, #0]
 8006f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f3c:	81a3      	strh	r3, [r4, #12]
 8006f3e:	9b00      	ldr	r3, [sp, #0]
 8006f40:	6120      	str	r0, [r4, #16]
 8006f42:	6163      	str	r3, [r4, #20]
 8006f44:	9b01      	ldr	r3, [sp, #4]
 8006f46:	b15b      	cbz	r3, 8006f60 <__smakebuf_r+0x74>
 8006f48:	4630      	mov	r0, r6
 8006f4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f4e:	f000 f8d7 	bl	8007100 <_isatty_r>
 8006f52:	b128      	cbz	r0, 8006f60 <__smakebuf_r+0x74>
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	f023 0303 	bic.w	r3, r3, #3
 8006f5a:	f043 0301 	orr.w	r3, r3, #1
 8006f5e:	81a3      	strh	r3, [r4, #12]
 8006f60:	89a0      	ldrh	r0, [r4, #12]
 8006f62:	4305      	orrs	r5, r0
 8006f64:	81a5      	strh	r5, [r4, #12]
 8006f66:	e7cd      	b.n	8006f04 <__smakebuf_r+0x18>
 8006f68:	08006cf9 	.word	0x08006cf9

08006f6c <memchr>:
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	b510      	push	{r4, lr}
 8006f70:	b2c9      	uxtb	r1, r1
 8006f72:	4402      	add	r2, r0
 8006f74:	4293      	cmp	r3, r2
 8006f76:	4618      	mov	r0, r3
 8006f78:	d101      	bne.n	8006f7e <memchr+0x12>
 8006f7a:	2000      	movs	r0, #0
 8006f7c:	e003      	b.n	8006f86 <memchr+0x1a>
 8006f7e:	7804      	ldrb	r4, [r0, #0]
 8006f80:	3301      	adds	r3, #1
 8006f82:	428c      	cmp	r4, r1
 8006f84:	d1f6      	bne.n	8006f74 <memchr+0x8>
 8006f86:	bd10      	pop	{r4, pc}

08006f88 <_raise_r>:
 8006f88:	291f      	cmp	r1, #31
 8006f8a:	b538      	push	{r3, r4, r5, lr}
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	460d      	mov	r5, r1
 8006f90:	d904      	bls.n	8006f9c <_raise_r+0x14>
 8006f92:	2316      	movs	r3, #22
 8006f94:	6003      	str	r3, [r0, #0]
 8006f96:	f04f 30ff 	mov.w	r0, #4294967295
 8006f9a:	bd38      	pop	{r3, r4, r5, pc}
 8006f9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f9e:	b112      	cbz	r2, 8006fa6 <_raise_r+0x1e>
 8006fa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006fa4:	b94b      	cbnz	r3, 8006fba <_raise_r+0x32>
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f000 f830 	bl	800700c <_getpid_r>
 8006fac:	462a      	mov	r2, r5
 8006fae:	4601      	mov	r1, r0
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fb6:	f000 b817 	b.w	8006fe8 <_kill_r>
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d00a      	beq.n	8006fd4 <_raise_r+0x4c>
 8006fbe:	1c59      	adds	r1, r3, #1
 8006fc0:	d103      	bne.n	8006fca <_raise_r+0x42>
 8006fc2:	2316      	movs	r3, #22
 8006fc4:	6003      	str	r3, [r0, #0]
 8006fc6:	2001      	movs	r0, #1
 8006fc8:	e7e7      	b.n	8006f9a <_raise_r+0x12>
 8006fca:	2400      	movs	r4, #0
 8006fcc:	4628      	mov	r0, r5
 8006fce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006fd2:	4798      	blx	r3
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	e7e0      	b.n	8006f9a <_raise_r+0x12>

08006fd8 <raise>:
 8006fd8:	4b02      	ldr	r3, [pc, #8]	; (8006fe4 <raise+0xc>)
 8006fda:	4601      	mov	r1, r0
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	f7ff bfd3 	b.w	8006f88 <_raise_r>
 8006fe2:	bf00      	nop
 8006fe4:	200000fc 	.word	0x200000fc

08006fe8 <_kill_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	2300      	movs	r3, #0
 8006fec:	4d06      	ldr	r5, [pc, #24]	; (8007008 <_kill_r+0x20>)
 8006fee:	4604      	mov	r4, r0
 8006ff0:	4608      	mov	r0, r1
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	602b      	str	r3, [r5, #0]
 8006ff6:	f7fb f9be 	bl	8002376 <_kill>
 8006ffa:	1c43      	adds	r3, r0, #1
 8006ffc:	d102      	bne.n	8007004 <_kill_r+0x1c>
 8006ffe:	682b      	ldr	r3, [r5, #0]
 8007000:	b103      	cbz	r3, 8007004 <_kill_r+0x1c>
 8007002:	6023      	str	r3, [r4, #0]
 8007004:	bd38      	pop	{r3, r4, r5, pc}
 8007006:	bf00      	nop
 8007008:	2000070c 	.word	0x2000070c

0800700c <_getpid_r>:
 800700c:	f7fb b9ac 	b.w	8002368 <_getpid>

08007010 <__sread>:
 8007010:	b510      	push	{r4, lr}
 8007012:	460c      	mov	r4, r1
 8007014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007018:	f000 f894 	bl	8007144 <_read_r>
 800701c:	2800      	cmp	r0, #0
 800701e:	bfab      	itete	ge
 8007020:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007022:	89a3      	ldrhlt	r3, [r4, #12]
 8007024:	181b      	addge	r3, r3, r0
 8007026:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800702a:	bfac      	ite	ge
 800702c:	6563      	strge	r3, [r4, #84]	; 0x54
 800702e:	81a3      	strhlt	r3, [r4, #12]
 8007030:	bd10      	pop	{r4, pc}

08007032 <__swrite>:
 8007032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007036:	461f      	mov	r7, r3
 8007038:	898b      	ldrh	r3, [r1, #12]
 800703a:	4605      	mov	r5, r0
 800703c:	05db      	lsls	r3, r3, #23
 800703e:	460c      	mov	r4, r1
 8007040:	4616      	mov	r6, r2
 8007042:	d505      	bpl.n	8007050 <__swrite+0x1e>
 8007044:	2302      	movs	r3, #2
 8007046:	2200      	movs	r2, #0
 8007048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800704c:	f000 f868 	bl	8007120 <_lseek_r>
 8007050:	89a3      	ldrh	r3, [r4, #12]
 8007052:	4632      	mov	r2, r6
 8007054:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007058:	81a3      	strh	r3, [r4, #12]
 800705a:	4628      	mov	r0, r5
 800705c:	463b      	mov	r3, r7
 800705e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007066:	f000 b817 	b.w	8007098 <_write_r>

0800706a <__sseek>:
 800706a:	b510      	push	{r4, lr}
 800706c:	460c      	mov	r4, r1
 800706e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007072:	f000 f855 	bl	8007120 <_lseek_r>
 8007076:	1c43      	adds	r3, r0, #1
 8007078:	89a3      	ldrh	r3, [r4, #12]
 800707a:	bf15      	itete	ne
 800707c:	6560      	strne	r0, [r4, #84]	; 0x54
 800707e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007082:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007086:	81a3      	strheq	r3, [r4, #12]
 8007088:	bf18      	it	ne
 800708a:	81a3      	strhne	r3, [r4, #12]
 800708c:	bd10      	pop	{r4, pc}

0800708e <__sclose>:
 800708e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007092:	f000 b813 	b.w	80070bc <_close_r>
	...

08007098 <_write_r>:
 8007098:	b538      	push	{r3, r4, r5, lr}
 800709a:	4604      	mov	r4, r0
 800709c:	4608      	mov	r0, r1
 800709e:	4611      	mov	r1, r2
 80070a0:	2200      	movs	r2, #0
 80070a2:	4d05      	ldr	r5, [pc, #20]	; (80070b8 <_write_r+0x20>)
 80070a4:	602a      	str	r2, [r5, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	f7fb f99c 	bl	80023e4 <_write>
 80070ac:	1c43      	adds	r3, r0, #1
 80070ae:	d102      	bne.n	80070b6 <_write_r+0x1e>
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	b103      	cbz	r3, 80070b6 <_write_r+0x1e>
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	bd38      	pop	{r3, r4, r5, pc}
 80070b8:	2000070c 	.word	0x2000070c

080070bc <_close_r>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	2300      	movs	r3, #0
 80070c0:	4d05      	ldr	r5, [pc, #20]	; (80070d8 <_close_r+0x1c>)
 80070c2:	4604      	mov	r4, r0
 80070c4:	4608      	mov	r0, r1
 80070c6:	602b      	str	r3, [r5, #0]
 80070c8:	f7fb f9a8 	bl	800241c <_close>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d102      	bne.n	80070d6 <_close_r+0x1a>
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	b103      	cbz	r3, 80070d6 <_close_r+0x1a>
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
 80070d8:	2000070c 	.word	0x2000070c

080070dc <_fstat_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	2300      	movs	r3, #0
 80070e0:	4d06      	ldr	r5, [pc, #24]	; (80070fc <_fstat_r+0x20>)
 80070e2:	4604      	mov	r4, r0
 80070e4:	4608      	mov	r0, r1
 80070e6:	4611      	mov	r1, r2
 80070e8:	602b      	str	r3, [r5, #0]
 80070ea:	f7fb f9a2 	bl	8002432 <_fstat>
 80070ee:	1c43      	adds	r3, r0, #1
 80070f0:	d102      	bne.n	80070f8 <_fstat_r+0x1c>
 80070f2:	682b      	ldr	r3, [r5, #0]
 80070f4:	b103      	cbz	r3, 80070f8 <_fstat_r+0x1c>
 80070f6:	6023      	str	r3, [r4, #0]
 80070f8:	bd38      	pop	{r3, r4, r5, pc}
 80070fa:	bf00      	nop
 80070fc:	2000070c 	.word	0x2000070c

08007100 <_isatty_r>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	2300      	movs	r3, #0
 8007104:	4d05      	ldr	r5, [pc, #20]	; (800711c <_isatty_r+0x1c>)
 8007106:	4604      	mov	r4, r0
 8007108:	4608      	mov	r0, r1
 800710a:	602b      	str	r3, [r5, #0]
 800710c:	f7fb f9a0 	bl	8002450 <_isatty>
 8007110:	1c43      	adds	r3, r0, #1
 8007112:	d102      	bne.n	800711a <_isatty_r+0x1a>
 8007114:	682b      	ldr	r3, [r5, #0]
 8007116:	b103      	cbz	r3, 800711a <_isatty_r+0x1a>
 8007118:	6023      	str	r3, [r4, #0]
 800711a:	bd38      	pop	{r3, r4, r5, pc}
 800711c:	2000070c 	.word	0x2000070c

08007120 <_lseek_r>:
 8007120:	b538      	push	{r3, r4, r5, lr}
 8007122:	4604      	mov	r4, r0
 8007124:	4608      	mov	r0, r1
 8007126:	4611      	mov	r1, r2
 8007128:	2200      	movs	r2, #0
 800712a:	4d05      	ldr	r5, [pc, #20]	; (8007140 <_lseek_r+0x20>)
 800712c:	602a      	str	r2, [r5, #0]
 800712e:	461a      	mov	r2, r3
 8007130:	f7fb f998 	bl	8002464 <_lseek>
 8007134:	1c43      	adds	r3, r0, #1
 8007136:	d102      	bne.n	800713e <_lseek_r+0x1e>
 8007138:	682b      	ldr	r3, [r5, #0]
 800713a:	b103      	cbz	r3, 800713e <_lseek_r+0x1e>
 800713c:	6023      	str	r3, [r4, #0]
 800713e:	bd38      	pop	{r3, r4, r5, pc}
 8007140:	2000070c 	.word	0x2000070c

08007144 <_read_r>:
 8007144:	b538      	push	{r3, r4, r5, lr}
 8007146:	4604      	mov	r4, r0
 8007148:	4608      	mov	r0, r1
 800714a:	4611      	mov	r1, r2
 800714c:	2200      	movs	r2, #0
 800714e:	4d05      	ldr	r5, [pc, #20]	; (8007164 <_read_r+0x20>)
 8007150:	602a      	str	r2, [r5, #0]
 8007152:	461a      	mov	r2, r3
 8007154:	f7fb f929 	bl	80023aa <_read>
 8007158:	1c43      	adds	r3, r0, #1
 800715a:	d102      	bne.n	8007162 <_read_r+0x1e>
 800715c:	682b      	ldr	r3, [r5, #0]
 800715e:	b103      	cbz	r3, 8007162 <_read_r+0x1e>
 8007160:	6023      	str	r3, [r4, #0]
 8007162:	bd38      	pop	{r3, r4, r5, pc}
 8007164:	2000070c 	.word	0x2000070c

08007168 <_init>:
 8007168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716a:	bf00      	nop
 800716c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800716e:	bc08      	pop	{r3}
 8007170:	469e      	mov	lr, r3
 8007172:	4770      	bx	lr

08007174 <_fini>:
 8007174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007176:	bf00      	nop
 8007178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800717a:	bc08      	pop	{r3}
 800717c:	469e      	mov	lr, r3
 800717e:	4770      	bx	lr
