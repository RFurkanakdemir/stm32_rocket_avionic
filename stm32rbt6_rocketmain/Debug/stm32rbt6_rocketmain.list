
stm32rbt6_rocketmain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000126d8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000968  080127e8  080127e8  000227e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013150  08013150  000302f0  2**0
                  CONTENTS
  4 .ARM          00000000  08013150  08013150  000302f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013150  08013150  000302f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013150  08013150  00023150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013154  08013154  00023154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f0  20000000  08013158  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a0  200002f0  08013448  000302f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a90  08013448  00030a90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000193ad  00000000  00000000  00030319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000380f  00000000  00000000  000496c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  0004ced8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f0  00000000  00000000  0004e318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca43  00000000  00000000  0004f608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001987d  00000000  00000000  0006c04b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091a4c  00000000  00000000  000858c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00117314  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c50  00000000  00000000  00117364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002f0 	.word	0x200002f0
 800012c:	00000000 	.word	0x00000000
 8000130:	080127d0 	.word	0x080127d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002f4 	.word	0x200002f4
 800014c:	080127d0 	.word	0x080127d0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <__aeabi_f2uiz>:
 8001188:	0042      	lsls	r2, r0, #1
 800118a:	d20e      	bcs.n	80011aa <__aeabi_f2uiz+0x22>
 800118c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001190:	d30b      	bcc.n	80011aa <__aeabi_f2uiz+0x22>
 8001192:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001196:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119a:	d409      	bmi.n	80011b0 <__aeabi_f2uiz+0x28>
 800119c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011a4:	fa23 f002 	lsr.w	r0, r3, r2
 80011a8:	4770      	bx	lr
 80011aa:	f04f 0000 	mov.w	r0, #0
 80011ae:	4770      	bx	lr
 80011b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011b4:	d101      	bne.n	80011ba <__aeabi_f2uiz+0x32>
 80011b6:	0242      	lsls	r2, r0, #9
 80011b8:	d102      	bne.n	80011c0 <__aeabi_f2uiz+0x38>
 80011ba:	f04f 30ff 	mov.w	r0, #4294967295
 80011be:	4770      	bx	lr
 80011c0:	f04f 0000 	mov.w	r0, #0
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop

080011c8 <__aeabi_d2lz>:
 80011c8:	b538      	push	{r3, r4, r5, lr}
 80011ca:	4605      	mov	r5, r0
 80011cc:	460c      	mov	r4, r1
 80011ce:	2200      	movs	r2, #0
 80011d0:	2300      	movs	r3, #0
 80011d2:	4628      	mov	r0, r5
 80011d4:	4621      	mov	r1, r4
 80011d6:	f7ff fbf1 	bl	80009bc <__aeabi_dcmplt>
 80011da:	b928      	cbnz	r0, 80011e8 <__aeabi_d2lz+0x20>
 80011dc:	4628      	mov	r0, r5
 80011de:	4621      	mov	r1, r4
 80011e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e4:	f000 b80a 	b.w	80011fc <__aeabi_d2ulz>
 80011e8:	4628      	mov	r0, r5
 80011ea:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011ee:	f000 f805 	bl	80011fc <__aeabi_d2ulz>
 80011f2:	4240      	negs	r0, r0
 80011f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011f8:	bd38      	pop	{r3, r4, r5, pc}
 80011fa:	bf00      	nop

080011fc <__aeabi_d2ulz>:
 80011fc:	b5d0      	push	{r4, r6, r7, lr}
 80011fe:	2200      	movs	r2, #0
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <__aeabi_d2ulz+0x34>)
 8001202:	4606      	mov	r6, r0
 8001204:	460f      	mov	r7, r1
 8001206:	f7ff f967 	bl	80004d8 <__aeabi_dmul>
 800120a:	f7ff fc3d 	bl	8000a88 <__aeabi_d2uiz>
 800120e:	4604      	mov	r4, r0
 8001210:	f7ff f8e8 	bl	80003e4 <__aeabi_ui2d>
 8001214:	2200      	movs	r2, #0
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <__aeabi_d2ulz+0x38>)
 8001218:	f7ff f95e 	bl	80004d8 <__aeabi_dmul>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4630      	mov	r0, r6
 8001222:	4639      	mov	r1, r7
 8001224:	f7fe ffa0 	bl	8000168 <__aeabi_dsub>
 8001228:	f7ff fc2e 	bl	8000a88 <__aeabi_d2uiz>
 800122c:	4621      	mov	r1, r4
 800122e:	bdd0      	pop	{r4, r6, r7, pc}
 8001230:	3df00000 	.word	0x3df00000
 8001234:	41f00000 	.word	0x41f00000

08001238 <FusionAhrsInitialise>:
/**
 * @brief Initialises the AHRS algorithm structure.
 * @param fusionAhrs AHRS algorithm structure.
 * @param gain AHRS algorithm gain.
 */
void FusionAhrsInitialise(FusionAhrs * const fusionAhrs, const float gain) {
 8001238:	b480      	push	{r7}
 800123a:	b08b      	sub	sp, #44	; 0x2c
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
    fusionAhrs->gain = gain;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	601a      	str	r2, [r3, #0]
    fusionAhrs->minimumMagneticFieldSquared = 0.0f;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	605a      	str	r2, [r3, #4]
    fusionAhrs->maximumMagneticFieldSquared = FLT_MAX;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a15      	ldr	r2, [pc, #84]	; (80012a8 <FusionAhrsInitialise+0x70>)
 8001254:	609a      	str	r2, [r3, #8]
    fusionAhrs->quaternion = FUSION_QUATERNION_IDENTITY;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	615a      	str	r2, [r3, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
    fusionAhrs->linearAcceleration = FUSION_VECTOR3_ZERO;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	625a      	str	r2, [r3, #36]	; 0x24
    fusionAhrs->rampedGain = INITIAL_GAIN;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a06      	ldr	r2, [pc, #24]	; (80012ac <FusionAhrsInitialise+0x74>)
 8001292:	629a      	str	r2, [r3, #40]	; 0x28
    fusionAhrs->zeroYawPending = false;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 800129c:	bf00      	nop
 800129e:	372c      	adds	r7, #44	; 0x2c
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	7f7fffff 	.word	0x7f7fffff
 80012ac:	41200000 	.word	0x41200000

080012b0 <FusionAhrsSetMagneticField>:
 * @brief Sets the minimum and maximum valid magnetic field magnitudes in uT.
 * @param fusionAhrs AHRS algorithm structure.
 * @param minimumMagneticField Minimum valid magnetic field magnitude.
 * @param maximumMagneticField Maximum valid magnetic field magnitude.
 */
void FusionAhrsSetMagneticField(FusionAhrs * const fusionAhrs, const float minimumMagneticField, const float maximumMagneticField) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
    fusionAhrs->minimumMagneticFieldSquared = minimumMagneticField * minimumMagneticField;
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	68b8      	ldr	r0, [r7, #8]
 80012c0:	f7ff fd60 	bl	8000d84 <__aeabi_fmul>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	605a      	str	r2, [r3, #4]
    fusionAhrs->maximumMagneticFieldSquared = maximumMagneticField * maximumMagneticField;
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff fd58 	bl	8000d84 <__aeabi_fmul>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	609a      	str	r2, [r3, #8]
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <FusionAhrsUpdate>:
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in uT.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdate(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const FusionVector3 magnetometer, const float samplePeriod) {
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	f5ad 7d57 	sub.w	sp, sp, #860	; 0x35c
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	f507 7456 	add.w	r4, r7, #856	; 0x358
 80012f0:	f5a4 7453 	sub.w	r4, r4, #844	; 0x34c
 80012f4:	6020      	str	r0, [r4, #0]
 80012f6:	f507 7056 	add.w	r0, r7, #856	; 0x358
 80012fa:	f5a0 7056 	sub.w	r0, r0, #856	; 0x358
 80012fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code

    // Calculate feedback error
    FusionVector3 halfFeedbackError = FUSION_VECTOR3_ZERO; // scaled by 0.5 to avoid repeated multiplications by 2
 8001302:	f04f 0300 	mov.w	r3, #0
 8001306:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800130a:	f04f 0300 	mov.w	r3, #0
 800130e:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
    do {
        // Abandon feedback calculation if accelerometer measurement invalid
        if ((accelerometer.axis.x == 0.0f) && (accelerometer.axis.y == 0.0f) && (accelerometer.axis.z == 0.0f)) {
 800131a:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 800131e:	f04f 0100 	mov.w	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fec2 	bl	80010ac <__aeabi_fcmpeq>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d014      	beq.n	8001358 <FusionAhrsUpdate+0x74>
 800132e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001332:	f04f 0100 	mov.w	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff feb8 	bl	80010ac <__aeabi_fcmpeq>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00a      	beq.n	8001358 <FusionAhrsUpdate+0x74>
 8001342:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8001346:	f04f 0100 	mov.w	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff feae 	bl	80010ac <__aeabi_fcmpeq>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	f040 85ce 	bne.w	8001ef4 <FusionAhrsUpdate+0xc10>
            break;
        }

        // Calculate direction of gravity assumed by quaternion
        const FusionVector3 halfGravity = {
            .axis.x = Q.x * Q.z - Q.w * Q.y,
 8001358:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800135c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001368:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	4619      	mov	r1, r3
 8001372:	4610      	mov	r0, r2
 8001374:	f7ff fd06 	bl	8000d84 <__aeabi_fmul>
 8001378:	4603      	mov	r3, r0
 800137a:	461c      	mov	r4, r3
 800137c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001380:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800138c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	4619      	mov	r1, r3
 8001396:	4610      	mov	r0, r2
 8001398:	f7ff fcf4 	bl	8000d84 <__aeabi_fmul>
 800139c:	4603      	mov	r3, r0
 800139e:	4619      	mov	r1, r3
 80013a0:	4620      	mov	r0, r4
 80013a2:	f7ff fbe5 	bl	8000b70 <__aeabi_fsub>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
        const FusionVector3 halfGravity = {
 80013aa:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80013ae:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80013b2:	601a      	str	r2, [r3, #0]
            .axis.y = Q.w * Q.x + Q.y * Q.z,
 80013b4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80013b8:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80013c4:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	4619      	mov	r1, r3
 80013ce:	4610      	mov	r0, r2
 80013d0:	f7ff fcd8 	bl	8000d84 <__aeabi_fmul>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461c      	mov	r4, r3
 80013d8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80013dc:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	695a      	ldr	r2, [r3, #20]
 80013e4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80013e8:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4619      	mov	r1, r3
 80013f2:	4610      	mov	r0, r2
 80013f4:	f7ff fcc6 	bl	8000d84 <__aeabi_fmul>
 80013f8:	4603      	mov	r3, r0
 80013fa:	4619      	mov	r1, r3
 80013fc:	4620      	mov	r0, r4
 80013fe:	f7ff fbb9 	bl	8000b74 <__addsf3>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
        const FusionVector3 halfGravity = {
 8001406:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800140a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800140e:	605a      	str	r2, [r3, #4]
            .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8001410:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001414:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001420:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	4619      	mov	r1, r3
 800142a:	4610      	mov	r0, r2
 800142c:	f7ff fcaa 	bl	8000d84 <__aeabi_fmul>
 8001430:	4603      	mov	r3, r0
 8001432:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fb9a 	bl	8000b70 <__aeabi_fsub>
 800143c:	4603      	mov	r3, r0
 800143e:	461c      	mov	r4, r3
 8001440:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001444:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	699a      	ldr	r2, [r3, #24]
 800144c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001450:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4619      	mov	r1, r3
 800145a:	4610      	mov	r0, r2
 800145c:	f7ff fc92 	bl	8000d84 <__aeabi_fmul>
 8001460:	4603      	mov	r3, r0
 8001462:	4619      	mov	r1, r3
 8001464:	4620      	mov	r0, r4
 8001466:	f7ff fb85 	bl	8000b74 <__addsf3>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
        const FusionVector3 halfGravity = {
 800146e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001472:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800147c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001480:	461c      	mov	r4, r3
 8001482:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8001486:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800148a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800148e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001492:	f5a3 713d 	sub.w	r1, r3, #756	; 0x2f4
 8001496:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800149a:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 800149e:	460b      	mov	r3, r1
 80014a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80014a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vector Vector of the operation.
 * @return Vector magnitude squared.
 */
static inline __attribute__((always_inline)) float FusionVectorMagnitudeSquared(const FusionVector3 vector) {
#define V vector.axis // define shorthand label for more readable code
    return V.x * V.x + V.y * V.y + V.z * V.z;
 80014a6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80014aa:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80014b4:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4619      	mov	r1, r3
 80014bc:	4610      	mov	r0, r2
 80014be:	f7ff fc61 	bl	8000d84 <__aeabi_fmul>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461c      	mov	r4, r3
 80014c6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80014ca:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80014d4:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4619      	mov	r1, r3
 80014dc:	4610      	mov	r0, r2
 80014de:	f7ff fc51 	bl	8000d84 <__aeabi_fmul>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4619      	mov	r1, r3
 80014e6:	4620      	mov	r0, r4
 80014e8:	f7ff fb44 	bl	8000b74 <__addsf3>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461c      	mov	r4, r3
 80014f0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80014f4:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80014fe:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	4619      	mov	r1, r3
 8001506:	4610      	mov	r0, r2
 8001508:	f7ff fc3c 	bl	8000d84 <__aeabi_fmul>
 800150c:	4603      	mov	r3, r0
 800150e:	4619      	mov	r1, r3
 8001510:	4620      	mov	r0, r4
 8001512:	f7ff fb2f 	bl	8000b74 <__addsf3>
 8001516:	4603      	mov	r3, r0
 8001518:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    float halfx = 0.5f * x;
 800151c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001520:	f8d7 034c 	ldr.w	r0, [r7, #844]	; 0x34c
 8001524:	f7ff fc2e 	bl	8000d84 <__aeabi_fmul>
 8001528:	4603      	mov	r3, r0
 800152a:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
    float y = x;
 800152e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001532:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001536:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 800153a:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 800153c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001546:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 800154a:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 800154c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001550:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	105a      	asrs	r2, r3, #1
 8001558:	4bc1      	ldr	r3, [pc, #772]	; (8001860 <FusionAhrsUpdate+0x57c>)
 800155a:	1a9b      	subs	r3, r3, r2
 800155c:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8001560:	f5a2 723f 	sub.w	r2, r2, #764	; 0x2fc
 8001564:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8001566:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001570:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001574:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8001576:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800157a:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fbfd 	bl	8000d84 <__aeabi_fmul>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001592:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	4610      	mov	r0, r2
 800159c:	f7ff fbf2 	bl	8000d84 <__aeabi_fmul>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4619      	mov	r1, r3
 80015a4:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 80015a8:	f7ff fae2 	bl	8000b70 <__aeabi_fsub>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80015b4:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4619      	mov	r1, r3
 80015bc:	4610      	mov	r0, r2
 80015be:	f7ff fbe1 	bl	8000d84 <__aeabi_fmul>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461a      	mov	r2, r3
 80015c6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80015ca:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80015ce:	601a      	str	r2, [r3, #0]
    return y;
 80015d0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80015d4:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80015d8:	681b      	ldr	r3, [r3, #0]
 * square root approximation.
 * @param vector Vector to be normalised.
 * @return Normalised vector.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorFastNormalise(const FusionVector3 vector) {
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 80015da:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 80015de:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80015e2:	f5a3 7142 	sub.w	r1, r3, #776	; 0x308
 80015e6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80015ea:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 80015ee:	460b      	mov	r3, r1
 80015f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80015f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80015f6:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 80015fa:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
    result.axis.x = vector.axis.x * scalar;
 80015fe:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001602:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f8d7 1340 	ldr.w	r1, [r7, #832]	; 0x340
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fbb9 	bl	8000d84 <__aeabi_fmul>
 8001612:	4603      	mov	r3, r0
 8001614:	461a      	mov	r2, r3
 8001616:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800161a:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800161e:	601a      	str	r2, [r3, #0]
    result.axis.y = vector.axis.y * scalar;
 8001620:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001624:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f8d7 1340 	ldr.w	r1, [r7, #832]	; 0x340
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fba8 	bl	8000d84 <__aeabi_fmul>
 8001634:	4603      	mov	r3, r0
 8001636:	461a      	mov	r2, r3
 8001638:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800163c:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8001640:	605a      	str	r2, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001642:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001646:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f8d7 1340 	ldr.w	r1, [r7, #832]	; 0x340
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fb97 	bl	8000d84 <__aeabi_fmul>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800165e:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8001662:	609a      	str	r2, [r3, #8]
    return result;
 8001664:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001668:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 800166c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001670:	ca07      	ldmia	r2, {r0, r1, r2}
 8001672:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001676:	bf00      	nop
 8001678:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800167c:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001680:	461c      	mov	r4, r3
 8001682:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001686:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800168a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800168e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001692:	f5a3 7148 	sub.w	r1, r3, #800	; 0x320
 8001696:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800169a:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 800169e:	460b      	mov	r3, r1
 80016a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80016a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 80016a6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80016aa:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80016b4:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	4619      	mov	r1, r3
 80016bc:	4610      	mov	r0, r2
 80016be:	f7ff fb61 	bl	8000d84 <__aeabi_fmul>
 80016c2:	4603      	mov	r3, r0
 80016c4:	461c      	mov	r4, r3
 80016c6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80016ca:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80016d4:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4619      	mov	r1, r3
 80016dc:	4610      	mov	r0, r2
 80016de:	f7ff fb51 	bl	8000d84 <__aeabi_fmul>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4619      	mov	r1, r3
 80016e6:	4620      	mov	r0, r4
 80016e8:	f7ff fa42 	bl	8000b70 <__aeabi_fsub>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80016f4:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80016f8:	601a      	str	r2, [r3, #0]
    result.axis.y = A.z * B.x - A.x * B.z;
 80016fa:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80016fe:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001708:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4619      	mov	r1, r3
 8001710:	4610      	mov	r0, r2
 8001712:	f7ff fb37 	bl	8000d84 <__aeabi_fmul>
 8001716:	4603      	mov	r3, r0
 8001718:	461c      	mov	r4, r3
 800171a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800171e:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001728:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	4619      	mov	r1, r3
 8001730:	4610      	mov	r0, r2
 8001732:	f7ff fb27 	bl	8000d84 <__aeabi_fmul>
 8001736:	4603      	mov	r3, r0
 8001738:	4619      	mov	r1, r3
 800173a:	4620      	mov	r0, r4
 800173c:	f7ff fa18 	bl	8000b70 <__aeabi_fsub>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001748:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800174c:	605a      	str	r2, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 800174e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001752:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800175c:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4619      	mov	r1, r3
 8001764:	4610      	mov	r0, r2
 8001766:	f7ff fb0d 	bl	8000d84 <__aeabi_fmul>
 800176a:	4603      	mov	r3, r0
 800176c:	461c      	mov	r4, r3
 800176e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001772:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800177c:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4619      	mov	r1, r3
 8001784:	4610      	mov	r0, r2
 8001786:	f7ff fafd 	bl	8000d84 <__aeabi_fmul>
 800178a:	4603      	mov	r3, r0
 800178c:	4619      	mov	r1, r3
 800178e:	4620      	mov	r0, r4
 8001790:	f7ff f9ee 	bl	8000b70 <__aeabi_fsub>
 8001794:	4603      	mov	r3, r0
 8001796:	461a      	mov	r2, r3
 8001798:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800179c:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80017a0:	609a      	str	r2, [r3, #8]
    return result;
 80017a2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80017a6:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 80017aa:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80017ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80017b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80017b4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80017b8:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80017bc:	461c      	mov	r4, r3
 80017be:	f507 735d 	add.w	r3, r7, #884	; 0x374
 80017c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 80017ca:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80017ce:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80017d8:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4619      	mov	r1, r3
 80017e0:	4610      	mov	r0, r2
 80017e2:	f7ff facf 	bl	8000d84 <__aeabi_fmul>
 80017e6:	4603      	mov	r3, r0
 80017e8:	461c      	mov	r4, r3
 80017ea:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80017ee:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80017f8:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4619      	mov	r1, r3
 8001800:	4610      	mov	r0, r2
 8001802:	f7ff fabf 	bl	8000d84 <__aeabi_fmul>
 8001806:	4603      	mov	r3, r0
 8001808:	4619      	mov	r1, r3
 800180a:	4620      	mov	r0, r4
 800180c:	f7ff f9b2 	bl	8000b74 <__addsf3>
 8001810:	4603      	mov	r3, r0
 8001812:	461c      	mov	r4, r3
 8001814:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001818:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001822:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	4619      	mov	r1, r3
 800182a:	4610      	mov	r0, r2
 800182c:	f7ff faaa 	bl	8000d84 <__aeabi_fmul>
 8001830:	4603      	mov	r3, r0
 8001832:	4619      	mov	r1, r3
 8001834:	4620      	mov	r0, r4
 8001836:	f7ff f99d 	bl	8000b74 <__addsf3>
 800183a:	4603      	mov	r3, r0

        // Calculate accelerometer feedback error
        halfFeedbackError = FusionVectorCrossProduct(FusionVectorFastNormalise(accelerometer), halfGravity);

        // Abandon magnetometer feedback calculation if magnetometer measurement invalid
        const float magnetometerMagnitudeSquared = FusionVectorMagnitudeSquared(magnetometer);
 800183c:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
        if ((magnetometerMagnitudeSquared < fusionAhrs->minimumMagneticFieldSquared) || (magnetometerMagnitudeSquared > fusionAhrs->maximumMagneticFieldSquared)) {
 8001840:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001844:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4619      	mov	r1, r3
 800184e:	f8d7 0350 	ldr.w	r0, [r7, #848]	; 0x350
 8001852:	f7ff fc35 	bl	80010c0 <__aeabi_fcmplt>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	f040 834c 	bne.w	8001ef6 <FusionAhrsUpdate+0xc12>
 800185e:	e001      	b.n	8001864 <FusionAhrsUpdate+0x580>
 8001860:	5f3759df 	.word	0x5f3759df
 8001864:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001868:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	4619      	mov	r1, r3
 8001872:	f8d7 0350 	ldr.w	r0, [r7, #848]	; 0x350
 8001876:	f7ff fc41 	bl	80010fc <__aeabi_fcmpgt>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	f040 833a 	bne.w	8001ef6 <FusionAhrsUpdate+0xc12>
            break;
        }

        // Compute direction of 'magnetic west' assumed by quaternion
        const FusionVector3 halfWest = {
            .axis.x = Q.x * Q.y + Q.w * Q.z,
 8001882:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001886:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	691a      	ldr	r2, [r3, #16]
 800188e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001892:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	4619      	mov	r1, r3
 800189c:	4610      	mov	r0, r2
 800189e:	f7ff fa71 	bl	8000d84 <__aeabi_fmul>
 80018a2:	4603      	mov	r3, r0
 80018a4:	461c      	mov	r4, r3
 80018a6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80018aa:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80018b6:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	4619      	mov	r1, r3
 80018c0:	4610      	mov	r0, r2
 80018c2:	f7ff fa5f 	bl	8000d84 <__aeabi_fmul>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4619      	mov	r1, r3
 80018ca:	4620      	mov	r0, r4
 80018cc:	f7ff f952 	bl	8000b74 <__addsf3>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
        const FusionVector3 halfWest = {
 80018d4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80018d8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80018dc:	601a      	str	r2, [r3, #0]
            .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 80018de:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80018e2:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80018ee:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	4619      	mov	r1, r3
 80018f8:	4610      	mov	r0, r2
 80018fa:	f7ff fa43 	bl	8000d84 <__aeabi_fmul>
 80018fe:	4603      	mov	r3, r0
 8001900:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff f933 	bl	8000b70 <__aeabi_fsub>
 800190a:	4603      	mov	r3, r0
 800190c:	461c      	mov	r4, r3
 800190e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001912:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	695a      	ldr	r2, [r3, #20]
 800191a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800191e:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	4619      	mov	r1, r3
 8001928:	4610      	mov	r0, r2
 800192a:	f7ff fa2b 	bl	8000d84 <__aeabi_fmul>
 800192e:	4603      	mov	r3, r0
 8001930:	4619      	mov	r1, r3
 8001932:	4620      	mov	r0, r4
 8001934:	f7ff f91e 	bl	8000b74 <__addsf3>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
        const FusionVector3 halfWest = {
 800193c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001940:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001944:	605a      	str	r2, [r3, #4]
            .axis.z = Q.y * Q.z - Q.w * Q.x
 8001946:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800194a:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001956:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	4619      	mov	r1, r3
 8001960:	4610      	mov	r0, r2
 8001962:	f7ff fa0f 	bl	8000d84 <__aeabi_fmul>
 8001966:	4603      	mov	r3, r0
 8001968:	461c      	mov	r4, r3
 800196a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800196e:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800197a:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	4619      	mov	r1, r3
 8001984:	4610      	mov	r0, r2
 8001986:	f7ff f9fd 	bl	8000d84 <__aeabi_fmul>
 800198a:	4603      	mov	r3, r0
 800198c:	4619      	mov	r1, r3
 800198e:	4620      	mov	r0, r4
 8001990:	f7ff f8ee 	bl	8000b70 <__aeabi_fsub>
 8001994:	4603      	mov	r3, r0
 8001996:	461a      	mov	r2, r3
        const FusionVector3 halfWest = {
 8001998:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800199c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80019a6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80019aa:	461c      	mov	r4, r3
 80019ac:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80019b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019b8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80019bc:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80019c0:	461c      	mov	r4, r3
 80019c2:	f507 735d 	add.w	r3, r7, #884	; 0x374
 80019c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 80019ce:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80019d2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80019dc:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	4619      	mov	r1, r3
 80019e4:	4610      	mov	r0, r2
 80019e6:	f7ff f9cd 	bl	8000d84 <__aeabi_fmul>
 80019ea:	4603      	mov	r3, r0
 80019ec:	461c      	mov	r4, r3
 80019ee:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80019f2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80019fc:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4619      	mov	r1, r3
 8001a04:	4610      	mov	r0, r2
 8001a06:	f7ff f9bd 	bl	8000d84 <__aeabi_fmul>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f7ff f8ae 	bl	8000b70 <__aeabi_fsub>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461a      	mov	r2, r3
 8001a18:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001a1c:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001a20:	601a      	str	r2, [r3, #0]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001a22:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001a26:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001a30:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	4610      	mov	r0, r2
 8001a3a:	f7ff f9a3 	bl	8000d84 <__aeabi_fmul>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	461c      	mov	r4, r3
 8001a42:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001a46:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001a50:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	4619      	mov	r1, r3
 8001a58:	4610      	mov	r0, r2
 8001a5a:	f7ff f993 	bl	8000d84 <__aeabi_fmul>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4619      	mov	r1, r3
 8001a62:	4620      	mov	r0, r4
 8001a64:	f7ff f884 	bl	8000b70 <__aeabi_fsub>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001a70:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001a74:	605a      	str	r2, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001a76:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001a7a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001a84:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	f7ff f979 	bl	8000d84 <__aeabi_fmul>
 8001a92:	4603      	mov	r3, r0
 8001a94:	461c      	mov	r4, r3
 8001a96:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001a9a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001aa4:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4610      	mov	r0, r2
 8001aae:	f7ff f969 	bl	8000d84 <__aeabi_fmul>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f7ff f85a 	bl	8000b70 <__aeabi_fsub>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001ac4:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001ac8:	609a      	str	r2, [r3, #8]
    return result;
 8001aca:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001ace:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8001ad2:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8001ad6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ad8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001adc:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001ae0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001ae4:	461c      	mov	r4, r3
 8001ae6:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8001aea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001aee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001af2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001af6:	f5a3 711a 	sub.w	r1, r3, #616	; 0x268
 8001afa:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001afe:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8001b02:	460b      	mov	r3, r1
 8001b04:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8001b0a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001b0e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001b18:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4610      	mov	r0, r2
 8001b22:	f7ff f92f 	bl	8000d84 <__aeabi_fmul>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461c      	mov	r4, r3
 8001b2a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001b2e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001b38:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4610      	mov	r0, r2
 8001b42:	f7ff f91f 	bl	8000d84 <__aeabi_fmul>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f7ff f812 	bl	8000b74 <__addsf3>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461c      	mov	r4, r3
 8001b54:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001b58:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001b62:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	f7ff f90a 	bl	8000d84 <__aeabi_fmul>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4619      	mov	r1, r3
 8001b74:	4620      	mov	r0, r4
 8001b76:	f7fe fffd 	bl	8000b74 <__addsf3>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
    float halfx = 0.5f * x;
 8001b80:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001b84:	f8d7 033c 	ldr.w	r0, [r7, #828]	; 0x33c
 8001b88:	f7ff f8fc 	bl	8000d84 <__aeabi_fmul>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
    float y = x;
 8001b92:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001b96:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001b9a:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8001b9e:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8001ba0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001baa:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8001bae:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8001bb0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001bb4:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	105a      	asrs	r2, r3, #1
 8001bbc:	4bc6      	ldr	r3, [pc, #792]	; (8001ed8 <FusionAhrsUpdate+0xbf4>)
 8001bbe:	1a9b      	subs	r3, r3, r2
 8001bc0:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8001bc4:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8001bc8:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8001bca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001bd4:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001bd8:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8001bda:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001bde:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f8d7 1338 	ldr.w	r1, [r7, #824]	; 0x338
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff f8cb 	bl	8000d84 <__aeabi_fmul>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001bf6:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4610      	mov	r0, r2
 8001c00:	f7ff f8c0 	bl	8000d84 <__aeabi_fmul>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4619      	mov	r1, r3
 8001c08:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8001c0c:	f7fe ffb0 	bl	8000b70 <__aeabi_fsub>
 8001c10:	4603      	mov	r3, r0
 8001c12:	461a      	mov	r2, r3
 8001c14:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001c18:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4610      	mov	r0, r2
 8001c22:	f7ff f8af 	bl	8000d84 <__aeabi_fmul>
 8001c26:	4603      	mov	r3, r0
 8001c28:	461a      	mov	r2, r3
 8001c2a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001c2e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001c32:	601a      	str	r2, [r3, #0]
    return y;
 8001c34:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001c38:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001c3c:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8001c3e:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8001c42:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001c46:	f5a3 711f 	sub.w	r1, r3, #636	; 0x27c
 8001c4a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001c4e:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8001c52:	460b      	mov	r3, r1
 8001c54:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001c5a:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001c5e:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
    result.axis.x = vector.axis.x * scalar;
 8001c62:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001c66:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f8d7 1330 	ldr.w	r1, [r7, #816]	; 0x330
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff f887 	bl	8000d84 <__aeabi_fmul>
 8001c76:	4603      	mov	r3, r0
 8001c78:	461a      	mov	r2, r3
 8001c7a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001c7e:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8001c82:	601a      	str	r2, [r3, #0]
    result.axis.y = vector.axis.y * scalar;
 8001c84:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001c88:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f8d7 1330 	ldr.w	r1, [r7, #816]	; 0x330
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff f876 	bl	8000d84 <__aeabi_fmul>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001ca0:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8001ca4:	605a      	str	r2, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001ca6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001caa:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f8d7 1330 	ldr.w	r1, [r7, #816]	; 0x330
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff f865 	bl	8000d84 <__aeabi_fmul>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001cc2:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8001cc6:	609a      	str	r2, [r3, #8]
    return result;
 8001cc8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001ccc:	f5a3 7222 	sub.w	r2, r3, #648	; 0x288
 8001cd0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001cd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001cda:	bf00      	nop
 8001cdc:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001ce0:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8001ce4:	461c      	mov	r4, r3
 8001ce6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001cea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001cee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001cf2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001cf6:	f5a3 7125 	sub.w	r1, r3, #660	; 0x294
 8001cfa:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001cfe:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 8001d02:	460b      	mov	r3, r1
 8001d04:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8001d0a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001d0e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001d18:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4610      	mov	r0, r2
 8001d22:	f7ff f82f 	bl	8000d84 <__aeabi_fmul>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461c      	mov	r4, r3
 8001d2a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001d2e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001d38:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4610      	mov	r0, r2
 8001d42:	f7ff f81f 	bl	8000d84 <__aeabi_fmul>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	f7fe ff10 	bl	8000b70 <__aeabi_fsub>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001d58:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8001d5c:	601a      	str	r2, [r3, #0]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001d5e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001d62:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001d6c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4619      	mov	r1, r3
 8001d74:	4610      	mov	r0, r2
 8001d76:	f7ff f805 	bl	8000d84 <__aeabi_fmul>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	461c      	mov	r4, r3
 8001d7e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001d82:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001d8c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	4619      	mov	r1, r3
 8001d94:	4610      	mov	r0, r2
 8001d96:	f7fe fff5 	bl	8000d84 <__aeabi_fmul>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4620      	mov	r0, r4
 8001da0:	f7fe fee6 	bl	8000b70 <__aeabi_fsub>
 8001da4:	4603      	mov	r3, r0
 8001da6:	461a      	mov	r2, r3
 8001da8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001dac:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8001db0:	605a      	str	r2, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001db2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001db6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001dc0:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4610      	mov	r0, r2
 8001dca:	f7fe ffdb 	bl	8000d84 <__aeabi_fmul>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	461c      	mov	r4, r3
 8001dd2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001dd6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001de0:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4619      	mov	r1, r3
 8001de8:	4610      	mov	r0, r2
 8001dea:	f7fe ffcb 	bl	8000d84 <__aeabi_fmul>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4619      	mov	r1, r3
 8001df2:	4620      	mov	r0, r4
 8001df4:	f7fe febc 	bl	8000b70 <__aeabi_fsub>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001e00:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8001e04:	609a      	str	r2, [r3, #8]
    return result;
 8001e06:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001e0a:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8001e0e:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8001e12:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001e18:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001e1c:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8001e20:	461c      	mov	r4, r3
 8001e22:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8001e26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001e2e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001e32:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8001e36:	461c      	mov	r4, r3
 8001e38:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8001e3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001e44:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001e48:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001e52:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	f7fe fe8a 	bl	8000b74 <__addsf3>
 8001e60:	4603      	mov	r3, r0
 8001e62:	461a      	mov	r2, r3
 8001e64:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001e68:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8001e6c:	601a      	str	r2, [r3, #0]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8001e6e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001e72:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001e7c:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	4619      	mov	r1, r3
 8001e84:	4610      	mov	r0, r2
 8001e86:	f7fe fe75 	bl	8000b74 <__addsf3>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001e92:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8001e96:	605a      	str	r2, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8001e98:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001e9c:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001ea6:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	4619      	mov	r1, r3
 8001eae:	4610      	mov	r0, r2
 8001eb0:	f7fe fe60 	bl	8000b74 <__addsf3>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001ebc:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8001ec0:	609a      	str	r2, [r3, #8]
    return result;
 8001ec2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001ec6:	f5a3 7134 	sub.w	r1, r3, #720	; 0x2d0
 8001eca:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001ece:	f5a3 7237 	sub.w	r2, r3, #732	; 0x2dc
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ed6:	e001      	b.n	8001edc <FusionAhrsUpdate+0xbf8>
 8001ed8:	5f3759df 	.word	0x5f3759df
 8001edc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }; // equal to 2nd column of rotation matrix representation scaled by 0.5

        // Calculate magnetometer feedback error
        halfFeedbackError = FusionVectorAdd(halfFeedbackError, FusionVectorCrossProduct(FusionVectorFastNormalise(FusionVectorCrossProduct(accelerometer, magnetometer)), halfWest));
 8001ee0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001ee4:	f5a3 7234 	sub.w	r2, r3, #720	; 0x2d0
 8001ee8:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8001eec:	ca07      	ldmia	r2, {r0, r1, r2}
 8001eee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ef2:	e000      	b.n	8001ef6 <FusionAhrsUpdate+0xc12>
            break;
 8001ef4:	bf00      	nop

    } while (false);

    // Ramp down gain until initialisation complete
    if (fusionAhrs->gain == 0) {
 8001ef6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001efa:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f04f 0100 	mov.w	r1, #0
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff f8d0 	bl	80010ac <__aeabi_fcmpeq>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d007      	beq.n	8001f22 <FusionAhrsUpdate+0xc3e>
        fusionAhrs->rampedGain = 0; // skip initialisation if gain is zero
 8001f12:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001f16:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	629a      	str	r2, [r3, #40]	; 0x28
    }
    float feedbackGain = fusionAhrs->gain;
 8001f22:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001f26:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    if (fusionAhrs->rampedGain > fusionAhrs->gain) {
 8001f32:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001f36:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f3e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001f42:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	f7ff f8d5 	bl	80010fc <__aeabi_fcmpgt>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d02f      	beq.n	8001fb8 <FusionAhrsUpdate+0xcd4>
        fusionAhrs->rampedGain -= (INITIAL_GAIN - fusionAhrs->gain) * samplePeriod / INITIALISATION_PERIOD;
 8001f58:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001f5c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001f64:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001f68:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	48cc      	ldr	r0, [pc, #816]	; (80022a4 <FusionAhrsUpdate+0xfc0>)
 8001f74:	f7fe fdfc 	bl	8000b70 <__aeabi_fsub>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe ff00 	bl	8000d84 <__aeabi_fmul>
 8001f84:	4603      	mov	r3, r0
 8001f86:	49c8      	ldr	r1, [pc, #800]	; (80022a8 <FusionAhrsUpdate+0xfc4>)
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe ffaf 	bl	8000eec <__aeabi_fdiv>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4619      	mov	r1, r3
 8001f92:	4620      	mov	r0, r4
 8001f94:	f7fe fdec 	bl	8000b70 <__aeabi_fsub>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001fa0:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28
        feedbackGain = fusionAhrs->rampedGain;
 8001fa8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001fac:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    return degrees * ((float) M_PI / 180.0f);
 8001fb8:	4bbc      	ldr	r3, [pc, #752]	; (80022ac <FusionAhrsUpdate+0xfc8>)
    }

    // Convert gyroscope to radians per second scaled by 0.5
    FusionVector3 halfGyroscope = FusionVectorMultiplyScalar(gyroscope, 0.5f * FusionDegreesToRadians(1.0f));
 8001fba:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fee0 	bl	8000d84 <__aeabi_fmul>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461c      	mov	r4, r3
 8001fc8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001fcc:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 8001fd0:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8001fd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001fda:	f8c7 4318 	str.w	r4, [r7, #792]	; 0x318
    result.axis.x = vector.axis.x * scalar;
 8001fde:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8001fe2:	f8d7 1318 	ldr.w	r1, [r7, #792]	; 0x318
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fecc 	bl	8000d84 <__aeabi_fmul>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
    result.axis.y = vector.axis.y * scalar;
 8001ff2:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8001ff6:	f8d7 1318 	ldr.w	r1, [r7, #792]	; 0x318
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fec2 	bl	8000d84 <__aeabi_fmul>
 8002000:	4603      	mov	r3, r0
 8002002:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
    result.axis.z = vector.axis.z * scalar;
 8002006:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800200a:	f8d7 1318 	ldr.w	r1, [r7, #792]	; 0x318
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe feb8 	bl	8000d84 <__aeabi_fmul>
 8002014:	4603      	mov	r3, r0
 8002016:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
    return result;
 800201a:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 800201e:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8002022:	ca07      	ldmia	r2, {r0, r1, r2}
 8002024:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002028:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 800202c:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 8002030:	ca07      	ldmia	r2, {r0, r1, r2}
 8002032:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002036:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800203a:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
    result.axis.x = vector.axis.x * scalar;
 800203e:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8002042:	f8d7 131c 	ldr.w	r1, [r7, #796]	; 0x31c
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fe9c 	bl	8000d84 <__aeabi_fmul>
 800204c:	4603      	mov	r3, r0
 800204e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    result.axis.y = vector.axis.y * scalar;
 8002052:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8002056:	f8d7 131c 	ldr.w	r1, [r7, #796]	; 0x31c
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fe92 	bl	8000d84 <__aeabi_fmul>
 8002060:	4603      	mov	r3, r0
 8002062:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
    result.axis.z = vector.axis.z * scalar;
 8002066:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800206a:	f8d7 131c 	ldr.w	r1, [r7, #796]	; 0x31c
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fe88 	bl	8000d84 <__aeabi_fmul>
 8002074:	4603      	mov	r3, r0
 8002076:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
    return result;
 800207a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800207e:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002082:	ca07      	ldmia	r2, {r0, r1, r2}
 8002084:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002088:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800208c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002090:	461c      	mov	r4, r3
 8002092:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8002096:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800209a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800209e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80020a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020a6:	461c      	mov	r4, r3
 80020a8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80020ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 80020b4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80020b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80020c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4619      	mov	r1, r3
 80020ca:	4610      	mov	r0, r2
 80020cc:	f7fe fd52 	bl	8000b74 <__addsf3>
 80020d0:	4603      	mov	r3, r0
 80020d2:	461a      	mov	r2, r3
 80020d4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80020d8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80020dc:	601a      	str	r2, [r3, #0]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 80020de:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80020e2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80020ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4619      	mov	r1, r3
 80020f4:	4610      	mov	r0, r2
 80020f6:	f7fe fd3d 	bl	8000b74 <__addsf3>
 80020fa:	4603      	mov	r3, r0
 80020fc:	461a      	mov	r2, r3
 80020fe:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002102:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002106:	605a      	str	r2, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8002108:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800210c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002116:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	4619      	mov	r1, r3
 800211e:	4610      	mov	r0, r2
 8002120:	f7fe fd28 	bl	8000b74 <__addsf3>
 8002124:	4603      	mov	r3, r0
 8002126:	461a      	mov	r2, r3
 8002128:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800212c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002130:	609a      	str	r2, [r3, #8]
    return result;
 8002132:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002136:	f5a3 718e 	sub.w	r1, r3, #284	; 0x11c
 800213a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800213e:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8002142:	460b      	mov	r3, r1
 8002144:	ca07      	ldmia	r2, {r0, r1, r2}
 8002146:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Apply feedback to gyroscope
    halfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(halfFeedbackError, feedbackGain));
 800214a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800214e:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8002152:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8002156:	ca07      	ldmia	r2, {r0, r1, r2}
 8002158:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800215c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002160:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002164:	461c      	mov	r4, r3
 8002166:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 800216a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800216e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002172:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8002176:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
    result.axis.x = vector.axis.x * scalar;
 800217a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800217e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f8d7 1320 	ldr.w	r1, [r7, #800]	; 0x320
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe fdfb 	bl	8000d84 <__aeabi_fmul>
 800218e:	4603      	mov	r3, r0
 8002190:	461a      	mov	r2, r3
 8002192:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002196:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800219a:	601a      	str	r2, [r3, #0]
    result.axis.y = vector.axis.y * scalar;
 800219c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80021a0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f8d7 1320 	ldr.w	r1, [r7, #800]	; 0x320
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe fdea 	bl	8000d84 <__aeabi_fmul>
 80021b0:	4603      	mov	r3, r0
 80021b2:	461a      	mov	r2, r3
 80021b4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80021b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80021bc:	605a      	str	r2, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 80021be:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80021c2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f8d7 1320 	ldr.w	r1, [r7, #800]	; 0x320
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe fdd9 	bl	8000d84 <__aeabi_fmul>
 80021d2:	4603      	mov	r3, r0
 80021d4:	461a      	mov	r2, r3
 80021d6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80021da:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80021de:	609a      	str	r2, [r3, #8]
    return result;
 80021e0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80021e4:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 80021e8:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80021ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80021ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80021f2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80021f6:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 80021fa:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80021fe:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4614      	mov	r4, r2
 8002206:	330c      	adds	r3, #12
 8002208:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800220a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800220e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002212:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002216:	461c      	mov	r4, r3
 8002218:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800221c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002220:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector3 vector) {
#define Q quaternion.element // define shorthand labels for more readable code
#define V vector.axis
    FusionQuaternion result;
    result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
 8002224:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002228:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8002232:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002236:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4619      	mov	r1, r3
 800223e:	4610      	mov	r0, r2
 8002240:	f7fe fda0 	bl	8000d84 <__aeabi_fmul>
 8002244:	4603      	mov	r3, r0
 8002246:	461c      	mov	r4, r3
 8002248:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800224c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002256:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4619      	mov	r1, r3
 800225e:	4610      	mov	r0, r2
 8002260:	f7fe fd90 	bl	8000d84 <__aeabi_fmul>
 8002264:	4603      	mov	r3, r0
 8002266:	4619      	mov	r1, r3
 8002268:	4620      	mov	r0, r4
 800226a:	f7fe fc81 	bl	8000b70 <__aeabi_fsub>
 800226e:	4603      	mov	r3, r0
 8002270:	461c      	mov	r4, r3
 8002272:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002276:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002280:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	4619      	mov	r1, r3
 8002288:	4610      	mov	r0, r2
 800228a:	f7fe fd7b 	bl	8000d84 <__aeabi_fmul>
 800228e:	4603      	mov	r3, r0
 8002290:	4619      	mov	r1, r3
 8002292:	4620      	mov	r0, r4
 8002294:	f7fe fc6c 	bl	8000b70 <__aeabi_fsub>
 8002298:	4603      	mov	r3, r0
 800229a:	461a      	mov	r2, r3
 800229c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80022a0:	e006      	b.n	80022b0 <FusionAhrsUpdate+0xfcc>
 80022a2:	bf00      	nop
 80022a4:	41200000 	.word	0x41200000
 80022a8:	40400000 	.word	0x40400000
 80022ac:	3c8efa35 	.word	0x3c8efa35
 80022b0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80022b4:	601a      	str	r2, [r3, #0]
    result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
 80022b6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80022ba:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80022c4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4619      	mov	r1, r3
 80022cc:	4610      	mov	r0, r2
 80022ce:	f7fe fd59 	bl	8000d84 <__aeabi_fmul>
 80022d2:	4603      	mov	r3, r0
 80022d4:	461c      	mov	r4, r3
 80022d6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80022da:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80022e4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	4619      	mov	r1, r3
 80022ec:	4610      	mov	r0, r2
 80022ee:	f7fe fd49 	bl	8000d84 <__aeabi_fmul>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4619      	mov	r1, r3
 80022f6:	4620      	mov	r0, r4
 80022f8:	f7fe fc3c 	bl	8000b74 <__addsf3>
 80022fc:	4603      	mov	r3, r0
 80022fe:	461c      	mov	r4, r3
 8002300:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002304:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800230e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4619      	mov	r1, r3
 8002316:	4610      	mov	r0, r2
 8002318:	f7fe fd34 	bl	8000d84 <__aeabi_fmul>
 800231c:	4603      	mov	r3, r0
 800231e:	4619      	mov	r1, r3
 8002320:	4620      	mov	r0, r4
 8002322:	f7fe fc25 	bl	8000b70 <__aeabi_fsub>
 8002326:	4603      	mov	r3, r0
 8002328:	461a      	mov	r2, r3
 800232a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800232e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002332:	605a      	str	r2, [r3, #4]
    result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
 8002334:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002338:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002342:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	4619      	mov	r1, r3
 800234a:	4610      	mov	r0, r2
 800234c:	f7fe fd1a 	bl	8000d84 <__aeabi_fmul>
 8002350:	4603      	mov	r3, r0
 8002352:	461c      	mov	r4, r3
 8002354:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002358:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002362:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4619      	mov	r1, r3
 800236a:	4610      	mov	r0, r2
 800236c:	f7fe fd0a 	bl	8000d84 <__aeabi_fmul>
 8002370:	4603      	mov	r3, r0
 8002372:	4619      	mov	r1, r3
 8002374:	4620      	mov	r0, r4
 8002376:	f7fe fbfb 	bl	8000b70 <__aeabi_fsub>
 800237a:	4603      	mov	r3, r0
 800237c:	461c      	mov	r4, r3
 800237e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002382:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800238c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4619      	mov	r1, r3
 8002394:	4610      	mov	r0, r2
 8002396:	f7fe fcf5 	bl	8000d84 <__aeabi_fmul>
 800239a:	4603      	mov	r3, r0
 800239c:	4619      	mov	r1, r3
 800239e:	4620      	mov	r0, r4
 80023a0:	f7fe fbe8 	bl	8000b74 <__addsf3>
 80023a4:	4603      	mov	r3, r0
 80023a6:	461a      	mov	r2, r3
 80023a8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80023ac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80023b0:	609a      	str	r2, [r3, #8]
    result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
 80023b2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80023b6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80023c0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	4619      	mov	r1, r3
 80023c8:	4610      	mov	r0, r2
 80023ca:	f7fe fcdb 	bl	8000d84 <__aeabi_fmul>
 80023ce:	4603      	mov	r3, r0
 80023d0:	461c      	mov	r4, r3
 80023d2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80023d6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80023e0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4619      	mov	r1, r3
 80023e8:	4610      	mov	r0, r2
 80023ea:	f7fe fccb 	bl	8000d84 <__aeabi_fmul>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4619      	mov	r1, r3
 80023f2:	4620      	mov	r0, r4
 80023f4:	f7fe fbbe 	bl	8000b74 <__addsf3>
 80023f8:	4603      	mov	r3, r0
 80023fa:	461c      	mov	r4, r3
 80023fc:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002400:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800240a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4619      	mov	r1, r3
 8002412:	4610      	mov	r0, r2
 8002414:	f7fe fcb6 	bl	8000d84 <__aeabi_fmul>
 8002418:	4603      	mov	r3, r0
 800241a:	4619      	mov	r1, r3
 800241c:	4620      	mov	r0, r4
 800241e:	f7fe fba7 	bl	8000b70 <__aeabi_fsub>
 8002422:	4603      	mov	r3, r0
 8002424:	461a      	mov	r2, r3
 8002426:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800242a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800242e:	60da      	str	r2, [r3, #12]
    return result;
 8002430:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002434:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002438:	f507 7442 	add.w	r4, r7, #776	; 0x308
 800243c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800243e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002442:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002446:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 800244a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800244e:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4614      	mov	r4, r2
 8002456:	330c      	adds	r3, #12
 8002458:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800245a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800245e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002462:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002466:	461c      	mov	r4, r3
 8002468:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800246c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800246e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = quaternionA.element.w + quaternionB.element.w;
 8002472:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002476:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002480:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4619      	mov	r1, r3
 8002488:	4610      	mov	r0, r2
 800248a:	f7fe fb73 	bl	8000b74 <__addsf3>
 800248e:	4603      	mov	r3, r0
 8002490:	461a      	mov	r2, r3
 8002492:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002496:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800249a:	601a      	str	r2, [r3, #0]
    result.element.x = quaternionA.element.x + quaternionB.element.x;
 800249c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80024a0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80024aa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	4619      	mov	r1, r3
 80024b2:	4610      	mov	r0, r2
 80024b4:	f7fe fb5e 	bl	8000b74 <__addsf3>
 80024b8:	4603      	mov	r3, r0
 80024ba:	461a      	mov	r2, r3
 80024bc:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80024c0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80024c4:	605a      	str	r2, [r3, #4]
    result.element.y = quaternionA.element.y + quaternionB.element.y;
 80024c6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80024ca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80024d4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	4619      	mov	r1, r3
 80024dc:	4610      	mov	r0, r2
 80024de:	f7fe fb49 	bl	8000b74 <__addsf3>
 80024e2:	4603      	mov	r3, r0
 80024e4:	461a      	mov	r2, r3
 80024e6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80024ea:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80024ee:	609a      	str	r2, [r3, #8]
    result.element.z = quaternionA.element.z + quaternionB.element.z;
 80024f0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80024f4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80024fe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4619      	mov	r1, r3
 8002506:	4610      	mov	r0, r2
 8002508:	f7fe fb34 	bl	8000b74 <__addsf3>
 800250c:	4603      	mov	r3, r0
 800250e:	461a      	mov	r2, r3
 8002510:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002514:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002518:	60da      	str	r2, [r3, #12]
    return result;
 800251a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800251e:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8002522:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002526:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800252a:	4614      	mov	r4, r2
 800252c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800252e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Integrate rate of change of quaternion
    fusionAhrs->quaternion = FusionQuaternionAdd(fusionAhrs->quaternion, FusionQuaternionMultiplyVector(fusionAhrs->quaternion, FusionVectorMultiplyScalar(halfGyroscope, samplePeriod)));
 8002532:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002536:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8002540:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 8002544:	f103 040c 	add.w	r4, r3, #12
 8002548:	4613      	mov	r3, r2
 800254a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800254c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002550:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002554:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8002558:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800255c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4614      	mov	r4, r2
 8002564:	330c      	adds	r3, #12
 8002566:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002568:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be normalised.
 * @return Normalised quaternion.
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionFastNormalise(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800256c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002570:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800257a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f7fe fbfe 	bl	8000d84 <__aeabi_fmul>
 8002588:	4603      	mov	r3, r0
 800258a:	461c      	mov	r4, r3
 800258c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002590:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800259a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	4619      	mov	r1, r3
 80025a2:	4610      	mov	r0, r2
 80025a4:	f7fe fbee 	bl	8000d84 <__aeabi_fmul>
 80025a8:	4603      	mov	r3, r0
 80025aa:	4619      	mov	r1, r3
 80025ac:	4620      	mov	r0, r4
 80025ae:	f7fe fae1 	bl	8000b74 <__addsf3>
 80025b2:	4603      	mov	r3, r0
 80025b4:	461c      	mov	r4, r3
 80025b6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80025ba:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80025c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	4619      	mov	r1, r3
 80025cc:	4610      	mov	r0, r2
 80025ce:	f7fe fbd9 	bl	8000d84 <__aeabi_fmul>
 80025d2:	4603      	mov	r3, r0
 80025d4:	4619      	mov	r1, r3
 80025d6:	4620      	mov	r0, r4
 80025d8:	f7fe facc 	bl	8000b74 <__addsf3>
 80025dc:	4603      	mov	r3, r0
 80025de:	461c      	mov	r4, r3
 80025e0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80025e4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80025ee:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4619      	mov	r1, r3
 80025f6:	4610      	mov	r0, r2
 80025f8:	f7fe fbc4 	bl	8000d84 <__aeabi_fmul>
 80025fc:	4603      	mov	r3, r0
 80025fe:	4619      	mov	r1, r3
 8002600:	4620      	mov	r0, r4
 8002602:	f7fe fab7 	bl	8000b74 <__addsf3>
 8002606:	4603      	mov	r3, r0
 8002608:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
    float halfx = 0.5f * x;
 800260c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002610:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8002614:	f7fe fbb6 	bl	8000d84 <__aeabi_fmul>
 8002618:	4603      	mov	r3, r0
 800261a:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
    float y = x;
 800261e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002622:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002626:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 800262a:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 800262c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002636:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800263a:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 800263c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002640:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	105a      	asrs	r2, r3, #1
 8002648:	4bbf      	ldr	r3, [pc, #764]	; (8002948 <FusionAhrsUpdate+0x1664>)
 800264a:	1a9b      	subs	r3, r3, r2
 800264c:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8002650:	f5a2 72f2 	sub.w	r2, r2, #484	; 0x1e4
 8002654:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8002656:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002660:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002664:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8002666:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800266a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f8d7 1328 	ldr.w	r1, [r7, #808]	; 0x328
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fb85 	bl	8000d84 <__aeabi_fmul>
 800267a:	4603      	mov	r3, r0
 800267c:	461a      	mov	r2, r3
 800267e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002682:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4619      	mov	r1, r3
 800268a:	4610      	mov	r0, r2
 800268c:	f7fe fb7a 	bl	8000d84 <__aeabi_fmul>
 8002690:	4603      	mov	r3, r0
 8002692:	4619      	mov	r1, r3
 8002694:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8002698:	f7fe fa6a 	bl	8000b70 <__aeabi_fsub>
 800269c:	4603      	mov	r3, r0
 800269e:	461a      	mov	r2, r3
 80026a0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80026a4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4619      	mov	r1, r3
 80026ac:	4610      	mov	r0, r2
 80026ae:	f7fe fb69 	bl	8000d84 <__aeabi_fmul>
 80026b2:	4603      	mov	r3, r0
 80026b4:	461a      	mov	r2, r3
 80026b6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80026ba:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026be:	601a      	str	r2, [r3, #0]
    return y;
 80026c0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80026c4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026c8:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 80026ca:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
    FusionQuaternion normalisedQuaternion;
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 80026ce:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80026d2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f8d7 1324 	ldr.w	r1, [r7, #804]	; 0x324
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe fb51 	bl	8000d84 <__aeabi_fmul>
 80026e2:	4603      	mov	r3, r0
 80026e4:	461a      	mov	r2, r3
 80026e6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80026ea:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80026ee:	601a      	str	r2, [r3, #0]
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 80026f0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80026f4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f8d7 1324 	ldr.w	r1, [r7, #804]	; 0x324
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe fb40 	bl	8000d84 <__aeabi_fmul>
 8002704:	4603      	mov	r3, r0
 8002706:	461a      	mov	r2, r3
 8002708:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800270c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002710:	605a      	str	r2, [r3, #4]
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 8002712:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002716:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f8d7 1324 	ldr.w	r1, [r7, #804]	; 0x324
 8002720:	4618      	mov	r0, r3
 8002722:	f7fe fb2f 	bl	8000d84 <__aeabi_fmul>
 8002726:	4603      	mov	r3, r0
 8002728:	461a      	mov	r2, r3
 800272a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800272e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002732:	609a      	str	r2, [r3, #8]
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 8002734:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002738:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f8d7 1324 	ldr.w	r1, [r7, #804]	; 0x324
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fb1e 	bl	8000d84 <__aeabi_fmul>
 8002748:	4603      	mov	r3, r0
 800274a:	461a      	mov	r2, r3
 800274c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002750:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002754:	60da      	str	r2, [r3, #12]
    return normalisedQuaternion;
 8002756:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800275a:	f5a3 72e6 	sub.w	r2, r3, #460	; 0x1cc
 800275e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002762:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002766:	4614      	mov	r4, r2
 8002768:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800276a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Normalise quaternion
    fusionAhrs->quaternion = FusionQuaternionFastNormalise(fusionAhrs->quaternion);
 800276e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002772:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800277c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002780:	f103 040c 	add.w	r4, r3, #12
 8002784:	4613      	mov	r3, r2
 8002786:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002788:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Calculate linear acceleration
    const FusionVector3 gravity = {
        .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 800278c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002790:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800279c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	4619      	mov	r1, r3
 80027a6:	4610      	mov	r0, r2
 80027a8:	f7fe faec 	bl	8000d84 <__aeabi_fmul>
 80027ac:	4603      	mov	r3, r0
 80027ae:	461c      	mov	r4, r3
 80027b0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80027b4:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80027c0:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	4619      	mov	r1, r3
 80027ca:	4610      	mov	r0, r2
 80027cc:	f7fe fada 	bl	8000d84 <__aeabi_fmul>
 80027d0:	4603      	mov	r3, r0
 80027d2:	4619      	mov	r1, r3
 80027d4:	4620      	mov	r0, r4
 80027d6:	f7fe f9cb 	bl	8000b70 <__aeabi_fsub>
 80027da:	4603      	mov	r3, r0
 80027dc:	4619      	mov	r1, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe f9c8 	bl	8000b74 <__addsf3>
 80027e4:	4603      	mov	r3, r0
    const FusionVector3 gravity = {
 80027e6:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        .axis.y = 2.0f * (Q.w * Q.x + Q.y * Q.z),
 80027ea:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80027ee:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80027fa:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	4619      	mov	r1, r3
 8002804:	4610      	mov	r0, r2
 8002806:	f7fe fabd 	bl	8000d84 <__aeabi_fmul>
 800280a:	4603      	mov	r3, r0
 800280c:	461c      	mov	r4, r3
 800280e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002812:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800281e:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	4619      	mov	r1, r3
 8002828:	4610      	mov	r0, r2
 800282a:	f7fe faab 	bl	8000d84 <__aeabi_fmul>
 800282e:	4603      	mov	r3, r0
 8002830:	4619      	mov	r1, r3
 8002832:	4620      	mov	r0, r4
 8002834:	f7fe f99e 	bl	8000b74 <__addsf3>
 8002838:	4603      	mov	r3, r0
 800283a:	4619      	mov	r1, r3
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe f999 	bl	8000b74 <__addsf3>
 8002842:	4603      	mov	r3, r0
    const FusionVector3 gravity = {
 8002844:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
        .axis.z = 2.0f * (Q.w * Q.w - 0.5f + Q.z * Q.z),
 8002848:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800284c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002858:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4619      	mov	r1, r3
 8002862:	4610      	mov	r0, r2
 8002864:	f7fe fa8e 	bl	8000d84 <__aeabi_fmul>
 8002868:	4603      	mov	r3, r0
 800286a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe f97e 	bl	8000b70 <__aeabi_fsub>
 8002874:	4603      	mov	r3, r0
 8002876:	461c      	mov	r4, r3
 8002878:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800287c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699a      	ldr	r2, [r3, #24]
 8002884:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002888:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	4619      	mov	r1, r3
 8002892:	4610      	mov	r0, r2
 8002894:	f7fe fa76 	bl	8000d84 <__aeabi_fmul>
 8002898:	4603      	mov	r3, r0
 800289a:	4619      	mov	r1, r3
 800289c:	4620      	mov	r0, r4
 800289e:	f7fe f969 	bl	8000b74 <__addsf3>
 80028a2:	4603      	mov	r3, r0
 80028a4:	4619      	mov	r1, r3
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe f964 	bl	8000b74 <__addsf3>
 80028ac:	4603      	mov	r3, r0
    const FusionVector3 gravity = {
 80028ae:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80028b2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80028b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ba:	461c      	mov	r4, r3
 80028bc:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80028c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028c8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80028cc:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80028d0:	461c      	mov	r4, r3
 80028d2:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80028d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 80028de:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80028e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80028ec:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4619      	mov	r1, r3
 80028f4:	4610      	mov	r0, r2
 80028f6:	f7fe f93b 	bl	8000b70 <__aeabi_fsub>
 80028fa:	4603      	mov	r3, r0
 80028fc:	461a      	mov	r2, r3
 80028fe:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002902:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8002906:	601a      	str	r2, [r3, #0]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8002908:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800290c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002916:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4619      	mov	r1, r3
 800291e:	4610      	mov	r0, r2
 8002920:	f7fe f926 	bl	8000b70 <__aeabi_fsub>
 8002924:	4603      	mov	r3, r0
 8002926:	461a      	mov	r2, r3
 8002928:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800292c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8002930:	605a      	str	r2, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8002932:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002936:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002940:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002944:	e002      	b.n	800294c <FusionAhrsUpdate+0x1668>
 8002946:	bf00      	nop
 8002948:	5f3759df 	.word	0x5f3759df
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	4619      	mov	r1, r3
 8002950:	4610      	mov	r0, r2
 8002952:	f7fe f90d 	bl	8000b70 <__aeabi_fsub>
 8002956:	4603      	mov	r3, r0
 8002958:	461a      	mov	r2, r3
 800295a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800295e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8002962:	609a      	str	r2, [r3, #8]
    return result;
 8002964:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002968:	f5a3 7102 	sub.w	r1, r3, #520	; 0x208
 800296c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002970:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8002974:	460b      	mov	r3, r1
 8002976:	ca07      	ldmia	r2, {r0, r1, r2}
 8002978:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }; // equal to 3rd column of rotation matrix representation
    fusionAhrs->linearAcceleration = FusionVectorSubtract(accelerometer, gravity);
 800297c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002980:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800298a:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 800298e:	331c      	adds	r3, #28
 8002990:	ca07      	ldmia	r2, {r0, r1, r2}
 8002992:	e883 0007 	stmia.w	r3, {r0, r1, r2}

#undef Q // undefine shorthand label
}
 8002996:	bf00      	nop
 8002998:	f507 7757 	add.w	r7, r7, #860	; 0x35c
 800299c:	46bd      	mov	sp, r7
 800299e:	bd90      	pop	{r4, r7, pc}

080029a0 <FusionAhrsUpdateWithoutMagnetometer>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdateWithoutMagnetometer(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const float samplePeriod) {
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b091      	sub	sp, #68	; 0x44
 80029a4:	af08      	add	r7, sp, #32
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	4638      	mov	r0, r7
 80029aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}

    // Update AHRS algorithm
    FusionAhrsUpdate(fusionAhrs, gyroscope, accelerometer, FUSION_VECTOR3_ZERO, samplePeriod);
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	61fb      	str	r3, [r7, #28]
 80029c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c2:	9306      	str	r3, [sp, #24]
 80029c4:	ac03      	add	r4, sp, #12
 80029c6:	f107 0314 	add.w	r3, r7, #20
 80029ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80029d2:	466b      	mov	r3, sp
 80029d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80029d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80029da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80029de:	463b      	mov	r3, r7
 80029e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f7fe fc7e 	bl	80012e4 <FusionAhrsUpdate>

    // Zero yaw once initialisation complete
    if (FusionAhrsIsInitialising(fusionAhrs) == true) {
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 f841 	bl	8002a70 <FusionAhrsIsInitialising>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d004      	beq.n	80029fe <FusionAhrsUpdateWithoutMagnetometer+0x5e>
        fusionAhrs->zeroYawPending = true;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        if (fusionAhrs->zeroYawPending == true) {
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
            fusionAhrs->zeroYawPending = false;
        }
    }
}
 80029fc:	e00d      	b.n	8002a1a <FusionAhrsUpdateWithoutMagnetometer+0x7a>
        if (fusionAhrs->zeroYawPending == true) {
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <FusionAhrsUpdateWithoutMagnetometer+0x7a>
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
 8002a08:	f04f 0100 	mov.w	r1, #0
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f847 	bl	8002aa0 <FusionAhrsSetYaw>
            fusionAhrs->zeroYawPending = false;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8002a1a:	bf00      	nop
 8002a1c:	3724      	adds	r7, #36	; 0x24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd90      	pop	{r4, r7, pc}

08002a22 <FusionAhrsGetQuaternion>:
/**
 * @brief Gets the quaternion describing the sensor relative to the Earth.
 * @param fusionAhrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs * const fusionAhrs) {
 8002a22:	b490      	push	{r4, r7}
 8002a24:	b08a      	sub	sp, #40	; 0x28
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	6039      	str	r1, [r7, #0]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	f107 0418 	add.w	r4, r7, #24
 8002a32:	330c      	adds	r3, #12
 8002a34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conjugate.element.w = quaternion.element.w;
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	60bb      	str	r3, [r7, #8]
    conjugate.element.x = -1.0f * quaternion.element.x;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a44:	60fb      	str	r3, [r7, #12]
    conjugate.element.y = -1.0f * quaternion.element.y;
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a4c:	613b      	str	r3, [r7, #16]
    conjugate.element.z = -1.0f * quaternion.element.z;
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a54:	617b      	str	r3, [r7, #20]
    return conjugate;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	461c      	mov	r4, r3
 8002a5a:	f107 0308 	add.w	r3, r7, #8
 8002a5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return FusionQuaternionConjugate(fusionAhrs->quaternion);
 8002a64:	bf00      	nop
}
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	3728      	adds	r7, #40	; 0x28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc90      	pop	{r4, r7}
 8002a6e:	4770      	bx	lr

08002a70 <FusionAhrsIsInitialising>:
/**
 * @brief Returns true while the AHRS algorithm is initialising.
 * @param fusionAhrs AHRS algorithm structure.
 * @return True while the AHRS algorithm is initialising.
 */
bool FusionAhrsIsInitialising(const FusionAhrs * const fusionAhrs) {
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
    return fusionAhrs->rampedGain > fusionAhrs->gain;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2101      	movs	r1, #1
 8002a82:	460c      	mov	r4, r1
 8002a84:	4619      	mov	r1, r3
 8002a86:	4610      	mov	r0, r2
 8002a88:	f7fe fb38 	bl	80010fc <__aeabi_fcmpgt>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <FusionAhrsIsInitialising+0x26>
 8002a92:	2300      	movs	r3, #0
 8002a94:	461c      	mov	r4, r3
 8002a96:	b2e3      	uxtb	r3, r4
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd90      	pop	{r4, r7, pc}

08002aa0 <FusionAhrsSetYaw>:
 * AHRS algorithm.  This function can be used to reset drift in yaw when the
 * AHRS algorithm is being used without a magnetometer.
 * @param fusionAhrs AHRS algorithm structure.
 * @param yaw Yaw angle in degrees.
 */
void FusionAhrsSetYaw(FusionAhrs * const fusionAhrs, const float yaw) {
 8002aa0:	b5b0      	push	{r4, r5, r7, lr}
 8002aa2:	b0a6      	sub	sp, #152	; 0x98
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8002ab0:	330c      	adds	r3, #12
 8002ab2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ab4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8002ab8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe f960 	bl	8000d84 <__aeabi_fmul>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	461c      	mov	r4, r3
 8002ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002acc:	4611      	mov	r1, r2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe f958 	bl	8000d84 <__aeabi_fmul>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4620      	mov	r0, r4
 8002ada:	f7fe f84b 	bl	8000b74 <__addsf3>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	461c      	mov	r4, r3
 8002ae2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ae4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe f94b 	bl	8000d84 <__aeabi_fmul>
 8002aee:	4603      	mov	r3, r0
 8002af0:	4619      	mov	r1, r3
 8002af2:	4620      	mov	r0, r4
 8002af4:	f7fe f83e 	bl	8000b74 <__addsf3>
 8002af8:	4603      	mov	r3, r0
 8002afa:	461c      	mov	r4, r3
 8002afc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002afe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002b00:	4611      	mov	r1, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe f93e 	bl	8000d84 <__aeabi_fmul>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	f7fe f831 	bl	8000b74 <__addsf3>
 8002b12:	4603      	mov	r3, r0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f00d ff03 	bl	8010920 <sqrtf>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002b22:	f7fe f9e3 	bl	8000eec <__aeabi_fdiv>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 8002b2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b2e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe f926 	bl	8000d84 <__aeabi_fmul>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	64bb      	str	r3, [r7, #72]	; 0x48
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 8002b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b3e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe f91e 	bl	8000d84 <__aeabi_fmul>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 8002b4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b4e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe f916 	bl	8000d84 <__aeabi_fmul>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	653b      	str	r3, [r7, #80]	; 0x50
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 8002b5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b5e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe f90e 	bl	8000d84 <__aeabi_fmul>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	657b      	str	r3, [r7, #84]	; 0x54
    return normalisedQuaternion;
 8002b6c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002b70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code
    fusionAhrs->quaternion = FusionQuaternionNormalise(fusionAhrs->quaternion); // quaternion must be normalised accurately (approximation not sufficient)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f103 040c 	add.w	r4, r3, #12
 8002b80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float inverseYaw = atan2f(Q.x * Q.y + Q.w * Q.z, Q.w * Q.w - 0.5f + Q.x * Q.x); // Euler angle of conjugate
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	4619      	mov	r1, r3
 8002b94:	4610      	mov	r0, r2
 8002b96:	f7fe f8f5 	bl	8000d84 <__aeabi_fmul>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	461c      	mov	r4, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4610      	mov	r0, r2
 8002baa:	f7fe f8eb 	bl	8000d84 <__aeabi_fmul>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4620      	mov	r0, r4
 8002bb4:	f7fd ffde 	bl	8000b74 <__addsf3>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	461c      	mov	r4, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	f7fe f8dc 	bl	8000d84 <__aeabi_fmul>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fd ffcc 	bl	8000b70 <__aeabi_fsub>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	461d      	mov	r5, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	4619      	mov	r1, r3
 8002be6:	4610      	mov	r0, r2
 8002be8:	f7fe f8cc 	bl	8000d84 <__aeabi_fmul>
 8002bec:	4603      	mov	r3, r0
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4628      	mov	r0, r5
 8002bf2:	f7fd ffbf 	bl	8000b74 <__addsf3>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f00d fe8e 	bl	801091c <atan2f>
 8002c00:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    return degrees * ((float) M_PI / 180.0f);
 8002c0a:	4983      	ldr	r1, [pc, #524]	; (8002e18 <FusionAhrsSetYaw+0x378>)
 8002c0c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002c10:	f7fe f8b8 	bl	8000d84 <__aeabi_fmul>
 8002c14:	4603      	mov	r3, r0
    const float halfInverseYawMinusOffset = 0.5f * (inverseYaw - FusionDegreesToRadians(yaw));
 8002c16:	4619      	mov	r1, r3
 8002c18:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002c1c:	f7fd ffa8 	bl	8000b70 <__aeabi_fsub>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe f8ac 	bl	8000d84 <__aeabi_fmul>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    const FusionQuaternion inverseYawQuaternion = {
        .element.w = cosf(halfInverseYawMinusOffset),
 8002c32:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002c36:	f00d fd77 	bl	8010728 <cosf>
 8002c3a:	4603      	mov	r3, r0
    const FusionQuaternion inverseYawQuaternion = {
 8002c3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        .element.x = 0.0f,
        .element.y = 0.0f,
        .element.z = -1.0f * sinf(halfInverseYawMinusOffset),
 8002c4c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002c50:	f00d fda2 	bl	8010798 <sinf>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    const FusionQuaternion inverseYawQuaternion = {
 8002c5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c5e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002c62:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002c66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002c72:	330c      	adds	r3, #12
 8002c74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
 8002c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fe f87f 	bl	8000d84 <__aeabi_fmul>
 8002c86:	4603      	mov	r3, r0
 8002c88:	461c      	mov	r4, r3
 8002c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fe f877 	bl	8000d84 <__aeabi_fmul>
 8002c96:	4603      	mov	r3, r0
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f7fd ff68 	bl	8000b70 <__aeabi_fsub>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	461c      	mov	r4, r3
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ca8:	4611      	mov	r1, r2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fe f86a 	bl	8000d84 <__aeabi_fmul>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	f7fd ff5b 	bl	8000b70 <__aeabi_fsub>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	461c      	mov	r4, r3
 8002cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fe f85d 	bl	8000d84 <__aeabi_fmul>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4620      	mov	r0, r4
 8002cd0:	f7fd ff4e 	bl	8000b70 <__aeabi_fsub>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	60bb      	str	r3, [r7, #8]
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
 8002cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe f850 	bl	8000d84 <__aeabi_fmul>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	461c      	mov	r4, r3
 8002ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe f848 	bl	8000d84 <__aeabi_fmul>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	f7fd ff3b 	bl	8000b74 <__addsf3>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	461c      	mov	r4, r3
 8002d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d06:	4611      	mov	r1, r2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fe f83b 	bl	8000d84 <__aeabi_fmul>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4619      	mov	r1, r3
 8002d12:	4620      	mov	r0, r4
 8002d14:	f7fd ff2e 	bl	8000b74 <__addsf3>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	461c      	mov	r4, r3
 8002d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe f82e 	bl	8000d84 <__aeabi_fmul>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f7fd ff1f 	bl	8000b70 <__aeabi_fsub>
 8002d32:	4603      	mov	r3, r0
 8002d34:	60fb      	str	r3, [r7, #12]
    result.element.y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x;
 8002d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe f821 	bl	8000d84 <__aeabi_fmul>
 8002d42:	4603      	mov	r3, r0
 8002d44:	461c      	mov	r4, r3
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fe f819 	bl	8000d84 <__aeabi_fmul>
 8002d52:	4603      	mov	r3, r0
 8002d54:	4619      	mov	r1, r3
 8002d56:	4620      	mov	r0, r4
 8002d58:	f7fd ff0a 	bl	8000b70 <__aeabi_fsub>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	461c      	mov	r4, r3
 8002d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d64:	4611      	mov	r1, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe f80c 	bl	8000d84 <__aeabi_fmul>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4620      	mov	r0, r4
 8002d72:	f7fd feff 	bl	8000b74 <__addsf3>
 8002d76:	4603      	mov	r3, r0
 8002d78:	461c      	mov	r4, r3
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d7e:	4611      	mov	r1, r2
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd ffff 	bl	8000d84 <__aeabi_fmul>
 8002d86:	4603      	mov	r3, r0
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	f7fd fef2 	bl	8000b74 <__addsf3>
 8002d90:	4603      	mov	r3, r0
 8002d92:	613b      	str	r3, [r7, #16]
    result.element.z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w;
 8002d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fd fff2 	bl	8000d84 <__aeabi_fmul>
 8002da0:	4603      	mov	r3, r0
 8002da2:	461c      	mov	r4, r3
 8002da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002da8:	4611      	mov	r1, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd ffea 	bl	8000d84 <__aeabi_fmul>
 8002db0:	4603      	mov	r3, r0
 8002db2:	4619      	mov	r1, r3
 8002db4:	4620      	mov	r0, r4
 8002db6:	f7fd fedd 	bl	8000b74 <__addsf3>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	461c      	mov	r4, r3
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fd ffdd 	bl	8000d84 <__aeabi_fmul>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4620      	mov	r0, r4
 8002dd0:	f7fd fece 	bl	8000b70 <__aeabi_fsub>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	461c      	mov	r4, r3
 8002dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ddc:	4611      	mov	r1, r2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fd ffd0 	bl	8000d84 <__aeabi_fmul>
 8002de4:	4603      	mov	r3, r0
 8002de6:	4619      	mov	r1, r3
 8002de8:	4620      	mov	r0, r4
 8002dea:	f7fd fec3 	bl	8000b74 <__addsf3>
 8002dee:	4603      	mov	r3, r0
 8002df0:	617b      	str	r3, [r7, #20]
    return result;
 8002df2:	f107 0418 	add.w	r4, r7, #24
 8002df6:	f107 0308 	add.w	r3, r7, #8
 8002dfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    };
    fusionAhrs->quaternion = FusionQuaternionMultiply(inverseYawQuaternion, fusionAhrs->quaternion);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f103 040c 	add.w	r4, r3, #12
 8002e06:	f107 0318 	add.w	r3, r7, #24
 8002e0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#undef Q // undefine shorthand label
}
 8002e10:	bf00      	nop
 8002e12:	3798      	adds	r7, #152	; 0x98
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bdb0      	pop	{r4, r5, r7, pc}
 8002e18:	3c8efa35 	.word	0x3c8efa35
 8002e1c:	00000000 	.word	0x00000000

08002e20 <FusionBiasInitialise>:
 * @param threshold Gyroscope threshold (in degrees per second) below which the
 * gyroscope is detected stationary.
 * @param samplePeriod Nominal sample period (in seconds) corresponding the rate
 * at which the application will update the algorithm.
 */
void FusionBiasInitialise(FusionBias * const fusionBias, const float threshold, const float samplePeriod) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
    fusionBias->threshold = threshold;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	601a      	str	r2, [r3, #0]
    fusionBias->samplePeriod = samplePeriod;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	605a      	str	r2, [r3, #4]
    fusionBias->filterCoefficient = (2.0f * M_PI * CORNER_FREQUENCY) * fusionBias->samplePeriod;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fd faf3 	bl	8000428 <__aeabi_f2d>
 8002e42:	a311      	add	r3, pc, #68	; (adr r3, 8002e88 <FusionBiasInitialise+0x68>)
 8002e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e48:	f7fd fb46 	bl	80004d8 <__aeabi_dmul>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4610      	mov	r0, r2
 8002e52:	4619      	mov	r1, r3
 8002e54:	f7fd fe38 	bl	8000ac8 <__aeabi_d2f>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	609a      	str	r2, [r3, #8]
    fusionBias->stationaryTimer = 0.0f;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	60da      	str	r2, [r3, #12]
    fusionBias->gyroscopeBias = FUSION_VECTOR3_ZERO;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	611a      	str	r2, [r3, #16]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	615a      	str	r2, [r3, #20]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	619a      	str	r2, [r3, #24]
}
 8002e7e:	bf00      	nop
 8002e80:	3720      	adds	r7, #32
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	8c0eff43 	.word	0x8c0eff43
 8002e8c:	3fc015bf 	.word	0x3fc015bf

08002e90 <FusionBiasUpdate>:
 * corrected gyroscope measurement.
 * @param fusionBias FusionBias structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector3 FusionBiasUpdate(FusionBias * const fusionBias, FusionVector3 gyroscope) {
 8002e90:	b082      	sub	sp, #8
 8002e92:	b590      	push	{r4, r7, lr}
 8002e94:	b0a3      	sub	sp, #140	; 0x8c
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	6039      	str	r1, [r7, #0]
 8002e9c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002ea0:	e881 000c 	stmia.w	r1, {r2, r3}
 8002ea4:	f107 0318 	add.w	r3, r7, #24
 8002ea8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002eac:	ca07      	ldmia	r2, {r0, r1, r2}
 8002eae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb8:	3210      	adds	r2, #16
 8002eba:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ebc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd fe52 	bl	8000b70 <__aeabi_fsub>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	60fb      	str	r3, [r7, #12]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fd fe4a 	bl	8000b70 <__aeabi_fsub>
 8002edc:	4603      	mov	r3, r0
 8002ede:	613b      	str	r3, [r7, #16]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd fe42 	bl	8000b70 <__aeabi_fsub>
 8002eec:	4603      	mov	r3, r0
 8002eee:	617b      	str	r3, [r7, #20]
    return result;
 8002ef0:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8002ef4:	f107 030c 	add.w	r3, r7, #12
 8002ef8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002efc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    // Subtract bias from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, fusionBias->gyroscopeBias);

    // Reset stationary timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > fusionBias->threshold) || (fabs(gyroscope.axis.y) > fusionBias->threshold) || (fabs(gyroscope.axis.z) > fusionBias->threshold)) {
 8002f00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4610      	mov	r0, r2
 8002f10:	f7fe f8f4 	bl	80010fc <__aeabi_fcmpgt>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d119      	bne.n	8002f4e <FusionBiasUpdate+0xbe>
 8002f1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4619      	mov	r1, r3
 8002f28:	4610      	mov	r0, r2
 8002f2a:	f7fe f8e7 	bl	80010fc <__aeabi_fcmpgt>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10c      	bne.n	8002f4e <FusionBiasUpdate+0xbe>
 8002f34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4619      	mov	r1, r3
 8002f42:	4610      	mov	r0, r2
 8002f44:	f7fe f8da 	bl	80010fc <__aeabi_fcmpgt>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00c      	beq.n	8002f68 <FusionBiasUpdate+0xd8>
        fusionBias->stationaryTimer = 0.0f;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	60da      	str	r2, [r3, #12]
        return gyroscope;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	461c      	mov	r4, r3
 8002f5a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002f66:	e083      	b.n	8003070 <FusionBiasUpdate+0x1e0>
    }

    // Increment stationary timer while gyroscope stationary
    if (fusionBias->stationaryTimer < STATIONARY_PERIOD) {
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4944      	ldr	r1, [pc, #272]	; (8003080 <FusionBiasUpdate+0x1f0>)
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe f8a6 	bl	80010c0 <__aeabi_fcmplt>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d014      	beq.n	8002fa4 <FusionBiasUpdate+0x114>
        fusionBias->stationaryTimer += fusionBias->samplePeriod;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4619      	mov	r1, r3
 8002f84:	4610      	mov	r0, r2
 8002f86:	f7fd fdf5 	bl	8000b74 <__addsf3>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	60da      	str	r2, [r3, #12]
        return gyroscope;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	461c      	mov	r4, r3
 8002f96:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002fa2:	e065      	b.n	8003070 <FusionBiasUpdate+0x1e0>
    }

    // Adjust bias if stationary timer has elapsed
    fusionBias->gyroscopeBias = FusionVectorAdd(fusionBias->gyroscopeBias, FusionVectorMultiplyScalar(gyroscope, fusionBias->filterCoefficient));
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689c      	ldr	r4, [r3, #8]
 8002fa8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002fac:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002fb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002fb6:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
    result.axis.x = vector.axis.x * scalar;
 8002fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fbc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fd fedf 	bl	8000d84 <__aeabi_fmul>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	663b      	str	r3, [r7, #96]	; 0x60
    result.axis.y = vector.axis.y * scalar;
 8002fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fcc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fd fed7 	bl	8000d84 <__aeabi_fmul>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	667b      	str	r3, [r7, #100]	; 0x64
    result.axis.z = vector.axis.z * scalar;
 8002fda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fdc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fd fecf 	bl	8000d84 <__aeabi_fmul>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	66bb      	str	r3, [r7, #104]	; 0x68
    return result;
 8002fea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002fee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002ff2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ff4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ffe:	3210      	adds	r2, #16
 8003000:	ca07      	ldmia	r2, {r0, r1, r2}
 8003002:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003006:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800300a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800300e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003010:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8003014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003016:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003018:	4611      	mov	r1, r2
 800301a:	4618      	mov	r0, r3
 800301c:	f7fd fdaa 	bl	8000b74 <__addsf3>
 8003020:	4603      	mov	r3, r0
 8003022:	633b      	str	r3, [r7, #48]	; 0x30
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8003024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003026:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003028:	4611      	mov	r1, r2
 800302a:	4618      	mov	r0, r3
 800302c:	f7fd fda2 	bl	8000b74 <__addsf3>
 8003030:	4603      	mov	r3, r0
 8003032:	637b      	str	r3, [r7, #52]	; 0x34
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8003034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003036:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd fd9a 	bl	8000b74 <__addsf3>
 8003040:	4603      	mov	r3, r0
 8003042:	63bb      	str	r3, [r7, #56]	; 0x38
    return result;
 8003044:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003048:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800304c:	ca07      	ldmia	r2, {r0, r1, r2}
 800304e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	3310      	adds	r3, #16
 8003056:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800305a:	ca07      	ldmia	r2, {r0, r1, r2}
 800305c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return gyroscope;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	461c      	mov	r4, r3
 8003064:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003068:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800306c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	378c      	adds	r7, #140	; 0x8c
 8003074:	46bd      	mov	sp, r7
 8003076:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800307a:	b002      	add	sp, #8
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40a00000 	.word	0x40a00000

08003084 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d106      	bne.n	80030a6 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3371      	adds	r3, #113	; 0x71
 800309c:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800309e:	e002      	b.n	80030a6 <prv_parse_number+0x22>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	3301      	adds	r3, #1
 80030a4:	603b      	str	r3, [r7, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <prv_parse_number+0x30>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b20      	cmp	r3, #32
 80030b2:	d0f5      	beq.n	80030a0 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b2d      	cmp	r3, #45	; 0x2d
 80030ba:	d104      	bne.n	80030c6 <prv_parse_number+0x42>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	3301      	adds	r3, #1
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <prv_parse_number+0x44>
 80030c6:	2300      	movs	r3, #0
 80030c8:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 80030ca:	e00d      	b.n	80030e8 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	461a      	mov	r2, r3
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	3b30      	subs	r3, #48	; 0x30
 80030de:	4413      	add	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	3301      	adds	r3, #1
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d007      	beq.n	80030fe <prv_parse_number+0x7a>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b2f      	cmp	r3, #47	; 0x2f
 80030f4:	d903      	bls.n	80030fe <prv_parse_number+0x7a>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b39      	cmp	r3, #57	; 0x39
 80030fc:	d9e6      	bls.n	80030cc <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 80030fe:	7afb      	ldrb	r3, [r7, #11]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <prv_parse_number+0x86>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	425b      	negs	r3, r3
 8003108:	e000      	b.n	800310c <prv_parse_number+0x88>
 800310a:	68fb      	ldr	r3, [r7, #12]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3371      	adds	r3, #113	; 0x71
 800312a:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800312c:	e002      	b.n	8003134 <prv_parse_float_number+0x1e>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	3301      	adds	r3, #1
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <prv_parse_float_number+0x2c>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b20      	cmp	r3, #32
 8003140:	d0f5      	beq.n	800312e <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8003142:	2100      	movs	r1, #0
 8003144:	6838      	ldr	r0, [r7, #0]
 8003146:	f00b fa87 	bl	800e658 <strtod>
 800314a:	e9c7 0102 	strd	r0, r1, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 800314e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8003152:	4610      	mov	r0, r2
 8003154:	4619      	mov	r1, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8003164:	2100      	movs	r1, #0
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff ffd5 	bl	8003116 <prv_parse_float_number>
 800316c:	e9c7 0106 	strd	r0, r1, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8003170:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003174:	f7fd fc60 	bl	8000a38 <__aeabi_d2iz>
 8003178:	4603      	mov	r3, r0
 800317a:	4a1b      	ldr	r2, [pc, #108]	; (80031e8 <prv_parse_lat_long+0x8c>)
 800317c:	fb82 1203 	smull	r1, r2, r2, r3
 8003180:	1152      	asrs	r2, r2, #5
 8003182:	17db      	asrs	r3, r3, #31
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd f93c 	bl	8000404 <__aeabi_i2d>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	4b14      	ldr	r3, [pc, #80]	; (80031ec <prv_parse_lat_long+0x90>)
 800319a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800319e:	f7fd f99b 	bl	80004d8 <__aeabi_dmul>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80031aa:	f7fc ffdd 	bl	8000168 <__aeabi_dsub>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <prv_parse_lat_long+0x94>)
 80031bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031c0:	f7fd fab4 	bl	800072c <__aeabi_ddiv>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031cc:	f7fc ffce 	bl	800016c <__adddf3>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 80031d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80031dc:	4610      	mov	r0, r2
 80031de:	4619      	mov	r1, r3
 80031e0:	3720      	adds	r7, #32
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	51eb851f 	.word	0x51eb851f
 80031ec:	40590000 	.word	0x40590000
 80031f0:	404e0000 	.word	0x404e0000

080031f4 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80031f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8003204:	2900      	cmp	r1, #0
 8003206:	d169      	bne.n	80032dc <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3371      	adds	r3, #113	; 0x71
 800320c:	2206      	movs	r2, #6
 800320e:	49b6      	ldr	r1, [pc, #728]	; (80034e8 <prv_parse_term+0x2f4>)
 8003210:	4618      	mov	r0, r3
 8003212:	f00a fc01 	bl	800da18 <strncmp>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d009      	beq.n	8003230 <prv_parse_term+0x3c>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3371      	adds	r3, #113	; 0x71
 8003220:	2206      	movs	r2, #6
 8003222:	49b2      	ldr	r1, [pc, #712]	; (80034ec <prv_parse_term+0x2f8>)
 8003224:	4618      	mov	r0, r3
 8003226:	f00a fbf7 	bl	800da18 <strncmp>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d104      	bne.n	800323a <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8003238:	e04e      	b.n	80032d8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3371      	adds	r3, #113	; 0x71
 800323e:	2206      	movs	r2, #6
 8003240:	49ab      	ldr	r1, [pc, #684]	; (80034f0 <prv_parse_term+0x2fc>)
 8003242:	4618      	mov	r0, r3
 8003244:	f00a fbe8 	bl	800da18 <strncmp>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <prv_parse_term+0x6e>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3371      	adds	r3, #113	; 0x71
 8003252:	2206      	movs	r2, #6
 8003254:	49a7      	ldr	r1, [pc, #668]	; (80034f4 <prv_parse_term+0x300>)
 8003256:	4618      	mov	r0, r3
 8003258:	f00a fbde 	bl	800da18 <strncmp>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d104      	bne.n	800326c <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2202      	movs	r2, #2
 8003266:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800326a:	e035      	b.n	80032d8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3371      	adds	r3, #113	; 0x71
 8003270:	2206      	movs	r2, #6
 8003272:	49a1      	ldr	r1, [pc, #644]	; (80034f8 <prv_parse_term+0x304>)
 8003274:	4618      	mov	r0, r3
 8003276:	f00a fbcf 	bl	800da18 <strncmp>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d009      	beq.n	8003294 <prv_parse_term+0xa0>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3371      	adds	r3, #113	; 0x71
 8003284:	2206      	movs	r2, #6
 8003286:	499d      	ldr	r1, [pc, #628]	; (80034fc <prv_parse_term+0x308>)
 8003288:	4618      	mov	r0, r3
 800328a:	f00a fbc5 	bl	800da18 <strncmp>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d104      	bne.n	800329e <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2203      	movs	r2, #3
 8003298:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800329c:	e01c      	b.n	80032d8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3371      	adds	r3, #113	; 0x71
 80032a2:	2206      	movs	r2, #6
 80032a4:	4996      	ldr	r1, [pc, #600]	; (8003500 <prv_parse_term+0x30c>)
 80032a6:	4618      	mov	r0, r3
 80032a8:	f00a fbb6 	bl	800da18 <strncmp>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d009      	beq.n	80032c6 <prv_parse_term+0xd2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3371      	adds	r3, #113	; 0x71
 80032b6:	2206      	movs	r2, #6
 80032b8:	4992      	ldr	r1, [pc, #584]	; (8003504 <prv_parse_term+0x310>)
 80032ba:	4618      	mov	r0, r3
 80032bc:	f00a fbac 	bl	800da18 <strncmp>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d104      	bne.n	80032d0 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2204      	movs	r2, #4
 80032ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80032ce:	e003      	b.n	80032d8 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 80032d8:	2301      	movs	r3, #1
 80032da:	e21f      	b.n	800371c <prv_parse_term+0x528>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80032e2:	2900      	cmp	r1, #0
 80032e4:	f000 8219 	beq.w	800371a <prv_parse_term+0x526>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80032ee:	2901      	cmp	r1, #1
 80032f0:	f040 80c1 	bne.w	8003476 <prv_parse_term+0x282>
        switch (gh->p.term_num) {
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80032fa:	3b01      	subs	r3, #1
 80032fc:	2b0a      	cmp	r3, #10
 80032fe:	f200 81ff 	bhi.w	8003700 <prv_parse_term+0x50c>
 8003302:	a201      	add	r2, pc, #4	; (adr r2, 8003308 <prv_parse_term+0x114>)
 8003304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003308:	08003335 	.word	0x08003335
 800330c:	080033af 	.word	0x080033af
 8003310:	080033c1 	.word	0x080033c1
 8003314:	080033eb 	.word	0x080033eb
 8003318:	080033fd 	.word	0x080033fd
 800331c:	08003427 	.word	0x08003427
 8003320:	0800343b 	.word	0x0800343b
 8003324:	08003701 	.word	0x08003701
 8003328:	0800344f 	.word	0x0800344f
 800332c:	08003701 	.word	0x08003701
 8003330:	08003463 	.word	0x08003463
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800333a:	3b30      	subs	r3, #48	; 0x30
 800333c:	b2db      	uxtb	r3, r3
 800333e:	461a      	mov	r2, r3
 8003340:	0092      	lsls	r2, r2, #2
 8003342:	4413      	add	r3, r2
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	b2da      	uxtb	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800334e:	4413      	add	r3, r2
 8003350:	b2db      	uxtb	r3, r3
 8003352:	3b30      	subs	r3, #48	; 0x30
 8003354:	b2da      	uxtb	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8003362:	3b30      	subs	r3, #48	; 0x30
 8003364:	b2db      	uxtb	r3, r3
 8003366:	461a      	mov	r2, r3
 8003368:	0092      	lsls	r2, r2, #2
 800336a:	4413      	add	r3, r2
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	b2da      	uxtb	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003376:	4413      	add	r3, r2
 8003378:	b2db      	uxtb	r3, r3
 800337a:	3b30      	subs	r3, #48	; 0x30
 800337c:	b2da      	uxtb	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800338a:	3b30      	subs	r3, #48	; 0x30
 800338c:	b2db      	uxtb	r3, r3
 800338e:	461a      	mov	r2, r3
 8003390:	0092      	lsls	r2, r2, #2
 8003392:	4413      	add	r3, r2
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	b2da      	uxtb	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800339e:	4413      	add	r3, r2
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	3b30      	subs	r3, #48	; 0x30
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 80033ac:	e1b5      	b.n	800371a <prv_parse_term+0x526>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff fed4 	bl	800315c <prv_parse_lat_long>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
                break;
 80033be:	e1ac      	b.n	800371a <prv_parse_term+0x526>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80033c6:	2b53      	cmp	r3, #83	; 0x53
 80033c8:	d005      	beq.n	80033d6 <prv_parse_term+0x1e2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80033d0:	2b73      	cmp	r3, #115	; 0x73
 80033d2:	f040 8197 	bne.w	8003704 <prv_parse_term+0x510>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80033dc:	4690      	mov	r8, r2
 80033de:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 80033e8:	e18c      	b.n	8003704 <prv_parse_term+0x510>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff feb6 	bl	800315c <prv_parse_lat_long>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
                break;
 80033fa:	e18e      	b.n	800371a <prv_parse_term+0x526>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003402:	2b57      	cmp	r3, #87	; 0x57
 8003404:	d005      	beq.n	8003412 <prv_parse_term+0x21e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800340c:	2b77      	cmp	r3, #119	; 0x77
 800340e:	f040 817b 	bne.w	8003708 <prv_parse_term+0x514>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8003418:	4614      	mov	r4, r2
 800341a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 8003424:	e170      	b.n	8003708 <prv_parse_term+0x514>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 8003426:	2100      	movs	r1, #0
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff fe2b 	bl	8003084 <prv_parse_number>
 800342e:	4603      	mov	r3, r0
 8003430:	b2da      	uxtb	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 8003438:	e16f      	b.n	800371a <prv_parse_term+0x526>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 800343a:	2100      	movs	r1, #0
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff fe21 	bl	8003084 <prv_parse_number>
 8003442:	4603      	mov	r3, r0
 8003444:	b2da      	uxtb	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 800344c:	e165      	b.n	800371a <prv_parse_term+0x526>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 800344e:	2100      	movs	r1, #0
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff fe60 	bl	8003116 <prv_parse_float_number>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
                break;
 8003460:	e15b      	b.n	800371a <prv_parse_term+0x526>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8003462:	2100      	movs	r1, #0
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff fe56 	bl	8003116 <prv_parse_float_number>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                break;
 8003474:	e151      	b.n	800371a <prv_parse_term+0x526>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800347c:	2902      	cmp	r1, #2
 800347e:	d17d      	bne.n	800357c <prv_parse_term+0x388>
        switch (gh->p.term_num) {
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003486:	3b02      	subs	r3, #2
 8003488:	2b0f      	cmp	r3, #15
 800348a:	d85b      	bhi.n	8003544 <prv_parse_term+0x350>
 800348c:	a201      	add	r2, pc, #4	; (adr r2, 8003494 <prv_parse_term+0x2a0>)
 800348e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003492:	bf00      	nop
 8003494:	080034d5 	.word	0x080034d5
 8003498:	08003545 	.word	0x08003545
 800349c:	08003545 	.word	0x08003545
 80034a0:	08003545 	.word	0x08003545
 80034a4:	08003545 	.word	0x08003545
 80034a8:	08003545 	.word	0x08003545
 80034ac:	08003545 	.word	0x08003545
 80034b0:	08003545 	.word	0x08003545
 80034b4:	08003545 	.word	0x08003545
 80034b8:	08003545 	.word	0x08003545
 80034bc:	08003545 	.word	0x08003545
 80034c0:	08003545 	.word	0x08003545
 80034c4:	08003545 	.word	0x08003545
 80034c8:	08003509 	.word	0x08003509
 80034cc:	0800351d 	.word	0x0800351d
 80034d0:	08003531 	.word	0x08003531
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 80034d4:	2100      	movs	r1, #0
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff fdd4 	bl	8003084 <prv_parse_number>
 80034dc:	4603      	mov	r3, r0
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 80034e6:	e118      	b.n	800371a <prv_parse_term+0x526>
 80034e8:	080127e8 	.word	0x080127e8
 80034ec:	080127f0 	.word	0x080127f0
 80034f0:	080127f8 	.word	0x080127f8
 80034f4:	08012800 	.word	0x08012800
 80034f8:	08012808 	.word	0x08012808
 80034fc:	08012810 	.word	0x08012810
 8003500:	08012818 	.word	0x08012818
 8003504:	08012820 	.word	0x08012820
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 8003508:	2100      	movs	r1, #0
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff fe03 	bl	8003116 <prv_parse_float_number>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
                break;
 800351a:	e0fe      	b.n	800371a <prv_parse_term+0x526>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 800351c:	2100      	movs	r1, #0
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff fdf9 	bl	8003116 <prv_parse_float_number>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
                break;
 800352e:	e0f4      	b.n	800371a <prv_parse_term+0x526>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8003530:	2100      	movs	r1, #0
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff fdef 	bl	8003116 <prv_parse_float_number>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
                break;
 8003542:	e0ea      	b.n	800371a <prv_parse_term+0x526>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800354a:	2b02      	cmp	r3, #2
 800354c:	f240 80de 	bls.w	800370c <prv_parse_term+0x518>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003556:	2b0e      	cmp	r3, #14
 8003558:	f200 80d8 	bhi.w	800370c <prv_parse_term+0x518>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 800355c:	2100      	movs	r1, #0
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff fd90 	bl	8003084 <prv_parse_number>
 8003564:	4602      	mov	r2, r0
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800356c:	3b03      	subs	r3, #3
 800356e:	b2d1      	uxtb	r1, r2
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	4413      	add	r3, r2
 8003574:	460a      	mov	r2, r1
 8003576:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 800357a:	e0c7      	b.n	800370c <prv_parse_term+0x518>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8003582:	2903      	cmp	r1, #3
 8003584:	d11b      	bne.n	80035be <prv_parse_term+0x3ca>
        switch (gh->p.term_num) {
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800358c:	2b02      	cmp	r3, #2
 800358e:	d002      	beq.n	8003596 <prv_parse_term+0x3a2>
 8003590:	2b03      	cmp	r3, #3
 8003592:	d00a      	beq.n	80035aa <prv_parse_term+0x3b6>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8003594:	e0c1      	b.n	800371a <prv_parse_term+0x526>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8003596:	2100      	movs	r1, #0
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff fd73 	bl	8003084 <prv_parse_number>
 800359e:	4603      	mov	r3, r0
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 80035a8:	e0b7      	b.n	800371a <prv_parse_term+0x526>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 80035aa:	2100      	movs	r1, #0
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff fd69 	bl	8003084 <prv_parse_number>
 80035b2:	4603      	mov	r3, r0
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 80035bc:	e0ad      	b.n	800371a <prv_parse_term+0x526>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80035c4:	2904      	cmp	r1, #4
 80035c6:	f040 80a3 	bne.w	8003710 <prv_parse_term+0x51c>
        switch (gh->p.term_num) {
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80035d0:	3902      	subs	r1, #2
 80035d2:	2909      	cmp	r1, #9
 80035d4:	f200 809e 	bhi.w	8003714 <prv_parse_term+0x520>
 80035d8:	a001      	add	r0, pc, #4	; (adr r0, 80035e0 <prv_parse_term+0x3ec>)
 80035da:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80035de:	bf00      	nop
 80035e0:	08003609 	.word	0x08003609
 80035e4:	08003715 	.word	0x08003715
 80035e8:	08003715 	.word	0x08003715
 80035ec:	08003715 	.word	0x08003715
 80035f0:	08003715 	.word	0x08003715
 80035f4:	08003623 	.word	0x08003623
 80035f8:	08003637 	.word	0x08003637
 80035fc:	0800364b 	.word	0x0800364b
 8003600:	080036c5 	.word	0x080036c5
 8003604:	080036d9 	.word	0x080036d9
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800360e:	2b41      	cmp	r3, #65	; 0x41
 8003610:	bf0c      	ite	eq
 8003612:	2301      	moveq	r3, #1
 8003614:	2300      	movne	r3, #0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8003620:	e07b      	b.n	800371a <prv_parse_term+0x526>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 8003622:	2100      	movs	r1, #0
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7ff fd76 	bl	8003116 <prv_parse_float_number>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
                break;
 8003634:	e071      	b.n	800371a <prv_parse_term+0x526>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 8003636:	2100      	movs	r1, #0
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff fd6c 	bl	8003116 <prv_parse_float_number>
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
                break;
 8003648:	e067      	b.n	800371a <prv_parse_term+0x526>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003650:	3b30      	subs	r3, #48	; 0x30
 8003652:	b2db      	uxtb	r3, r3
 8003654:	461a      	mov	r2, r3
 8003656:	0092      	lsls	r2, r2, #2
 8003658:	4413      	add	r3, r2
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	b2da      	uxtb	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8003664:	4413      	add	r3, r2
 8003666:	b2db      	uxtb	r3, r3
 8003668:	3b30      	subs	r3, #48	; 0x30
 800366a:	b2da      	uxtb	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8003678:	3b30      	subs	r3, #48	; 0x30
 800367a:	b2db      	uxtb	r3, r3
 800367c:	461a      	mov	r2, r3
 800367e:	0092      	lsls	r2, r2, #2
 8003680:	4413      	add	r3, r2
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	b2da      	uxtb	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800368c:	4413      	add	r3, r2
 800368e:	b2db      	uxtb	r3, r3
 8003690:	3b30      	subs	r3, #48	; 0x30
 8003692:	b2da      	uxtb	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80036a0:	3b30      	subs	r3, #48	; 0x30
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	0092      	lsls	r2, r2, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80036b4:	4413      	add	r3, r2
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	3b30      	subs	r3, #48	; 0x30
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 80036c2:	e02a      	b.n	800371a <prv_parse_term+0x526>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 80036c4:	2100      	movs	r1, #0
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff fd25 	bl	8003116 <prv_parse_float_number>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                break;
 80036d6:	e020      	b.n	800371a <prv_parse_term+0x526>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 80036de:	2957      	cmp	r1, #87	; 0x57
 80036e0:	d004      	beq.n	80036ec <prv_parse_term+0x4f8>
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 80036e8:	2977      	cmp	r1, #119	; 0x77
 80036ea:	d115      	bne.n	8003718 <prv_parse_term+0x524>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 80036f2:	4602      	mov	r2, r0
 80036f4:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 80036fe:	e00b      	b.n	8003718 <prv_parse_term+0x524>
                break;
 8003700:	bf00      	nop
 8003702:	e00a      	b.n	800371a <prv_parse_term+0x526>
                break;
 8003704:	bf00      	nop
 8003706:	e008      	b.n	800371a <prv_parse_term+0x526>
                break;
 8003708:	bf00      	nop
 800370a:	e006      	b.n	800371a <prv_parse_term+0x526>
                break;
 800370c:	bf00      	nop
 800370e:	e004      	b.n	800371a <prv_parse_term+0x526>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
 8003710:	bf00      	nop
 8003712:	e002      	b.n	800371a <prv_parse_term+0x526>
                break;
 8003714:	bf00      	nop
 8003716:	e000      	b.n	800371a <prv_parse_term+0x526>
                break;
 8003718:	bf00      	nop
    return 1;
 800371a:	2301      	movs	r3, #1
}
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003726:	bf00      	nop

08003728 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003736:	2b2f      	cmp	r3, #47	; 0x2f
 8003738:	d90d      	bls.n	8003756 <prv_check_crc+0x2e>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003740:	2b39      	cmp	r3, #57	; 0x39
 8003742:	d808      	bhi.n	8003756 <prv_check_crc+0x2e>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800374a:	3b30      	subs	r3, #48	; 0x30
 800374c:	b2db      	uxtb	r3, r3
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	b2db      	uxtb	r3, r3
 8003752:	b25a      	sxtb	r2, r3
 8003754:	e026      	b.n	80037a4 <prv_check_crc+0x7c>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800375c:	2b60      	cmp	r3, #96	; 0x60
 800375e:	d90d      	bls.n	800377c <prv_check_crc+0x54>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003766:	2b7a      	cmp	r3, #122	; 0x7a
 8003768:	d808      	bhi.n	800377c <prv_check_crc+0x54>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003770:	3b57      	subs	r3, #87	; 0x57
 8003772:	b2db      	uxtb	r3, r3
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	b2db      	uxtb	r3, r3
 8003778:	b25a      	sxtb	r2, r3
 800377a:	e013      	b.n	80037a4 <prv_check_crc+0x7c>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003782:	2b40      	cmp	r3, #64	; 0x40
 8003784:	d90d      	bls.n	80037a2 <prv_check_crc+0x7a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800378c:	2b5a      	cmp	r3, #90	; 0x5a
 800378e:	d808      	bhi.n	80037a2 <prv_check_crc+0x7a>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003796:	3b37      	subs	r3, #55	; 0x37
 8003798:	b2db      	uxtb	r3, r3
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	b2db      	uxtb	r3, r3
 800379e:	b25a      	sxtb	r2, r3
 80037a0:	e000      	b.n	80037a4 <prv_check_crc+0x7c>
 80037a2:	2200      	movs	r2, #0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80037aa:	2b2f      	cmp	r3, #47	; 0x2f
 80037ac:	d90c      	bls.n	80037c8 <prv_check_crc+0xa0>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80037b4:	2b39      	cmp	r3, #57	; 0x39
 80037b6:	d807      	bhi.n	80037c8 <prv_check_crc+0xa0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80037be:	b25b      	sxtb	r3, r3
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	b25b      	sxtb	r3, r3
 80037c6:	e028      	b.n	800381a <prv_check_crc+0xf2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80037ce:	2b60      	cmp	r3, #96	; 0x60
 80037d0:	d90e      	bls.n	80037f0 <prv_check_crc+0xc8>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80037d8:	2b7a      	cmp	r3, #122	; 0x7a
 80037da:	d809      	bhi.n	80037f0 <prv_check_crc+0xc8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80037e2:	3b57      	subs	r3, #87	; 0x57
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	b25b      	sxtb	r3, r3
 80037e8:	f003 030f 	and.w	r3, r3, #15
 80037ec:	b25b      	sxtb	r3, r3
 80037ee:	e014      	b.n	800381a <prv_check_crc+0xf2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80037f6:	2b40      	cmp	r3, #64	; 0x40
 80037f8:	d90e      	bls.n	8003818 <prv_check_crc+0xf0>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8003800:	2b5a      	cmp	r3, #90	; 0x5a
 8003802:	d809      	bhi.n	8003818 <prv_check_crc+0xf0>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800380a:	3b37      	subs	r3, #55	; 0x37
 800380c:	b2db      	uxtb	r3, r3
 800380e:	b25b      	sxtb	r3, r3
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	b25b      	sxtb	r3, r3
 8003816:	e000      	b.n	800381a <prv_check_crc+0xf2>
 8003818:	2300      	movs	r3, #0
 800381a:	4313      	orrs	r3, r2
 800381c:	b25b      	sxtb	r3, r3
 800381e:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003826:	7bfa      	ldrb	r2, [r7, #15]
 8003828:	429a      	cmp	r2, r3
 800382a:	bf0c      	ite	eq
 800382c:	2301      	moveq	r3, #1
 800382e:	2300      	movne	r3, #0
 8003830:	b2db      	uxtb	r3, r3
}
 8003832:	4618      	mov	r0, r3
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr

0800383c <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800384a:	2b01      	cmp	r3, #1
 800384c:	d136      	bne.n	80038bc <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80038ba:	e061      	b.n	8003980 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d121      	bne.n	800390a <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f103 0041 	add.w	r0, r3, #65	; 0x41
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	33a1      	adds	r3, #161	; 0xa1
 8003900:	220c      	movs	r2, #12
 8003902:	4619      	mov	r1, r3
 8003904:	f00a f872 	bl	800d9ec <memcpy>
 8003908:	e03a      	b.n	8003980 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003910:	2b03      	cmp	r3, #3
 8003912:	d106      	bne.n	8003922 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8003920:	e02e      	b.n	8003980 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003928:	2b04      	cmp	r3, #4
 800392a:	d129      	bne.n	8003980 <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8003980:	2301      	movs	r3, #1
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 800398a:	b580      	push	{r7, lr}
 800398c:	b082      	sub	sp, #8
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8003992:	22b0      	movs	r2, #176	; 0xb0
 8003994:	2100      	movs	r1, #0
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f00a f836 	bl	800da08 <memset>
    return 1;
 800399c:	2301      	movs	r3, #1
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b086      	sub	sp, #24
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 80039b6:	e0ad      	b.n	8003b14 <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b24      	cmp	r3, #36	; 0x24
 80039be:	d128      	bne.n	8003a12 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	3370      	adds	r3, #112	; 0x70
 80039c4:	2240      	movs	r2, #64	; 0x40
 80039c6:	2100      	movs	r1, #0
 80039c8:	4618      	mov	r0, r3
 80039ca:	f00a f81d 	bl	800da08 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80039d4:	2b0b      	cmp	r3, #11
 80039d6:	f200 8097 	bhi.w	8003b08 <lwgps_process+0x162>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80039e0:	4619      	mov	r1, r3
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	781a      	ldrb	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	440b      	add	r3, r1
 80039ea:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80039f4:	3301      	adds	r3, #1
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8003a04:	461a      	mov	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4413      	add	r3, r2
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8003a10:	e07a      	b.n	8003b08 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b2c      	cmp	r3, #44	; 0x2c
 8003a18:	d11d      	bne.n	8003a56 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f7ff fbea 	bl	80031f4 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	4053      	eors	r3, r2
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8003a54:	e058      	b.n	8003b08 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a5c:	d117      	bne.n	8003a8e <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f7ff fbc8 	bl	80031f4 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003a82:	3301      	adds	r3, #1
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8003a8c:	e03c      	b.n	8003b08 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b0d      	cmp	r3, #13
 8003a94:	d109      	bne.n	8003aaa <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f7ff fe46 	bl	8003728 <prv_check_crc>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d032      	beq.n	8003b08 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f7ff feca 	bl	800383c <prv_copy_from_tmp_memory>
 8003aa8:	e02e      	b.n	8003b08 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d109      	bne.n	8003ac8 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	4053      	eors	r3, r2
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8003ace:	2b0b      	cmp	r3, #11
 8003ad0:	d81a      	bhi.n	8003b08 <lwgps_process+0x162>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8003ad8:	4619      	mov	r1, r3
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	781a      	ldrb	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	440b      	add	r3, r1
 8003ae2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8003aec:	3301      	adds	r3, #1
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8003afc:	461a      	mov	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4413      	add	r3, r2
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	617b      	str	r3, [r7, #20]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3b01      	subs	r3, #1
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f47f af4e 	bne.w	80039b8 <lwgps_process+0x12>
        }
    }
    return 1;
 8003b1c:	2301      	movs	r3, #1
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8003b26:	b590      	push	{r4, r7, lr}
 8003b28:	b087      	sub	sp, #28
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	4603      	mov	r3, r0
 8003b32:	73fb      	strb	r3, [r7, #15]
 8003b34:	4613      	mov	r3, r2
 8003b36:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <bmi160_get_regs+0x24>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d102      	bne.n	8003b50 <bmi160_get_regs+0x2a>
    {
        rslt = BMI160_E_NULL_PTR;
 8003b4a:	23ff      	movs	r3, #255	; 0xff
 8003b4c:	75fb      	strb	r3, [r7, #23]
 8003b4e:	e017      	b.n	8003b80 <bmi160_get_regs+0x5a>
    }
    else if (len == 0)
 8003b50:	89bb      	ldrh	r3, [r7, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d102      	bne.n	8003b5c <bmi160_get_regs+0x36>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8003b56:	23f4      	movs	r3, #244	; 0xf4
 8003b58:	75fb      	strb	r3, [r7, #23]
 8003b5a:	e011      	b.n	8003b80 <bmi160_get_regs+0x5a>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	789b      	ldrb	r3, [r3, #2]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d103      	bne.n	8003b6c <bmi160_get_regs+0x46>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b6a:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	69dc      	ldr	r4, [r3, #28]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	7858      	ldrb	r0, [r3, #1]
 8003b74:	89bb      	ldrh	r3, [r7, #12]
 8003b76:	7bf9      	ldrb	r1, [r7, #15]
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	47a0      	blx	r4
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003b80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd90      	pop	{r4, r7, pc}

08003b8c <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8003b8c:	b590      	push	{r4, r7, lr}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60b9      	str	r1, [r7, #8]
 8003b94:	607b      	str	r3, [r7, #4]
 8003b96:	4603      	mov	r3, r0
 8003b98:	73fb      	strb	r3, [r7, #15]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <bmi160_set_regs+0x28>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d102      	bne.n	8003bba <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 8003bb4:	23ff      	movs	r3, #255	; 0xff
 8003bb6:	75fb      	strb	r3, [r7, #23]
 8003bb8:	e045      	b.n	8003c46 <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 8003bba:	89bb      	ldrh	r3, [r7, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d102      	bne.n	8003bc6 <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8003bc0:	23f4      	movs	r3, #244	; 0xf4
 8003bc2:	75fb      	strb	r3, [r7, #23]
 8003bc4:	e03f      	b.n	8003c46 <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	789b      	ldrb	r3, [r3, #2]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d103      	bne.n	8003bd6 <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bd4:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	7a1b      	ldrb	r3, [r3, #8]
 8003bda:	2b11      	cmp	r3, #17
 8003bdc:	d003      	beq.n	8003be6 <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8003be2:	2b15      	cmp	r3, #21
 8003be4:	d124      	bne.n	8003c30 <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1c      	ldr	r4, [r3, #32]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	7858      	ldrb	r0, [r3, #1]
 8003bee:	89bb      	ldrh	r3, [r7, #12]
 8003bf0:	7bf9      	ldrb	r1, [r7, #15]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	47a0      	blx	r4
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	2001      	movs	r0, #1
 8003c00:	4798      	blx	r3
 8003c02:	e01a      	b.n	8003c3a <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1c      	ldr	r4, [r3, #32]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	7858      	ldrb	r0, [r3, #1]
 8003c0c:	7dbb      	ldrb	r3, [r7, #22]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	441a      	add	r2, r3
 8003c12:	7bf9      	ldrb	r1, [r7, #15]
 8003c14:	2301      	movs	r3, #1
 8003c16:	47a0      	blx	r4
 8003c18:	4603      	mov	r3, r0
 8003c1a:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	2001      	movs	r0, #1
 8003c28:	4798      	blx	r3
            for (; count < len; count++)
 8003c2a:	7dbb      	ldrb	r3, [r7, #22]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	75bb      	strb	r3, [r7, #22]
 8003c30:	7dbb      	ldrb	r3, [r7, #22]
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	89ba      	ldrh	r2, [r7, #12]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d8e4      	bhi.n	8003c04 <bmi160_set_regs+0x78>

            }
        }

        if (rslt != BMI160_OK)
 8003c3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 8003c42:	23fe      	movs	r3, #254	; 0xfe
 8003c44:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8003c46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	371c      	adds	r7, #28
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd90      	pop	{r4, r7, pc}

08003c52 <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 fd34 	bl	80046cc <null_ptr_check>
 8003c64:	4603      	mov	r3, r0
 8003c66:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8003c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10c      	bne.n	8003c8a <bmi160_init+0x38>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	789b      	ldrb	r3, [r3, #2]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d108      	bne.n	8003c8a <bmi160_init+0x38>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8003c78:	f107 010d 	add.w	r1, r7, #13
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	207f      	movs	r0, #127	; 0x7f
 8003c82:	f7ff ff50 	bl	8003b26 <bmi160_get_regs>
 8003c86:	4603      	mov	r3, r0
 8003c88:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 8003c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d127      	bne.n	8003ce2 <bmi160_init+0x90>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8003c98:	e007      	b.n	8003caa <bmi160_init+0x58>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	f7ff ff40 	bl	8003b26 <bmi160_get_regs>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8003caa:	7bbb      	ldrb	r3, [r7, #14]
 8003cac:	1e5a      	subs	r2, r3, #1
 8003cae:	73ba      	strb	r2, [r7, #14]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <bmi160_init+0x6a>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2bd1      	cmp	r3, #209	; 0xd1
 8003cba:	d1ee      	bne.n	8003c9a <bmi160_init+0x48>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 8003cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10c      	bne.n	8003cde <bmi160_init+0x8c>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2bd1      	cmp	r3, #209	; 0xd1
 8003cca:	d108      	bne.n	8003cde <bmi160_init+0x8c>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	22ff      	movs	r2, #255	; 0xff
 8003cd0:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f80b 	bl	8003cee <bmi160_soft_reset>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	73fb      	strb	r3, [r7, #15]
 8003cdc:	e001      	b.n	8003ce2 <bmi160_init+0x90>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 8003cde:	23fd      	movs	r3, #253	; 0xfd
 8003ce0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8003ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 8003cf6:	23b6      	movs	r3, #182	; 0xb6
 8003cf8:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <bmi160_soft_reset+0x1a>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d102      	bne.n	8003d0e <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8003d08:	23ff      	movs	r3, #255	; 0xff
 8003d0a:	73fb      	strb	r3, [r7, #15]
 8003d0c:	e024      	b.n	8003d58 <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8003d0e:	f107 010e 	add.w	r1, r7, #14
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	207e      	movs	r0, #126	; 0x7e
 8003d18:	f7ff ff38 	bl	8003b8c <bmi160_set_regs>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	2001      	movs	r0, #1
 8003d26:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8003d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10c      	bne.n	8003d4a <bmi160_soft_reset+0x5c>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	789b      	ldrb	r3, [r3, #2]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d108      	bne.n	8003d4a <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8003d38:	f107 010e 	add.w	r1, r7, #14
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	207f      	movs	r0, #127	; 0x7f
 8003d42:	f7ff fef0 	bl	8003b26 <bmi160_get_regs>
 8003d46:	4603      	mov	r3, r0
 8003d48:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 8003d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d102      	bne.n	8003d58 <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fcd9 	bl	800470a <default_param_settg>
        }
    }

    return rslt;
 8003d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <bmi160_set_sens_conf+0x1a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d102      	bne.n	8003d84 <bmi160_set_sens_conf+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8003d7e:	23ff      	movs	r3, #255	; 0xff
 8003d80:	73fb      	strb	r3, [r7, #15]
 8003d82:	e01f      	b.n	8003dc4 <bmi160_set_sens_conf+0x60>
    }
    else
    {
        rslt = set_accel_conf(dev);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 fce9 	bl	800475c <set_accel_conf>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d116      	bne.n	8003dc4 <bmi160_set_sens_conf+0x60>
        {
            rslt = set_gyro_conf(dev);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fe21 	bl	80049de <set_gyro_conf>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8003da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10d      	bne.n	8003dc4 <bmi160_set_sens_conf+0x60>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f811 	bl	8003dd0 <bmi160_set_power_mode>
 8003dae:	4603      	mov	r3, r0
 8003db0:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8003db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d104      	bne.n	8003dc4 <bmi160_set_sens_conf+0x60>
                {
                    rslt = check_invalid_settg(dev);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fdda 	bl	8004974 <check_invalid_settg>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8003dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <bmi160_set_power_mode+0x1a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d102      	bne.n	8003df0 <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8003dea:	23ff      	movs	r3, #255	; 0xff
 8003dec:	73fb      	strb	r3, [r7, #15]
 8003dee:	e00d      	b.n	8003e0c <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fefa 	bl	8004bea <set_accel_pwr>
 8003df6:	4603      	mov	r3, r0
 8003df8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d104      	bne.n	8003e0c <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 ff88 	bl	8004d18 <set_gyro_pwr>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8003e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <bmi160_get_sensor_data>:
 */
int8_t bmi160_get_sensor_data(uint8_t select_sensor,
                              struct bmi160_sensor_data *accel,
                              struct bmi160_sensor_data *gyro,
                              const struct bmi160_dev *dev)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	607a      	str	r2, [r7, #4]
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	4603      	mov	r3, r0
 8003e26:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI160_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	75fb      	strb	r3, [r7, #23]
    uint8_t time_sel;
    uint8_t sen_sel;
    uint8_t len = 0;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	75bb      	strb	r3, [r7, #22]

    /*Extract the sensor  and time select information*/
    sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	757b      	strb	r3, [r7, #21]
    time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
 8003e38:	7d7b      	ldrb	r3, [r7, #21]
 8003e3a:	109b      	asrs	r3, r3, #2
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	753b      	strb	r3, [r7, #20]
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 8003e44:	7d7b      	ldrb	r3, [r7, #21]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	757b      	strb	r3, [r7, #21]
    if (time_sel == 1)
 8003e4c:	7d3b      	ldrb	r3, [r7, #20]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <bmi160_get_sensor_data+0x3e>
    {
        len = 3;
 8003e52:	2303      	movs	r3, #3
 8003e54:	75bb      	strb	r3, [r7, #22]
    }

    /* Null-pointer check */
    if (dev != NULL)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d03c      	beq.n	8003ed6 <bmi160_get_sensor_data+0xbe>
    {
        switch (sen_sel)
 8003e5c:	7d7b      	ldrb	r3, [r7, #21]
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d024      	beq.n	8003eac <bmi160_get_sensor_data+0x94>
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	dc34      	bgt.n	8003ed0 <bmi160_get_sensor_data+0xb8>
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d002      	beq.n	8003e70 <bmi160_get_sensor_data+0x58>
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d00f      	beq.n	8003e8e <bmi160_get_sensor_data+0x76>
 8003e6e:	e02f      	b.n	8003ed0 <bmi160_get_sensor_data+0xb8>
        {
            case BMI160_ACCEL_ONLY:

                /* Null-pointer check */
                if (accel == NULL)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d102      	bne.n	8003e7c <bmi160_get_sensor_data+0x64>
                {
                    rslt = BMI160_E_NULL_PTR;
 8003e76:	23ff      	movs	r3, #255	; 0xff
 8003e78:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_data(len, accel, dev);
                }

                break;
 8003e7a:	e02e      	b.n	8003eda <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_data(len, accel, dev);
 8003e7c:	7dbb      	ldrb	r3, [r7, #22]
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	68b9      	ldr	r1, [r7, #8]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 ff8c 	bl	8004da0 <get_accel_data>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	75fb      	strb	r3, [r7, #23]
                break;
 8003e8c:	e025      	b.n	8003eda <bmi160_get_sensor_data+0xc2>
            case BMI160_GYRO_ONLY:

                /* Null-pointer check */
                if (gyro == NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d102      	bne.n	8003e9a <bmi160_get_sensor_data+0x82>
                {
                    rslt = BMI160_E_NULL_PTR;
 8003e94:	23ff      	movs	r3, #255	; 0xff
 8003e96:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_gyro_data(len, gyro, dev);
                }

                break;
 8003e98:	e01f      	b.n	8003eda <bmi160_get_sensor_data+0xc2>
                    rslt = get_gyro_data(len, gyro, dev);
 8003e9a:	7dbb      	ldrb	r3, [r7, #22]
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f001 f848 	bl	8004f36 <get_gyro_data>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	75fb      	strb	r3, [r7, #23]
                break;
 8003eaa:	e016      	b.n	8003eda <bmi160_get_sensor_data+0xc2>
            case BMI160_BOTH_ACCEL_AND_GYRO:

                /* Null-pointer check */
                if ((gyro == NULL) || (accel == NULL))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <bmi160_get_sensor_data+0xa0>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <bmi160_get_sensor_data+0xa6>
                {
                    rslt = BMI160_E_NULL_PTR;
 8003eb8:	23ff      	movs	r3, #255	; 0xff
 8003eba:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
                }

                break;
 8003ebc:	e00d      	b.n	8003eda <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
 8003ebe:	7db8      	ldrb	r0, [r7, #22]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	f001 f980 	bl	80051ca <get_accel_gyro_data>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	75fb      	strb	r3, [r7, #23]
                break;
 8003ece:	e004      	b.n	8003eda <bmi160_get_sensor_data+0xc2>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 8003ed0:	23fb      	movs	r3, #251	; 0xfb
 8003ed2:	75fb      	strb	r3, [r7, #23]
                break;
 8003ed4:	e001      	b.n	8003eda <bmi160_get_sensor_data+0xc2>
        }
    }
    else
    {
        rslt = BMI160_E_NULL_PTR;
 8003ed6:	23ff      	movs	r3, #255	; 0xff
 8003ed8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003eda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <bmi160_set_int_config>:
/*!
 * @brief This API configures the necessary interrupt based on
 *  the user settings in the bmi160_int_settg structure instance.
 */
int8_t bmi160_set_int_config(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	73fb      	strb	r3, [r7, #15]

    switch (int_config->int_type)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	785b      	ldrb	r3, [r3, #1]
 8003efa:	2b0d      	cmp	r3, #13
 8003efc:	d879      	bhi.n	8003ff2 <bmi160_set_int_config+0x10a>
 8003efe:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <bmi160_set_int_config+0x1c>)
 8003f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f04:	08003f3d 	.word	0x08003f3d
 8003f08:	08003f4b 	.word	0x08003f4b
 8003f0c:	08003f75 	.word	0x08003f75
 8003f10:	08003f67 	.word	0x08003f67
 8003f14:	08003f67 	.word	0x08003f67
 8003f18:	08003f83 	.word	0x08003f83
 8003f1c:	08003f91 	.word	0x08003f91
 8003f20:	08003fad 	.word	0x08003fad
 8003f24:	08003f9f 	.word	0x08003f9f
 8003f28:	08003f59 	.word	0x08003f59
 8003f2c:	08003fbb 	.word	0x08003fbb
 8003f30:	08003fc9 	.word	0x08003fc9
 8003f34:	08003fd7 	.word	0x08003fd7
 8003f38:	08003fe5 	.word	0x08003fe5
    {
        case BMI160_ACC_ANY_MOTION_INT:

            /*Any-motion  interrupt*/
            rslt = set_accel_any_motion_int(int_config, dev);
 8003f3c:	6839      	ldr	r1, [r7, #0]
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f95a 	bl	80041f8 <set_accel_any_motion_int>
 8003f44:	4603      	mov	r3, r0
 8003f46:	73fb      	strb	r3, [r7, #15]
            break;
 8003f48:	e054      	b.n	8003ff4 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SIG_MOTION_INT:

            /* Significant motion interrupt */
            rslt = set_accel_sig_motion_int(int_config, dev);
 8003f4a:	6839      	ldr	r1, [r7, #0]
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f9ed 	bl	800432c <set_accel_sig_motion_int>
 8003f52:	4603      	mov	r3, r0
 8003f54:	73fb      	strb	r3, [r7, #15]
            break;
 8003f56:	e04d      	b.n	8003ff4 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SLOW_NO_MOTION_INT:

            /* Slow or no motion interrupt */
            rslt = set_accel_no_motion_int(int_config, dev);
 8003f58:	6839      	ldr	r1, [r7, #0]
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 fa14 	bl	8004388 <set_accel_no_motion_int>
 8003f60:	4603      	mov	r3, r0
 8003f62:	73fb      	strb	r3, [r7, #15]
            break;
 8003f64:	e046      	b.n	8003ff4 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_DOUBLE_TAP_INT:
        case BMI160_ACC_SINGLE_TAP_INT:

            /* Double tap and single tap Interrupt */
            rslt = set_accel_tap_int(int_config, dev);
 8003f66:	6839      	ldr	r1, [r7, #0]
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f973 	bl	8004254 <set_accel_tap_int>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	73fb      	strb	r3, [r7, #15]
            break;
 8003f72:	e03f      	b.n	8003ff4 <bmi160_set_int_config+0x10c>
        case BMI160_STEP_DETECT_INT:

            /* Step detector interrupt */
            rslt = set_accel_step_detect_int(int_config, dev);
 8003f74:	6839      	ldr	r1, [r7, #0]
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fa34 	bl	80043e4 <set_accel_step_detect_int>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	73fb      	strb	r3, [r7, #15]
            break;
 8003f80:	e038      	b.n	8003ff4 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_ORIENT_INT:

            /* Orientation interrupt */
            rslt = set_accel_orientation_int(int_config, dev);
 8003f82:	6839      	ldr	r1, [r7, #0]
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fa6e 	bl	8004466 <set_accel_orientation_int>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	73fb      	strb	r3, [r7, #15]
            break;
 8003f8e:	e031      	b.n	8003ff4 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_FLAT_INT:

            /* Flat detection interrupt */
            rslt = set_accel_flat_detect_int(int_config, dev);
 8003f90:	6839      	ldr	r1, [r7, #0]
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 faa8 	bl	80044e8 <set_accel_flat_detect_int>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	73fb      	strb	r3, [r7, #15]
            break;
 8003f9c:	e02a      	b.n	8003ff4 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_LOW_G_INT:

            /* Low-g interrupt */
            rslt = set_accel_low_g_int(int_config, dev);
 8003f9e:	6839      	ldr	r1, [r7, #0]
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fae2 	bl	800456a <set_accel_low_g_int>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	73fb      	strb	r3, [r7, #15]
            break;
 8003faa:	e023      	b.n	8003ff4 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_HIGH_G_INT:

            /* High-g interrupt */
            rslt = set_accel_high_g_int(int_config, dev);
 8003fac:	6839      	ldr	r1, [r7, #0]
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fb26 	bl	8004600 <set_accel_high_g_int>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	73fb      	strb	r3, [r7, #15]
            break;
 8003fb8:	e01c      	b.n	8003ff4 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_DATA_RDY_INT:

            /* Data ready interrupt */
            rslt = set_accel_gyro_data_ready_int(int_config, dev);
 8003fba:	6839      	ldr	r1, [r7, #0]
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f982 	bl	80042c6 <set_accel_gyro_data_ready_int>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	73fb      	strb	r3, [r7, #15]
            break;
 8003fc6:	e015      	b.n	8003ff4 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_FULL_INT:

            /* Fifo full interrupt */
            rslt = set_fifo_full_int(int_config, dev);
 8003fc8:	6839      	ldr	r1, [r7, #0]
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f002 fd80 	bl	8006ad0 <set_fifo_full_int>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	73fb      	strb	r3, [r7, #15]
            break;
 8003fd4:	e00e      	b.n	8003ff4 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_WATERMARK_INT:

            /* Fifo water-mark interrupt */
            rslt = set_fifo_watermark_int(int_config, dev);
 8003fd6:	6839      	ldr	r1, [r7, #0]
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f002 fde0 	bl	8006b9e <set_fifo_watermark_int>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	73fb      	strb	r3, [r7, #15]
            break;
 8003fe2:	e007      	b.n	8003ff4 <bmi160_set_int_config+0x10c>
        case BMI160_FIFO_TAG_INT_PIN:

            /* Fifo tagging feature support */
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8003fe4:	6839      	ldr	r1, [r7, #0]
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fb55 	bl	8004696 <set_intr_pin_config>
 8003fec:	4603      	mov	r3, r0
 8003fee:	73fb      	strb	r3, [r7, #15]
            break;
 8003ff0:	e000      	b.n	8003ff4 <bmi160_set_int_config+0x10c>
        default:
            break;
 8003ff2:	bf00      	nop
    }

    return rslt;
 8003ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <bmi160_start_foc>:
 *  Gyro FOC always targets value of 0 dps
 */
int8_t bmi160_start_foc(const struct bmi160_foc_conf *foc_conf,
                        struct bmi160_offsets *offset,
                        struct bmi160_dev const *dev)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 fb5d 	bl	80046cc <null_ptr_check>
 8004012:	4603      	mov	r3, r0
 8004014:	75fb      	strb	r3, [r7, #23]
    if (rslt != BMI160_OK)
 8004016:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <bmi160_start_foc+0x24>
    {
        rslt = BMI160_E_NULL_PTR;
 800401e:	23ff      	movs	r3, #255	; 0xff
 8004020:	75fb      	strb	r3, [r7, #23]
 8004022:	e068      	b.n	80040f6 <bmi160_start_foc+0xf6>
    }
    else
    {
        /* Set the offset enable bits */
        rslt = configure_offset_enable(foc_conf, dev);
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f002 fe40 	bl	8006cac <configure_offset_enable>
 800402c:	4603      	mov	r3, r0
 800402e:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8004030:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d15e      	bne.n	80040f6 <bmi160_start_foc+0xf6>
        {
            /* Read the FOC config from the sensor */
            rslt = bmi160_get_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 8004038:	f107 0116 	add.w	r1, r7, #22
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	2069      	movs	r0, #105	; 0x69
 8004042:	f7ff fd70 	bl	8003b26 <bmi160_get_regs>
 8004046:	4603      	mov	r3, r0
 8004048:	75fb      	strb	r3, [r7, #23]

            /* Set the FOC config for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_FOC_EN, foc_conf->foc_gyr_en);
 800404a:	7dbb      	ldrb	r3, [r7, #22]
 800404c:	b25b      	sxtb	r3, r3
 800404e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004052:	b25a      	sxtb	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	019b      	lsls	r3, r3, #6
 800405a:	b25b      	sxtb	r3, r3
 800405c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004060:	b25b      	sxtb	r3, r3
 8004062:	4313      	orrs	r3, r2
 8004064:	b25b      	sxtb	r3, r3
 8004066:	b2db      	uxtb	r3, r3
 8004068:	75bb      	strb	r3, [r7, #22]

            /* Set the FOC config for accel xyz axes */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_X_CONF, foc_conf->foc_acc_x);
 800406a:	7dbb      	ldrb	r3, [r7, #22]
 800406c:	b25b      	sxtb	r3, r3
 800406e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004072:	b25a      	sxtb	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	785b      	ldrb	r3, [r3, #1]
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	b25b      	sxtb	r3, r3
 800407c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004080:	b25b      	sxtb	r3, r3
 8004082:	4313      	orrs	r3, r2
 8004084:	b25b      	sxtb	r3, r3
 8004086:	b2db      	uxtb	r3, r3
 8004088:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_Y_CONF, foc_conf->foc_acc_y);
 800408a:	7dbb      	ldrb	r3, [r7, #22]
 800408c:	b25b      	sxtb	r3, r3
 800408e:	f023 030c 	bic.w	r3, r3, #12
 8004092:	b25a      	sxtb	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	789b      	ldrb	r3, [r3, #2]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	b25b      	sxtb	r3, r3
 800409c:	f003 030c 	and.w	r3, r3, #12
 80040a0:	b25b      	sxtb	r3, r3
 80040a2:	4313      	orrs	r3, r2
 80040a4:	b25b      	sxtb	r3, r3
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS_POS_0(data, BMI160_ACCEL_FOC_Z_CONF, foc_conf->foc_acc_z);
 80040aa:	7dbb      	ldrb	r3, [r7, #22]
 80040ac:	b25b      	sxtb	r3, r3
 80040ae:	f023 0303 	bic.w	r3, r3, #3
 80040b2:	b25a      	sxtb	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	78db      	ldrb	r3, [r3, #3]
 80040b8:	b25b      	sxtb	r3, r3
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	b25b      	sxtb	r3, r3
 80040c0:	4313      	orrs	r3, r2
 80040c2:	b25b      	sxtb	r3, r3
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	75bb      	strb	r3, [r7, #22]
            if (rslt == BMI160_OK)
 80040c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d112      	bne.n	80040f6 <bmi160_start_foc+0xf6>
            {
                /* Set the FOC config in the sensor */
                rslt = bmi160_set_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 80040d0:	f107 0116 	add.w	r1, r7, #22
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	2069      	movs	r0, #105	; 0x69
 80040da:	f7ff fd57 	bl	8003b8c <bmi160_set_regs>
 80040de:	4603      	mov	r3, r0
 80040e0:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 80040e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d105      	bne.n	80040f6 <bmi160_start_foc+0xf6>
                {
                    /* Procedure to trigger
                     * FOC and check status */
                    rslt = trigger_foc(offset, dev);
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	68b8      	ldr	r0, [r7, #8]
 80040ee:	f002 fe27 	bl	8006d40 <trigger_foc>
 80040f2:	4603      	mov	r3, r0
 80040f4:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 80040f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <bmi160_get_offsets>:

/*!
 *  @brief This API reads and stores the offset values of accel and gyro
 */
int8_t bmi160_get_offsets(struct bmi160_offsets *offset, const struct bmi160_dev *dev)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b088      	sub	sp, #32
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	6039      	str	r1, [r7, #0]
    uint8_t lsb, msb;
    int16_t offset_msb, offset_lsb;
    int16_t offset_data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800410c:	6838      	ldr	r0, [r7, #0]
 800410e:	f000 fadd 	bl	80046cc <null_ptr_check>
 8004112:	4603      	mov	r3, r0
 8004114:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 8004116:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <bmi160_get_offsets+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 800411e:	23ff      	movs	r3, #255	; 0xff
 8004120:	77fb      	strb	r3, [r7, #31]
 8004122:	e063      	b.n	80041ec <bmi160_get_offsets+0xea>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 8004124:	f107 010c 	add.w	r1, r7, #12
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	2207      	movs	r2, #7
 800412c:	2071      	movs	r0, #113	; 0x71
 800412e:	f7ff fcfa 	bl	8003b26 <bmi160_get_regs>
 8004132:	4603      	mov	r3, r0
 8004134:	77fb      	strb	r3, [r7, #31]

        /* Accel offsets */
        offset->off_acc_x = (int8_t)data[0];
 8004136:	7b3b      	ldrb	r3, [r7, #12]
 8004138:	b25a      	sxtb	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	701a      	strb	r2, [r3, #0]
        offset->off_acc_y = (int8_t)data[1];
 800413e:	7b7b      	ldrb	r3, [r7, #13]
 8004140:	b25a      	sxtb	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	705a      	strb	r2, [r3, #1]
        offset->off_acc_z = (int8_t)data[2];
 8004146:	7bbb      	ldrb	r3, [r7, #14]
 8004148:	b25a      	sxtb	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	709a      	strb	r2, [r3, #2]

        /* Gyro x-axis offset */
        lsb = data[3];
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS_POS_0(data[6], BMI160_GYRO_OFFSET_X);
 8004152:	7cbb      	ldrb	r3, [r7, #18]
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 800415a:	7f7b      	ldrb	r3, [r7, #29]
 800415c:	039b      	lsls	r3, r3, #14
 800415e:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8004160:	7fbb      	ldrb	r3, [r7, #30]
 8004162:	019b      	lsls	r3, r3, #6
 8004164:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8004166:	8b7a      	ldrh	r2, [r7, #26]
 8004168:	8b3b      	ldrh	r3, [r7, #24]
 800416a:	4313      	orrs	r3, r2
 800416c:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_x = (int16_t)(offset_data / 64);
 800416e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004172:	2b00      	cmp	r3, #0
 8004174:	da00      	bge.n	8004178 <bmi160_get_offsets+0x76>
 8004176:	333f      	adds	r3, #63	; 0x3f
 8004178:	119b      	asrs	r3, r3, #6
 800417a:	b21a      	sxth	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	809a      	strh	r2, [r3, #4]

        /* Gyro y-axis offset */
        lsb = data[4];
 8004180:	7c3b      	ldrb	r3, [r7, #16]
 8004182:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Y);
 8004184:	7cbb      	ldrb	r3, [r7, #18]
 8004186:	109b      	asrs	r3, r3, #2
 8004188:	b2db      	uxtb	r3, r3
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8004190:	7f7b      	ldrb	r3, [r7, #29]
 8004192:	039b      	lsls	r3, r3, #14
 8004194:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8004196:	7fbb      	ldrb	r3, [r7, #30]
 8004198:	019b      	lsls	r3, r3, #6
 800419a:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 800419c:	8b7a      	ldrh	r2, [r7, #26]
 800419e:	8b3b      	ldrh	r3, [r7, #24]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_y = (int16_t)(offset_data / 64);
 80041a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	da00      	bge.n	80041ae <bmi160_get_offsets+0xac>
 80041ac:	333f      	adds	r3, #63	; 0x3f
 80041ae:	119b      	asrs	r3, r3, #6
 80041b0:	b21a      	sxth	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	80da      	strh	r2, [r3, #6]

        /* Gyro z-axis offset */
        lsb = data[5];
 80041b6:	7c7b      	ldrb	r3, [r7, #17]
 80041b8:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Z);
 80041ba:	7cbb      	ldrb	r3, [r7, #18]
 80041bc:	111b      	asrs	r3, r3, #4
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 80041c6:	7f7b      	ldrb	r3, [r7, #29]
 80041c8:	039b      	lsls	r3, r3, #14
 80041ca:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 80041cc:	7fbb      	ldrb	r3, [r7, #30]
 80041ce:	019b      	lsls	r3, r3, #6
 80041d0:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 80041d2:	8b7a      	ldrh	r2, [r7, #26]
 80041d4:	8b3b      	ldrh	r3, [r7, #24]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_z = (int16_t)(offset_data / 64);
 80041da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	da00      	bge.n	80041e4 <bmi160_get_offsets+0xe2>
 80041e2:	333f      	adds	r3, #63	; 0x3f
 80041e4:	119b      	asrs	r3, r3, #6
 80041e6:	b21a      	sxth	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	811a      	strh	r2, [r3, #8]
    }

    return rslt;
 80041ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3720      	adds	r7, #32
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <set_accel_any_motion_int>:
 * @brief This API sets the any-motion interrupt of the sensor.
 * This interrupt occurs when accel values exceeds preset threshold
 * for a certain period of time.
 */
static int8_t set_accel_any_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004202:	6838      	ldr	r0, [r7, #0]
 8004204:	f000 fa62 	bl	80046cc <null_ptr_check>
 8004208:	4603      	mov	r3, r0
 800420a:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800420c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d102      	bne.n	800421a <set_accel_any_motion_int+0x22>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d102      	bne.n	8004220 <set_accel_any_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800421a:	23ff      	movs	r3, #255	; 0xff
 800421c:	73fb      	strb	r3, [r7, #15]
 800421e:	e013      	b.n	8004248 <set_accel_any_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg = &(int_config->int_type_cfg.acc_any_motion_int);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3304      	adds	r3, #4
 8004224:	60bb      	str	r3, [r7, #8]
        rslt = enable_accel_any_motion_int(any_motion_int_cfg, dev);
 8004226:	6839      	ldr	r1, [r7, #0]
 8004228:	68b8      	ldr	r0, [r7, #8]
 800422a:	f001 f90d 	bl	8005448 <enable_accel_any_motion_int>
 800422e:	4603      	mov	r3, r0
 8004230:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <set_accel_any_motion_int+0x50>
        {
            rslt = config_any_motion_int_settg(int_config, any_motion_int_cfg, dev);
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	68b9      	ldr	r1, [r7, #8]
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f001 fb3f 	bl	80058c2 <config_any_motion_int_settg>
 8004244:	4603      	mov	r3, r0
 8004246:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004248:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <set_accel_tap_int>:
/*!
 * @brief This API sets tap interrupts.Interrupt is fired when
 * tap movements happen.
 */
static int8_t set_accel_tap_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800425e:	6838      	ldr	r0, [r7, #0]
 8004260:	f000 fa34 	bl	80046cc <null_ptr_check>
 8004264:	4603      	mov	r3, r0
 8004266:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d102      	bne.n	8004276 <set_accel_tap_int+0x22>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d102      	bne.n	800427c <set_accel_tap_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004276:	23ff      	movs	r3, #255	; 0xff
 8004278:	73fb      	strb	r3, [r7, #15]
 800427a:	e01e      	b.n	80042ba <set_accel_tap_int+0x66>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_tap_int_cfg *tap_int_cfg = &(int_config->int_type_cfg.acc_tap_int);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3304      	adds	r3, #4
 8004280:	60bb      	str	r3, [r7, #8]
        rslt = enable_tap_int(int_config, tap_int_cfg, dev);
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	68b9      	ldr	r1, [r7, #8]
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f001 fe83 	bl	8005f92 <enable_tap_int>
 800428c:	4603      	mov	r3, r0
 800428e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d110      	bne.n	80042ba <set_accel_tap_int+0x66>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004298:	6839      	ldr	r1, [r7, #0]
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f9fb 	bl	8004696 <set_intr_pin_config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80042a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d106      	bne.n	80042ba <set_accel_tap_int+0x66>
            {
                rslt = config_tap_int_settg(int_config, tap_int_cfg, dev);
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	68b9      	ldr	r1, [r7, #8]
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f001 fec1 	bl	8006038 <config_tap_int_settg>
 80042b6:	4603      	mov	r3, r0
 80042b8:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80042ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <set_accel_gyro_data_ready_int>:
/*!
 * @brief This API sets the data ready interrupt for both accel and gyro.
 * This interrupt occurs when new accel and gyro data comes.
 */
static int8_t set_accel_gyro_data_ready_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b084      	sub	sp, #16
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80042d0:	6838      	ldr	r0, [r7, #0]
 80042d2:	f000 f9fb 	bl	80046cc <null_ptr_check>
 80042d6:	4603      	mov	r3, r0
 80042d8:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80042da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d102      	bne.n	80042e8 <set_accel_gyro_data_ready_int+0x22>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d102      	bne.n	80042ee <set_accel_gyro_data_ready_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80042e8:	23ff      	movs	r3, #255	; 0xff
 80042ea:	73fb      	strb	r3, [r7, #15]
 80042ec:	e018      	b.n	8004320 <set_accel_gyro_data_ready_int+0x5a>
    }
    else
    {
        rslt = enable_data_ready_int(dev);
 80042ee:	6838      	ldr	r0, [r7, #0]
 80042f0:	f001 fb20 	bl	8005934 <enable_data_ready_int>
 80042f4:	4603      	mov	r3, r0
 80042f6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80042f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10f      	bne.n	8004320 <set_accel_gyro_data_ready_int+0x5a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004300:	6839      	ldr	r1, [r7, #0]
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f9c7 	bl	8004696 <set_intr_pin_config>
 8004308:	4603      	mov	r3, r0
 800430a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800430c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d105      	bne.n	8004320 <set_accel_gyro_data_ready_int+0x5a>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8004314:	6839      	ldr	r1, [r7, #0]
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f001 f9d4 	bl	80056c4 <map_hardware_interrupt>
 800431c:	4603      	mov	r3, r0
 800431e:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8004320:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <set_accel_sig_motion_int>:
/*!
 * @brief This API sets the significant motion interrupt of the sensor.This
 * interrupt occurs when there is change in user location.
 */
static int8_t set_accel_sig_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004336:	6838      	ldr	r0, [r7, #0]
 8004338:	f000 f9c8 	bl	80046cc <null_ptr_check>
 800433c:	4603      	mov	r3, r0
 800433e:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d102      	bne.n	800434e <set_accel_sig_motion_int+0x22>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d102      	bne.n	8004354 <set_accel_sig_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800434e:	23ff      	movs	r3, #255	; 0xff
 8004350:	73fb      	strb	r3, [r7, #15]
 8004352:	e013      	b.n	800437c <set_accel_sig_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg = &(int_config->int_type_cfg.acc_sig_motion_int);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3304      	adds	r3, #4
 8004358:	60bb      	str	r3, [r7, #8]
        rslt = enable_sig_motion_int(sig_mot_int_cfg, dev);
 800435a:	6839      	ldr	r1, [r7, #0]
 800435c:	68b8      	ldr	r0, [r7, #8]
 800435e:	f001 fc3f 	bl	8005be0 <enable_sig_motion_int>
 8004362:	4603      	mov	r3, r0
 8004364:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d106      	bne.n	800437c <set_accel_sig_motion_int+0x50>
        {
            rslt = config_sig_motion_int_settg(int_config, sig_mot_int_cfg, dev);
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	68b9      	ldr	r1, [r7, #8]
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f001 fc75 	bl	8005c62 <config_sig_motion_int_settg>
 8004378:	4603      	mov	r3, r0
 800437a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800437c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <set_accel_no_motion_int>:
 * Slow motion is similar to any motion interrupt.No motion interrupt
 * occurs when slope bet. two accel values falls below preset threshold
 * for preset duration.
 */
static int8_t set_accel_no_motion_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004392:	6838      	ldr	r0, [r7, #0]
 8004394:	f000 f99a 	bl	80046cc <null_ptr_check>
 8004398:	4603      	mov	r3, r0
 800439a:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800439c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d102      	bne.n	80043aa <set_accel_no_motion_int+0x22>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d102      	bne.n	80043b0 <set_accel_no_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80043aa:	23ff      	movs	r3, #255	; 0xff
 80043ac:	73fb      	strb	r3, [r7, #15]
 80043ae:	e013      	b.n	80043d8 <set_accel_no_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg = &(int_config->int_type_cfg.acc_no_motion_int);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3304      	adds	r3, #4
 80043b4:	60bb      	str	r3, [r7, #8]
        rslt = enable_no_motion_int(no_mot_int_cfg, dev);
 80043b6:	6839      	ldr	r1, [r7, #0]
 80043b8:	68b8      	ldr	r0, [r7, #8]
 80043ba:	f001 fae8 	bl	800598e <enable_no_motion_int>
 80043be:	4603      	mov	r3, r0
 80043c0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80043c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <set_accel_no_motion_int+0x50>
        {
            /* Configure the INT PIN settings*/
            rslt = config_no_motion_int_settg(int_config, no_mot_int_cfg, dev);
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f001 fb32 	bl	8005a38 <config_no_motion_int_settg>
 80043d4:	4603      	mov	r3, r0
 80043d6:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80043d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <set_accel_step_detect_int>:
 * @brief This API sets the step detection interrupt.This interrupt
 * occurs when the single step causes accel values to go above
 * preset threshold.
 */
static int8_t set_accel_step_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80043ee:	6838      	ldr	r0, [r7, #0]
 80043f0:	f000 f96c 	bl	80046cc <null_ptr_check>
 80043f4:	4603      	mov	r3, r0
 80043f6:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80043f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d102      	bne.n	8004406 <set_accel_step_detect_int+0x22>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d102      	bne.n	800440c <set_accel_step_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004406:	23ff      	movs	r3, #255	; 0xff
 8004408:	73fb      	strb	r3, [r7, #15]
 800440a:	e026      	b.n	800445a <set_accel_step_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg = &(int_config->int_type_cfg.acc_step_detect_int);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3304      	adds	r3, #4
 8004410:	60bb      	str	r3, [r7, #8]
        rslt = enable_step_detect_int(step_detect_int_cfg, dev);
 8004412:	6839      	ldr	r1, [r7, #0]
 8004414:	68b8      	ldr	r0, [r7, #8]
 8004416:	f001 fcf9 	bl	8005e0c <enable_step_detect_int>
 800441a:	4603      	mov	r3, r0
 800441c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800441e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d119      	bne.n	800445a <set_accel_step_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004426:	6839      	ldr	r1, [r7, #0]
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f934 	bl	8004696 <set_intr_pin_config>
 800442e:	4603      	mov	r3, r0
 8004430:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10f      	bne.n	800445a <set_accel_step_detect_int+0x76>
            {
                rslt = map_feature_interrupt(int_config, dev);
 800443a:	6839      	ldr	r1, [r7, #0]
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f001 f8a7 	bl	8005590 <map_feature_interrupt>
 8004442:	4603      	mov	r3, r0
 8004444:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d105      	bne.n	800445a <set_accel_step_detect_int+0x76>
                {
                    rslt = config_step_detect(step_detect_int_cfg, dev);
 800444e:	6839      	ldr	r1, [r7, #0]
 8004450:	68b8      	ldr	r0, [r7, #8]
 8004452:	f001 fd14 	bl	8005e7e <config_step_detect>
 8004456:	4603      	mov	r3, r0
 8004458:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800445a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <set_accel_orientation_int>:
 * @brief This API sets the orientation interrupt of the sensor.This
 * interrupt occurs when there is orientation change in the sensor
 * with respect to gravitational field vector g.
 */
static int8_t set_accel_orientation_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004470:	6838      	ldr	r0, [r7, #0]
 8004472:	f000 f92b 	bl	80046cc <null_ptr_check>
 8004476:	4603      	mov	r3, r0
 8004478:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800447a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d102      	bne.n	8004488 <set_accel_orientation_int+0x22>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d102      	bne.n	800448e <set_accel_orientation_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004488:	23ff      	movs	r3, #255	; 0xff
 800448a:	73fb      	strb	r3, [r7, #15]
 800448c:	e026      	b.n	80044dc <set_accel_orientation_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_orient_int_cfg *orient_int_cfg = &(int_config->int_type_cfg.acc_orient_int);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	3304      	adds	r3, #4
 8004492:	60bb      	str	r3, [r7, #8]
        rslt = enable_orient_int(orient_int_cfg, dev);
 8004494:	6839      	ldr	r1, [r7, #0]
 8004496:	68b8      	ldr	r0, [r7, #8]
 8004498:	f001 fed2 	bl	8006240 <enable_orient_int>
 800449c:	4603      	mov	r3, r0
 800449e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80044a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d119      	bne.n	80044dc <set_accel_orientation_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80044a8:	6839      	ldr	r1, [r7, #0]
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f8f3 	bl	8004696 <set_intr_pin_config>
 80044b0:	4603      	mov	r3, r0
 80044b2:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80044b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10f      	bne.n	80044dc <set_accel_orientation_int+0x76>
            {
                /* map INT pin to orient interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 80044bc:	6839      	ldr	r1, [r7, #0]
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f001 f866 	bl	8005590 <map_feature_interrupt>
 80044c4:	4603      	mov	r3, r0
 80044c6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80044c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d105      	bne.n	80044dc <set_accel_orientation_int+0x76>
                {
                    /* configure the
                     * orientation setting*/
                    rslt = config_orient_int_settg(orient_int_cfg, dev);
 80044d0:	6839      	ldr	r1, [r7, #0]
 80044d2:	68b8      	ldr	r0, [r7, #8]
 80044d4:	f001 feed 	bl	80062b2 <config_orient_int_settg>
 80044d8:	4603      	mov	r3, r0
 80044da:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80044dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <set_accel_flat_detect_int>:
/*!
 * @brief This API sets the flat interrupt of the sensor.This interrupt
 * occurs in case of flat orientation
 */
static int8_t set_accel_flat_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80044f2:	6838      	ldr	r0, [r7, #0]
 80044f4:	f000 f8ea 	bl	80046cc <null_ptr_check>
 80044f8:	4603      	mov	r3, r0
 80044fa:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80044fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d102      	bne.n	800450a <set_accel_flat_detect_int+0x22>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d102      	bne.n	8004510 <set_accel_flat_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800450a:	23ff      	movs	r3, #255	; 0xff
 800450c:	73fb      	strb	r3, [r7, #15]
 800450e:	e026      	b.n	800455e <set_accel_flat_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_flat_detect_int_cfg *flat_detect_int = &(int_config->int_type_cfg.acc_flat_int);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3304      	adds	r3, #4
 8004514:	60bb      	str	r3, [r7, #8]

        /* enable the flat interrupt */
        rslt = enable_flat_int(flat_detect_int, dev);
 8004516:	6839      	ldr	r1, [r7, #0]
 8004518:	68b8      	ldr	r0, [r7, #8]
 800451a:	f001 ff63 	bl	80063e4 <enable_flat_int>
 800451e:	4603      	mov	r3, r0
 8004520:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d119      	bne.n	800455e <set_accel_flat_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800452a:	6839      	ldr	r1, [r7, #0]
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f8b2 	bl	8004696 <set_intr_pin_config>
 8004532:	4603      	mov	r3, r0
 8004534:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10f      	bne.n	800455e <set_accel_flat_detect_int+0x76>
            {
                /* map INT pin to flat interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 800453e:	6839      	ldr	r1, [r7, #0]
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f001 f825 	bl	8005590 <map_feature_interrupt>
 8004546:	4603      	mov	r3, r0
 8004548:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 800454a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d105      	bne.n	800455e <set_accel_flat_detect_int+0x76>
                {
                    /* configure the flat setting*/
                    rslt = config_flat_int_settg(flat_detect_int, dev);
 8004552:	6839      	ldr	r1, [r7, #0]
 8004554:	68b8      	ldr	r0, [r7, #8]
 8004556:	f001 ff7b 	bl	8006450 <config_flat_int_settg>
 800455a:	4603      	mov	r3, r0
 800455c:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800455e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <set_accel_low_g_int>:
/*!
 * @brief This API sets the low-g interrupt of the sensor.This interrupt
 * occurs during free-fall.
 */
static int8_t set_accel_low_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004574:	6838      	ldr	r0, [r7, #0]
 8004576:	f000 f8a9 	bl	80046cc <null_ptr_check>
 800457a:	4603      	mov	r3, r0
 800457c:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800457e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d102      	bne.n	800458c <set_accel_low_g_int+0x22>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d102      	bne.n	8004592 <set_accel_low_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800458c:	23ff      	movs	r3, #255	; 0xff
 800458e:	73fb      	strb	r3, [r7, #15]
 8004590:	e030      	b.n	80045f4 <set_accel_low_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_low_g_int_cfg *low_g_int = &(int_config->int_type_cfg.acc_low_g_int);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3304      	adds	r3, #4
 8004596:	60bb      	str	r3, [r7, #8]

        /* Enable the low-g interrupt*/
        rslt = enable_low_g_int(low_g_int, dev);
 8004598:	6839      	ldr	r1, [r7, #0]
 800459a:	68b8      	ldr	r0, [r7, #8]
 800459c:	f001 ffbe 	bl	800651c <enable_low_g_int>
 80045a0:	4603      	mov	r3, r0
 80045a2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80045a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d123      	bne.n	80045f4 <set_accel_low_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80045ac:	6839      	ldr	r1, [r7, #0]
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f871 	bl	8004696 <set_intr_pin_config>
 80045b4:	4603      	mov	r3, r0
 80045b6:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80045b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d119      	bne.n	80045f4 <set_accel_low_g_int+0x8a>
            {
                /* Map INT pin to low-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 80045c0:	6839      	ldr	r1, [r7, #0]
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 ffe4 	bl	8005590 <map_feature_interrupt>
 80045c8:	4603      	mov	r3, r0
 80045ca:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80045cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10f      	bne.n	80045f4 <set_accel_low_g_int+0x8a>
                {
                    /* configure the data source
                     * for low-g interrupt*/
                    rslt = config_low_g_data_src(low_g_int, dev);
 80045d4:	6839      	ldr	r1, [r7, #0]
 80045d6:	68b8      	ldr	r0, [r7, #8]
 80045d8:	f001 ffd9 	bl	800658e <config_low_g_data_src>
 80045dc:	4603      	mov	r3, r0
 80045de:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 80045e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d105      	bne.n	80045f4 <set_accel_low_g_int+0x8a>
                    {
                        rslt = config_low_g_int_settg(low_g_int, dev);
 80045e8:	6839      	ldr	r1, [r7, #0]
 80045ea:	68b8      	ldr	r0, [r7, #8]
 80045ec:	f002 f806 	bl	80065fc <config_low_g_int_settg>
 80045f0:	4603      	mov	r3, r0
 80045f2:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80045f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <set_accel_high_g_int>:
 * occurs if the absolute value of acceleration data of any enabled axis
 * exceeds the programmed threshold and the sign of the value does not
 * change for a preset duration.
 */
static int8_t set_accel_high_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800460a:	6838      	ldr	r0, [r7, #0]
 800460c:	f000 f85e 	bl	80046cc <null_ptr_check>
 8004610:	4603      	mov	r3, r0
 8004612:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d102      	bne.n	8004622 <set_accel_high_g_int+0x22>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d102      	bne.n	8004628 <set_accel_high_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004622:	23ff      	movs	r3, #255	; 0xff
 8004624:	73fb      	strb	r3, [r7, #15]
 8004626:	e030      	b.n	800468a <set_accel_high_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_high_g_int_cfg *high_g_int_cfg = &(int_config->int_type_cfg.acc_high_g_int);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3304      	adds	r3, #4
 800462c:	60bb      	str	r3, [r7, #8]

        /* Enable the high-g interrupt */
        rslt = enable_high_g_int(high_g_int_cfg, dev);
 800462e:	6839      	ldr	r1, [r7, #0]
 8004630:	68b8      	ldr	r0, [r7, #8]
 8004632:	f002 f83f 	bl	80066b4 <enable_high_g_int>
 8004636:	4603      	mov	r3, r0
 8004638:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800463a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d123      	bne.n	800468a <set_accel_high_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004642:	6839      	ldr	r1, [r7, #0]
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f826 	bl	8004696 <set_intr_pin_config>
 800464a:	4603      	mov	r3, r0
 800464c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800464e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d119      	bne.n	800468a <set_accel_high_g_int+0x8a>
            {
                /* Map INT pin to high-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8004656:	6839      	ldr	r1, [r7, #0]
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 ff99 	bl	8005590 <map_feature_interrupt>
 800465e:	4603      	mov	r3, r0
 8004660:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10f      	bne.n	800468a <set_accel_high_g_int+0x8a>
                {
                    /* configure the data source
                     * for high-g interrupt*/
                    rslt = config_high_g_data_src(high_g_int_cfg, dev);
 800466a:	6839      	ldr	r1, [r7, #0]
 800466c:	68b8      	ldr	r0, [r7, #8]
 800466e:	f002 f881 	bl	8006774 <config_high_g_data_src>
 8004672:	4603      	mov	r3, r0
 8004674:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 8004676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d105      	bne.n	800468a <set_accel_high_g_int+0x8a>
                    {
                        rslt = config_high_g_int_settg(high_g_int_cfg, dev);
 800467e:	6839      	ldr	r1, [r7, #0]
 8004680:	68b8      	ldr	r0, [r7, #8]
 8004682:	f002 f8ad 	bl	80067e0 <config_high_g_int_settg>
 8004686:	4603      	mov	r3, r0
 8004688:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800468a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <set_intr_pin_config>:
/*!
 * @brief This API configures the pins to fire the
 * interrupt signal when it occurs.
 */
static int8_t set_intr_pin_config(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b084      	sub	sp, #16
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* configure the behavioural settings of interrupt pin */
    rslt = config_int_out_ctrl(int_config, dev);
 80046a0:	6839      	ldr	r1, [r7, #0]
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f002 f8e2 	bl	800686c <config_int_out_ctrl>
 80046a8:	4603      	mov	r3, r0
 80046aa:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80046ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d105      	bne.n	80046c0 <set_intr_pin_config+0x2a>
    {
        rslt = config_int_latch(int_config, dev);
 80046b4:	6839      	ldr	r1, [r7, #0]
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f002 f9a2 	bl	8006a00 <config_int_latch>
 80046bc:	4603      	mov	r3, r0
 80046be:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80046c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00b      	beq.n	80046f2 <null_ptr_check+0x26>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d007      	beq.n	80046f2 <null_ptr_check+0x26>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <null_ptr_check+0x26>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d102      	bne.n	80046f8 <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 80046f2:	23ff      	movs	r3, #255	; 0xff
 80046f4:	73fb      	strb	r3, [r7, #15]
 80046f6:	e001      	b.n	80046fc <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80046fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr

0800470a <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2202      	movs	r2, #2
 8004716:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2208      	movs	r2, #8
 800471c:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2210      	movs	r2, #16
 8004722:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2203      	movs	r2, #3
 8004728:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2202      	movs	r2, #2
 800472e:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2208      	movs	r2, #8
 8004734:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2214      	movs	r2, #20
 800473a:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6852      	ldr	r2, [r2, #4]
 8004748:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	68d2      	ldr	r2, [r2, #12]
 8004750:	611a      	str	r2, [r3, #16]
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr

0800475c <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8004764:	2300      	movs	r3, #0
 8004766:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 8004768:	f107 030c 	add.w	r3, r7, #12
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	4618      	mov	r0, r3
 8004770:	f000 f833 	bl	80047da <check_accel_config>
 8004774:	4603      	mov	r3, r0
 8004776:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d126      	bne.n	80047ce <set_accel_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 8004780:	f107 010c 	add.w	r1, r7, #12
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	2040      	movs	r0, #64	; 0x40
 800478a:	f7ff f9ff 	bl	8003b8c <bmi160_set_regs>
 800478e:	4603      	mov	r3, r0
 8004790:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d119      	bne.n	80047ce <set_accel_conf+0x72>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	795a      	ldrb	r2, [r3, #5]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	725a      	strb	r2, [r3, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	79da      	ldrb	r2, [r3, #7]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	72da      	strb	r2, [r3, #11]

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 80047aa:	f107 030c 	add.w	r3, r7, #12
 80047ae:	1c59      	adds	r1, r3, #1
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	2041      	movs	r0, #65	; 0x41
 80047b6:	f7ff f9e9 	bl	8003b8c <bmi160_set_regs>
 80047ba:	4603      	mov	r3, r0
 80047bc:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80047be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d103      	bne.n	80047ce <set_accel_conf+0x72>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	799a      	ldrb	r2, [r3, #6]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	729a      	strb	r2, [r3, #10]
            }
        }
    }

    return rslt;
 80047ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b084      	sub	sp, #16
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2202      	movs	r2, #2
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	2040      	movs	r0, #64	; 0x40
 80047ec:	f7ff f99b 	bl	8003b26 <bmi160_get_regs>
 80047f0:	4603      	mov	r3, r0
 80047f2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80047f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d11b      	bne.n	8004834 <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 80047fc:	6839      	ldr	r1, [r7, #0]
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f81e 	bl	8004840 <process_accel_odr>
 8004804:	4603      	mov	r3, r0
 8004806:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d111      	bne.n	8004834 <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 8004810:	6839      	ldr	r1, [r7, #0]
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f847 	bl	80048a6 <process_accel_bw>
 8004818:	4603      	mov	r3, r0
 800481a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800481c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d107      	bne.n	8004834 <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3301      	adds	r3, #1
 8004828:	6839      	ldr	r1, [r7, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f000 f86f 	bl	800490e <process_accel_range>
 8004830:	4603      	mov	r3, r0
 8004832:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8004834:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800484a:	2300      	movs	r3, #0
 800484c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800484e:	2300      	movs	r3, #0
 8004850:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8004852:	2300      	movs	r3, #0
 8004854:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_1600HZ)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	795b      	ldrb	r3, [r3, #5]
 800485a:	2b0c      	cmp	r3, #12
 800485c:	d81a      	bhi.n	8004894 <process_accel_odr+0x54>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	795a      	ldrb	r2, [r3, #5]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	7a5b      	ldrb	r3, [r3, #9]
 8004866:	429a      	cmp	r2, r3
 8004868:	d016      	beq.n	8004898 <process_accel_odr+0x58>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	795b      	ldrb	r3, [r3, #5]
 800486e:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	f023 030f 	bic.w	r3, r3, #15
 8004878:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 800487a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	b25a      	sxtb	r2, r3
 8004884:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004888:	4313      	orrs	r3, r2
 800488a:	b25b      	sxtb	r3, r3
 800488c:	b2da      	uxtb	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	701a      	strb	r2, [r3, #0]
 8004892:	e001      	b.n	8004898 <process_accel_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8004894:	23fc      	movs	r3, #252	; 0xfc
 8004896:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004898:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bc80      	pop	{r7}
 80048a4:	4770      	bx	lr

080048a6 <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b085      	sub	sp, #20
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_RES_AVG128)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	79db      	ldrb	r3, [r3, #7]
 80048c0:	2b07      	cmp	r3, #7
 80048c2:	d81b      	bhi.n	80048fc <process_accel_bw+0x56>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	79da      	ldrb	r2, [r3, #7]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	7adb      	ldrb	r3, [r3, #11]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d017      	beq.n	8004900 <process_accel_bw+0x5a>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	79db      	ldrb	r3, [r3, #7]
 80048d4:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048de:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_BW_MASK);
 80048e0:	7b7b      	ldrb	r3, [r7, #13]
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	b25b      	sxtb	r3, r3
 80048e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048ea:	b25a      	sxtb	r2, r3
 80048ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	b25b      	sxtb	r3, r3
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	701a      	strb	r2, [r3, #0]
 80048fa:	e001      	b.n	8004900 <process_accel_bw+0x5a>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80048fc:	23fc      	movs	r3, #252	; 0xfc
 80048fe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004900:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	bc80      	pop	{r7}
 800490c:	4770      	bx	lr

0800490e <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 800490e:	b480      	push	{r7}
 8004910:	b085      	sub	sp, #20
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8004918:	2300      	movs	r3, #0
 800491a:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800491c:	2300      	movs	r3, #0
 800491e:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8004920:	2300      	movs	r3, #0
 8004922:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_16G)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	799b      	ldrb	r3, [r3, #6]
 8004928:	2b0c      	cmp	r3, #12
 800492a:	d81a      	bhi.n	8004962 <process_accel_range+0x54>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	799a      	ldrb	r2, [r3, #6]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	7a9b      	ldrb	r3, [r3, #10]
 8004934:	429a      	cmp	r2, r3
 8004936:	d016      	beq.n	8004966 <process_accel_range+0x58>
        {
            range = (uint8_t)dev->accel_cfg.range;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	799b      	ldrb	r3, [r3, #6]
 800493c:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	f023 030f 	bic.w	r3, r3, #15
 8004946:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 8004948:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800494c:	f003 030f 	and.w	r3, r3, #15
 8004950:	b25a      	sxtb	r2, r3
 8004952:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004956:	4313      	orrs	r3, r2
 8004958:	b25b      	sxtb	r3, r3
 800495a:	b2da      	uxtb	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	701a      	strb	r2, [r3, #0]
 8004960:	e001      	b.n	8004966 <process_accel_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8004962:	23fc      	movs	r3, #252	; 0xfc
 8004964:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004966:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr

08004974 <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 800497c:	2300      	movs	r3, #0
 800497e:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 8004980:	f107 010e 	add.w	r1, r7, #14
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	2002      	movs	r0, #2
 800498a:	f7ff f8cc 	bl	8003b26 <bmi160_get_regs>
 800498e:	4603      	mov	r3, r0
 8004990:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 8004992:	7bbb      	ldrb	r3, [r7, #14]
 8004994:	085b      	lsrs	r3, r3, #1
 8004996:	b2db      	uxtb	r3, r3
 8004998:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 800499a:	7bbb      	ldrb	r3, [r7, #14]
 800499c:	f003 030f 	and.w	r3, r3, #15
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 80049a4:	7bbb      	ldrb	r3, [r7, #14]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d102      	bne.n	80049b0 <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 80049aa:	23fa      	movs	r3, #250	; 0xfa
 80049ac:	73fb      	strb	r3, [r7, #15]
 80049ae:	e010      	b.n	80049d2 <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 80049b0:	7bbb      	ldrb	r3, [r7, #14]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d102      	bne.n	80049bc <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 80049b6:	23f9      	movs	r3, #249	; 0xf9
 80049b8:	73fb      	strb	r3, [r7, #15]
 80049ba:	e00a      	b.n	80049d2 <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 80049bc:	7bbb      	ldrb	r3, [r7, #14]
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d102      	bne.n	80049c8 <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 80049c2:	23f8      	movs	r3, #248	; 0xf8
 80049c4:	73fb      	strb	r3, [r7, #15]
 80049c6:	e004      	b.n	80049d2 <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 80049c8:	7bbb      	ldrb	r3, [r7, #14]
 80049ca:	2b07      	cmp	r3, #7
 80049cc:	d101      	bne.n	80049d2 <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 80049ce:	23f7      	movs	r3, #247	; 0xf7
 80049d0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80049d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b084      	sub	sp, #16
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 80049e6:	2300      	movs	r3, #0
 80049e8:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 80049ea:	f107 030c 	add.w	r3, r7, #12
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 f833 	bl	8004a5c <check_gyro_config>
 80049f6:	4603      	mov	r3, r0
 80049f8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80049fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d126      	bne.n	8004a50 <set_gyro_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 8004a02:	f107 010c 	add.w	r1, r7, #12
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	2042      	movs	r0, #66	; 0x42
 8004a0c:	f7ff f8be 	bl	8003b8c <bmi160_set_regs>
 8004a10:	4603      	mov	r3, r0
 8004a12:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d119      	bne.n	8004a50 <set_gyro_conf+0x72>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	7b5a      	ldrb	r2, [r3, #13]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	745a      	strb	r2, [r3, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	7bda      	ldrb	r2, [r3, #15]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	74da      	strb	r2, [r3, #19]

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 8004a2c:	f107 030c 	add.w	r3, r7, #12
 8004a30:	1c59      	adds	r1, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	2043      	movs	r0, #67	; 0x43
 8004a38:	f7ff f8a8 	bl	8003b8c <bmi160_set_regs>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d103      	bne.n	8004a50 <set_gyro_conf+0x72>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	7b9a      	ldrb	r2, [r3, #14]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	749a      	strb	r2, [r3, #18]
            }
        }
    }

    return rslt;
 8004a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	2042      	movs	r0, #66	; 0x42
 8004a6e:	f7ff f85a 	bl	8003b26 <bmi160_get_regs>
 8004a72:	4603      	mov	r3, r0
 8004a74:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d11b      	bne.n	8004ab6 <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 8004a7e:	6839      	ldr	r1, [r7, #0]
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f81e 	bl	8004ac2 <process_gyro_odr>
 8004a86:	4603      	mov	r3, r0
 8004a88:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d111      	bne.n	8004ab6 <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 8004a92:	6839      	ldr	r1, [r7, #0]
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f847 	bl	8004b28 <process_gyro_bw>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d107      	bne.n	8004ab6 <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	6839      	ldr	r1, [r7, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 f869 	bl	8004b84 <process_gyro_range>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8004ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b085      	sub	sp, #20
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8004acc:	2300      	movs	r3, #0
 8004ace:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_3200HZ)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	7b5b      	ldrb	r3, [r3, #13]
 8004adc:	2b0d      	cmp	r3, #13
 8004ade:	d81a      	bhi.n	8004b16 <process_gyro_odr+0x54>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	7b5a      	ldrb	r2, [r3, #13]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	7c5b      	ldrb	r3, [r3, #17]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d016      	beq.n	8004b1a <process_gyro_odr+0x58>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	7b5b      	ldrb	r3, [r3, #13]
 8004af0:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	f023 030f 	bic.w	r3, r3, #15
 8004afa:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 8004afc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004b00:	f003 030f 	and.w	r3, r3, #15
 8004b04:	b25a      	sxtb	r2, r3
 8004b06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	b25b      	sxtb	r3, r3
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	e001      	b.n	8004b1a <process_gyro_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8004b16:	23fc      	movs	r3, #252	; 0xfc
 8004b18:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr

08004b28 <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8004b32:	2300      	movs	r3, #0
 8004b34:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8004b36:	2300      	movs	r3, #0
 8004b38:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_NORMAL_MODE)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	7bdb      	ldrb	r3, [r3, #15]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d815      	bhi.n	8004b72 <process_gyro_bw+0x4a>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	7bdb      	ldrb	r3, [r3, #15]
 8004b4a:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004b54:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 8004b56:	7b7b      	ldrb	r3, [r7, #13]
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	b25b      	sxtb	r3, r3
 8004b5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b60:	b25a      	sxtb	r2, r3
 8004b62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	b25b      	sxtb	r3, r3
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	701a      	strb	r2, [r3, #0]
 8004b70:	e001      	b.n	8004b76 <process_gyro_bw+0x4e>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8004b72:	23fc      	movs	r3, #252	; 0xfc
 8004b74:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bc80      	pop	{r7}
 8004b82:	4770      	bx	lr

08004b84 <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8004b92:	2300      	movs	r3, #0
 8004b94:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8004b96:	2300      	movs	r3, #0
 8004b98:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	7b9b      	ldrb	r3, [r3, #14]
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d81a      	bhi.n	8004bd8 <process_gyro_range+0x54>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	7b9a      	ldrb	r2, [r3, #14]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	7c9b      	ldrb	r3, [r3, #18]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d016      	beq.n	8004bdc <process_gyro_range+0x58>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	7b9b      	ldrb	r3, [r3, #14]
 8004bb2:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MASK;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	f023 0307 	bic.w	r3, r3, #7
 8004bbc:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MASK);
 8004bbe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	b25a      	sxtb	r2, r3
 8004bc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	b25b      	sxtb	r3, r3
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	701a      	strb	r2, [r3, #0]
 8004bd6:	e001      	b.n	8004bdc <process_gyro_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8004bd8:	23fc      	movs	r3, #252	; 0xfc
 8004bda:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bc80      	pop	{r7}
 8004be8:	4770      	bx	lr

08004bea <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b084      	sub	sp, #16
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	791b      	ldrb	r3, [r3, #4]
 8004bfe:	2b0f      	cmp	r3, #15
 8004c00:	d92b      	bls.n	8004c5a <set_accel_pwr+0x70>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	791b      	ldrb	r3, [r3, #4]
 8004c06:	2b12      	cmp	r3, #18
 8004c08:	d827      	bhi.n	8004c5a <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	791a      	ldrb	r2, [r3, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	7a1b      	ldrb	r3, [r3, #8]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d024      	beq.n	8004c60 <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 8004c16:	f107 030e 	add.w	r3, r7, #14
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 f826 	bl	8004c6e <process_under_sampling>
 8004c22:	4603      	mov	r3, r0
 8004c24:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d118      	bne.n	8004c60 <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	1d19      	adds	r1, r3, #4
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	207e      	movs	r0, #126	; 0x7e
 8004c38:	f7fe ffa8 	bl	8003b8c <bmi160_set_regs>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	7a1b      	ldrb	r3, [r3, #8]
 8004c44:	2b10      	cmp	r3, #16
 8004c46:	d103      	bne.n	8004c50 <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	2005      	movs	r0, #5
 8004c4e:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	791a      	ldrb	r2, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8004c58:	e002      	b.n	8004c60 <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 8004c5a:	23f3      	movs	r3, #243	; 0xf3
 8004c5c:	73fb      	strb	r3, [r7, #15]
 8004c5e:	e000      	b.n	8004c62 <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8004c60:	bf00      	nop
    }

    return rslt;
 8004c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b084      	sub	sp, #16
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2201      	movs	r2, #1
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	2040      	movs	r0, #64	; 0x40
 8004c88:	f7fe ff4d 	bl	8003b26 <bmi160_get_regs>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d139      	bne.n	8004d0c <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	791b      	ldrb	r3, [r3, #4]
 8004c9c:	2b12      	cmp	r3, #18
 8004c9e:	d120      	bne.n	8004ce2 <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca8:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 8004caa:	7bbb      	ldrb	r3, [r7, #14]
 8004cac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	6879      	ldr	r1, [r7, #4]
 8004cbc:	2040      	movs	r0, #64	; 0x40
 8004cbe:	f7fe ff65 	bl	8003b8c <bmi160_set_regs>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 8004cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d11e      	bne.n	8004d0c <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 8004cce:	f107 010c 	add.w	r1, r7, #12
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	2058      	movs	r0, #88	; 0x58
 8004cd8:	f7fe ff58 	bl	8003b8c <bmi160_set_regs>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	73fb      	strb	r3, [r7, #15]
 8004ce0:	e014      	b.n	8004d0c <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	b25b      	sxtb	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	da0f      	bge.n	8004d0c <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cf4:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	7bba      	ldrb	r2, [r7, #14]
 8004cfa:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	2040      	movs	r0, #64	; 0x40
 8004d04:	f7fe ff42 	bl	8003b8c <bmi160_set_regs>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8004d20:	2300      	movs	r3, #0
 8004d22:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	7b1b      	ldrb	r3, [r3, #12]
 8004d28:	2b14      	cmp	r3, #20
 8004d2a:	d007      	beq.n	8004d3c <set_gyro_pwr+0x24>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	7b1b      	ldrb	r3, [r3, #12]
 8004d30:	2b15      	cmp	r3, #21
 8004d32:	d003      	beq.n	8004d3c <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8004d38:	2b17      	cmp	r3, #23
 8004d3a:	d129      	bne.n	8004d90 <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	7b1a      	ldrb	r2, [r3, #12]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	7c1b      	ldrb	r3, [r3, #16]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d025      	beq.n	8004d94 <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f103 010c 	add.w	r1, r3, #12
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	207e      	movs	r0, #126	; 0x7e
 8004d54:	f7fe ff1a 	bl	8003b8c <bmi160_set_regs>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	7c1b      	ldrb	r3, [r3, #16]
 8004d60:	2b14      	cmp	r3, #20
 8004d62:	d104      	bne.n	8004d6e <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	2050      	movs	r0, #80	; 0x50
 8004d6a:	4798      	blx	r3
 8004d6c:	e00b      	b.n	8004d86 <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	7c1b      	ldrb	r3, [r3, #16]
 8004d72:	2b17      	cmp	r3, #23
 8004d74:	d107      	bne.n	8004d86 <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8004d7a:	2b15      	cmp	r3, #21
 8004d7c:	d103      	bne.n	8004d86 <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	200a      	movs	r0, #10
 8004d84:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	7b1a      	ldrb	r2, [r3, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8004d8e:	e001      	b.n	8004d94 <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 8004d90:	23f3      	movs	r3, #243	; 0xf3
 8004d92:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <get_accel_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08c      	sub	sp, #48	; 0x30
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	4603      	mov	r3, r0
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
 8004dac:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8004dae:	2300      	movs	r3, #0
 8004db0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t data_array[9] = { 0 };
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	f107 0318 	add.w	r3, r7, #24
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	711a      	strb	r2, [r3, #4]
    uint8_t time_0 = 0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t time_1 = 0;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t time_2 = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3306      	adds	r3, #6
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	f107 0114 	add.w	r1, r7, #20
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2012      	movs	r0, #18
 8004de0:	f7fe fea1 	bl	8003b26 <bmi160_get_regs>
 8004de4:	4603      	mov	r3, r0
 8004de6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (rslt == BMI160_OK)
 8004dea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f040 8098 	bne.w	8004f24 <get_accel_data+0x184>
    {
        /* Accel Data */
        lsb = data_array[idx++];
 8004df4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004dfe:	3330      	adds	r3, #48	; 0x30
 8004e00:	443b      	add	r3, r7
 8004e02:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8004e0a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004e14:	3330      	adds	r3, #48	; 0x30
 8004e16:	443b      	add	r3, r7
 8004e18:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004e1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8004e20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004e24:	021b      	lsls	r3, r3, #8
 8004e26:	b21a      	sxth	r2, r3
 8004e28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e2c:	b21b      	sxth	r3, r3
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	843b      	strh	r3, [r7, #32]
        accel->x = msblsb; /* Data in X axis */
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	8c3a      	ldrh	r2, [r7, #32]
 8004e36:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8004e38:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004e42:	3330      	adds	r3, #48	; 0x30
 8004e44:	443b      	add	r3, r7
 8004e46:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8004e4e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004e58:	3330      	adds	r3, #48	; 0x30
 8004e5a:	443b      	add	r3, r7
 8004e5c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004e60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8004e64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004e68:	021b      	lsls	r3, r3, #8
 8004e6a:	b21a      	sxth	r2, r3
 8004e6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e70:	b21b      	sxth	r3, r3
 8004e72:	4313      	orrs	r3, r2
 8004e74:	843b      	strh	r3, [r7, #32]
        accel->y = msblsb; /* Data in Y axis */
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	8c3a      	ldrh	r2, [r7, #32]
 8004e7a:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8004e7c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004e86:	3330      	adds	r3, #48	; 0x30
 8004e88:	443b      	add	r3, r7
 8004e8a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8004e92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004e9c:	3330      	adds	r3, #48	; 0x30
 8004e9e:	443b      	add	r3, r7
 8004ea0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004ea4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8004ea8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004eac:	021b      	lsls	r3, r3, #8
 8004eae:	b21a      	sxth	r2, r3
 8004eb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eb4:	b21b      	sxth	r3, r3
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	843b      	strh	r3, [r7, #32]
        accel->z = msblsb; /* Data in Z axis */
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	8c3a      	ldrh	r2, [r7, #32]
 8004ebe:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
 8004ec2:	2b03      	cmp	r3, #3
 8004ec4:	d12a      	bne.n	8004f1c <get_accel_data+0x17c>
        {
            time_0 = data_array[idx++];
 8004ec6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004ed0:	3330      	adds	r3, #48	; 0x30
 8004ed2:	443b      	add	r3, r7
 8004ed4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004ed8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8004edc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004ee6:	3330      	adds	r3, #48	; 0x30
 8004ee8:	443b      	add	r3, r7
 8004eea:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	021b      	lsls	r3, r3, #8
 8004ef2:	857b      	strh	r3, [r7, #42]	; 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8004ef4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004efe:	3330      	adds	r3, #48	; 0x30
 8004f00:	443b      	add	r3, r7
 8004f02:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004f06:	041b      	lsls	r3, r3, #16
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8004f0a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004f14:	431a      	orrs	r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	609a      	str	r2, [r3, #8]
 8004f1a:	e006      	b.n	8004f2a <get_accel_data+0x18a>
        }
        else
        {
            accel->sensortime = 0;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	609a      	str	r2, [r3, #8]
 8004f22:	e002      	b.n	8004f2a <get_accel_data+0x18a>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8004f24:	23fe      	movs	r3, #254	; 0xfe
 8004f26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return rslt;
 8004f2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3730      	adds	r7, #48	; 0x30
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <get_gyro_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b08c      	sub	sp, #48	; 0x30
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	60b9      	str	r1, [r7, #8]
 8004f40:	607a      	str	r2, [r7, #4]
 8004f42:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t data_array[15] = { 0 };
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	613b      	str	r3, [r7, #16]
 8004f4e:	f107 0314 	add.w	r3, r7, #20
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	605a      	str	r2, [r3, #4]
 8004f58:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t time_1 = 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t time_2 = 0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    if (len == 0)
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d17b      	bne.n	8005068 <get_gyro_data+0x132>
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 8004f70:	f107 0110 	add.w	r1, r7, #16
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2206      	movs	r2, #6
 8004f78:	200c      	movs	r0, #12
 8004f7a:	f7fe fdd4 	bl	8003b26 <bmi160_get_regs>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rslt == BMI160_OK)
 8004f84:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d169      	bne.n	8005060 <get_gyro_data+0x12a>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 8004f8c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004f96:	3330      	adds	r3, #48	; 0x30
 8004f98:	443b      	add	r3, r7
 8004f9a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8004fa2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004fac:	3330      	adds	r3, #48	; 0x30
 8004fae:	443b      	add	r3, r7
 8004fb0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004fb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8004fb8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004fbc:	021b      	lsls	r3, r3, #8
 8004fbe:	b21a      	sxth	r2, r3
 8004fc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fc4:	b21b      	sxth	r3, r3
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* Data in X axis */
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	8c3a      	ldrh	r2, [r7, #32]
 8004fce:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 8004fd0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004fda:	3330      	adds	r3, #48	; 0x30
 8004fdc:	443b      	add	r3, r7
 8004fde:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8004fe6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004ff0:	3330      	adds	r3, #48	; 0x30
 8004ff2:	443b      	add	r3, r7
 8004ff4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004ff8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8004ffc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005000:	021b      	lsls	r3, r3, #8
 8005002:	b21a      	sxth	r2, r3
 8005004:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005008:	b21b      	sxth	r3, r3
 800500a:	4313      	orrs	r3, r2
 800500c:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* Data in Y axis */
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	8c3a      	ldrh	r2, [r7, #32]
 8005012:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8005014:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800501e:	3330      	adds	r3, #48	; 0x30
 8005020:	443b      	add	r3, r7
 8005022:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 800502a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005034:	3330      	adds	r3, #48	; 0x30
 8005036:	443b      	add	r3, r7
 8005038:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800503c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005040:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005044:	021b      	lsls	r3, r3, #8
 8005046:	b21a      	sxth	r2, r3
 8005048:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800504c:	b21b      	sxth	r3, r3
 800504e:	4313      	orrs	r3, r2
 8005050:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* Data in Z axis */
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	8c3a      	ldrh	r2, [r7, #32]
 8005056:	809a      	strh	r2, [r3, #4]
            gyro->sensortime = 0;
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2200      	movs	r2, #0
 800505c:	609a      	str	r2, [r3, #8]
 800505e:	e0ae      	b.n	80051be <get_gyro_data+0x288>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8005060:	23fe      	movs	r3, #254	; 0xfe
 8005062:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005066:	e0aa      	b.n	80051be <get_gyro_data+0x288>
        }
    }
    else
    {
        /* read gyro sensor data along with time */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	b29b      	uxth	r3, r3
 800506c:	330c      	adds	r3, #12
 800506e:	b29a      	uxth	r2, r3
 8005070:	f107 0110 	add.w	r1, r7, #16
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	200c      	movs	r0, #12
 8005078:	f7fe fd55 	bl	8003b26 <bmi160_get_regs>
 800507c:	4603      	mov	r3, r0
 800507e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rslt == BMI160_OK)
 8005082:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005086:	2b00      	cmp	r3, #0
 8005088:	f040 8096 	bne.w	80051b8 <get_gyro_data+0x282>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 800508c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005096:	3330      	adds	r3, #48	; 0x30
 8005098:	443b      	add	r3, r7
 800509a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800509e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 80050a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80050ac:	3330      	adds	r3, #48	; 0x30
 80050ae:	443b      	add	r3, r7
 80050b0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80050b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 80050b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	b21a      	sxth	r2, r3
 80050c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050c4:	b21b      	sxth	r3, r3
 80050c6:	4313      	orrs	r3, r2
 80050c8:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* gyro X axis data */
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	8c3a      	ldrh	r2, [r7, #32]
 80050ce:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 80050d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80050da:	3330      	adds	r3, #48	; 0x30
 80050dc:	443b      	add	r3, r7
 80050de:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80050e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 80050e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80050f0:	3330      	adds	r3, #48	; 0x30
 80050f2:	443b      	add	r3, r7
 80050f4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80050f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 80050fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005100:	021b      	lsls	r3, r3, #8
 8005102:	b21a      	sxth	r2, r3
 8005104:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005108:	b21b      	sxth	r3, r3
 800510a:	4313      	orrs	r3, r2
 800510c:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* gyro Y axis data */
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	8c3a      	ldrh	r2, [r7, #32]
 8005112:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8005114:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800511e:	3330      	adds	r3, #48	; 0x30
 8005120:	443b      	add	r3, r7
 8005122:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 800512a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005134:	3330      	adds	r3, #48	; 0x30
 8005136:	443b      	add	r3, r7
 8005138:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800513c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005140:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005144:	021b      	lsls	r3, r3, #8
 8005146:	b21a      	sxth	r2, r3
 8005148:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800514c:	b21b      	sxth	r3, r3
 800514e:	4313      	orrs	r3, r2
 8005150:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* gyro Z axis data */
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	8c3a      	ldrh	r2, [r7, #32]
 8005156:	809a      	strh	r2, [r3, #4]
            idx = idx + 6;
 8005158:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800515c:	3306      	adds	r3, #6
 800515e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            time_0 = data_array[idx++];
 8005162:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800516c:	3330      	adds	r3, #48	; 0x30
 800516e:	443b      	add	r3, r7
 8005170:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005174:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8005178:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005182:	3330      	adds	r3, #48	; 0x30
 8005184:	443b      	add	r3, r7
 8005186:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800518a:	b29b      	uxth	r3, r3
 800518c:	021b      	lsls	r3, r3, #8
 800518e:	857b      	strh	r3, [r7, #42]	; 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8005190:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800519a:	3330      	adds	r3, #48	; 0x30
 800519c:	443b      	add	r3, r7
 800519e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80051a2:	041b      	lsls	r3, r3, #16
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 80051a6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	431a      	orrs	r2, r3
 80051ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80051b0:	431a      	orrs	r2, r3
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	609a      	str	r2, [r3, #8]
 80051b6:	e002      	b.n	80051be <get_gyro_data+0x288>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 80051b8:	23fe      	movs	r3, #254	; 0xfe
 80051ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
    }

    return rslt;
 80051be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3730      	adds	r7, #48	; 0x30
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <get_accel_gyro_data>:
 */
static int8_t get_accel_gyro_data(uint8_t len,
                                  struct bmi160_sensor_data *accel,
                                  struct bmi160_sensor_data *gyro,
                                  const struct bmi160_dev *dev)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b08c      	sub	sp, #48	; 0x30
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
 80051d6:	4603      	mov	r3, r0
 80051d8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 80051da:	2300      	movs	r3, #0
 80051dc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t data_array[15] = { 0 };
 80051e0:	2300      	movs	r3, #0
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	f107 0314 	add.w	r3, r7, #20
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	605a      	str	r2, [r3, #4]
 80051ee:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 80051f2:	2300      	movs	r3, #0
 80051f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t time_1 = 0;
 80051f8:	2300      	movs	r3, #0
 80051fa:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t time_2 = 0;
 80051fc:	2300      	movs	r3, #0
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t msb;
    int16_t msblsb;

    /* read both accel and gyro sensor data
     * along with time if requested */
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	b29b      	uxth	r3, r3
 8005204:	330c      	adds	r3, #12
 8005206:	b29a      	uxth	r2, r3
 8005208:	f107 0110 	add.w	r1, r7, #16
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	200c      	movs	r0, #12
 8005210:	f7fe fc89 	bl	8003b26 <bmi160_get_regs>
 8005214:	4603      	mov	r3, r0
 8005216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (rslt == BMI160_OK)
 800521a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800521e:	2b00      	cmp	r3, #0
 8005220:	f040 8109 	bne.w	8005436 <get_accel_gyro_data+0x26c>
    {
        /* Gyro Data */
        lsb = data_array[idx++];
 8005224:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800522e:	3330      	adds	r3, #48	; 0x30
 8005230:	443b      	add	r3, r7
 8005232:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 800523a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005244:	3330      	adds	r3, #48	; 0x30
 8005246:	443b      	add	r3, r7
 8005248:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800524c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005250:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005254:	021b      	lsls	r3, r3, #8
 8005256:	b21a      	sxth	r2, r3
 8005258:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800525c:	b21b      	sxth	r3, r3
 800525e:	4313      	orrs	r3, r2
 8005260:	843b      	strh	r3, [r7, #32]
        gyro->x = msblsb; /* gyro X axis data */
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	8c3a      	ldrh	r2, [r7, #32]
 8005266:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8005268:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005272:	3330      	adds	r3, #48	; 0x30
 8005274:	443b      	add	r3, r7
 8005276:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800527a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 800527e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005288:	3330      	adds	r3, #48	; 0x30
 800528a:	443b      	add	r3, r7
 800528c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005290:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005294:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005298:	021b      	lsls	r3, r3, #8
 800529a:	b21a      	sxth	r2, r3
 800529c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052a0:	b21b      	sxth	r3, r3
 80052a2:	4313      	orrs	r3, r2
 80052a4:	843b      	strh	r3, [r7, #32]
        gyro->y = msblsb; /* gyro Y axis data */
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	8c3a      	ldrh	r2, [r7, #32]
 80052aa:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 80052ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80052b6:	3330      	adds	r3, #48	; 0x30
 80052b8:	443b      	add	r3, r7
 80052ba:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80052be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 80052c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80052cc:	3330      	adds	r3, #48	; 0x30
 80052ce:	443b      	add	r3, r7
 80052d0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80052d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80052d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80052dc:	021b      	lsls	r3, r3, #8
 80052de:	b21a      	sxth	r2, r3
 80052e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052e4:	b21b      	sxth	r3, r3
 80052e6:	4313      	orrs	r3, r2
 80052e8:	843b      	strh	r3, [r7, #32]
        gyro->z = msblsb; /* gyro Z axis data */
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	8c3a      	ldrh	r2, [r7, #32]
 80052ee:	809a      	strh	r2, [r3, #4]
        /* Accel Data */
        lsb = data_array[idx++];
 80052f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80052fa:	3330      	adds	r3, #48	; 0x30
 80052fc:	443b      	add	r3, r7
 80052fe:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8005306:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800530a:	1c5a      	adds	r2, r3, #1
 800530c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005310:	3330      	adds	r3, #48	; 0x30
 8005312:	443b      	add	r3, r7
 8005314:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005318:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800531c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005320:	021b      	lsls	r3, r3, #8
 8005322:	b21a      	sxth	r2, r3
 8005324:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005328:	b21b      	sxth	r3, r3
 800532a:	4313      	orrs	r3, r2
 800532c:	843b      	strh	r3, [r7, #32]
        accel->x = (int16_t)msblsb; /* accel X axis data */
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	8c3a      	ldrh	r2, [r7, #32]
 8005332:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8005334:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800533e:	3330      	adds	r3, #48	; 0x30
 8005340:	443b      	add	r3, r7
 8005342:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 800534a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005354:	3330      	adds	r3, #48	; 0x30
 8005356:	443b      	add	r3, r7
 8005358:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800535c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005360:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005364:	021b      	lsls	r3, r3, #8
 8005366:	b21a      	sxth	r2, r3
 8005368:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800536c:	b21b      	sxth	r3, r3
 800536e:	4313      	orrs	r3, r2
 8005370:	843b      	strh	r3, [r7, #32]
        accel->y = (int16_t)msblsb; /* accel Y axis data */
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	8c3a      	ldrh	r2, [r7, #32]
 8005376:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8005378:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005382:	3330      	adds	r3, #48	; 0x30
 8005384:	443b      	add	r3, r7
 8005386:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800538a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 800538e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005398:	3330      	adds	r3, #48	; 0x30
 800539a:	443b      	add	r3, r7
 800539c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80053a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80053a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80053a8:	021b      	lsls	r3, r3, #8
 80053aa:	b21a      	sxth	r2, r3
 80053ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053b0:	b21b      	sxth	r3, r3
 80053b2:	4313      	orrs	r3, r2
 80053b4:	843b      	strh	r3, [r7, #32]
        accel->z = (int16_t)msblsb; /* accel Z axis data */
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	8c3a      	ldrh	r2, [r7, #32]
 80053ba:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	2b03      	cmp	r3, #3
 80053c0:	d132      	bne.n	8005428 <get_accel_gyro_data+0x25e>
        {
            time_0 = data_array[idx++];
 80053c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80053cc:	3330      	adds	r3, #48	; 0x30
 80053ce:	443b      	add	r3, r7
 80053d0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80053d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 80053d8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80053e2:	3330      	adds	r3, #48	; 0x30
 80053e4:	443b      	add	r3, r7
 80053e6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	021b      	lsls	r3, r3, #8
 80053ee:	857b      	strh	r3, [r7, #42]	; 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 80053f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80053fa:	3330      	adds	r3, #48	; 0x30
 80053fc:	443b      	add	r3, r7
 80053fe:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005402:	041b      	lsls	r3, r3, #16
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8005406:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	431a      	orrs	r2, r3
 800540c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005410:	431a      	orrs	r2, r3
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	609a      	str	r2, [r3, #8]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8005416:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	431a      	orrs	r2, r3
 800541c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005420:	431a      	orrs	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	609a      	str	r2, [r3, #8]
 8005426:	e009      	b.n	800543c <get_accel_gyro_data+0x272>
        }
        else
        {
            accel->sensortime = 0;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2200      	movs	r2, #0
 800542c:	609a      	str	r2, [r3, #8]
            gyro->sensortime = 0;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	609a      	str	r2, [r3, #8]
 8005434:	e002      	b.n	800543c <get_accel_gyro_data+0x272>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8005436:	23fe      	movs	r3, #254	; 0xfe
 8005438:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return rslt;
 800543c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005440:	4618      	mov	r0, r3
 8005442:	3730      	adds	r7, #48	; 0x30
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <enable_accel_any_motion_int>:
/*!
 * @brief This API enables the any-motion interrupt for accel.
 */
static int8_t enable_accel_any_motion_int(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          struct bmi160_dev *dev)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005452:	2300      	movs	r3, #0
 8005454:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005456:	2300      	movs	r3, #0
 8005458:	73bb      	strb	r3, [r7, #14]

    /* Enable any motion x, any motion y, any motion z
     * in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 800545a:	f107 010d 	add.w	r1, r7, #13
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2201      	movs	r2, #1
 8005462:	2050      	movs	r0, #80	; 0x50
 8005464:	f7fe fb5f 	bl	8003b26 <bmi160_get_regs>
 8005468:	4603      	mov	r3, r0
 800546a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800546c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d156      	bne.n	8005522 <enable_accel_any_motion_int+0xda>
    {
        if (any_motion_int_cfg->anymotion_en == BMI160_ENABLE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d03e      	beq.n	8005500 <enable_accel_any_motion_int+0xb8>
        {
            temp = data & ~BMI160_ANY_MOTION_X_INT_EN_MASK;
 8005482:	7b7b      	ldrb	r3, [r7, #13]
 8005484:	f023 0301 	bic.w	r3, r3, #1
 8005488:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion x axis */
            data = temp | (any_motion_int_cfg->anymotion_x & BMI160_ANY_MOTION_X_INT_EN_MASK);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005492:	b2db      	uxtb	r3, r3
 8005494:	b25b      	sxtb	r3, r3
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	b25a      	sxtb	r2, r3
 800549c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	b25b      	sxtb	r3, r3
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Y_INT_EN_MASK;
 80054a8:	7b7b      	ldrb	r3, [r7, #13]
 80054aa:	f023 0302 	bic.w	r3, r3, #2
 80054ae:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion y axis */
            data = temp | ((any_motion_int_cfg->anymotion_y << 1) & BMI160_ANY_MOTION_Y_INT_EN_MASK);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	b25b      	sxtb	r3, r3
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	b25a      	sxtb	r2, r3
 80054c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	b25b      	sxtb	r3, r3
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Z_INT_EN_MASK;
 80054d0:	7b7b      	ldrb	r3, [r7, #13]
 80054d2:	f023 0304 	bic.w	r3, r3, #4
 80054d6:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion z axis */
            data = temp | ((any_motion_int_cfg->anymotion_z << 2) & BMI160_ANY_MOTION_Z_INT_EN_MASK);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	b25b      	sxtb	r3, r3
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	b25a      	sxtb	r2, r3
 80054ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	b25b      	sxtb	r3, r3
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	737b      	strb	r3, [r7, #13]

            /* any-motion feature selected*/
            dev->any_sig_sel = BMI160_ANY_MOTION_ENABLED;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	2200      	movs	r2, #0
 80054fc:	70da      	strb	r2, [r3, #3]
 80054fe:	e007      	b.n	8005510 <enable_accel_any_motion_int+0xc8>
        }
        else
        {
            data = data & ~BMI160_ANY_MOTION_ALL_INT_EN_MASK;
 8005500:	7b7b      	ldrb	r3, [r7, #13]
 8005502:	f023 0307 	bic.w	r3, r3, #7
 8005506:	b2db      	uxtb	r3, r3
 8005508:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	22ff      	movs	r2, #255	; 0xff
 800550e:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8005510:	f107 010d 	add.w	r1, r7, #13
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	2201      	movs	r2, #1
 8005518:	2050      	movs	r0, #80	; 0x50
 800551a:	f7fe fb37 	bl	8003b8c <bmi160_set_regs>
 800551e:	4603      	mov	r3, r0
 8005520:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005522:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <disable_sig_motion_int>:

/*!
 * @brief This API disable the sig-motion interrupt.
 */
static int8_t disable_sig_motion_int(const struct bmi160_dev *dev)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b084      	sub	sp, #16
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8005536:	2300      	movs	r3, #0
 8005538:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800553a:	2300      	movs	r3, #0
 800553c:	73bb      	strb	r3, [r7, #14]

    /* Disabling Significant motion interrupt if enabled */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 800553e:	f107 010d 	add.w	r1, r7, #13
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	2062      	movs	r0, #98	; 0x62
 8005548:	f7fe faed 	bl	8003b26 <bmi160_get_regs>
 800554c:	4603      	mov	r3, r0
 800554e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d115      	bne.n	8005584 <disable_sig_motion_int+0x56>
    {
        temp = (data & BMI160_SIG_MOTION_SEL_MASK);
 8005558:	7b7b      	ldrb	r3, [r7, #13]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	73bb      	strb	r3, [r7, #14]
        if (temp)
 8005560:	7bbb      	ldrb	r3, [r7, #14]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00e      	beq.n	8005584 <disable_sig_motion_int+0x56>
        {
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 8005566:	7b7b      	ldrb	r3, [r7, #13]
 8005568:	f023 0302 	bic.w	r3, r3, #2
 800556c:	73bb      	strb	r3, [r7, #14]
            data = temp;
 800556e:	7bbb      	ldrb	r3, [r7, #14]
 8005570:	737b      	strb	r3, [r7, #13]

            /* Write data to register */
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8005572:	f107 010d 	add.w	r1, r7, #13
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	2062      	movs	r0, #98	; 0x62
 800557c:	f7fe fb06 	bl	8003b8c <bmi160_set_regs>
 8005580:	4603      	mov	r3, r0
 8005582:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005584:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <map_feature_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Any/Sig motion, Step det/Low-g,
 *  Double tap, Single tap, Orientation, Flat, High-G, Nomotion interrupt pins.
 */
static int8_t map_feature_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[3] = { 0, 0, 0 };
 800559a:	4a48      	ldr	r2, [pc, #288]	; (80056bc <map_feature_interrupt+0x12c>)
 800559c:	f107 030c 	add.w	r3, r7, #12
 80055a0:	6812      	ldr	r2, [r2, #0]
 80055a2:	4611      	mov	r1, r2
 80055a4:	8019      	strh	r1, [r3, #0]
 80055a6:	3302      	adds	r3, #2
 80055a8:	0c12      	lsrs	r2, r2, #16
 80055aa:	701a      	strb	r2, [r3, #0]
    uint8_t temp[3] = { 0, 0, 0 };
 80055ac:	4a43      	ldr	r2, [pc, #268]	; (80056bc <map_feature_interrupt+0x12c>)
 80055ae:	f107 0308 	add.w	r3, r7, #8
 80055b2:	6812      	ldr	r2, [r2, #0]
 80055b4:	4611      	mov	r1, r2
 80055b6:	8019      	strh	r1, [r3, #0]
 80055b8:	3302      	adds	r3, #2
 80055ba:	0c12      	lsrs	r2, r2, #16
 80055bc:	701a      	strb	r2, [r3, #0]

    rslt = bmi160_get_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 80055be:	f107 010c 	add.w	r1, r7, #12
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2203      	movs	r2, #3
 80055c6:	2055      	movs	r0, #85	; 0x55
 80055c8:	f7fe faad 	bl	8003b26 <bmi160_get_regs>
 80055cc:	4603      	mov	r3, r0
 80055ce:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80055d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d16a      	bne.n	80056ae <map_feature_interrupt+0x11e>
    {
        temp[0] = data[0] & ~int_mask_lookup_table[int_config->int_type];
 80055d8:	7b3b      	ldrb	r3, [r7, #12]
 80055da:	b25a      	sxtb	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	785b      	ldrb	r3, [r3, #1]
 80055e0:	4619      	mov	r1, r3
 80055e2:	4b37      	ldr	r3, [pc, #220]	; (80056c0 <map_feature_interrupt+0x130>)
 80055e4:	5c5b      	ldrb	r3, [r3, r1]
 80055e6:	b25b      	sxtb	r3, r3
 80055e8:	43db      	mvns	r3, r3
 80055ea:	b25b      	sxtb	r3, r3
 80055ec:	4013      	ands	r3, r2
 80055ee:	b25b      	sxtb	r3, r3
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	723b      	strb	r3, [r7, #8]
        temp[2] = data[2] & ~int_mask_lookup_table[int_config->int_type];
 80055f4:	7bbb      	ldrb	r3, [r7, #14]
 80055f6:	b25a      	sxtb	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	785b      	ldrb	r3, [r3, #1]
 80055fc:	4619      	mov	r1, r3
 80055fe:	4b30      	ldr	r3, [pc, #192]	; (80056c0 <map_feature_interrupt+0x130>)
 8005600:	5c5b      	ldrb	r3, [r3, r1]
 8005602:	b25b      	sxtb	r3, r3
 8005604:	43db      	mvns	r3, r3
 8005606:	b25b      	sxtb	r3, r3
 8005608:	4013      	ands	r3, r2
 800560a:	b25b      	sxtb	r3, r3
 800560c:	b2db      	uxtb	r3, r3
 800560e:	72bb      	strb	r3, [r7, #10]
        switch (int_config->int_channel)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b03      	cmp	r3, #3
 8005616:	d83b      	bhi.n	8005690 <map_feature_interrupt+0x100>
 8005618:	a201      	add	r2, pc, #4	; (adr r2, 8005620 <map_feature_interrupt+0x90>)
 800561a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561e:	bf00      	nop
 8005620:	08005631 	.word	0x08005631
 8005624:	0800563b 	.word	0x0800563b
 8005628:	08005653 	.word	0x08005653
 800562c:	0800566b 	.word	0x0800566b
        {
            case BMI160_INT_CHANNEL_NONE:
                data[0] = temp[0];
 8005630:	7a3b      	ldrb	r3, [r7, #8]
 8005632:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 8005634:	7abb      	ldrb	r3, [r7, #10]
 8005636:	73bb      	strb	r3, [r7, #14]
                break;
 8005638:	e02c      	b.n	8005694 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_1:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 800563a:	7a3a      	ldrb	r2, [r7, #8]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	785b      	ldrb	r3, [r3, #1]
 8005640:	4619      	mov	r1, r3
 8005642:	4b1f      	ldr	r3, [pc, #124]	; (80056c0 <map_feature_interrupt+0x130>)
 8005644:	5c5b      	ldrb	r3, [r3, r1]
 8005646:	4313      	orrs	r3, r2
 8005648:	b2db      	uxtb	r3, r3
 800564a:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 800564c:	7abb      	ldrb	r3, [r7, #10]
 800564e:	73bb      	strb	r3, [r7, #14]
                break;
 8005650:	e020      	b.n	8005694 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_2:
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8005652:	7aba      	ldrb	r2, [r7, #10]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	785b      	ldrb	r3, [r3, #1]
 8005658:	4619      	mov	r1, r3
 800565a:	4b19      	ldr	r3, [pc, #100]	; (80056c0 <map_feature_interrupt+0x130>)
 800565c:	5c5b      	ldrb	r3, [r3, r1]
 800565e:	4313      	orrs	r3, r2
 8005660:	b2db      	uxtb	r3, r3
 8005662:	73bb      	strb	r3, [r7, #14]
                data[0] = temp[0];
 8005664:	7a3b      	ldrb	r3, [r7, #8]
 8005666:	733b      	strb	r3, [r7, #12]
                break;
 8005668:	e014      	b.n	8005694 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_BOTH:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 800566a:	7a3a      	ldrb	r2, [r7, #8]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	785b      	ldrb	r3, [r3, #1]
 8005670:	4619      	mov	r1, r3
 8005672:	4b13      	ldr	r3, [pc, #76]	; (80056c0 <map_feature_interrupt+0x130>)
 8005674:	5c5b      	ldrb	r3, [r3, r1]
 8005676:	4313      	orrs	r3, r2
 8005678:	b2db      	uxtb	r3, r3
 800567a:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 800567c:	7aba      	ldrb	r2, [r7, #10]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	785b      	ldrb	r3, [r3, #1]
 8005682:	4619      	mov	r1, r3
 8005684:	4b0e      	ldr	r3, [pc, #56]	; (80056c0 <map_feature_interrupt+0x130>)
 8005686:	5c5b      	ldrb	r3, [r3, r1]
 8005688:	4313      	orrs	r3, r2
 800568a:	b2db      	uxtb	r3, r3
 800568c:	73bb      	strb	r3, [r7, #14]
                break;
 800568e:	e001      	b.n	8005694 <map_feature_interrupt+0x104>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8005690:	23fc      	movs	r3, #252	; 0xfc
 8005692:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 8005694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d108      	bne.n	80056ae <map_feature_interrupt+0x11e>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 800569c:	f107 010c 	add.w	r1, r7, #12
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2203      	movs	r2, #3
 80056a4:	2055      	movs	r0, #85	; 0x55
 80056a6:	f7fe fa71 	bl	8003b8c <bmi160_set_regs>
 80056aa:	4603      	mov	r3, r0
 80056ac:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80056ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	08012828 	.word	0x08012828
 80056c0:	080128a8 	.word	0x080128a8

080056c4 <map_hardware_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Dataready(Accel & Gyro), FIFO full
 *  and FIFO watermark interrupt.
 */
static int8_t map_hardware_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80056ce:	2300      	movs	r3, #0
 80056d0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 80056d6:	f107 010d 	add.w	r1, r7, #13
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2201      	movs	r2, #1
 80056de:	2056      	movs	r0, #86	; 0x56
 80056e0:	f7fe fa21 	bl	8003b26 <bmi160_get_regs>
 80056e4:	4603      	mov	r3, r0
 80056e6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80056e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d168      	bne.n	80057c2 <map_hardware_interrupt+0xfe>
    {
        temp = data & ~int_mask_lookup_table[int_config->int_type];
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	785b      	ldrb	r3, [r3, #1]
 80056f4:	461a      	mov	r2, r3
 80056f6:	4b36      	ldr	r3, [pc, #216]	; (80057d0 <map_hardware_interrupt+0x10c>)
 80056f8:	5c9b      	ldrb	r3, [r3, r2]
 80056fa:	b25b      	sxtb	r3, r3
 80056fc:	43db      	mvns	r3, r3
 80056fe:	b25a      	sxtb	r2, r3
 8005700:	7b7b      	ldrb	r3, [r7, #13]
 8005702:	b25b      	sxtb	r3, r3
 8005704:	4013      	ands	r3, r2
 8005706:	b25b      	sxtb	r3, r3
 8005708:	73bb      	strb	r3, [r7, #14]
        temp = temp & ~((uint8_t)(int_mask_lookup_table[int_config->int_type] << 4));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	785b      	ldrb	r3, [r3, #1]
 800570e:	461a      	mov	r2, r3
 8005710:	4b2f      	ldr	r3, [pc, #188]	; (80057d0 <map_hardware_interrupt+0x10c>)
 8005712:	5c9b      	ldrb	r3, [r3, r2]
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	b2db      	uxtb	r3, r3
 8005718:	b25b      	sxtb	r3, r3
 800571a:	43db      	mvns	r3, r3
 800571c:	b25a      	sxtb	r2, r3
 800571e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005722:	4013      	ands	r3, r2
 8005724:	b25b      	sxtb	r3, r3
 8005726:	73bb      	strb	r3, [r7, #14]
        switch (int_config->int_channel)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b03      	cmp	r3, #3
 800572e:	d839      	bhi.n	80057a4 <map_hardware_interrupt+0xe0>
 8005730:	a201      	add	r2, pc, #4	; (adr r2, 8005738 <map_hardware_interrupt+0x74>)
 8005732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005736:	bf00      	nop
 8005738:	08005749 	.word	0x08005749
 800573c:	0800574f 	.word	0x0800574f
 8005740:	08005767 	.word	0x08005767
 8005744:	0800577b 	.word	0x0800577b
        {
            case BMI160_INT_CHANNEL_NONE:
                data = temp;
 8005748:	7bbb      	ldrb	r3, [r7, #14]
 800574a:	737b      	strb	r3, [r7, #13]
                break;
 800574c:	e02c      	b.n	80057a8 <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_1:
                data = temp | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	785b      	ldrb	r3, [r3, #1]
 8005752:	461a      	mov	r2, r3
 8005754:	4b1e      	ldr	r3, [pc, #120]	; (80057d0 <map_hardware_interrupt+0x10c>)
 8005756:	5c9b      	ldrb	r3, [r3, r2]
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	b2da      	uxtb	r2, r3
 800575c:	7bbb      	ldrb	r3, [r7, #14]
 800575e:	4313      	orrs	r3, r2
 8005760:	b2db      	uxtb	r3, r3
 8005762:	737b      	strb	r3, [r7, #13]
                break;
 8005764:	e020      	b.n	80057a8 <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_2:
                data = temp | int_mask_lookup_table[int_config->int_type];
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	785b      	ldrb	r3, [r3, #1]
 800576a:	461a      	mov	r2, r3
 800576c:	4b18      	ldr	r3, [pc, #96]	; (80057d0 <map_hardware_interrupt+0x10c>)
 800576e:	5c9a      	ldrb	r2, [r3, r2]
 8005770:	7bbb      	ldrb	r3, [r7, #14]
 8005772:	4313      	orrs	r3, r2
 8005774:	b2db      	uxtb	r3, r3
 8005776:	737b      	strb	r3, [r7, #13]
                break;
 8005778:	e016      	b.n	80057a8 <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_BOTH:
                data = temp | int_mask_lookup_table[int_config->int_type];
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	785b      	ldrb	r3, [r3, #1]
 800577e:	461a      	mov	r2, r3
 8005780:	4b13      	ldr	r3, [pc, #76]	; (80057d0 <map_hardware_interrupt+0x10c>)
 8005782:	5c9a      	ldrb	r2, [r3, r2]
 8005784:	7bbb      	ldrb	r3, [r7, #14]
 8005786:	4313      	orrs	r3, r2
 8005788:	b2db      	uxtb	r3, r3
 800578a:	737b      	strb	r3, [r7, #13]
                data = data | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	785b      	ldrb	r3, [r3, #1]
 8005790:	461a      	mov	r2, r3
 8005792:	4b0f      	ldr	r3, [pc, #60]	; (80057d0 <map_hardware_interrupt+0x10c>)
 8005794:	5c9b      	ldrb	r3, [r3, r2]
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	b2da      	uxtb	r2, r3
 800579a:	7b7b      	ldrb	r3, [r7, #13]
 800579c:	4313      	orrs	r3, r2
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	737b      	strb	r3, [r7, #13]
                break;
 80057a2:	e001      	b.n	80057a8 <map_hardware_interrupt+0xe4>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 80057a4:	23fc      	movs	r3, #252	; 0xfc
 80057a6:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 80057a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d108      	bne.n	80057c2 <map_hardware_interrupt+0xfe>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 80057b0:	f107 010d 	add.w	r1, r7, #13
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	2201      	movs	r2, #1
 80057b8:	2056      	movs	r0, #86	; 0x56
 80057ba:	f7fe f9e7 	bl	8003b8c <bmi160_set_regs>
 80057be:	4603      	mov	r3, r0
 80057c0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80057c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	080128a8 	.word	0x080128a8

080057d4 <config_any_motion_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for any-motion interrupt.
 */
static int8_t config_any_motion_src(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                    const struct bmi160_dev *dev)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80057de:	2300      	movs	r3, #0
 80057e0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80057e2:	2300      	movs	r3, #0
 80057e4:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 80057e6:	f107 010d 	add.w	r1, r7, #13
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2201      	movs	r2, #1
 80057ee:	2059      	movs	r0, #89	; 0x59
 80057f0:	f7fe f999 	bl	8003b26 <bmi160_get_regs>
 80057f4:	4603      	mov	r3, r0
 80057f6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80057f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d119      	bne.n	8005834 <config_any_motion_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8005800:	7b7b      	ldrb	r3, [r7, #13]
 8005802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005806:	73bb      	strb	r3, [r7, #14]
        data = temp | ((any_motion_int_cfg->anymotion_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005810:	b2db      	uxtb	r3, r3
 8005812:	01db      	lsls	r3, r3, #7
 8005814:	b25a      	sxtb	r2, r3
 8005816:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800581a:	4313      	orrs	r3, r2
 800581c:	b25b      	sxtb	r3, r3
 800581e:	b2db      	uxtb	r3, r3
 8005820:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8005822:	f107 010d 	add.w	r1, r7, #13
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2201      	movs	r2, #1
 800582a:	2059      	movs	r0, #89	; 0x59
 800582c:	f7fe f9ae 	bl	8003b8c <bmi160_set_regs>
 8005830:	4603      	mov	r3, r0
 8005832:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005834:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <config_any_dur_threshold>:
 * @brief This API configure the duration and threshold of
 * any-motion interrupt.
 */
static int8_t config_any_dur_threshold(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800584a:	2300      	movs	r3, #0
 800584c:	733b      	strb	r3, [r7, #12]
    uint8_t temp = 0;
 800584e:	2300      	movs	r3, #0
 8005850:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[2] = { 0 };
 8005852:	2300      	movs	r3, #0
 8005854:	813b      	strh	r3, [r7, #8]
    uint8_t dur;

    /* Configure Int Motion 0 register */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_0_ADDR, &data, 1, dev);
 8005856:	f107 010c 	add.w	r1, r7, #12
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2201      	movs	r2, #1
 800585e:	205f      	movs	r0, #95	; 0x5f
 8005860:	f7fe f961 	bl	8003b26 <bmi160_get_regs>
 8005864:	4603      	mov	r3, r0
 8005866:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d122      	bne.n	80058b6 <config_any_dur_threshold+0x76>
    {
        /* slope duration */
        dur = (uint8_t)any_motion_int_cfg->anymotion_dur;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8005878:	b2db      	uxtb	r3, r3
 800587a:	737b      	strb	r3, [r7, #13]
        temp = data & ~BMI160_SLOPE_INT_DUR_MASK;
 800587c:	7b3b      	ldrb	r3, [r7, #12]
 800587e:	f023 0303 	bic.w	r3, r3, #3
 8005882:	73bb      	strb	r3, [r7, #14]
        data = temp | (dur & BMI160_MOTION_SRC_INT_MASK);
 8005884:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005888:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800588c:	b25a      	sxtb	r2, r3
 800588e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005892:	4313      	orrs	r3, r2
 8005894:	b25b      	sxtb	r3, r3
 8005896:	b2db      	uxtb	r3, r3
 8005898:	733b      	strb	r3, [r7, #12]
        data_array[0] = data;
 800589a:	7b3b      	ldrb	r3, [r7, #12]
 800589c:	723b      	strb	r3, [r7, #8]

        /* add slope threshold */
        data_array[1] = any_motion_int_cfg->anymotion_thr;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	785b      	ldrb	r3, [r3, #1]
 80058a2:	727b      	strb	r3, [r7, #9]
        /* INT MOTION 0 and INT MOTION 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Int_motion 0 and
         * Int_motion 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_MOTION_0_ADDR, data_array, 2, dev);
 80058a4:	f107 0108 	add.w	r1, r7, #8
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	2202      	movs	r2, #2
 80058ac:	205f      	movs	r0, #95	; 0x5f
 80058ae:	f7fe f96d 	bl	8003b8c <bmi160_set_regs>
 80058b2:	4603      	mov	r3, r0
 80058b4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80058b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <config_any_motion_int_settg>:
 * @brief This API configure necessary setting of any-motion interrupt.
 */
static int8_t config_any_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          const struct bmi160_dev *dev)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b086      	sub	sp, #24
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	60f8      	str	r0, [r7, #12]
 80058ca:	60b9      	str	r1, [r7, #8]
 80058cc:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f7fe fee0 	bl	8004696 <set_intr_pin_config>
 80058d6:	4603      	mov	r3, r0
 80058d8:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 80058da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d122      	bne.n	8005928 <config_any_motion_int_settg+0x66>
    {
        rslt = disable_sig_motion_int(dev);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff fe23 	bl	800552e <disable_sig_motion_int>
 80058e8:	4603      	mov	r3, r0
 80058ea:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 80058ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d119      	bne.n	8005928 <config_any_motion_int_settg+0x66>
        {
            rslt = map_feature_interrupt(int_config, dev);
 80058f4:	6879      	ldr	r1, [r7, #4]
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f7ff fe4a 	bl	8005590 <map_feature_interrupt>
 80058fc:	4603      	mov	r3, r0
 80058fe:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8005900:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10f      	bne.n	8005928 <config_any_motion_int_settg+0x66>
            {
                rslt = config_any_motion_src(any_motion_int_cfg, dev);
 8005908:	6879      	ldr	r1, [r7, #4]
 800590a:	68b8      	ldr	r0, [r7, #8]
 800590c:	f7ff ff62 	bl	80057d4 <config_any_motion_src>
 8005910:	4603      	mov	r3, r0
 8005912:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 8005914:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d105      	bne.n	8005928 <config_any_motion_int_settg+0x66>
                {
                    rslt = config_any_dur_threshold(any_motion_int_cfg, dev);
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	68b8      	ldr	r0, [r7, #8]
 8005920:	f7ff ff8e 	bl	8005840 <config_any_dur_threshold>
 8005924:	4603      	mov	r3, r0
 8005926:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 8005928:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <enable_data_ready_int>:

/*!
 * @brief This API enable the data ready interrupt.
 */
static int8_t enable_data_ready_int(const struct bmi160_dev *dev)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 800593c:	2300      	movs	r3, #0
 800593e:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005940:	2300      	movs	r3, #0
 8005942:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8005944:	f107 010d 	add.w	r1, r7, #13
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	2051      	movs	r0, #81	; 0x51
 800594e:	f7fe f8ea 	bl	8003b26 <bmi160_get_regs>
 8005952:	4603      	mov	r3, r0
 8005954:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d111      	bne.n	8005982 <enable_data_ready_int+0x4e>
    {
        temp = data & ~BMI160_DATA_RDY_INT_EN_MASK;
 800595e:	7b7b      	ldrb	r3, [r7, #13]
 8005960:	f023 0310 	bic.w	r3, r3, #16
 8005964:	73bb      	strb	r3, [r7, #14]
        data = temp | ((1 << 4) & BMI160_DATA_RDY_INT_EN_MASK);
 8005966:	7bbb      	ldrb	r3, [r7, #14]
 8005968:	f043 0310 	orr.w	r3, r3, #16
 800596c:	b2db      	uxtb	r3, r3
 800596e:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8005970:	f107 010d 	add.w	r1, r7, #13
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	2051      	movs	r0, #81	; 0x51
 800597a:	f7fe f907 	bl	8003b8c <bmi160_set_regs>
 800597e:	4603      	mov	r3, r0
 8005980:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005982:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <enable_no_motion_int>:
/*!
 * @brief This API enables the no motion/slow motion interrupt.
 */
static int8_t enable_no_motion_int(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                   const struct bmi160_dev *dev)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b084      	sub	sp, #16
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005998:	2300      	movs	r3, #0
 800599a:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800599c:	2300      	movs	r3, #0
 800599e:	73bb      	strb	r3, [r7, #14]

    /* Enable no motion x, no motion y, no motion z
     * in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 80059a0:	f107 010d 	add.w	r1, r7, #13
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2201      	movs	r2, #1
 80059a8:	2052      	movs	r0, #82	; 0x52
 80059aa:	f7fe f8bc 	bl	8003b26 <bmi160_get_regs>
 80059ae:	4603      	mov	r3, r0
 80059b0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80059b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d138      	bne.n	8005a2c <enable_no_motion_int+0x9e>
    {
        if (no_mot_int_cfg->no_motion_x == 1)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d008      	beq.n	80059da <enable_no_motion_int+0x4c>
        {
            temp = data & ~BMI160_NO_MOTION_X_INT_EN_MASK;
 80059c8:	7b7b      	ldrb	r3, [r7, #13]
 80059ca:	f023 0301 	bic.w	r3, r3, #1
 80059ce:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | (1 & BMI160_NO_MOTION_X_INT_EN_MASK);
 80059d0:	7bbb      	ldrb	r3, [r7, #14]
 80059d2:	f043 0301 	orr.w	r3, r3, #1
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_y == 1)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d008      	beq.n	80059fa <enable_no_motion_int+0x6c>
        {
            temp = data & ~BMI160_NO_MOTION_Y_INT_EN_MASK;
 80059e8:	7b7b      	ldrb	r3, [r7, #13]
 80059ea:	f023 0302 	bic.w	r3, r3, #2
 80059ee:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 1) & BMI160_NO_MOTION_Y_INT_EN_MASK);
 80059f0:	7bbb      	ldrb	r3, [r7, #14]
 80059f2:	f043 0302 	orr.w	r3, r3, #2
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_z == 1)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d008      	beq.n	8005a1a <enable_no_motion_int+0x8c>
        {
            temp = data & ~BMI160_NO_MOTION_Z_INT_EN_MASK;
 8005a08:	7b7b      	ldrb	r3, [r7, #13]
 8005a0a:	f023 0304 	bic.w	r3, r3, #4
 8005a0e:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 2) & BMI160_NO_MOTION_Z_INT_EN_MASK);
 8005a10:	7bbb      	ldrb	r3, [r7, #14]
 8005a12:	f043 0304 	orr.w	r3, r3, #4
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	737b      	strb	r3, [r7, #13]
        }

        /* write data to Int Enable 2 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8005a1a:	f107 010d 	add.w	r1, r7, #13
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2201      	movs	r2, #1
 8005a22:	2052      	movs	r0, #82	; 0x52
 8005a24:	f7fe f8b2 	bl	8003b8c <bmi160_set_regs>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <config_no_motion_int_settg>:
 * no motion/slow motion interrupt.
 */
static int8_t config_no_motion_int_settg(const struct bmi160_int_settg *int_config,
                                         const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8005a44:	6879      	ldr	r1, [r7, #4]
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f7fe fe25 	bl	8004696 <set_intr_pin_config>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8005a50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d119      	bne.n	8005a8c <config_no_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8005a58:	6879      	ldr	r1, [r7, #4]
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f7ff fd98 	bl	8005590 <map_feature_interrupt>
 8005a60:	4603      	mov	r3, r0
 8005a62:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8005a64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10f      	bne.n	8005a8c <config_no_motion_int_settg+0x54>
        {
            rslt = config_no_motion_data_src(no_mot_int_cfg, dev);
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	68b8      	ldr	r0, [r7, #8]
 8005a70:	f000 f812 	bl	8005a98 <config_no_motion_data_src>
 8005a74:	4603      	mov	r3, r0
 8005a76:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8005a78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d105      	bne.n	8005a8c <config_no_motion_int_settg+0x54>
            {
                rslt = config_no_motion_dur_thr(no_mot_int_cfg, dev);
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	68b8      	ldr	r0, [r7, #8]
 8005a84:	f000 f83e 	bl	8005b04 <config_no_motion_dur_thr>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8005a8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <config_no_motion_data_src>:
/*!
 * @brief This API configure the source of interrupt for no motion.
 */
static int8_t config_no_motion_data_src(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                        const struct bmi160_dev *dev)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8005aaa:	f107 010d 	add.w	r1, r7, #13
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	2059      	movs	r0, #89	; 0x59
 8005ab4:	f7fe f837 	bl	8003b26 <bmi160_get_regs>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d119      	bne.n	8005af8 <config_no_motion_data_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8005ac4:	7b7b      	ldrb	r3, [r7, #13]
 8005ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aca:	73bb      	strb	r3, [r7, #14]
        data = temp | ((no_mot_int_cfg->no_motion_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	785b      	ldrb	r3, [r3, #1]
 8005ad0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	01db      	lsls	r3, r3, #7
 8005ad8:	b25a      	sxtb	r2, r3
 8005ada:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	b25b      	sxtb	r3, r3
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8005ae6:	f107 010d 	add.w	r1, r7, #13
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2201      	movs	r2, #1
 8005aee:	2059      	movs	r0, #89	; 0x59
 8005af0:	f7fe f84c 	bl	8003b8c <bmi160_set_regs>
 8005af4:	4603      	mov	r3, r0
 8005af6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <config_no_motion_dur_thr>:
 * @brief This API configure the duration and threshold of
 * no motion/slow motion interrupt along with selection of no/slow motion.
 */
static int8_t config_no_motion_dur_thr(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	72fb      	strb	r3, [r7, #11]
    uint8_t temp = 0;
 8005b12:	2300      	movs	r3, #0
 8005b14:	73bb      	strb	r3, [r7, #14]
    uint8_t temp_1 = 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	737b      	strb	r3, [r7, #13]
    uint8_t reg_addr;
    uint8_t data_array[2] = { 0 };
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_MOTION register */
    reg_addr = BMI160_INT_MOTION_0_ADDR;
 8005b1e:	235f      	movs	r3, #95	; 0x5f
 8005b20:	733b      	strb	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 8005b22:	f107 010b 	add.w	r1, r7, #11
 8005b26:	7b38      	ldrb	r0, [r7, #12]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f7fd fffb 	bl	8003b26 <bmi160_get_regs>
 8005b30:	4603      	mov	r3, r0
 8005b32:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d14b      	bne.n	8005bd4 <config_no_motion_dur_thr+0xd0>
    {
        temp = data & ~BMI160_NO_MOTION_INT_DUR_MASK;
 8005b3c:	7afb      	ldrb	r3, [r7, #11]
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	73bb      	strb	r3, [r7, #14]

        /* Adding no_motion duration */
        data = temp | ((no_mot_int_cfg->no_motion_dur << 2) & BMI160_NO_MOTION_INT_DUR_MASK);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	b25a      	sxtb	r2, r3
 8005b52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	b25b      	sxtb	r3, r3
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	72fb      	strb	r3, [r7, #11]

        /* Write data to NO_MOTION 0 address */
        rslt = bmi160_set_regs(reg_addr, &data, 1, dev);
 8005b5e:	f107 010b 	add.w	r1, r7, #11
 8005b62:	7b38      	ldrb	r0, [r7, #12]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f7fe f810 	bl	8003b8c <bmi160_set_regs>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8005b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d12d      	bne.n	8005bd4 <config_no_motion_dur_thr+0xd0>
        {
            reg_addr = BMI160_INT_MOTION_3_ADDR;
 8005b78:	2362      	movs	r3, #98	; 0x62
 8005b7a:	733b      	strb	r3, [r7, #12]
            rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 8005b7c:	f107 010b 	add.w	r1, r7, #11
 8005b80:	7b38      	ldrb	r0, [r7, #12]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f7fd ffce 	bl	8003b26 <bmi160_get_regs>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8005b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d11e      	bne.n	8005bd4 <config_no_motion_dur_thr+0xd0>
            {
                temp = data & ~BMI160_NO_MOTION_SEL_BIT_MASK;
 8005b96:	7afb      	ldrb	r3, [r7, #11]
 8005b98:	f023 0301 	bic.w	r3, r3, #1
 8005b9c:	73bb      	strb	r3, [r7, #14]

                /* Adding no_motion_sel bit */
                temp_1 = (no_mot_int_cfg->no_motion_sel & BMI160_NO_MOTION_SEL_BIT_MASK);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	785b      	ldrb	r3, [r3, #1]
 8005ba2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	737b      	strb	r3, [r7, #13]
                data = (temp | temp_1);
 8005baa:	7bba      	ldrb	r2, [r7, #14]
 8005bac:	7b7b      	ldrb	r3, [r7, #13]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	72fb      	strb	r3, [r7, #11]
                data_array[1] = data;
 8005bb4:	7afb      	ldrb	r3, [r7, #11]
 8005bb6:	727b      	strb	r3, [r7, #9]

                /* Adding no motion threshold */
                data_array[0] = no_mot_int_cfg->no_motion_thres;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	789b      	ldrb	r3, [r3, #2]
 8005bbc:	723b      	strb	r3, [r7, #8]
                reg_addr = BMI160_INT_MOTION_2_ADDR;
 8005bbe:	2361      	movs	r3, #97	; 0x61
 8005bc0:	733b      	strb	r3, [r7, #12]

                /* writing data to INT_MOTION 2 and INT_MOTION 3
                 * address simultaneously */
                rslt = bmi160_set_regs(reg_addr, data_array, 2, dev);
 8005bc2:	f107 0108 	add.w	r1, r7, #8
 8005bc6:	7b38      	ldrb	r0, [r7, #12]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f7fd ffde 	bl	8003b8c <bmi160_set_regs>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8005bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <enable_sig_motion_int>:

/*!
 * @brief This API enables the sig-motion motion interrupt.
 */
static int8_t enable_sig_motion_int(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg, struct bmi160_dev *dev)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005bea:	2300      	movs	r3, #0
 8005bec:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	73bb      	strb	r3, [r7, #14]

    /* For significant motion,enable any motion x,any motion y,
     * any motion z in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8005bf2:	f107 010d 	add.w	r1, r7, #13
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	2050      	movs	r0, #80	; 0x50
 8005bfc:	f7fd ff93 	bl	8003b26 <bmi160_get_regs>
 8005c00:	4603      	mov	r3, r0
 8005c02:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d124      	bne.n	8005c56 <enable_sig_motion_int+0x76>
    {
        if (sig_mot_int_cfg->sig_en == BMI160_ENABLE)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	f003 0320 	and.w	r3, r3, #32
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00c      	beq.n	8005c34 <enable_sig_motion_int+0x54>
        {
            temp = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 8005c1a:	7b7b      	ldrb	r3, [r7, #13]
 8005c1c:	f023 0307 	bic.w	r3, r3, #7
 8005c20:	73bb      	strb	r3, [r7, #14]
            data = temp | (7 & BMI160_SIG_MOTION_INT_EN_MASK);
 8005c22:	7bbb      	ldrb	r3, [r7, #14]
 8005c24:	f043 0307 	orr.w	r3, r3, #7
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	737b      	strb	r3, [r7, #13]

            /* sig-motion feature selected*/
            dev->any_sig_sel = BMI160_SIG_MOTION_ENABLED;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	70da      	strb	r2, [r3, #3]
 8005c32:	e007      	b.n	8005c44 <enable_sig_motion_int+0x64>
        }
        else
        {
            data = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 8005c34:	7b7b      	ldrb	r3, [r7, #13]
 8005c36:	f023 0307 	bic.w	r3, r3, #7
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	22ff      	movs	r2, #255	; 0xff
 8005c42:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8005c44:	f107 010d 	add.w	r1, r7, #13
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	2050      	movs	r0, #80	; 0x50
 8005c4e:	f7fd ff9d 	bl	8003b8c <bmi160_set_regs>
 8005c52:	4603      	mov	r3, r0
 8005c54:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <config_sig_motion_int_settg>:
 * significant motion interrupt.
 */
static int8_t config_sig_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                          const struct bmi160_dev *dev)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b086      	sub	sp, #24
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	60f8      	str	r0, [r7, #12]
 8005c6a:	60b9      	str	r1, [r7, #8]
 8005c6c:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8005c6e:	6879      	ldr	r1, [r7, #4]
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f7fe fd10 	bl	8004696 <set_intr_pin_config>
 8005c76:	4603      	mov	r3, r0
 8005c78:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8005c7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d119      	bne.n	8005cb6 <config_sig_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f7ff fc83 	bl	8005590 <map_feature_interrupt>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8005c8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10f      	bne.n	8005cb6 <config_sig_motion_int_settg+0x54>
        {
            rslt = config_sig_motion_data_src(sig_mot_int_cfg, dev);
 8005c96:	6879      	ldr	r1, [r7, #4]
 8005c98:	68b8      	ldr	r0, [r7, #8]
 8005c9a:	f000 f812 	bl	8005cc2 <config_sig_motion_data_src>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8005ca2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d105      	bne.n	8005cb6 <config_sig_motion_int_settg+0x54>
            {
                rslt = config_sig_dur_threshold(sig_mot_int_cfg, dev);
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	68b8      	ldr	r0, [r7, #8]
 8005cae:	f000 f83e 	bl	8005d2e <config_sig_dur_threshold>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8005cb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <config_sig_motion_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for sig motion interrupt.
 */
static int8_t config_sig_motion_data_src(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b084      	sub	sp, #16
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
 8005cca:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8005cd4:	f107 010d 	add.w	r1, r7, #13
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	2059      	movs	r0, #89	; 0x59
 8005cde:	f7fd ff22 	bl	8003b26 <bmi160_get_regs>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d119      	bne.n	8005d22 <config_sig_motion_data_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8005cee:	7b7b      	ldrb	r3, [r7, #13]
 8005cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cf4:	73bb      	strb	r3, [r7, #14]
        data = temp | ((sig_mot_int_cfg->sig_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	01db      	lsls	r3, r3, #7
 8005d02:	b25a      	sxtb	r2, r3
 8005d04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	b25b      	sxtb	r3, r3
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8005d10:	f107 010d 	add.w	r1, r7, #13
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	2201      	movs	r2, #1
 8005d18:	2059      	movs	r0, #89	; 0x59
 8005d1a:	f7fd ff37 	bl	8003b8c <bmi160_set_regs>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <config_sig_dur_threshold>:
 * @brief This API configure the threshold, skip and proof time of
 * sig motion interrupt.
 */
static int8_t config_sig_dur_threshold(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b084      	sub	sp, #16
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
 8005d36:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;
    uint8_t temp = 0;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	73bb      	strb	r3, [r7, #14]

    /* Configuring INT_MOTION registers */

    /* Write significant motion threshold.
     * This threshold is same as any motion threshold */
    data = sig_mot_int_cfg->sig_mot_thres;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	785b      	ldrb	r3, [r3, #1]
 8005d40:	737b      	strb	r3, [r7, #13]

    /* Write data to INT_MOTION 1 address */
    rslt = bmi160_set_regs(BMI160_INT_MOTION_1_ADDR, &data, 1, dev);
 8005d42:	f107 010d 	add.w	r1, r7, #13
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	2060      	movs	r0, #96	; 0x60
 8005d4c:	f7fd ff1e 	bl	8003b8c <bmi160_set_regs>
 8005d50:	4603      	mov	r3, r0
 8005d52:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d151      	bne.n	8005e00 <config_sig_dur_threshold+0xd2>
    {
        rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8005d5c:	f107 010d 	add.w	r1, r7, #13
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	2201      	movs	r2, #1
 8005d64:	2062      	movs	r0, #98	; 0x62
 8005d66:	f7fd fede 	bl	8003b26 <bmi160_get_regs>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8005d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d144      	bne.n	8005e00 <config_sig_dur_threshold+0xd2>
        {
            temp = data & ~BMI160_SIG_MOTION_SKIP_MASK;
 8005d76:	7b7b      	ldrb	r3, [r7, #13]
 8005d78:	f023 030c 	bic.w	r3, r3, #12
 8005d7c:	73bb      	strb	r3, [r7, #14]

            /* adding skip time of sig_motion interrupt*/
            data = temp | ((sig_mot_int_cfg->sig_mot_skip << 2) & BMI160_SIG_MOTION_SKIP_MASK);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	b25b      	sxtb	r3, r3
 8005d8c:	f003 030c 	and.w	r3, r3, #12
 8005d90:	b25a      	sxtb	r2, r3
 8005d92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	b25b      	sxtb	r3, r3
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_SIG_MOTION_PROOF_MASK;
 8005d9e:	7b7b      	ldrb	r3, [r7, #13]
 8005da0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005da4:	73bb      	strb	r3, [r7, #14]

            /* adding proof time of sig_motion interrupt */
            data = temp | ((sig_mot_int_cfg->sig_mot_proof << 4) & BMI160_SIG_MOTION_PROOF_MASK);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	b25b      	sxtb	r3, r3
 8005db4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005db8:	b25a      	sxtb	r2, r3
 8005dba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	b25b      	sxtb	r3, r3
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	737b      	strb	r3, [r7, #13]

            /* configure the int_sig_mot_sel bit to select
             * significant motion interrupt */
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 8005dc6:	7b7b      	ldrb	r3, [r7, #13]
 8005dc8:	f023 0302 	bic.w	r3, r3, #2
 8005dcc:	73bb      	strb	r3, [r7, #14]
            data = temp | ((sig_mot_int_cfg->sig_en << 1) & BMI160_SIG_MOTION_SEL_MASK);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	b25b      	sxtb	r3, r3
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	b25a      	sxtb	r2, r3
 8005de2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	b25b      	sxtb	r3, r3
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	737b      	strb	r3, [r7, #13]
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8005dee:	f107 010d 	add.w	r1, r7, #13
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2201      	movs	r2, #1
 8005df6:	2062      	movs	r0, #98	; 0x62
 8005df8:	f7fd fec8 	bl	8003b8c <bmi160_set_regs>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <enable_step_detect_int>:
/*!
 * @brief This API enables the step detector interrupt.
 */
static int8_t enable_step_detect_int(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                     const struct bmi160_dev *dev)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005e16:	2300      	movs	r3, #0
 8005e18:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8005e1e:	f107 010d 	add.w	r1, r7, #13
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2201      	movs	r2, #1
 8005e26:	2052      	movs	r0, #82	; 0x52
 8005e28:	f7fd fe7d 	bl	8003b26 <bmi160_get_regs>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d11c      	bne.n	8005e72 <enable_step_detect_int+0x66>
    {
        temp = data & ~BMI160_STEP_DETECT_INT_EN_MASK;
 8005e38:	7b7b      	ldrb	r3, [r7, #13]
 8005e3a:	f023 0308 	bic.w	r3, r3, #8
 8005e3e:	73bb      	strb	r3, [r7, #14]
        data = temp | ((step_detect_int_cfg->step_detector_en << 3) & BMI160_STEP_DETECT_INT_EN_MASK);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	b25b      	sxtb	r3, r3
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	b25a      	sxtb	r2, r3
 8005e54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	b25b      	sxtb	r3, r3
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 2 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8005e60:	f107 010d 	add.w	r1, r7, #13
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2201      	movs	r2, #1
 8005e68:	2052      	movs	r0, #82	; 0x52
 8005e6a:	f7fd fe8f 	bl	8003b8c <bmi160_set_regs>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <config_step_detect>:
/*!
 * @brief This API configure the step detector parameter.
 */
static int8_t config_step_detect(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                 const struct bmi160_dev *dev)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	73fb      	strb	r3, [r7, #15]
    uint8_t data_array[2] = { 0 };
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	81bb      	strh	r3, [r7, #12]

    if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_NORMAL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d104      	bne.n	8005ea8 <config_step_detect+0x2a>
    {
        /* Normal mode setting */
        data_array[0] = 0x15;
 8005e9e:	2315      	movs	r3, #21
 8005ea0:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x03;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	737b      	strb	r3, [r7, #13]
 8005ea6:	e065      	b.n	8005f74 <config_step_detect+0xf6>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_SENSITIVE)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b40      	cmp	r3, #64	; 0x40
 8005eb4:	d104      	bne.n	8005ec0 <config_step_detect+0x42>
    {
        /* Sensitive mode setting */
        data_array[0] = 0x2D;
 8005eb6:	232d      	movs	r3, #45	; 0x2d
 8005eb8:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x00;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	737b      	strb	r3, [r7, #13]
 8005ebe:	e059      	b.n	8005f74 <config_step_detect+0xf6>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_ROBUST)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b80      	cmp	r3, #128	; 0x80
 8005ecc:	d104      	bne.n	8005ed8 <config_step_detect+0x5a>
    {
        /* Robust mode setting */
        data_array[0] = 0x1D;
 8005ece:	231d      	movs	r3, #29
 8005ed0:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x07;
 8005ed2:	2307      	movs	r3, #7
 8005ed4:	737b      	strb	r3, [r7, #13]
 8005ed6:	e04d      	b.n	8005f74 <config_step_detect+0xf6>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_USER_DEFINE)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ee4:	d146      	bne.n	8005f74 <config_step_detect+0xf6>
    {
        /* Non recommended User defined setting */
        /* Configuring STEP_CONFIG register */
        rslt = bmi160_get_regs(BMI160_INT_STEP_CONFIG_0_ADDR, &data_array[0], 2, dev);
 8005ee6:	f107 010c 	add.w	r1, r7, #12
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2202      	movs	r2, #2
 8005eee:	207a      	movs	r0, #122	; 0x7a
 8005ef0:	f7fd fe19 	bl	8003b26 <bmi160_get_regs>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	73bb      	strb	r3, [r7, #14]
        if (rslt == BMI160_OK)
 8005ef8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d139      	bne.n	8005f74 <config_step_detect+0xf6>
        {
            temp = data_array[0] & ~BMI160_STEP_DETECT_MIN_THRES_MASK;
 8005f00:	7b3b      	ldrb	r3, [r7, #12]
 8005f02:	f023 0318 	bic.w	r3, r3, #24
 8005f06:	73fb      	strb	r3, [r7, #15]

            /* Adding min_threshold */
            data_array[0] = temp | ((step_detect_int_cfg->min_threshold << 3) & BMI160_STEP_DETECT_MIN_THRES_MASK);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	b25b      	sxtb	r3, r3
 8005f16:	f003 0318 	and.w	r3, r3, #24
 8005f1a:	b25a      	sxtb	r2, r3
 8005f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	b25b      	sxtb	r3, r3
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	733b      	strb	r3, [r7, #12]
            temp = data_array[0] & ~BMI160_STEP_DETECT_STEPTIME_MIN_MASK;
 8005f28:	7b3b      	ldrb	r3, [r7, #12]
 8005f2a:	f023 0307 	bic.w	r3, r3, #7
 8005f2e:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[0] = temp | ((step_detect_int_cfg->steptime_min) & BMI160_STEP_DETECT_STEPTIME_MIN_MASK);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	b25b      	sxtb	r3, r3
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	b25a      	sxtb	r2, r3
 8005f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	b25b      	sxtb	r3, r3
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	733b      	strb	r3, [r7, #12]
            temp = data_array[1] & ~BMI160_STEP_MIN_BUF_MASK;
 8005f4e:	7b7b      	ldrb	r3, [r7, #13]
 8005f50:	f023 0307 	bic.w	r3, r3, #7
 8005f54:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[1] = temp | ((step_detect_int_cfg->step_min_buf) & BMI160_STEP_MIN_BUF_MASK);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	785b      	ldrb	r3, [r3, #1]
 8005f5a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	b25b      	sxtb	r3, r3
 8005f62:	f003 0307 	and.w	r3, r3, #7
 8005f66:	b25a      	sxtb	r2, r3
 8005f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	b25b      	sxtb	r3, r3
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	737b      	strb	r3, [r7, #13]
        }
    }

    /* Write data to STEP_CONFIG register */
    rslt = bmi160_set_regs(BMI160_INT_STEP_CONFIG_0_ADDR, data_array, 2, dev);
 8005f74:	f107 010c 	add.w	r1, r7, #12
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	207a      	movs	r0, #122	; 0x7a
 8005f7e:	f7fd fe05 	bl	8003b8c <bmi160_set_regs>
 8005f82:	4603      	mov	r3, r0
 8005f84:	73bb      	strb	r3, [r7, #14]

    return rslt;
 8005f86:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <enable_tap_int>:
 * @brief This API enables the single/double tap interrupt.
 */
static int8_t enable_tap_int(const struct bmi160_int_settg *int_config,
                             const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                             const struct bmi160_dev *dev)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b086      	sub	sp, #24
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	60f8      	str	r0, [r7, #12]
 8005f9a:	60b9      	str	r1, [r7, #8]
 8005f9c:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	757b      	strb	r3, [r7, #21]
    uint8_t temp = 0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	75bb      	strb	r3, [r7, #22]

    /* Enable single tap or double tap interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8005fa6:	f107 0115 	add.w	r1, r7, #21
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	2050      	movs	r0, #80	; 0x50
 8005fb0:	f7fd fdb9 	bl	8003b26 <bmi160_get_regs>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8005fb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d135      	bne.n	800602c <enable_tap_int+0x9a>
    {
        if (int_config->int_type == BMI160_ACC_SINGLE_TAP_INT)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	785b      	ldrb	r3, [r3, #1]
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d114      	bne.n	8005ff2 <enable_tap_int+0x60>
        {
            temp = data & ~BMI160_SINGLE_TAP_INT_EN_MASK;
 8005fc8:	7d7b      	ldrb	r3, [r7, #21]
 8005fca:	f023 0320 	bic.w	r3, r3, #32
 8005fce:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 5) & BMI160_SINGLE_TAP_INT_EN_MASK);
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	785b      	ldrb	r3, [r3, #1]
 8005fd4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	015b      	lsls	r3, r3, #5
 8005fdc:	b25b      	sxtb	r3, r3
 8005fde:	f003 0320 	and.w	r3, r3, #32
 8005fe2:	b25a      	sxtb	r2, r3
 8005fe4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	b25b      	sxtb	r3, r3
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	757b      	strb	r3, [r7, #21]
 8005ff0:	e013      	b.n	800601a <enable_tap_int+0x88>
        }
        else
        {
            temp = data & ~BMI160_DOUBLE_TAP_INT_EN_MASK;
 8005ff2:	7d7b      	ldrb	r3, [r7, #21]
 8005ff4:	f023 0310 	bic.w	r3, r3, #16
 8005ff8:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 4) & BMI160_DOUBLE_TAP_INT_EN_MASK);
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	785b      	ldrb	r3, [r3, #1]
 8005ffe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006002:	b2db      	uxtb	r3, r3
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	b25b      	sxtb	r3, r3
 8006008:	f003 0310 	and.w	r3, r3, #16
 800600c:	b25a      	sxtb	r2, r3
 800600e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006012:	4313      	orrs	r3, r2
 8006014:	b25b      	sxtb	r3, r3
 8006016:	b2db      	uxtb	r3, r3
 8006018:	757b      	strb	r3, [r7, #21]
        }

        /* Write to Enable 0 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 800601a:	f107 0115 	add.w	r1, r7, #21
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	2050      	movs	r0, #80	; 0x50
 8006024:	f7fd fdb2 	bl	8003b8c <bmi160_set_regs>
 8006028:	4603      	mov	r3, r0
 800602a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800602c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <config_tap_int_settg>:
 * tap interrupt.
 */
static int8_t config_tap_int_settg(const struct bmi160_int_settg *int_config,
                                   const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                                   const struct bmi160_dev *dev)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f7fe fb25 	bl	8004696 <set_intr_pin_config>
 800604c:	4603      	mov	r3, r0
 800604e:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8006050:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d11a      	bne.n	800608e <config_tap_int_settg+0x56>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f7ff fa98 	bl	8005590 <map_feature_interrupt>
 8006060:	4603      	mov	r3, r0
 8006062:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8006064:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d110      	bne.n	800608e <config_tap_int_settg+0x56>
        {
            rslt = config_tap_data_src(tap_int_cfg, dev);
 800606c:	6879      	ldr	r1, [r7, #4]
 800606e:	68b8      	ldr	r0, [r7, #8]
 8006070:	f000 f813 	bl	800609a <config_tap_data_src>
 8006074:	4603      	mov	r3, r0
 8006076:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8006078:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d106      	bne.n	800608e <config_tap_int_settg+0x56>
            {
                rslt = config_tap_param(int_config, tap_int_cfg, dev);
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	68b9      	ldr	r1, [r7, #8]
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 f841 	bl	800610c <config_tap_param>
 800608a:	4603      	mov	r3, r0
 800608c:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 800608e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <config_tap_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for tap interrupt.
 */
static int8_t config_tap_data_src(const struct bmi160_acc_tap_int_cfg *tap_int_cfg, const struct bmi160_dev *dev)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b084      	sub	sp, #16
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
 80060a2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80060a4:	2300      	movs	r3, #0
 80060a6:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80060a8:	2300      	movs	r3, #0
 80060aa:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 80060ac:	f107 010d 	add.w	r1, r7, #13
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2201      	movs	r2, #1
 80060b4:	2058      	movs	r0, #88	; 0x58
 80060b6:	f7fd fd36 	bl	8003b26 <bmi160_get_regs>
 80060ba:	4603      	mov	r3, r0
 80060bc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80060be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d11c      	bne.n	8006100 <config_tap_data_src+0x66>
    {
        temp = data & ~BMI160_TAP_SRC_INT_MASK;
 80060c6:	7b7b      	ldrb	r3, [r7, #13]
 80060c8:	f023 0308 	bic.w	r3, r3, #8
 80060cc:	73bb      	strb	r3, [r7, #14]
        data = temp | ((tap_int_cfg->tap_data_src << 3) & BMI160_TAP_SRC_INT_MASK);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	785b      	ldrb	r3, [r3, #1]
 80060d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	00db      	lsls	r3, r3, #3
 80060da:	b25b      	sxtb	r3, r3
 80060dc:	f003 0308 	and.w	r3, r3, #8
 80060e0:	b25a      	sxtb	r2, r3
 80060e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	b25b      	sxtb	r3, r3
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 80060ee:	f107 010d 	add.w	r1, r7, #13
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2201      	movs	r2, #1
 80060f6:	2058      	movs	r0, #88	; 0x58
 80060f8:	f7fd fd48 	bl	8003b8c <bmi160_set_regs>
 80060fc:	4603      	mov	r3, r0
 80060fe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006100:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <config_tap_param>:
 * Threshold, quite, shock, and duration.
 */
static int8_t config_tap_param(const struct bmi160_int_settg *int_config,
                               const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                               const struct bmi160_dev *dev)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b088      	sub	sp, #32
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t temp = 0;
 8006118:	2300      	movs	r3, #0
 800611a:	777b      	strb	r3, [r7, #29]
    uint8_t data = 0;
 800611c:	2300      	movs	r3, #0
 800611e:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[2] = { 0 };
 8006120:	2300      	movs	r3, #0
 8006122:	82bb      	strh	r3, [r7, #20]
    uint8_t count = 0;
 8006124:	2300      	movs	r3, #0
 8006126:	773b      	strb	r3, [r7, #28]
    uint8_t dur, shock, quiet, thres;

    /* Configure tap 0 register for tap shock,tap quiet duration
     * in case of single tap interrupt */
    rslt = bmi160_get_regs(BMI160_INT_TAP_0_ADDR, data_array, 2, dev);
 8006128:	f107 0114 	add.w	r1, r7, #20
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	2063      	movs	r0, #99	; 0x63
 8006132:	f7fd fcf8 	bl	8003b26 <bmi160_get_regs>
 8006136:	4603      	mov	r3, r0
 8006138:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 800613a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d178      	bne.n	8006234 <config_tap_param+0x128>
    {
        data = data_array[count];
 8006142:	7f3b      	ldrb	r3, [r7, #28]
 8006144:	3320      	adds	r3, #32
 8006146:	443b      	add	r3, r7
 8006148:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800614c:	77bb      	strb	r3, [r7, #30]
        if (int_config->int_type == BMI160_ACC_DOUBLE_TAP_INT)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	785b      	ldrb	r3, [r3, #1]
 8006152:	2b03      	cmp	r3, #3
 8006154:	d113      	bne.n	800617e <config_tap_param+0x72>
        {
            dur = (uint8_t)tap_int_cfg->tap_dur;
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 800615e:	b2db      	uxtb	r3, r3
 8006160:	76fb      	strb	r3, [r7, #27]
            temp = (data & ~BMI160_TAP_DUR_MASK);
 8006162:	7fbb      	ldrb	r3, [r7, #30]
 8006164:	f023 0307 	bic.w	r3, r3, #7
 8006168:	777b      	strb	r3, [r7, #29]

            /* Add tap duration data in case of
             * double tap interrupt */
            data = temp | (dur & BMI160_TAP_DUR_MASK);
 800616a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800616e:	f003 0307 	and.w	r3, r3, #7
 8006172:	b25a      	sxtb	r2, r3
 8006174:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006178:	4313      	orrs	r3, r2
 800617a:	b25b      	sxtb	r3, r3
 800617c:	77bb      	strb	r3, [r7, #30]
        }

        shock = (uint8_t)tap_int_cfg->tap_shock;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006186:	b2db      	uxtb	r3, r3
 8006188:	76bb      	strb	r3, [r7, #26]
        temp = data & ~BMI160_TAP_SHOCK_DUR_MASK;
 800618a:	7fbb      	ldrb	r3, [r7, #30]
 800618c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006190:	777b      	strb	r3, [r7, #29]
        data = temp | ((shock << 6) & BMI160_TAP_SHOCK_DUR_MASK);
 8006192:	7ebb      	ldrb	r3, [r7, #26]
 8006194:	019b      	lsls	r3, r3, #6
 8006196:	b25b      	sxtb	r3, r3
 8006198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619c:	b25a      	sxtb	r2, r3
 800619e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	b25b      	sxtb	r3, r3
 80061a6:	77bb      	strb	r3, [r7, #30]
        quiet = (uint8_t)tap_int_cfg->tap_quiet;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	767b      	strb	r3, [r7, #25]
        temp = data & ~BMI160_TAP_QUIET_DUR_MASK;
 80061b4:	7fbb      	ldrb	r3, [r7, #30]
 80061b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ba:	777b      	strb	r3, [r7, #29]
        data = temp | ((quiet << 7) & BMI160_TAP_QUIET_DUR_MASK);
 80061bc:	7e7b      	ldrb	r3, [r7, #25]
 80061be:	01db      	lsls	r3, r3, #7
 80061c0:	b25a      	sxtb	r2, r3
 80061c2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	b25b      	sxtb	r3, r3
 80061ca:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 80061cc:	7f3b      	ldrb	r3, [r7, #28]
 80061ce:	1c5a      	adds	r2, r3, #1
 80061d0:	773a      	strb	r2, [r7, #28]
 80061d2:	3320      	adds	r3, #32
 80061d4:	443b      	add	r3, r7
 80061d6:	7fba      	ldrb	r2, [r7, #30]
 80061d8:	f803 2c0c 	strb.w	r2, [r3, #-12]
        data = data_array[count];
 80061dc:	7f3b      	ldrb	r3, [r7, #28]
 80061de:	3320      	adds	r3, #32
 80061e0:	443b      	add	r3, r7
 80061e2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80061e6:	77bb      	strb	r3, [r7, #30]
        thres = (uint8_t)tap_int_cfg->tap_thr;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	763b      	strb	r3, [r7, #24]
        temp = data & ~BMI160_TAP_THRES_MASK;
 80061f4:	7fbb      	ldrb	r3, [r7, #30]
 80061f6:	f023 031f 	bic.w	r3, r3, #31
 80061fa:	777b      	strb	r3, [r7, #29]
        data = temp | (thres & BMI160_TAP_THRES_MASK);
 80061fc:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8006200:	f003 031f 	and.w	r3, r3, #31
 8006204:	b25a      	sxtb	r2, r3
 8006206:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800620a:	4313      	orrs	r3, r2
 800620c:	b25b      	sxtb	r3, r3
 800620e:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 8006210:	7f3b      	ldrb	r3, [r7, #28]
 8006212:	1c5a      	adds	r2, r3, #1
 8006214:	773a      	strb	r2, [r7, #28]
 8006216:	3320      	adds	r3, #32
 8006218:	443b      	add	r3, r7
 800621a:	7fba      	ldrb	r2, [r7, #30]
 800621c:	f803 2c0c 	strb.w	r2, [r3, #-12]

        /* TAP 0 and TAP 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Tap 0 and Tap 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_TAP_0_ADDR, data_array, count, dev);
 8006220:	7f3b      	ldrb	r3, [r7, #28]
 8006222:	b29a      	uxth	r2, r3
 8006224:	f107 0114 	add.w	r1, r7, #20
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2063      	movs	r0, #99	; 0x63
 800622c:	f7fd fcae 	bl	8003b8c <bmi160_set_regs>
 8006230:	4603      	mov	r3, r0
 8006232:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006234:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3720      	adds	r7, #32
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <enable_orient_int>:

/*!
 * @brief This API enables the orient interrupt.
 */
static int8_t enable_orient_int(const struct bmi160_acc_orient_int_cfg *orient_int_cfg, const struct bmi160_dev *dev)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800624a:	2300      	movs	r3, #0
 800624c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800624e:	2300      	movs	r3, #0
 8006250:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006252:	f107 010d 	add.w	r1, r7, #13
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2201      	movs	r2, #1
 800625a:	2050      	movs	r0, #80	; 0x50
 800625c:	f7fd fc63 	bl	8003b26 <bmi160_get_regs>
 8006260:	4603      	mov	r3, r0
 8006262:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d11c      	bne.n	80062a6 <enable_orient_int+0x66>
    {
        temp = data & ~BMI160_ORIENT_INT_EN_MASK;
 800626c:	7b7b      	ldrb	r3, [r7, #13]
 800626e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006272:	73bb      	strb	r3, [r7, #14]
        data = temp | ((orient_int_cfg->orient_en << 6) & BMI160_ORIENT_INT_EN_MASK);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	789b      	ldrb	r3, [r3, #2]
 8006278:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800627c:	b2db      	uxtb	r3, r3
 800627e:	019b      	lsls	r3, r3, #6
 8006280:	b25b      	sxtb	r3, r3
 8006282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006286:	b25a      	sxtb	r2, r3
 8006288:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800628c:	4313      	orrs	r3, r2
 800628e:	b25b      	sxtb	r3, r3
 8006290:	b2db      	uxtb	r3, r3
 8006292:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006294:	f107 010d 	add.w	r1, r7, #13
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2201      	movs	r2, #1
 800629c:	2050      	movs	r0, #80	; 0x50
 800629e:	f7fd fc75 	bl	8003b8c <bmi160_set_regs>
 80062a2:	4603      	mov	r3, r0
 80062a4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80062a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <config_orient_int_settg>:
/*!
 * @brief This API configure the necessary setting of orientation interrupt.
 */
static int8_t config_orient_int_settg(const struct bmi160_acc_orient_int_cfg *orient_int_cfg,
                                      const struct bmi160_dev *dev)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b084      	sub	sp, #16
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
 80062ba:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80062bc:	2300      	movs	r3, #0
 80062be:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 80062c0:	2300      	movs	r3, #0
 80062c2:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 80062c4:	2300      	movs	r3, #0
 80062c6:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_ORIENT registers */
    rslt = bmi160_get_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 80062c8:	f107 0108 	add.w	r1, r7, #8
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2202      	movs	r2, #2
 80062d0:	2065      	movs	r0, #101	; 0x65
 80062d2:	f7fd fc28 	bl	8003b26 <bmi160_get_regs>
 80062d6:	4603      	mov	r3, r0
 80062d8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80062da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d17a      	bne.n	80063d8 <config_orient_int_settg+0x126>
    {
        data = data_array[0];
 80062e2:	7a3b      	ldrb	r3, [r7, #8]
 80062e4:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_MODE_MASK;
 80062e6:	7bbb      	ldrb	r3, [r7, #14]
 80062e8:	f023 0303 	bic.w	r3, r3, #3
 80062ec:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation mode */
        data = temp | ((orient_int_cfg->orient_mode) & BMI160_ORIENT_MODE_MASK);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	b25b      	sxtb	r3, r3
 80062fa:	f003 0303 	and.w	r3, r3, #3
 80062fe:	b25a      	sxtb	r2, r3
 8006300:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006304:	4313      	orrs	r3, r2
 8006306:	b25b      	sxtb	r3, r3
 8006308:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_BLOCK_MASK;
 800630a:	7bbb      	ldrb	r3, [r7, #14]
 800630c:	f023 030c 	bic.w	r3, r3, #12
 8006310:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation blocking */
        data = temp | ((orient_int_cfg->orient_blocking << 2) & BMI160_ORIENT_BLOCK_MASK);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800631a:	b2db      	uxtb	r3, r3
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	b25b      	sxtb	r3, r3
 8006320:	f003 030c 	and.w	r3, r3, #12
 8006324:	b25a      	sxtb	r2, r3
 8006326:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800632a:	4313      	orrs	r3, r2
 800632c:	b25b      	sxtb	r3, r3
 800632e:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_HYST_MASK;
 8006330:	7bbb      	ldrb	r3, [r7, #14]
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation hysteresis */
        data = temp | ((orient_int_cfg->orient_hyst << 4) & BMI160_ORIENT_HYST_MASK);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006340:	b2db      	uxtb	r3, r3
 8006342:	011b      	lsls	r3, r3, #4
 8006344:	b25a      	sxtb	r2, r3
 8006346:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800634a:	4313      	orrs	r3, r2
 800634c:	b25b      	sxtb	r3, r3
 800634e:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 8006350:	7bbb      	ldrb	r3, [r7, #14]
 8006352:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 8006354:	7a7b      	ldrb	r3, [r7, #9]
 8006356:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_THETA_MASK;
 8006358:	7bbb      	ldrb	r3, [r7, #14]
 800635a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800635e:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation threshold */
        data = temp | ((orient_int_cfg->orient_theta) & BMI160_ORIENT_THETA_MASK);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	785b      	ldrb	r3, [r3, #1]
 8006364:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006368:	b2db      	uxtb	r3, r3
 800636a:	b25b      	sxtb	r3, r3
 800636c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006370:	b25a      	sxtb	r2, r3
 8006372:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006376:	4313      	orrs	r3, r2
 8006378:	b25b      	sxtb	r3, r3
 800637a:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_UD_ENABLE;
 800637c:	7bbb      	ldrb	r3, [r7, #14]
 800637e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006382:	737b      	strb	r3, [r7, #13]

        /* Adding Orient_ud_en */
        data = temp | ((orient_int_cfg->orient_ud_en << 6) & BMI160_ORIENT_UD_ENABLE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	785b      	ldrb	r3, [r3, #1]
 8006388:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800638c:	b2db      	uxtb	r3, r3
 800638e:	019b      	lsls	r3, r3, #6
 8006390:	b25b      	sxtb	r3, r3
 8006392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006396:	b25a      	sxtb	r2, r3
 8006398:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800639c:	4313      	orrs	r3, r2
 800639e:	b25b      	sxtb	r3, r3
 80063a0:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_AXES_EN_MASK;
 80063a2:	7bbb      	ldrb	r3, [r7, #14]
 80063a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063a8:	737b      	strb	r3, [r7, #13]

        /* Adding axes_en */
        data = temp | ((orient_int_cfg->axes_ex << 7) & BMI160_AXES_EN_MASK);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	785b      	ldrb	r3, [r3, #1]
 80063ae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	01db      	lsls	r3, r3, #7
 80063b6:	b25a      	sxtb	r2, r3
 80063b8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80063bc:	4313      	orrs	r3, r2
 80063be:	b25b      	sxtb	r3, r3
 80063c0:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 80063c2:	7bbb      	ldrb	r3, [r7, #14]
 80063c4:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_ORIENT 0 and INT_ORIENT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 80063c6:	f107 0108 	add.w	r1, r7, #8
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2202      	movs	r2, #2
 80063ce:	2065      	movs	r0, #101	; 0x65
 80063d0:	f7fd fbdc 	bl	8003b8c <bmi160_set_regs>
 80063d4:	4603      	mov	r3, r0
 80063d6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80063d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <enable_flat_int>:

/*!
 * @brief This API enables the flat interrupt.
 */
static int8_t enable_flat_int(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80063ee:	2300      	movs	r3, #0
 80063f0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	73bb      	strb	r3, [r7, #14]

    /* Enable flat interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80063f6:	f107 010d 	add.w	r1, r7, #13
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2201      	movs	r2, #1
 80063fe:	2050      	movs	r0, #80	; 0x50
 8006400:	f7fd fb91 	bl	8003b26 <bmi160_get_regs>
 8006404:	4603      	mov	r3, r0
 8006406:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d119      	bne.n	8006444 <enable_flat_int+0x60>
    {
        temp = data & ~BMI160_FLAT_INT_EN_MASK;
 8006410:	7b7b      	ldrb	r3, [r7, #13]
 8006412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006416:	73bb      	strb	r3, [r7, #14]
        data = temp | ((flat_int->flat_en << 7) & BMI160_FLAT_INT_EN_MASK);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	785b      	ldrb	r3, [r3, #1]
 800641c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006420:	b2db      	uxtb	r3, r3
 8006422:	01db      	lsls	r3, r3, #7
 8006424:	b25a      	sxtb	r2, r3
 8006426:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800642a:	4313      	orrs	r3, r2
 800642c:	b25b      	sxtb	r3, r3
 800642e:	b2db      	uxtb	r3, r3
 8006430:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006432:	f107 010d 	add.w	r1, r7, #13
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2201      	movs	r2, #1
 800643a:	2050      	movs	r0, #80	; 0x50
 800643c:	f7fd fba6 	bl	8003b8c <bmi160_set_regs>
 8006440:	4603      	mov	r3, r0
 8006442:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006444:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006448:	4618      	mov	r0, r3
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <config_flat_int_settg>:

/*!
 * @brief This API configure the necessary setting of flat interrupt.
 */
static int8_t config_flat_int_settg(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 800645e:	2300      	movs	r3, #0
 8006460:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 8006462:	2300      	movs	r3, #0
 8006464:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_FLAT register */
    rslt = bmi160_get_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 8006466:	f107 0108 	add.w	r1, r7, #8
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2202      	movs	r2, #2
 800646e:	2067      	movs	r0, #103	; 0x67
 8006470:	f7fd fb59 	bl	8003b26 <bmi160_get_regs>
 8006474:	4603      	mov	r3, r0
 8006476:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d147      	bne.n	8006510 <config_flat_int_settg+0xc0>
    {
        data = data_array[0];
 8006480:	7a3b      	ldrb	r3, [r7, #8]
 8006482:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_THRES_MASK;
 8006484:	7bbb      	ldrb	r3, [r7, #14]
 8006486:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800648a:	737b      	strb	r3, [r7, #13]

        /* Adding flat theta */
        data = temp | ((flat_int->flat_theta) & BMI160_FLAT_THRES_MASK);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006494:	b2db      	uxtb	r3, r3
 8006496:	b25b      	sxtb	r3, r3
 8006498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800649c:	b25a      	sxtb	r2, r3
 800649e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	b25b      	sxtb	r3, r3
 80064a6:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 80064a8:	7bbb      	ldrb	r3, [r7, #14]
 80064aa:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 80064ac:	7a7b      	ldrb	r3, [r7, #9]
 80064ae:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HOLD_TIME_MASK;
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
 80064b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80064b6:	737b      	strb	r3, [r7, #13]

        /* Adding flat hold time */
        data = temp | ((flat_int->flat_hold_time << 4) & BMI160_FLAT_HOLD_TIME_MASK);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	785b      	ldrb	r3, [r3, #1]
 80064bc:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	b25b      	sxtb	r3, r3
 80064c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064ca:	b25a      	sxtb	r2, r3
 80064cc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	b25b      	sxtb	r3, r3
 80064d4:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HYST_MASK;
 80064d6:	7bbb      	ldrb	r3, [r7, #14]
 80064d8:	f023 0307 	bic.w	r3, r3, #7
 80064dc:	737b      	strb	r3, [r7, #13]

        /* Adding flat hysteresis */
        data = temp | ((flat_int->flat_hy) & BMI160_FLAT_HYST_MASK);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	f3c3 1382 	ubfx	r3, r3, #6, #3
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	b25b      	sxtb	r3, r3
 80064ea:	f003 0307 	and.w	r3, r3, #7
 80064ee:	b25a      	sxtb	r2, r3
 80064f0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	b25b      	sxtb	r3, r3
 80064f8:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 80064fa:	7bbb      	ldrb	r3, [r7, #14]
 80064fc:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_FLAT 0 and INT_FLAT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 80064fe:	f107 0108 	add.w	r1, r7, #8
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2202      	movs	r2, #2
 8006506:	2067      	movs	r0, #103	; 0x67
 8006508:	f7fd fb40 	bl	8003b8c <bmi160_set_regs>
 800650c:	4603      	mov	r3, r0
 800650e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006510:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <enable_low_g_int>:

/*!
 * @brief This API enables the Low-g interrupt.
 */
static int8_t enable_low_g_int(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006526:	2300      	movs	r3, #0
 8006528:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800652a:	2300      	movs	r3, #0
 800652c:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 800652e:	f107 010d 	add.w	r1, r7, #13
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2201      	movs	r2, #1
 8006536:	2051      	movs	r0, #81	; 0x51
 8006538:	f7fd faf5 	bl	8003b26 <bmi160_get_regs>
 800653c:	4603      	mov	r3, r0
 800653e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d11c      	bne.n	8006582 <enable_low_g_int+0x66>
    {
        temp = data & ~BMI160_LOW_G_INT_EN_MASK;
 8006548:	7b7b      	ldrb	r3, [r7, #13]
 800654a:	f023 0308 	bic.w	r3, r3, #8
 800654e:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_en << 3) & BMI160_LOW_G_INT_EN_MASK);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	789b      	ldrb	r3, [r3, #2]
 8006554:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006558:	b2db      	uxtb	r3, r3
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	b25b      	sxtb	r3, r3
 800655e:	f003 0308 	and.w	r3, r3, #8
 8006562:	b25a      	sxtb	r2, r3
 8006564:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006568:	4313      	orrs	r3, r2
 800656a:	b25b      	sxtb	r3, r3
 800656c:	b2db      	uxtb	r3, r3
 800656e:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006570:	f107 010d 	add.w	r1, r7, #13
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2201      	movs	r2, #1
 8006578:	2051      	movs	r0, #81	; 0x51
 800657a:	f7fd fb07 	bl	8003b8c <bmi160_set_regs>
 800657e:	4603      	mov	r3, r0
 8006580:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006582:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <config_low_g_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for low-g interrupt.
 */
static int8_t config_low_g_data_src(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b084      	sub	sp, #16
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006598:	2300      	movs	r3, #0
 800659a:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800659c:	2300      	movs	r3, #0
 800659e:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 80065a0:	f107 010d 	add.w	r1, r7, #13
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	2201      	movs	r2, #1
 80065a8:	2058      	movs	r0, #88	; 0x58
 80065aa:	f7fd fabc 	bl	8003b26 <bmi160_get_regs>
 80065ae:	4603      	mov	r3, r0
 80065b0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80065b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d119      	bne.n	80065ee <config_low_g_data_src+0x60>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 80065ba:	7b7b      	ldrb	r3, [r7, #13]
 80065bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065c0:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	789b      	ldrb	r3, [r3, #2]
 80065c6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	01db      	lsls	r3, r3, #7
 80065ce:	b25a      	sxtb	r2, r3
 80065d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	b25b      	sxtb	r3, r3
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 80065dc:	f107 010d 	add.w	r1, r7, #13
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	2201      	movs	r2, #1
 80065e4:	2058      	movs	r0, #88	; 0x58
 80065e6:	f7fd fad1 	bl	8003b8c <bmi160_set_regs>
 80065ea:	4603      	mov	r3, r0
 80065ec:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80065ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <config_low_g_int_settg>:

/*!
 * @brief This API configure the necessary setting of low-g interrupt.
 */
static int8_t config_low_g_int_settg(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8006606:	2300      	movs	r3, #0
 8006608:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 800660a:	4a29      	ldr	r2, [pc, #164]	; (80066b0 <config_low_g_int_settg+0xb4>)
 800660c:	f107 0308 	add.w	r3, r7, #8
 8006610:	6812      	ldr	r2, [r2, #0]
 8006612:	4611      	mov	r1, r2
 8006614:	8019      	strh	r1, [r3, #0]
 8006616:	3302      	adds	r3, #2
 8006618:	0c12      	lsrs	r2, r2, #16
 800661a:	701a      	strb	r2, [r3, #0]

    /* Configuring INT_LOWHIGH register for low-g interrupt */
    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[2], 1, dev);
 800661c:	f107 0308 	add.w	r3, r7, #8
 8006620:	1c99      	adds	r1, r3, #2
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2201      	movs	r2, #1
 8006626:	205c      	movs	r0, #92	; 0x5c
 8006628:	f7fd fa7d 	bl	8003b26 <bmi160_get_regs>
 800662c:	4603      	mov	r3, r0
 800662e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d135      	bne.n	80066a4 <config_low_g_int_settg+0xa8>
    {
        temp = data_array[2] & ~BMI160_LOW_G_HYST_MASK;
 8006638:	7abb      	ldrb	r3, [r7, #10]
 800663a:	f023 0303 	bic.w	r3, r3, #3
 800663e:	73bb      	strb	r3, [r7, #14]

        /* Adding low-g hysteresis */
        data_array[2] = temp | (low_g_int->low_hyst & BMI160_LOW_G_HYST_MASK);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	789b      	ldrb	r3, [r3, #2]
 8006644:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006648:	b2db      	uxtb	r3, r3
 800664a:	b25b      	sxtb	r3, r3
 800664c:	f003 0303 	and.w	r3, r3, #3
 8006650:	b25a      	sxtb	r2, r3
 8006652:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006656:	4313      	orrs	r3, r2
 8006658:	b25b      	sxtb	r3, r3
 800665a:	b2db      	uxtb	r3, r3
 800665c:	72bb      	strb	r3, [r7, #10]
        temp = data_array[2] & ~BMI160_LOW_G_LOW_MODE_MASK;
 800665e:	7abb      	ldrb	r3, [r7, #10]
 8006660:	f023 0304 	bic.w	r3, r3, #4
 8006664:	73bb      	strb	r3, [r7, #14]

        /* Adding low-mode */
        data_array[2] = temp | ((low_g_int->low_mode << 2) & BMI160_LOW_G_LOW_MODE_MASK);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	789b      	ldrb	r3, [r3, #2]
 800666a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800666e:	b2db      	uxtb	r3, r3
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	b25b      	sxtb	r3, r3
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	b25a      	sxtb	r2, r3
 800667a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800667e:	4313      	orrs	r3, r2
 8006680:	b25b      	sxtb	r3, r3
 8006682:	b2db      	uxtb	r3, r3
 8006684:	72bb      	strb	r3, [r7, #10]

        /* Adding low-g threshold */
        data_array[1] = low_g_int->low_thres;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	785b      	ldrb	r3, [r3, #1]
 800668a:	727b      	strb	r3, [r7, #9]

        /* Adding low-g interrupt delay */
        data_array[0] = low_g_int->low_dur;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	723b      	strb	r3, [r7, #8]

        /* Writing data to INT_LOWHIGH 0,1,2 registers simultaneously*/
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_0_ADDR, data_array, 3, dev);
 8006692:	f107 0108 	add.w	r1, r7, #8
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2203      	movs	r2, #3
 800669a:	205a      	movs	r0, #90	; 0x5a
 800669c:	f7fd fa76 	bl	8003b8c <bmi160_set_regs>
 80066a0:	4603      	mov	r3, r0
 80066a2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80066a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	08012828 	.word	0x08012828

080066b4 <enable_high_g_int>:

/*!
 * @brief This API enables the high-g interrupt.
 */
static int8_t enable_high_g_int(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg, const struct bmi160_dev *dev)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80066be:	2300      	movs	r3, #0
 80066c0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80066c6:	f107 010d 	add.w	r1, r7, #13
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2201      	movs	r2, #1
 80066ce:	2051      	movs	r0, #81	; 0x51
 80066d0:	f7fd fa29 	bl	8003b26 <bmi160_get_regs>
 80066d4:	4603      	mov	r3, r0
 80066d6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80066d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d143      	bne.n	8006768 <enable_high_g_int+0xb4>
    {
        /* Adding high-g X-axis */
        temp = data & ~BMI160_HIGH_G_X_INT_EN_MASK;
 80066e0:	7b7b      	ldrb	r3, [r7, #13]
 80066e2:	f023 0301 	bic.w	r3, r3, #1
 80066e6:	73bb      	strb	r3, [r7, #14]
        data = temp | (high_g_int_cfg->high_g_x & BMI160_HIGH_G_X_INT_EN_MASK);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	b25b      	sxtb	r3, r3
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	b25a      	sxtb	r2, r3
 80066fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066fe:	4313      	orrs	r3, r2
 8006700:	b25b      	sxtb	r3, r3
 8006702:	b2db      	uxtb	r3, r3
 8006704:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Y-axis */
        temp = data & ~BMI160_HIGH_G_Y_INT_EN_MASK;
 8006706:	7b7b      	ldrb	r3, [r7, #13]
 8006708:	f023 0302 	bic.w	r3, r3, #2
 800670c:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_y << 1) & BMI160_HIGH_G_Y_INT_EN_MASK);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006716:	b2db      	uxtb	r3, r3
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	b25b      	sxtb	r3, r3
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	b25a      	sxtb	r2, r3
 8006722:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006726:	4313      	orrs	r3, r2
 8006728:	b25b      	sxtb	r3, r3
 800672a:	b2db      	uxtb	r3, r3
 800672c:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Z-axis */
        temp = data & ~BMI160_HIGH_G_Z_INT_EN_MASK;
 800672e:	7b7b      	ldrb	r3, [r7, #13]
 8006730:	f023 0304 	bic.w	r3, r3, #4
 8006734:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_z << 2) & BMI160_HIGH_G_Z_INT_EN_MASK);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800673e:	b2db      	uxtb	r3, r3
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	b25b      	sxtb	r3, r3
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	b25a      	sxtb	r2, r3
 800674a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800674e:	4313      	orrs	r3, r2
 8006750:	b25b      	sxtb	r3, r3
 8006752:	b2db      	uxtb	r3, r3
 8006754:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006756:	f107 010d 	add.w	r1, r7, #13
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2201      	movs	r2, #1
 800675e:	2051      	movs	r0, #81	; 0x51
 8006760:	f7fd fa14 	bl	8003b8c <bmi160_set_regs>
 8006764:	4603      	mov	r3, r0
 8006766:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006768:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <config_high_g_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for high-g interrupt.
 */
static int8_t config_high_g_data_src(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                     const struct bmi160_dev *dev)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800677e:	2300      	movs	r3, #0
 8006780:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006782:	2300      	movs	r3, #0
 8006784:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8006786:	f107 010d 	add.w	r1, r7, #13
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2201      	movs	r2, #1
 800678e:	2058      	movs	r0, #88	; 0x58
 8006790:	f7fd f9c9 	bl	8003b26 <bmi160_get_regs>
 8006794:	4603      	mov	r3, r0
 8006796:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d119      	bne.n	80067d4 <config_high_g_data_src+0x60>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 80067a0:	7b7b      	ldrb	r3, [r7, #13]
 80067a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067a6:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	01db      	lsls	r3, r3, #7
 80067b4:	b25a      	sxtb	r2, r3
 80067b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	b25b      	sxtb	r3, r3
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 80067c2:	f107 010d 	add.w	r1, r7, #13
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2201      	movs	r2, #1
 80067ca:	2058      	movs	r0, #88	; 0x58
 80067cc:	f7fd f9de 	bl	8003b8c <bmi160_set_regs>
 80067d0:	4603      	mov	r3, r0
 80067d2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80067d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <config_high_g_int_settg>:
/*!
 * @brief This API configure the necessary setting of high-g interrupt.
 */
static int8_t config_high_g_int_settg(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                      const struct bmi160_dev *dev)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80067ea:	2300      	movs	r3, #0
 80067ec:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 80067ee:	4a1e      	ldr	r2, [pc, #120]	; (8006868 <config_high_g_int_settg+0x88>)
 80067f0:	f107 0308 	add.w	r3, r7, #8
 80067f4:	6812      	ldr	r2, [r2, #0]
 80067f6:	4611      	mov	r1, r2
 80067f8:	8019      	strh	r1, [r3, #0]
 80067fa:	3302      	adds	r3, #2
 80067fc:	0c12      	lsrs	r2, r2, #16
 80067fe:	701a      	strb	r2, [r3, #0]

    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[0], 1, dev);
 8006800:	f107 0108 	add.w	r1, r7, #8
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2201      	movs	r2, #1
 8006808:	205c      	movs	r0, #92	; 0x5c
 800680a:	f7fd f98c 	bl	8003b26 <bmi160_get_regs>
 800680e:	4603      	mov	r3, r0
 8006810:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d11f      	bne.n	800685a <config_high_g_int_settg+0x7a>
    {
        temp = data_array[0] & ~BMI160_HIGH_G_HYST_MASK;
 800681a:	7a3b      	ldrb	r3, [r7, #8]
 800681c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006820:	73bb      	strb	r3, [r7, #14]

        /* Adding high-g hysteresis */
        data_array[0] = temp | ((high_g_int_cfg->high_hy << 6) & BMI160_HIGH_G_HYST_MASK);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800682a:	b2db      	uxtb	r3, r3
 800682c:	019b      	lsls	r3, r3, #6
 800682e:	b25a      	sxtb	r2, r3
 8006830:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006834:	4313      	orrs	r3, r2
 8006836:	b25b      	sxtb	r3, r3
 8006838:	b2db      	uxtb	r3, r3
 800683a:	723b      	strb	r3, [r7, #8]

        /* Adding high-g duration */
        data_array[1] = high_g_int_cfg->high_dur;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	789b      	ldrb	r3, [r3, #2]
 8006840:	727b      	strb	r3, [r7, #9]

        /* Adding high-g threshold */
        data_array[2] = high_g_int_cfg->high_thres;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	785b      	ldrb	r3, [r3, #1]
 8006846:	72bb      	strb	r3, [r7, #10]
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_2_ADDR, data_array, 3, dev);
 8006848:	f107 0108 	add.w	r1, r7, #8
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2203      	movs	r2, #3
 8006850:	205c      	movs	r0, #92	; 0x5c
 8006852:	f7fd f99b 	bl	8003b8c <bmi160_set_regs>
 8006856:	4603      	mov	r3, r0
 8006858:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800685a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	08012828 	.word	0x08012828

0800686c <config_int_out_ctrl>:

/*!
 * @brief This API configure the behavioural setting of interrupt pin.
 */
static int8_t config_int_out_ctrl(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8006876:	2300      	movs	r3, #0
 8006878:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 800687a:	2300      	movs	r3, #0
 800687c:	73fb      	strb	r3, [r7, #15]

    /* Configuration of output interrupt signals on pins INT1 and INT2 are
     * done in BMI160_INT_OUT_CTRL_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 800687e:	f107 010f 	add.w	r1, r7, #15
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2201      	movs	r2, #1
 8006886:	2053      	movs	r0, #83	; 0x53
 8006888:	f7fd f94d 	bl	8003b26 <bmi160_get_regs>
 800688c:	4603      	mov	r3, r0
 800688e:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8006890:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006894:	2b00      	cmp	r3, #0
 8006896:	f040 80ad 	bne.w	80069f4 <config_int_out_ctrl+0x188>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	3302      	adds	r3, #2
 800689e:	613b      	str	r3, [r7, #16]

        /* Configuring channel 1 */
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d14f      	bne.n	8006948 <config_int_out_ctrl+0xdc>
        {
            /* Output enable */
            temp = data & ~BMI160_INT1_OUTPUT_EN_MASK;
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
 80068aa:	f023 0308 	bic.w	r3, r3, #8
 80068ae:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 3) & BMI160_INT1_OUTPUT_EN_MASK);
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	b25b      	sxtb	r3, r3
 80068be:	f003 0308 	and.w	r3, r3, #8
 80068c2:	b25a      	sxtb	r2, r3
 80068c4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	b25b      	sxtb	r3, r3
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT1_OUTPUT_MODE_MASK;
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
 80068d2:	f023 0304 	bic.w	r3, r3, #4
 80068d6:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 2) & BMI160_INT1_OUTPUT_MODE_MASK);
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	b25b      	sxtb	r3, r3
 80068e6:	f003 0304 	and.w	r3, r3, #4
 80068ea:	b25a      	sxtb	r2, r3
 80068ec:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	b25b      	sxtb	r3, r3
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT1_OUTPUT_TYPE_MASK;
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	f023 0302 	bic.w	r3, r3, #2
 80068fe:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 1) & BMI160_INT1_OUTPUT_TYPE_MASK);
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006908:	b2db      	uxtb	r3, r3
 800690a:	005b      	lsls	r3, r3, #1
 800690c:	b25b      	sxtb	r3, r3
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	b25a      	sxtb	r2, r3
 8006914:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006918:	4313      	orrs	r3, r2
 800691a:	b25b      	sxtb	r3, r3
 800691c:	b2db      	uxtb	r3, r3
 800691e:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT1_EDGE_CTRL_MASK;
 8006920:	7bfb      	ldrb	r3, [r7, #15]
 8006922:	f023 0301 	bic.w	r3, r3, #1
 8006926:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl) & BMI160_INT1_EDGE_CTRL_MASK);
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006930:	b2db      	uxtb	r3, r3
 8006932:	b25b      	sxtb	r3, r3
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	b25a      	sxtb	r2, r3
 800693a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800693e:	4313      	orrs	r3, r2
 8006940:	b25b      	sxtb	r3, r3
 8006942:	b2db      	uxtb	r3, r3
 8006944:	73fb      	strb	r3, [r7, #15]
 8006946:	e04c      	b.n	80069e2 <config_int_out_ctrl+0x176>
        }
        else
        {
            /* Configuring channel 2 */
            /* Output enable */
            temp = data & ~BMI160_INT2_OUTPUT_EN_MASK;
 8006948:	7bfb      	ldrb	r3, [r7, #15]
 800694a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800694e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 7) & BMI160_INT2_OUTPUT_EN_MASK);
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006958:	b2db      	uxtb	r3, r3
 800695a:	01db      	lsls	r3, r3, #7
 800695c:	b25a      	sxtb	r2, r3
 800695e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006962:	4313      	orrs	r3, r2
 8006964:	b25b      	sxtb	r3, r3
 8006966:	b2db      	uxtb	r3, r3
 8006968:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT2_OUTPUT_MODE_MASK;
 800696a:	7bfb      	ldrb	r3, [r7, #15]
 800696c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006970:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 6) & BMI160_INT2_OUTPUT_MODE_MASK);
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800697a:	b2db      	uxtb	r3, r3
 800697c:	019b      	lsls	r3, r3, #6
 800697e:	b25b      	sxtb	r3, r3
 8006980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006984:	b25a      	sxtb	r2, r3
 8006986:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800698a:	4313      	orrs	r3, r2
 800698c:	b25b      	sxtb	r3, r3
 800698e:	b2db      	uxtb	r3, r3
 8006990:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT2_OUTPUT_TYPE_MASK;
 8006992:	7bfb      	ldrb	r3, [r7, #15]
 8006994:	f023 0320 	bic.w	r3, r3, #32
 8006998:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 5) & BMI160_INT2_OUTPUT_TYPE_MASK);
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	015b      	lsls	r3, r3, #5
 80069a6:	b25b      	sxtb	r3, r3
 80069a8:	f003 0320 	and.w	r3, r3, #32
 80069ac:	b25a      	sxtb	r2, r3
 80069ae:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	b25b      	sxtb	r3, r3
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT2_EDGE_CTRL_MASK;
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
 80069bc:	f023 0310 	bic.w	r3, r3, #16
 80069c0:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl << 4) & BMI160_INT2_EDGE_CTRL_MASK);
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	b25b      	sxtb	r3, r3
 80069d0:	f003 0310 	and.w	r3, r3, #16
 80069d4:	b25a      	sxtb	r2, r3
 80069d6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80069da:	4313      	orrs	r3, r2
 80069dc:	b25b      	sxtb	r3, r3
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	73fb      	strb	r3, [r7, #15]
        }

        rslt = bmi160_set_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 80069e2:	f107 010f 	add.w	r1, r7, #15
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2201      	movs	r2, #1
 80069ea:	2053      	movs	r0, #83	; 0x53
 80069ec:	f7fd f8ce 	bl	8003b8c <bmi160_set_regs>
 80069f0:	4603      	mov	r3, r0
 80069f2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80069f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <config_int_latch>:

/*!
 * @brief This API configure the mode(input enable, latch or non-latch) of interrupt pin.
 */
static int8_t config_int_latch(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	73fb      	strb	r3, [r7, #15]

    /* Configuration of latch on pins INT1 and INT2 are done in
     * BMI160_INT_LATCH_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8006a12:	f107 010f 	add.w	r1, r7, #15
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	2054      	movs	r0, #84	; 0x54
 8006a1c:	f7fd f883 	bl	8003b26 <bmi160_get_regs>
 8006a20:	4603      	mov	r3, r0
 8006a22:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8006a24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d14b      	bne.n	8006ac4 <config_int_latch+0xc4>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3302      	adds	r3, #2
 8006a30:	613b      	str	r3, [r7, #16]
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d114      	bne.n	8006a64 <config_int_latch+0x64>
        {
            /* Configuring channel 1 */
            /* Input enable */
            temp = data & ~BMI160_INT1_INPUT_EN_MASK;
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	f023 0310 	bic.w	r3, r3, #16
 8006a40:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 4) & BMI160_INT1_INPUT_EN_MASK);
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	011b      	lsls	r3, r3, #4
 8006a4e:	b25b      	sxtb	r3, r3
 8006a50:	f003 0310 	and.w	r3, r3, #16
 8006a54:	b25a      	sxtb	r2, r3
 8006a56:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	b25b      	sxtb	r3, r3
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	73fb      	strb	r3, [r7, #15]
 8006a62:	e013      	b.n	8006a8c <config_int_latch+0x8c>
        }
        else
        {
            /* Configuring channel 2 */
            /* Input enable */
            temp = data & ~BMI160_INT2_INPUT_EN_MASK;
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	f023 0320 	bic.w	r3, r3, #32
 8006a6a:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 5) & BMI160_INT2_INPUT_EN_MASK);
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	015b      	lsls	r3, r3, #5
 8006a78:	b25b      	sxtb	r3, r3
 8006a7a:	f003 0320 	and.w	r3, r3, #32
 8006a7e:	b25a      	sxtb	r2, r3
 8006a80:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	b25b      	sxtb	r3, r3
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	73fb      	strb	r3, [r7, #15]

        /* In case of latch interrupt,update the latch duration */

        /* Latching holds the interrupt for the amount of latch
         * duration time */
        temp = data & ~BMI160_INT_LATCH_MASK;
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
 8006a8e:	f023 030f 	bic.w	r3, r3, #15
 8006a92:	75bb      	strb	r3, [r7, #22]
        data = temp | (intr_pin_sett->latch_dur & BMI160_INT_LATCH_MASK);
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	b25b      	sxtb	r3, r3
 8006aa0:	f003 030f 	and.w	r3, r3, #15
 8006aa4:	b25a      	sxtb	r2, r3
 8006aa6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	b25b      	sxtb	r3, r3
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	73fb      	strb	r3, [r7, #15]

        /* OUT_CTRL_INT and LATCH_INT address lie consecutively,
         * hence writing data to respective registers at one go */
        rslt = bmi160_set_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8006ab2:	f107 010f 	add.w	r1, r7, #15
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	2054      	movs	r0, #84	; 0x54
 8006abc:	f7fd f866 	bl	8003b8c <bmi160_set_regs>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006ac4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3718      	adds	r7, #24
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <set_fifo_full_int>:
 *  @brief This API sets FIFO full interrupt of the sensor.This interrupt
 *  occurs when the FIFO is full and the next full data sample would cause
 *  a FIFO overflow, which may delete the old samples.
 */
static int8_t set_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d003      	beq.n	8006aec <set_fifo_full_int+0x1c>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d102      	bne.n	8006af2 <set_fifo_full_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8006aec:	23ff      	movs	r3, #255	; 0xff
 8006aee:	73fb      	strb	r3, [r7, #15]
 8006af0:	e019      	b.n	8006b26 <set_fifo_full_int+0x56>
    }
    else
    {
        /*enable the fifo full interrupt */
        rslt = enable_fifo_full_int(int_config, dev);
 8006af2:	6839      	ldr	r1, [r7, #0]
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f81c 	bl	8006b32 <enable_fifo_full_int>
 8006afa:	4603      	mov	r3, r0
 8006afc:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8006afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10f      	bne.n	8006b26 <set_fifo_full_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7fd fdc4 	bl	8004696 <set_intr_pin_config>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8006b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d105      	bne.n	8006b26 <set_fifo_full_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f7fe fdd1 	bl	80056c4 <map_hardware_interrupt>
 8006b22:	4603      	mov	r3, r0
 8006b24:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8006b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <enable_fifo_full_int>:

/*!
 * @brief This enable the FIFO full interrupt engine.
 */
static int8_t enable_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006b40:	f107 010e 	add.w	r1, r7, #14
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2201      	movs	r2, #1
 8006b48:	2051      	movs	r0, #81	; 0x51
 8006b4a:	f7fc ffec 	bl	8003b26 <bmi160_get_regs>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d11b      	bne.n	8006b92 <enable_fifo_full_int+0x60>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_FULL_INT, int_config->fifo_full_int_en);
 8006b5a:	7bbb      	ldrb	r3, [r7, #14]
 8006b5c:	b25b      	sxtb	r3, r3
 8006b5e:	f023 0320 	bic.w	r3, r3, #32
 8006b62:	b25a      	sxtb	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	7a1b      	ldrb	r3, [r3, #8]
 8006b68:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	015b      	lsls	r3, r3, #5
 8006b70:	b25b      	sxtb	r3, r3
 8006b72:	f003 0320 	and.w	r3, r3, #32
 8006b76:	b25b      	sxtb	r3, r3
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	b25b      	sxtb	r3, r3
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006b80:	f107 010e 	add.w	r1, r7, #14
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2201      	movs	r2, #1
 8006b88:	2051      	movs	r0, #81	; 0x51
 8006b8a:	f7fc ffff 	bl	8003b8c <bmi160_set_regs>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <set_fifo_watermark_int>:
 *  @brief This API sets FIFO watermark interrupt of the sensor.The FIFO
 *  watermark interrupt is fired, when the FIFO fill level is above a fifo
 *  watermark.
 */
static int8_t set_fifo_watermark_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->delay_ms == NULL))
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <set_fifo_watermark_int+0x1c>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d102      	bne.n	8006bc0 <set_fifo_watermark_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8006bba:	23ff      	movs	r3, #255	; 0xff
 8006bbc:	73fb      	strb	r3, [r7, #15]
 8006bbe:	e019      	b.n	8006bf4 <set_fifo_watermark_int+0x56>
    }
    else
    {
        /* Enable fifo-watermark interrupt in Int Enable 1 register */
        rslt = enable_fifo_wtm_int(int_config, dev);
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f81c 	bl	8006c00 <enable_fifo_wtm_int>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8006bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10f      	bne.n	8006bf4 <set_fifo_watermark_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fd fd5d 	bl	8004696 <set_intr_pin_config>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8006be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d105      	bne.n	8006bf4 <set_fifo_watermark_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7fe fd6a 	bl	80056c4 <map_hardware_interrupt>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8006bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <enable_fifo_wtm_int>:

/*!
 * @brief This enable the FIFO watermark interrupt engine.
 */
static int8_t enable_fifo_wtm_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006c0e:	f107 010e 	add.w	r1, r7, #14
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2201      	movs	r2, #1
 8006c16:	2051      	movs	r0, #81	; 0x51
 8006c18:	f7fc ff85 	bl	8003b26 <bmi160_get_regs>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d11b      	bne.n	8006c60 <enable_fifo_wtm_int+0x60>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_WTM_INT, int_config->fifo_wtm_int_en);
 8006c28:	7bbb      	ldrb	r3, [r7, #14]
 8006c2a:	b25b      	sxtb	r3, r3
 8006c2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c30:	b25a      	sxtb	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	7a1b      	ldrb	r3, [r3, #8]
 8006c36:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	019b      	lsls	r3, r3, #6
 8006c3e:	b25b      	sxtb	r3, r3
 8006c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c44:	b25b      	sxtb	r3, r3
 8006c46:	4313      	orrs	r3, r2
 8006c48:	b25b      	sxtb	r3, r3
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006c4e:	f107 010e 	add.w	r1, r7, #14
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2201      	movs	r2, #1
 8006c56:	2051      	movs	r0, #81	; 0x51
 8006c58:	f7fc ff98 	bl	8003b8c <bmi160_set_regs>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <get_foc_status>:

/*!
 *  @brief This API is used to get the FOC status from the sensor
 */
static int8_t get_foc_status(uint8_t *foc_status, struct bmi160_dev const *dev)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read the FOC status from sensor */
    rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &data, 1, dev);
 8006c76:	f107 010e 	add.w	r1, r7, #14
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	201b      	movs	r0, #27
 8006c80:	f7fc ff51 	bl	8003b26 <bmi160_get_regs>
 8006c84:	4603      	mov	r3, r0
 8006c86:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d107      	bne.n	8006ca0 <get_foc_status+0x34>
    {
        /* Get the foc_status bit */
        *foc_status = BMI160_GET_BITS(data, BMI160_FOC_STATUS);
 8006c90:	7bbb      	ldrb	r3, [r7, #14]
 8006c92:	10db      	asrs	r3, r3, #3
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8006ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <configure_offset_enable>:

/*!
 *  @brief This API is used to configure the offset enable bits in the sensor
 */
static int8_t configure_offset_enable(const struct bmi160_foc_conf *foc_conf, struct bmi160_dev const *dev)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8006cb6:	6838      	ldr	r0, [r7, #0]
 8006cb8:	f7fd fd08 	bl	80046cc <null_ptr_check>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	73fb      	strb	r3, [r7, #15]
    if (rslt != BMI160_OK)
 8006cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <configure_offset_enable+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8006cc8:	23ff      	movs	r3, #255	; 0xff
 8006cca:	73fb      	strb	r3, [r7, #15]
 8006ccc:	e032      	b.n	8006d34 <configure_offset_enable+0x88>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 8006cce:	f107 010e 	add.w	r1, r7, #14
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	2077      	movs	r0, #119	; 0x77
 8006cd8:	f7fc ff25 	bl	8003b26 <bmi160_get_regs>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8006ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d125      	bne.n	8006d34 <configure_offset_enable+0x88>
        {
            /* Set the offset enable/disable for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_OFFSET_EN, foc_conf->gyro_off_en);
 8006ce8:	7bbb      	ldrb	r3, [r7, #14]
 8006cea:	b25b      	sxtb	r3, r3
 8006cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cf0:	b25a      	sxtb	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	795b      	ldrb	r3, [r3, #5]
 8006cf6:	01db      	lsls	r3, r3, #7
 8006cf8:	b25b      	sxtb	r3, r3
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	b25b      	sxtb	r3, r3
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	73bb      	strb	r3, [r7, #14]

            /* Set the offset enable/disable for accel */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_OFFSET_EN, foc_conf->acc_off_en);
 8006d02:	7bbb      	ldrb	r3, [r7, #14]
 8006d04:	b25b      	sxtb	r3, r3
 8006d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d0a:	b25a      	sxtb	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	791b      	ldrb	r3, [r3, #4]
 8006d10:	019b      	lsls	r3, r3, #6
 8006d12:	b25b      	sxtb	r3, r3
 8006d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d18:	b25b      	sxtb	r3, r3
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	b25b      	sxtb	r3, r3
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	73bb      	strb	r3, [r7, #14]

            /* Set the offset config in the sensor */
            rslt = bmi160_set_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 8006d22:	f107 010e 	add.w	r1, r7, #14
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	2077      	movs	r0, #119	; 0x77
 8006d2c:	f7fc ff2e 	bl	8003b8c <bmi160_set_regs>
 8006d30:	4603      	mov	r3, r0
 8006d32:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8006d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <trigger_foc>:

static int8_t trigger_foc(struct bmi160_offsets *offset, struct bmi160_dev const *dev)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t foc_status = BMI160_ENABLE;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	777b      	strb	r3, [r7, #29]
    uint8_t cmd = BMI160_START_FOC_CMD;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	773b      	strb	r3, [r7, #28]
    uint8_t timeout = 0;
 8006d52:	2300      	movs	r3, #0
 8006d54:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[20];

    /* Start the FOC process */
    rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &cmd, 1, dev);
 8006d56:	f107 011c 	add.w	r1, r7, #28
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	207e      	movs	r0, #126	; 0x7e
 8006d60:	f7fc ff14 	bl	8003b8c <bmi160_set_regs>
 8006d64:	4603      	mov	r3, r0
 8006d66:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 8006d68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d141      	bne.n	8006df4 <trigger_foc+0xb4>
    {
        /* Check the FOC status*/
        rslt = get_foc_status(&foc_status, dev);
 8006d70:	f107 031d 	add.w	r3, r7, #29
 8006d74:	6839      	ldr	r1, [r7, #0]
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7ff ff78 	bl	8006c6c <get_foc_status>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	77fb      	strb	r3, [r7, #31]

        if ((rslt != BMI160_OK) || (foc_status != BMI160_ENABLE))
 8006d80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d112      	bne.n	8006dae <trigger_foc+0x6e>
 8006d88:	7f7b      	ldrb	r3, [r7, #29]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d025      	beq.n	8006dda <trigger_foc+0x9a>
        {
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 8006d8e:	e00e      	b.n	8006dae <trigger_foc+0x6e>
            {
                /* Maximum time of 250ms is given in 10
                 * steps of 25ms each - 250ms refer datasheet 2.9.1 */
                dev->delay_ms(25);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	2019      	movs	r0, #25
 8006d96:	4798      	blx	r3

                /* Check the FOC status*/
                rslt = get_foc_status(&foc_status, dev);
 8006d98:	f107 031d 	add.w	r3, r7, #29
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff ff64 	bl	8006c6c <get_foc_status>
 8006da4:	4603      	mov	r3, r0
 8006da6:	77fb      	strb	r3, [r7, #31]
                timeout++;
 8006da8:	7fbb      	ldrb	r3, [r7, #30]
 8006daa:	3301      	adds	r3, #1
 8006dac:	77bb      	strb	r3, [r7, #30]
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 8006dae:	7f7b      	ldrb	r3, [r7, #29]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d002      	beq.n	8006dba <trigger_foc+0x7a>
 8006db4:	7fbb      	ldrb	r3, [r7, #30]
 8006db6:	2b1f      	cmp	r3, #31
 8006db8:	d9ea      	bls.n	8006d90 <trigger_foc+0x50>
            }

            if ((rslt == BMI160_OK) && (foc_status == BMI160_ENABLE))
 8006dba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d109      	bne.n	8006dd6 <trigger_foc+0x96>
 8006dc2:	7f7b      	ldrb	r3, [r7, #29]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d106      	bne.n	8006dd6 <trigger_foc+0x96>
            {
                /* Get offset values from sensor */
                rslt = bmi160_get_offsets(offset, dev);
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7fd f999 	bl	8004102 <bmi160_get_offsets>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	77fb      	strb	r3, [r7, #31]
 8006dd4:	e001      	b.n	8006dda <trigger_foc+0x9a>
            }
            else
            {
                /* FOC failure case */
                rslt = BMI160_E_FOC_FAILURE;
 8006dd6:	23f5      	movs	r3, #245	; 0xf5
 8006dd8:	77fb      	strb	r3, [r7, #31]
            }
        }

        if (rslt == BMI160_OK)
 8006dda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d108      	bne.n	8006df4 <trigger_foc+0xb4>
        {
            /* Read registers 0x04-0x17 */
            rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 20, dev);
 8006de2:	f107 0108 	add.w	r1, r7, #8
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2214      	movs	r2, #20
 8006dea:	200c      	movs	r0, #12
 8006dec:	f7fc fe9b 	bl	8003b26 <bmi160_get_regs>
 8006df0:	4603      	mov	r3, r0
 8006df2:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8006df4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3720      	adds	r7, #32
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <BMI160_init>:
uint8_t BMI160_Ascale_bit, BMI160_Gscale_bit;

float bmi160_aRes, bmi160_gRes;

int8_t BMI160_init(BMI160_t *DataStruct)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]

	int8_t rslt;

	set_bmi160_Ares();
 8006e08:	f000 f978 	bl	80070fc <set_bmi160_Ares>
	set_bmi160_Gres();
 8006e0c:	f000 f9a0 	bl	8007150 <set_bmi160_Gres>
	get_bmi160_Ares();
 8006e10:	f000 f9ce 	bl	80071b0 <get_bmi160_Ares>
	get_bmi160_Gres();
 8006e14:	f000 fa02 	bl	800721c <get_bmi160_Gres>

    sensor.id = 0;
 8006e18:	4b53      	ldr	r3, [pc, #332]	; (8006f68 <BMI160_init+0x168>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	705a      	strb	r2, [r3, #1]
    sensor.intf = BMI160_I2C_INTF;
 8006e1e:	4b52      	ldr	r3, [pc, #328]	; (8006f68 <BMI160_init+0x168>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	709a      	strb	r2, [r3, #2]
    sensor.read = SensorAPI_I2Cx_Read;
 8006e24:	4b50      	ldr	r3, [pc, #320]	; (8006f68 <BMI160_init+0x168>)
 8006e26:	4a51      	ldr	r2, [pc, #324]	; (8006f6c <BMI160_init+0x16c>)
 8006e28:	61da      	str	r2, [r3, #28]
    sensor.write = SensorAPI_I2Cx_Write;
 8006e2a:	4b4f      	ldr	r3, [pc, #316]	; (8006f68 <BMI160_init+0x168>)
 8006e2c:	4a50      	ldr	r2, [pc, #320]	; (8006f70 <BMI160_init+0x170>)
 8006e2e:	621a      	str	r2, [r3, #32]
    sensor.delay_ms = HAL_Delay;
 8006e30:	4b4d      	ldr	r3, [pc, #308]	; (8006f68 <BMI160_init+0x168>)
 8006e32:	4a50      	ldr	r2, [pc, #320]	; (8006f74 <BMI160_init+0x174>)
 8006e34:	625a      	str	r2, [r3, #36]	; 0x24
    sensor.read_write_len = 32;
 8006e36:	4b4c      	ldr	r3, [pc, #304]	; (8006f68 <BMI160_init+0x168>)
 8006e38:	2220      	movs	r2, #32
 8006e3a:	851a      	strh	r2, [r3, #40]	; 0x28

    rslt = bmi160_soft_reset(&sensor);
 8006e3c:	484a      	ldr	r0, [pc, #296]	; (8006f68 <BMI160_init+0x168>)
 8006e3e:	f7fc ff56 	bl	8003cee <bmi160_soft_reset>
 8006e42:	4603      	mov	r3, r0
 8006e44:	73fb      	strb	r3, [r7, #15]
    sensor.delay_ms(500);
 8006e46:	4b48      	ldr	r3, [pc, #288]	; (8006f68 <BMI160_init+0x168>)
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006e4e:	4798      	blx	r3
    rslt = bmi160_init(&sensor);
 8006e50:	4845      	ldr	r0, [pc, #276]	; (8006f68 <BMI160_init+0x168>)
 8006e52:	f7fc fefe 	bl	8003c52 <bmi160_init>
 8006e56:	4603      	mov	r3, r0
 8006e58:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    uint8_t reg_addr = BMI160_CHIP_ID_ADDR;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	73bb      	strb	r3, [r7, #14]
    uint8_t chipID = 0;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	72fb      	strb	r3, [r7, #11]
    uint16_t len = 1;
 8006e62:	2301      	movs	r3, #1
 8006e64:	81bb      	strh	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &chipID, len, &sensor);
 8006e66:	89ba      	ldrh	r2, [r7, #12]
 8006e68:	f107 010b 	add.w	r1, r7, #11
 8006e6c:	7bb8      	ldrb	r0, [r7, #14]
 8006e6e:	4b3e      	ldr	r3, [pc, #248]	; (8006f68 <BMI160_init+0x168>)
 8006e70:	f7fc fe59 	bl	8003b26 <bmi160_get_regs>
 8006e74:	4603      	mov	r3, r0
 8006e76:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    /* Select the Output data rate, range of accelerometer sensor */
    sensor.accel_cfg.odr = BMI160_ACCEL_ODR_400HZ; //BMI160_ACCEL_ODR_400HZ
 8006e78:	4b3b      	ldr	r3, [pc, #236]	; (8006f68 <BMI160_init+0x168>)
 8006e7a:	220a      	movs	r2, #10
 8006e7c:	715a      	strb	r2, [r3, #5]
    sensor.delay_ms(100);
 8006e7e:	4b3a      	ldr	r3, [pc, #232]	; (8006f68 <BMI160_init+0x168>)
 8006e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e82:	2064      	movs	r0, #100	; 0x64
 8006e84:	4798      	blx	r3
    sensor.accel_cfg.range = BMI160_Ascale_bit;
 8006e86:	4b3c      	ldr	r3, [pc, #240]	; (8006f78 <BMI160_init+0x178>)
 8006e88:	781a      	ldrb	r2, [r3, #0]
 8006e8a:	4b37      	ldr	r3, [pc, #220]	; (8006f68 <BMI160_init+0x168>)
 8006e8c:	719a      	strb	r2, [r3, #6]
    sensor.delay_ms(100);
 8006e8e:	4b36      	ldr	r3, [pc, #216]	; (8006f68 <BMI160_init+0x168>)
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	2064      	movs	r0, #100	; 0x64
 8006e94:	4798      	blx	r3

    /* Select the power mode of accelerometer sensor */
    sensor.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 8006e96:	4b34      	ldr	r3, [pc, #208]	; (8006f68 <BMI160_init+0x168>)
 8006e98:	2211      	movs	r2, #17
 8006e9a:	711a      	strb	r2, [r3, #4]
    sensor.delay_ms(100);
 8006e9c:	4b32      	ldr	r3, [pc, #200]	; (8006f68 <BMI160_init+0x168>)
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	2064      	movs	r0, #100	; 0x64
 8006ea2:	4798      	blx	r3
    sensor.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4; //BMI160_ACCEL_BW_OSR2_AVG2
 8006ea4:	4b30      	ldr	r3, [pc, #192]	; (8006f68 <BMI160_init+0x168>)
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	71da      	strb	r2, [r3, #7]
    sensor.delay_ms(100);
 8006eaa:	4b2f      	ldr	r3, [pc, #188]	; (8006f68 <BMI160_init+0x168>)
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	2064      	movs	r0, #100	; 0x64
 8006eb0:	4798      	blx	r3


    /* Select the Output data rate, range of Gyroscope sensor */
    sensor.gyro_cfg.odr = BMI160_GYRO_ODR_400HZ; //BMI160_GYRO_ODR_400HZ
 8006eb2:	4b2d      	ldr	r3, [pc, #180]	; (8006f68 <BMI160_init+0x168>)
 8006eb4:	220a      	movs	r2, #10
 8006eb6:	735a      	strb	r2, [r3, #13]
    sensor.delay_ms(100);
 8006eb8:	4b2b      	ldr	r3, [pc, #172]	; (8006f68 <BMI160_init+0x168>)
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	2064      	movs	r0, #100	; 0x64
 8006ebe:	4798      	blx	r3
    sensor.gyro_cfg.range = BMI160_Gscale_bit; // BMI160_GYRO_RANGE_250_DPS
 8006ec0:	4b2e      	ldr	r3, [pc, #184]	; (8006f7c <BMI160_init+0x17c>)
 8006ec2:	781a      	ldrb	r2, [r3, #0]
 8006ec4:	4b28      	ldr	r3, [pc, #160]	; (8006f68 <BMI160_init+0x168>)
 8006ec6:	739a      	strb	r2, [r3, #14]
    sensor.delay_ms(100);
 8006ec8:	4b27      	ldr	r3, [pc, #156]	; (8006f68 <BMI160_init+0x168>)
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	2064      	movs	r0, #100	; 0x64
 8006ece:	4798      	blx	r3

    /* Select the power mode of Gyroscope sensor */
    sensor.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 8006ed0:	4b25      	ldr	r3, [pc, #148]	; (8006f68 <BMI160_init+0x168>)
 8006ed2:	2215      	movs	r2, #21
 8006ed4:	731a      	strb	r2, [r3, #12]
    sensor.delay_ms(100);
 8006ed6:	4b24      	ldr	r3, [pc, #144]	; (8006f68 <BMI160_init+0x168>)
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	2064      	movs	r0, #100	; 0x64
 8006edc:	4798      	blx	r3
    sensor.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE; //BMI160_GYRO_BW_NORMAL_MODE
 8006ede:	4b22      	ldr	r3, [pc, #136]	; (8006f68 <BMI160_init+0x168>)
 8006ee0:	2202      	movs	r2, #2
 8006ee2:	73da      	strb	r2, [r3, #15]
    sensor.delay_ms(100);
 8006ee4:	4b20      	ldr	r3, [pc, #128]	; (8006f68 <BMI160_init+0x168>)
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee8:	2064      	movs	r0, #100	; 0x64
 8006eea:	4798      	blx	r3

    /* Set the sensor configuration */
    rslt = bmi160_set_sens_conf(&sensor);
 8006eec:	481e      	ldr	r0, [pc, #120]	; (8006f68 <BMI160_init+0x168>)
 8006eee:	f7fc ff39 	bl	8003d64 <bmi160_set_sens_conf>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    rslt = start_foc();
 8006ef6:	f000 f845 	bl	8006f84 <start_foc>
 8006efa:	4603      	mov	r3, r0
 8006efc:	73fb      	strb	r3, [r7, #15]

	/********************************************************************/

    // Select the Interrupt channel/pin
    int_config.int_channel = BMI160_INT_CHANNEL_1;// Interrupt channel/pin 1
 8006efe:	4b20      	ldr	r3, [pc, #128]	; (8006f80 <BMI160_init+0x180>)
 8006f00:	2201      	movs	r2, #1
 8006f02:	701a      	strb	r2, [r3, #0]

    // Select the Interrupt type
    int_config.int_type = BMI160_ACC_GYRO_DATA_RDY_INT;// Choosing Any motion interrupt
 8006f04:	4b1e      	ldr	r3, [pc, #120]	; (8006f80 <BMI160_init+0x180>)
 8006f06:	220a      	movs	r2, #10
 8006f08:	705a      	strb	r2, [r3, #1]
    // Select the interrupt channel/pin settings
    int_config.int_pin_settg.output_en = BMI160_ENABLE;// Enabling interrupt pins to act as output pin
 8006f0a:	4a1d      	ldr	r2, [pc, #116]	; (8006f80 <BMI160_init+0x180>)
 8006f0c:	7893      	ldrb	r3, [r2, #2]
 8006f0e:	f043 0301 	orr.w	r3, r3, #1
 8006f12:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_mode = BMI160_DISABLE;// Choosing push-pull mode for interrupt pin
 8006f14:	4a1a      	ldr	r2, [pc, #104]	; (8006f80 <BMI160_init+0x180>)
 8006f16:	7893      	ldrb	r3, [r2, #2]
 8006f18:	f36f 0341 	bfc	r3, #1, #1
 8006f1c:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_type = BMI160_DISABLE;// Choosing active low output
 8006f1e:	4a18      	ldr	r2, [pc, #96]	; (8006f80 <BMI160_init+0x180>)
 8006f20:	7893      	ldrb	r3, [r2, #2]
 8006f22:	f36f 0382 	bfc	r3, #2, #1
 8006f26:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.edge_ctrl = BMI160_ENABLE;// Choosing edge triggered output
 8006f28:	4a15      	ldr	r2, [pc, #84]	; (8006f80 <BMI160_init+0x180>)
 8006f2a:	7893      	ldrb	r3, [r2, #2]
 8006f2c:	f043 0308 	orr.w	r3, r3, #8
 8006f30:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.input_en = BMI160_DISABLE;// Disabling interrupt pin to act as input
 8006f32:	4a13      	ldr	r2, [pc, #76]	; (8006f80 <BMI160_init+0x180>)
 8006f34:	7893      	ldrb	r3, [r2, #2]
 8006f36:	f36f 1304 	bfc	r3, #4, #1
 8006f3a:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.latch_dur = BMI160_LATCH_DUR_NONE;// non-latched output
 8006f3c:	4a10      	ldr	r2, [pc, #64]	; (8006f80 <BMI160_init+0x180>)
 8006f3e:	8853      	ldrh	r3, [r2, #2]
 8006f40:	f36f 1348 	bfc	r3, #5, #4
 8006f44:	8053      	strh	r3, [r2, #2]

    //Set the Any-motion interrupt */
    rslt = bmi160_set_int_config(&int_config, &sensor); /* sensor is an instance of the structure bmi160_dev  */
 8006f46:	4908      	ldr	r1, [pc, #32]	; (8006f68 <BMI160_init+0x168>)
 8006f48:	480d      	ldr	r0, [pc, #52]	; (8006f80 <BMI160_init+0x180>)
 8006f4a:	f7fc ffcd 	bl	8003ee8 <bmi160_set_int_config>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	73fb      	strb	r3, [r7, #15]

    DataStruct->INIT_OK_i8 = rslt;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	7bfa      	ldrb	r2, [r7, #15]
 8006f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    return rslt;
 8006f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	2000030c 	.word	0x2000030c
 8006f6c:	080072a5 	.word	0x080072a5
 8006f70:	080072f9 	.word	0x080072f9
 8006f74:	0800ab99 	.word	0x0800ab99
 8006f78:	2000036e 	.word	0x2000036e
 8006f7c:	2000036f 	.word	0x2000036f
 8006f80:	20000364 	.word	0x20000364

08006f84 <start_foc>:

int8_t start_foc()
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
	int8_t rslt = 0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	71fb      	strb	r3, [r7, #7]

	/* Enable FOC for accel with target values of z = 1g ; x,y as 0g */
	foc_conf.acc_off_en = BMI160_ENABLE;
 8006f8e:	4b13      	ldr	r3, [pc, #76]	; (8006fdc <start_foc+0x58>)
 8006f90:	2201      	movs	r2, #1
 8006f92:	711a      	strb	r2, [r3, #4]
	foc_conf.foc_acc_x  = BMI160_FOC_ACCEL_0G;
 8006f94:	4b11      	ldr	r3, [pc, #68]	; (8006fdc <start_foc+0x58>)
 8006f96:	2203      	movs	r2, #3
 8006f98:	705a      	strb	r2, [r3, #1]
	foc_conf.foc_acc_y  = BMI160_FOC_ACCEL_0G;
 8006f9a:	4b10      	ldr	r3, [pc, #64]	; (8006fdc <start_foc+0x58>)
 8006f9c:	2203      	movs	r2, #3
 8006f9e:	709a      	strb	r2, [r3, #2]
	foc_conf.foc_acc_z  = BMI160_FOC_ACCEL_POSITIVE_G;
 8006fa0:	4b0e      	ldr	r3, [pc, #56]	; (8006fdc <start_foc+0x58>)
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	70da      	strb	r2, [r3, #3]
	sensor.delay_ms(100);
 8006fa6:	4b0e      	ldr	r3, [pc, #56]	; (8006fe0 <start_foc+0x5c>)
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006faa:	2064      	movs	r0, #100	; 0x64
 8006fac:	4798      	blx	r3

	/* Enable FOC for gyro */
	foc_conf.foc_gyr_en = BMI160_ENABLE;
 8006fae:	4b0b      	ldr	r3, [pc, #44]	; (8006fdc <start_foc+0x58>)
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	701a      	strb	r2, [r3, #0]
	foc_conf.gyro_off_en = BMI160_ENABLE;
 8006fb4:	4b09      	ldr	r3, [pc, #36]	; (8006fdc <start_foc+0x58>)
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	715a      	strb	r2, [r3, #5]
	sensor.delay_ms(100);
 8006fba:	4b09      	ldr	r3, [pc, #36]	; (8006fe0 <start_foc+0x5c>)
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	2064      	movs	r0, #100	; 0x64
 8006fc0:	4798      	blx	r3

	rslt = bmi160_start_foc(&foc_conf, &offsets, &sensor);
 8006fc2:	4a07      	ldr	r2, [pc, #28]	; (8006fe0 <start_foc+0x5c>)
 8006fc4:	4907      	ldr	r1, [pc, #28]	; (8006fe4 <start_foc+0x60>)
 8006fc6:	4805      	ldr	r0, [pc, #20]	; (8006fdc <start_foc+0x58>)
 8006fc8:	f7fd f81a 	bl	8004000 <bmi160_start_foc>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	71fb      	strb	r3, [r7, #7]

	return rslt;
 8006fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	20000350 	.word	0x20000350
 8006fe0:	2000030c 	.word	0x2000030c
 8006fe4:	20000358 	.word	0x20000358

08006fe8 <bmi160ReadAccelGyro>:

int8_t bmi160ReadAccelGyro(BMI160_t *DataStruct)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08a      	sub	sp, #40	; 0x28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	float ax, ay, az, gx, gy, gz;

	rslt = bmi160_get_sensor_data((BMI160_ACCEL_SEL | BMI160_GYRO_SEL), &accel, &gyro, &sensor);
 8006ff0:	4b3d      	ldr	r3, [pc, #244]	; (80070e8 <bmi160ReadAccelGyro+0x100>)
 8006ff2:	4a3e      	ldr	r2, [pc, #248]	; (80070ec <bmi160ReadAccelGyro+0x104>)
 8006ff4:	493e      	ldr	r1, [pc, #248]	; (80070f0 <bmi160ReadAccelGyro+0x108>)
 8006ff6:	2003      	movs	r0, #3
 8006ff8:	f7fc ff0e 	bl	8003e18 <bmi160_get_sensor_data>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	ax = (float)accel.x / bmi160_aRes;
 8007002:	4b3b      	ldr	r3, [pc, #236]	; (80070f0 <bmi160ReadAccelGyro+0x108>)
 8007004:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007008:	4618      	mov	r0, r3
 800700a:	f7f9 fe67 	bl	8000cdc <__aeabi_i2f>
 800700e:	4602      	mov	r2, r0
 8007010:	4b38      	ldr	r3, [pc, #224]	; (80070f4 <bmi160ReadAccelGyro+0x10c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4619      	mov	r1, r3
 8007016:	4610      	mov	r0, r2
 8007018:	f7f9 ff68 	bl	8000eec <__aeabi_fdiv>
 800701c:	4603      	mov	r3, r0
 800701e:	623b      	str	r3, [r7, #32]
	ay = (float)accel.y / bmi160_aRes;
 8007020:	4b33      	ldr	r3, [pc, #204]	; (80070f0 <bmi160ReadAccelGyro+0x108>)
 8007022:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007026:	4618      	mov	r0, r3
 8007028:	f7f9 fe58 	bl	8000cdc <__aeabi_i2f>
 800702c:	4602      	mov	r2, r0
 800702e:	4b31      	ldr	r3, [pc, #196]	; (80070f4 <bmi160ReadAccelGyro+0x10c>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4619      	mov	r1, r3
 8007034:	4610      	mov	r0, r2
 8007036:	f7f9 ff59 	bl	8000eec <__aeabi_fdiv>
 800703a:	4603      	mov	r3, r0
 800703c:	61fb      	str	r3, [r7, #28]
	az = (float)accel.z / bmi160_aRes;
 800703e:	4b2c      	ldr	r3, [pc, #176]	; (80070f0 <bmi160ReadAccelGyro+0x108>)
 8007040:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007044:	4618      	mov	r0, r3
 8007046:	f7f9 fe49 	bl	8000cdc <__aeabi_i2f>
 800704a:	4602      	mov	r2, r0
 800704c:	4b29      	ldr	r3, [pc, #164]	; (80070f4 <bmi160ReadAccelGyro+0x10c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4619      	mov	r1, r3
 8007052:	4610      	mov	r0, r2
 8007054:	f7f9 ff4a 	bl	8000eec <__aeabi_fdiv>
 8007058:	4603      	mov	r3, r0
 800705a:	61bb      	str	r3, [r7, #24]

	gx = (float)gyro.x / bmi160_gRes;
 800705c:	4b23      	ldr	r3, [pc, #140]	; (80070ec <bmi160ReadAccelGyro+0x104>)
 800705e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007062:	4618      	mov	r0, r3
 8007064:	f7f9 fe3a 	bl	8000cdc <__aeabi_i2f>
 8007068:	4602      	mov	r2, r0
 800706a:	4b23      	ldr	r3, [pc, #140]	; (80070f8 <bmi160ReadAccelGyro+0x110>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4619      	mov	r1, r3
 8007070:	4610      	mov	r0, r2
 8007072:	f7f9 ff3b 	bl	8000eec <__aeabi_fdiv>
 8007076:	4603      	mov	r3, r0
 8007078:	617b      	str	r3, [r7, #20]
	gy = (float)gyro.y / bmi160_gRes;
 800707a:	4b1c      	ldr	r3, [pc, #112]	; (80070ec <bmi160ReadAccelGyro+0x104>)
 800707c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007080:	4618      	mov	r0, r3
 8007082:	f7f9 fe2b 	bl	8000cdc <__aeabi_i2f>
 8007086:	4602      	mov	r2, r0
 8007088:	4b1b      	ldr	r3, [pc, #108]	; (80070f8 <bmi160ReadAccelGyro+0x110>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4619      	mov	r1, r3
 800708e:	4610      	mov	r0, r2
 8007090:	f7f9 ff2c 	bl	8000eec <__aeabi_fdiv>
 8007094:	4603      	mov	r3, r0
 8007096:	613b      	str	r3, [r7, #16]
	gz = (float)gyro.z / bmi160_gRes;
 8007098:	4b14      	ldr	r3, [pc, #80]	; (80070ec <bmi160ReadAccelGyro+0x104>)
 800709a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800709e:	4618      	mov	r0, r3
 80070a0:	f7f9 fe1c 	bl	8000cdc <__aeabi_i2f>
 80070a4:	4602      	mov	r2, r0
 80070a6:	4b14      	ldr	r3, [pc, #80]	; (80070f8 <bmi160ReadAccelGyro+0x110>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4619      	mov	r1, r3
 80070ac:	4610      	mov	r0, r2
 80070ae:	f7f9 ff1d 	bl	8000eec <__aeabi_fdiv>
 80070b2:	4603      	mov	r3, r0
 80070b4:	60fb      	str	r3, [r7, #12]


	DataStruct->BMI160_Accel_f32[0] = ax;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a3a      	ldr	r2, [r7, #32]
 80070ba:	601a      	str	r2, [r3, #0]
	DataStruct->BMI160_Accel_f32[1] = ay;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	69fa      	ldr	r2, [r7, #28]
 80070c0:	605a      	str	r2, [r3, #4]
	DataStruct->BMI160_Accel_f32[2] = az;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	609a      	str	r2, [r3, #8]

	DataStruct->BMI160_Gyro_f32[0] = gx;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	60da      	str	r2, [r3, #12]
	DataStruct->BMI160_Gyro_f32[1] = gy;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	611a      	str	r2, [r3, #16]
	DataStruct->BMI160_Gyro_f32[2] = gz;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	615a      	str	r2, [r3, #20]



	return rslt;
 80070da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3728      	adds	r7, #40	; 0x28
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	2000030c 	.word	0x2000030c
 80070ec:	20000344 	.word	0x20000344
 80070f0:	20000338 	.word	0x20000338
 80070f4:	20000370 	.word	0x20000370
 80070f8:	20000374 	.word	0x20000374

080070fc <set_bmi160_Ares>:

void set_bmi160_Ares()
{
 80070fc:	b480      	push	{r7}
 80070fe:	af00      	add	r7, sp, #0
	switch (BMI160_Asens)
 8007100:	4b11      	ldr	r3, [pc, #68]	; (8007148 <set_bmi160_Ares+0x4c>)
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	3b01      	subs	r3, #1
 8007106:	2b03      	cmp	r3, #3
 8007108:	d81a      	bhi.n	8007140 <set_bmi160_Ares+0x44>
 800710a:	a201      	add	r2, pc, #4	; (adr r2, 8007110 <set_bmi160_Ares+0x14>)
 800710c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007110:	08007121 	.word	0x08007121
 8007114:	08007129 	.word	0x08007129
 8007118:	08007131 	.word	0x08007131
 800711c:	08007139 	.word	0x08007139
	{
		case AFS_2G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_2G;
 8007120:	4b0a      	ldr	r3, [pc, #40]	; (800714c <set_bmi160_Ares+0x50>)
 8007122:	2203      	movs	r2, #3
 8007124:	701a      	strb	r2, [r3, #0]
			break;
 8007126:	e00b      	b.n	8007140 <set_bmi160_Ares+0x44>
		case AFS_4G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_4G;
 8007128:	4b08      	ldr	r3, [pc, #32]	; (800714c <set_bmi160_Ares+0x50>)
 800712a:	2205      	movs	r2, #5
 800712c:	701a      	strb	r2, [r3, #0]
			break;
 800712e:	e007      	b.n	8007140 <set_bmi160_Ares+0x44>
		case AFS_8G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_8G;
 8007130:	4b06      	ldr	r3, [pc, #24]	; (800714c <set_bmi160_Ares+0x50>)
 8007132:	2208      	movs	r2, #8
 8007134:	701a      	strb	r2, [r3, #0]
			break;
 8007136:	e003      	b.n	8007140 <set_bmi160_Ares+0x44>
		case AFS_16G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_16G;
 8007138:	4b04      	ldr	r3, [pc, #16]	; (800714c <set_bmi160_Ares+0x50>)
 800713a:	220c      	movs	r2, #12
 800713c:	701a      	strb	r2, [r3, #0]
			break;
 800713e:	bf00      	nop
	}
}
 8007140:	bf00      	nop
 8007142:	46bd      	mov	sp, r7
 8007144:	bc80      	pop	{r7}
 8007146:	4770      	bx	lr
 8007148:	20000000 	.word	0x20000000
 800714c:	2000036e 	.word	0x2000036e

08007150 <set_bmi160_Gres>:

void set_bmi160_Gres()
{
 8007150:	b480      	push	{r7}
 8007152:	af00      	add	r7, sp, #0
	switch (BMI160_Gsens)
 8007154:	4b14      	ldr	r3, [pc, #80]	; (80071a8 <set_bmi160_Gres+0x58>)
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	3b01      	subs	r3, #1
 800715a:	2b04      	cmp	r3, #4
 800715c:	d820      	bhi.n	80071a0 <set_bmi160_Gres+0x50>
 800715e:	a201      	add	r2, pc, #4	; (adr r2, 8007164 <set_bmi160_Gres+0x14>)
 8007160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007164:	08007179 	.word	0x08007179
 8007168:	08007181 	.word	0x08007181
 800716c:	08007189 	.word	0x08007189
 8007170:	08007191 	.word	0x08007191
 8007174:	08007199 	.word	0x08007199
	{
		case GFS_125DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_125_DPS;
 8007178:	4b0c      	ldr	r3, [pc, #48]	; (80071ac <set_bmi160_Gres+0x5c>)
 800717a:	2204      	movs	r2, #4
 800717c:	701a      	strb	r2, [r3, #0]
			break;
 800717e:	e00f      	b.n	80071a0 <set_bmi160_Gres+0x50>
		case GFS_250DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_250_DPS;
 8007180:	4b0a      	ldr	r3, [pc, #40]	; (80071ac <set_bmi160_Gres+0x5c>)
 8007182:	2203      	movs	r2, #3
 8007184:	701a      	strb	r2, [r3, #0]
			break;
 8007186:	e00b      	b.n	80071a0 <set_bmi160_Gres+0x50>
		case GFS_500DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_500_DPS;
 8007188:	4b08      	ldr	r3, [pc, #32]	; (80071ac <set_bmi160_Gres+0x5c>)
 800718a:	2202      	movs	r2, #2
 800718c:	701a      	strb	r2, [r3, #0]
			break;
 800718e:	e007      	b.n	80071a0 <set_bmi160_Gres+0x50>
		case GFS_1000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_1000_DPS;
 8007190:	4b06      	ldr	r3, [pc, #24]	; (80071ac <set_bmi160_Gres+0x5c>)
 8007192:	2201      	movs	r2, #1
 8007194:	701a      	strb	r2, [r3, #0]
			break;
 8007196:	e003      	b.n	80071a0 <set_bmi160_Gres+0x50>
		case GFS_2000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_2000_DPS;
 8007198:	4b04      	ldr	r3, [pc, #16]	; (80071ac <set_bmi160_Gres+0x5c>)
 800719a:	2200      	movs	r2, #0
 800719c:	701a      	strb	r2, [r3, #0]
			break;
 800719e:	bf00      	nop
	}
}
 80071a0:	bf00      	nop
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bc80      	pop	{r7}
 80071a6:	4770      	bx	lr
 80071a8:	20000001 	.word	0x20000001
 80071ac:	2000036f 	.word	0x2000036f

080071b0 <get_bmi160_Ares>:

void get_bmi160_Ares()
{
 80071b0:	b480      	push	{r7}
 80071b2:	af00      	add	r7, sp, #0
	switch (BMI160_Ascale)
 80071b4:	4b17      	ldr	r3, [pc, #92]	; (8007214 <get_bmi160_Ares+0x64>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	d826      	bhi.n	800720a <get_bmi160_Ares+0x5a>
 80071bc:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <get_bmi160_Ares+0x14>)
 80071be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c2:	bf00      	nop
 80071c4:	080071d9 	.word	0x080071d9
 80071c8:	080071e3 	.word	0x080071e3
 80071cc:	080071ed 	.word	0x080071ed
 80071d0:	080071f7 	.word	0x080071f7
 80071d4:	08007201 	.word	0x08007201
	{
		case AFS_RAW:
			bmi160_aRes = 1.0f;
 80071d8:	4b0f      	ldr	r3, [pc, #60]	; (8007218 <get_bmi160_Ares+0x68>)
 80071da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80071de:	601a      	str	r2, [r3, #0]
			break;
 80071e0:	e013      	b.n	800720a <get_bmi160_Ares+0x5a>
		case AFS_2G:
			bmi160_aRes = 16384.0f;
 80071e2:	4b0d      	ldr	r3, [pc, #52]	; (8007218 <get_bmi160_Ares+0x68>)
 80071e4:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80071e8:	601a      	str	r2, [r3, #0]
			break;
 80071ea:	e00e      	b.n	800720a <get_bmi160_Ares+0x5a>
		case AFS_4G:
			bmi160_aRes = 8192.0f;
 80071ec:	4b0a      	ldr	r3, [pc, #40]	; (8007218 <get_bmi160_Ares+0x68>)
 80071ee:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80071f2:	601a      	str	r2, [r3, #0]
			break;
 80071f4:	e009      	b.n	800720a <get_bmi160_Ares+0x5a>
		case AFS_8G:
			bmi160_aRes = 4096.0f;
 80071f6:	4b08      	ldr	r3, [pc, #32]	; (8007218 <get_bmi160_Ares+0x68>)
 80071f8:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80071fc:	601a      	str	r2, [r3, #0]
			break;
 80071fe:	e004      	b.n	800720a <get_bmi160_Ares+0x5a>
		case AFS_16G:
			bmi160_aRes = 2048.0f;
 8007200:	4b05      	ldr	r3, [pc, #20]	; (8007218 <get_bmi160_Ares+0x68>)
 8007202:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8007206:	601a      	str	r2, [r3, #0]
			break;
 8007208:	bf00      	nop
	}
}
 800720a:	bf00      	nop
 800720c:	46bd      	mov	sp, r7
 800720e:	bc80      	pop	{r7}
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	20000002 	.word	0x20000002
 8007218:	20000370 	.word	0x20000370

0800721c <get_bmi160_Gres>:

void get_bmi160_Gres()
{
 800721c:	b480      	push	{r7}
 800721e:	af00      	add	r7, sp, #0
	switch (BMI160_Gscale)
 8007220:	4b18      	ldr	r3, [pc, #96]	; (8007284 <get_bmi160_Gres+0x68>)
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	2b05      	cmp	r3, #5
 8007226:	d828      	bhi.n	800727a <get_bmi160_Gres+0x5e>
 8007228:	a201      	add	r2, pc, #4	; (adr r2, 8007230 <get_bmi160_Gres+0x14>)
 800722a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722e:	bf00      	nop
 8007230:	08007249 	.word	0x08007249
 8007234:	08007253 	.word	0x08007253
 8007238:	0800725b 	.word	0x0800725b
 800723c:	08007263 	.word	0x08007263
 8007240:	0800726b 	.word	0x0800726b
 8007244:	08007273 	.word	0x08007273
	{
		case GFS_RAW:
			bmi160_aRes = 1.0f;
 8007248:	4b0f      	ldr	r3, [pc, #60]	; (8007288 <get_bmi160_Gres+0x6c>)
 800724a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800724e:	601a      	str	r2, [r3, #0]
			break;
 8007250:	e013      	b.n	800727a <get_bmi160_Gres+0x5e>
		case GFS_125DPS:
			bmi160_gRes = 262.4f;
 8007252:	4b0e      	ldr	r3, [pc, #56]	; (800728c <get_bmi160_Gres+0x70>)
 8007254:	4a0e      	ldr	r2, [pc, #56]	; (8007290 <get_bmi160_Gres+0x74>)
 8007256:	601a      	str	r2, [r3, #0]
			break;
 8007258:	e00f      	b.n	800727a <get_bmi160_Gres+0x5e>
		case GFS_250DPS:
			bmi160_gRes = 131.2f;
 800725a:	4b0c      	ldr	r3, [pc, #48]	; (800728c <get_bmi160_Gres+0x70>)
 800725c:	4a0d      	ldr	r2, [pc, #52]	; (8007294 <get_bmi160_Gres+0x78>)
 800725e:	601a      	str	r2, [r3, #0]
			break;
 8007260:	e00b      	b.n	800727a <get_bmi160_Gres+0x5e>
		case GFS_500DPS:
			bmi160_gRes = 65.6f;
 8007262:	4b0a      	ldr	r3, [pc, #40]	; (800728c <get_bmi160_Gres+0x70>)
 8007264:	4a0c      	ldr	r2, [pc, #48]	; (8007298 <get_bmi160_Gres+0x7c>)
 8007266:	601a      	str	r2, [r3, #0]
			break;
 8007268:	e007      	b.n	800727a <get_bmi160_Gres+0x5e>
		case GFS_1000DPS:
			bmi160_gRes = 32.8f;
 800726a:	4b08      	ldr	r3, [pc, #32]	; (800728c <get_bmi160_Gres+0x70>)
 800726c:	4a0b      	ldr	r2, [pc, #44]	; (800729c <get_bmi160_Gres+0x80>)
 800726e:	601a      	str	r2, [r3, #0]
			break;
 8007270:	e003      	b.n	800727a <get_bmi160_Gres+0x5e>
		case GFS_2000DPS:
			bmi160_gRes = 16.4f;
 8007272:	4b06      	ldr	r3, [pc, #24]	; (800728c <get_bmi160_Gres+0x70>)
 8007274:	4a0a      	ldr	r2, [pc, #40]	; (80072a0 <get_bmi160_Gres+0x84>)
 8007276:	601a      	str	r2, [r3, #0]
			break;
 8007278:	bf00      	nop
	}
}
 800727a:	bf00      	nop
 800727c:	46bd      	mov	sp, r7
 800727e:	bc80      	pop	{r7}
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	20000003 	.word	0x20000003
 8007288:	20000370 	.word	0x20000370
 800728c:	20000374 	.word	0x20000374
 8007290:	43833333 	.word	0x43833333
 8007294:	43033333 	.word	0x43033333
 8007298:	42833333 	.word	0x42833333
 800729c:	42033333 	.word	0x42033333
 80072a0:	41833333 	.word	0x41833333

080072a4 <SensorAPI_I2Cx_Read>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af02      	add	r7, sp, #8
 80072aa:	603a      	str	r2, [r7, #0]
 80072ac:	461a      	mov	r2, r3
 80072ae:	4603      	mov	r3, r0
 80072b0:	71fb      	strb	r3, [r7, #7]
 80072b2:	460b      	mov	r3, r1
 80072b4:	71bb      	strb	r3, [r7, #6]
 80072b6:	4613      	mov	r3, r2
 80072b8:	80bb      	strh	r3, [r7, #4]
	int8_t tmp;
	tmp=HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, &reg_addr, 1, I2CTIMEOUT);
 80072ba:	1dba      	adds	r2, r7, #6
 80072bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	2301      	movs	r3, #1
 80072c4:	21d2      	movs	r1, #210	; 0xd2
 80072c6:	480b      	ldr	r0, [pc, #44]	; (80072f4 <SensorAPI_I2Cx_Read+0x50>)
 80072c8:	f004 f95a 	bl	800b580 <HAL_I2C_Master_Transmit>
 80072cc:	4603      	mov	r3, r0
 80072ce:	73fb      	strb	r3, [r7, #15]
	tmp=HAL_I2C_Master_Receive(&I2C_HANDLE, BMI160_ADDR, data, len, I2CTIMEOUT);
 80072d0:	88bb      	ldrh	r3, [r7, #4]
 80072d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80072d6:	9200      	str	r2, [sp, #0]
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	21d2      	movs	r1, #210	; 0xd2
 80072dc:	4805      	ldr	r0, [pc, #20]	; (80072f4 <SensorAPI_I2Cx_Read+0x50>)
 80072de:	f004 fa4d 	bl	800b77c <HAL_I2C_Master_Receive>
 80072e2:	4603      	mov	r3, r0
 80072e4:	73fb      	strb	r3, [r7, #15]
	return tmp;
 80072e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	200006d0 	.word	0x200006d0

080072f8 <SensorAPI_I2Cx_Write>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af02      	add	r7, sp, #8
 80072fe:	603a      	str	r2, [r7, #0]
 8007300:	461a      	mov	r2, r3
 8007302:	4603      	mov	r3, r0
 8007304:	71fb      	strb	r3, [r7, #7]
 8007306:	460b      	mov	r3, r1
 8007308:	71bb      	strb	r3, [r7, #6]
 800730a:	4613      	mov	r3, r2
 800730c:	80bb      	strh	r3, [r7, #4]
	GTXBuffer[0] = reg_addr;
 800730e:	4a0e      	ldr	r2, [pc, #56]	; (8007348 <SensorAPI_I2Cx_Write+0x50>)
 8007310:	79bb      	ldrb	r3, [r7, #6]
 8007312:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], data, len);
 8007314:	88bb      	ldrh	r3, [r7, #4]
 8007316:	461a      	mov	r2, r3
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	480c      	ldr	r0, [pc, #48]	; (800734c <SensorAPI_I2Cx_Write+0x54>)
 800731c:	f006 fb66 	bl	800d9ec <memcpy>
	int8_t tmp;
	tmp=HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, GTXBuffer, len+1, I2CTIMEOUT);
 8007320:	88bb      	ldrh	r3, [r7, #4]
 8007322:	3301      	adds	r3, #1
 8007324:	b29b      	uxth	r3, r3
 8007326:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800732a:	9200      	str	r2, [sp, #0]
 800732c:	4a06      	ldr	r2, [pc, #24]	; (8007348 <SensorAPI_I2Cx_Write+0x50>)
 800732e:	21d2      	movs	r1, #210	; 0xd2
 8007330:	4807      	ldr	r0, [pc, #28]	; (8007350 <SensorAPI_I2Cx_Write+0x58>)
 8007332:	f004 f925 	bl	800b580 <HAL_I2C_Master_Transmit>
 8007336:	4603      	mov	r3, r0
 8007338:	73fb      	strb	r3, [r7, #15]
	return tmp;
 800733a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	20000378 	.word	0x20000378
 800734c:	20000379 	.word	0x20000379
 8007350:	200006d0 	.word	0x200006d0

08007354 <E32_WaitForAux>:
static uint8_t _currentConfig[] = {0xc0,0xff,0xff,0x1,0x4,0x44};
volatile uint8_t _dataAvailable = 0;
uint8_t _disableAuxIrq = 0;

static E32_STATUS E32_WaitForAux(uint8_t state)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	4603      	mov	r3, r0
 800735c:	71fb      	strb	r3, [r7, #7]

	uint16_t count = 0;
 800735e:	2300      	movs	r3, #0
 8007360:	81fb      	strh	r3, [r7, #14]
	while(HAL_GPIO_ReadPin(_auxPort, _auxPin) != state)
 8007362:	e00b      	b.n	800737c <E32_WaitForAux+0x28>
	{
		if (count++ > 2500)
 8007364:	89fb      	ldrh	r3, [r7, #14]
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	81fa      	strh	r2, [r7, #14]
 800736a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800736e:	4293      	cmp	r3, r2
 8007370:	d901      	bls.n	8007376 <E32_WaitForAux+0x22>
			return E32_TIMEOUT;
 8007372:	2301      	movs	r3, #1
 8007374:	e013      	b.n	800739e <E32_WaitForAux+0x4a>

		HAL_Delay(1);
 8007376:	2001      	movs	r0, #1
 8007378:	f003 fc0e 	bl	800ab98 <HAL_Delay>
	while(HAL_GPIO_ReadPin(_auxPort, _auxPin) != state)
 800737c:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <E32_WaitForAux+0x54>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a0a      	ldr	r2, [pc, #40]	; (80073ac <E32_WaitForAux+0x58>)
 8007382:	8812      	ldrh	r2, [r2, #0]
 8007384:	4611      	mov	r1, r2
 8007386:	4618      	mov	r0, r3
 8007388:	f003 ff6e 	bl	800b268 <HAL_GPIO_ReadPin>
 800738c:	4603      	mov	r3, r0
 800738e:	461a      	mov	r2, r3
 8007390:	79fb      	ldrb	r3, [r7, #7]
 8007392:	4293      	cmp	r3, r2
 8007394:	d1e6      	bne.n	8007364 <E32_WaitForAux+0x10>
	}

	_dataAvailable = 0;
 8007396:	4b06      	ldr	r3, [pc, #24]	; (80073b0 <E32_WaitForAux+0x5c>)
 8007398:	2200      	movs	r2, #0
 800739a:	701a      	strb	r2, [r3, #0]
	return E32_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	2000048c 	.word	0x2000048c
 80073ac:	20000490 	.word	0x20000490
 80073b0:	20000496 	.word	0x20000496

080073b4 <E32_ConfigResponse>:

static E32_STATUS E32_ConfigResponse(uint8_t *response, uint8_t responseLength)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
	E32_STATUS error;
	if ((error = E32_WaitForAux(0)) != E32_OK)
 80073c0:	2000      	movs	r0, #0
 80073c2:	f7ff ffc7 	bl	8007354 <E32_WaitForAux>
 80073c6:	4603      	mov	r3, r0
 80073c8:	73fb      	strb	r3, [r7, #15]
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <E32_ConfigResponse+0x20>
		return error;
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
 80073d2:	e015      	b.n	8007400 <E32_ConfigResponse+0x4c>

	//HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
	HAL_StatusTypeDef status = HAL_UART_Receive(_huart, response, responseLength, 2000);
 80073d4:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <E32_ConfigResponse+0x54>)
 80073d6:	6818      	ldr	r0, [r3, #0]
 80073d8:	78fb      	ldrb	r3, [r7, #3]
 80073da:	b29a      	uxth	r2, r3
 80073dc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	f005 fca2 	bl	800cd2a <HAL_UART_Receive>
 80073e6:	4603      	mov	r3, r0
 80073e8:	73bb      	strb	r3, [r7, #14]
	if (status == HAL_TIMEOUT)
 80073ea:	7bbb      	ldrb	r3, [r7, #14]
 80073ec:	2b03      	cmp	r3, #3
 80073ee:	d101      	bne.n	80073f4 <E32_ConfigResponse+0x40>
		return E32_TIMEOUT;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e005      	b.n	8007400 <E32_ConfigResponse+0x4c>
	else if (status != HAL_OK)
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d001      	beq.n	80073fe <E32_ConfigResponse+0x4a>
		return status;
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
 80073fc:	e000      	b.n	8007400 <E32_ConfigResponse+0x4c>

	return E32_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	20000478 	.word	0x20000478

0800740c <E32_ConfigRequest>:

static E32_STATUS E32_ConfigRequest(uint8_t *request, uint8_t requestLength,
		uint8_t *response, uint8_t responseLength)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	607a      	str	r2, [r7, #4]
 8007416:	461a      	mov	r2, r3
 8007418:	460b      	mov	r3, r1
 800741a:	72fb      	strb	r3, [r7, #11]
 800741c:	4613      	mov	r3, r2
 800741e:	72bb      	strb	r3, [r7, #10]
	E32_STATUS error;

	uint8_t status = HAL_UART_Transmit(_huart, request, requestLength, 2000);
 8007420:	4b14      	ldr	r3, [pc, #80]	; (8007474 <E32_ConfigRequest+0x68>)
 8007422:	6818      	ldr	r0, [r3, #0]
 8007424:	7afb      	ldrb	r3, [r7, #11]
 8007426:	b29a      	uxth	r2, r3
 8007428:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800742c:	68f9      	ldr	r1, [r7, #12]
 800742e:	f005 fbf9 	bl	800cc24 <HAL_UART_Transmit>
 8007432:	4603      	mov	r3, r0
 8007434:	75fb      	strb	r3, [r7, #23]

	if (status == HAL_TIMEOUT)
 8007436:	7dfb      	ldrb	r3, [r7, #23]
 8007438:	2b03      	cmp	r3, #3
 800743a:	d101      	bne.n	8007440 <E32_ConfigRequest+0x34>
		return E32_TIMEOUT;
 800743c:	2301      	movs	r3, #1
 800743e:	e014      	b.n	800746a <E32_ConfigRequest+0x5e>
	else if (status != HAL_OK)
 8007440:	7dfb      	ldrb	r3, [r7, #23]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d001      	beq.n	800744a <E32_ConfigRequest+0x3e>
		return status;
 8007446:	7dfb      	ldrb	r3, [r7, #23]
 8007448:	e00f      	b.n	800746a <E32_ConfigRequest+0x5e>

	if(response != NULL)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00b      	beq.n	8007468 <E32_ConfigRequest+0x5c>
		if ((error = E32_ConfigResponse(response, responseLength)) != E32_OK)
 8007450:	7abb      	ldrb	r3, [r7, #10]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7ff ffad 	bl	80073b4 <E32_ConfigResponse>
 800745a:	4603      	mov	r3, r0
 800745c:	75bb      	strb	r3, [r7, #22]
 800745e:	7dbb      	ldrb	r3, [r7, #22]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d001      	beq.n	8007468 <E32_ConfigRequest+0x5c>
			return error;
 8007464:	7dbb      	ldrb	r3, [r7, #22]
 8007466:	e000      	b.n	800746a <E32_ConfigRequest+0x5e>

	return E32_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3718      	adds	r7, #24
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	20000478 	.word	0x20000478

08007478 <E32_GetBaud>:

static uint32_t E32_GetBaud() {
 8007478:	b480      	push	{r7}
 800747a:	af00      	add	r7, sp, #0
	return _baudRateList[(_currentConfig[3] & 0x38) >> 3];
 800747c:	4b05      	ldr	r3, [pc, #20]	; (8007494 <E32_GetBaud+0x1c>)
 800747e:	78db      	ldrb	r3, [r3, #3]
 8007480:	10db      	asrs	r3, r3, #3
 8007482:	f003 0307 	and.w	r3, r3, #7
 8007486:	4a04      	ldr	r2, [pc, #16]	; (8007498 <E32_GetBaud+0x20>)
 8007488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800748c:	4618      	mov	r0, r3
 800748e:	46bd      	mov	sp, r7
 8007490:	bc80      	pop	{r7}
 8007492:	4770      	bx	lr
 8007494:	20000024 	.word	0x20000024
 8007498:	20000004 	.word	0x20000004

0800749c <E32_Init>:


E32_STATUS E32_Init(GPIO_TypeDef* portM0, uint16_t pinM0, GPIO_TypeDef* portM1, uint16_t pinM1,
		GPIO_TypeDef* portAux, uint16_t pinAux, UART_HandleTypeDef *h)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	607a      	str	r2, [r7, #4]
 80074a6:	461a      	mov	r2, r3
 80074a8:	460b      	mov	r3, r1
 80074aa:	817b      	strh	r3, [r7, #10]
 80074ac:	4613      	mov	r3, r2
 80074ae:	813b      	strh	r3, [r7, #8]
	_huart = h;
 80074b0:	4a0e      	ldr	r2, [pc, #56]	; (80074ec <E32_Init+0x50>)
 80074b2:	6a3b      	ldr	r3, [r7, #32]
 80074b4:	6013      	str	r3, [r2, #0]

	_m0Port = portM0;
 80074b6:	4a0e      	ldr	r2, [pc, #56]	; (80074f0 <E32_Init+0x54>)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6013      	str	r3, [r2, #0]
	_m0Pin = pinM0;
 80074bc:	4a0d      	ldr	r2, [pc, #52]	; (80074f4 <E32_Init+0x58>)
 80074be:	897b      	ldrh	r3, [r7, #10]
 80074c0:	8013      	strh	r3, [r2, #0]

	_m1Port = portM1;
 80074c2:	4a0d      	ldr	r2, [pc, #52]	; (80074f8 <E32_Init+0x5c>)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6013      	str	r3, [r2, #0]
	_m1Pin = pinM1;
 80074c8:	4a0c      	ldr	r2, [pc, #48]	; (80074fc <E32_Init+0x60>)
 80074ca:	893b      	ldrh	r3, [r7, #8]
 80074cc:	8013      	strh	r3, [r2, #0]

	_auxPort = portAux;
 80074ce:	4a0c      	ldr	r2, [pc, #48]	; (8007500 <E32_Init+0x64>)
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	6013      	str	r3, [r2, #0]
	_auxPin = pinAux;
 80074d4:	4a0b      	ldr	r2, [pc, #44]	; (8007504 <E32_Init+0x68>)
 80074d6:	8bbb      	ldrh	r3, [r7, #28]
 80074d8:	8013      	strh	r3, [r2, #0]

	return E32_SetMode(NORMAL_MODE);
 80074da:	2000      	movs	r0, #0
 80074dc:	f000 f814 	bl	8007508 <E32_SetMode>
 80074e0:	4603      	mov	r3, r0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	20000478 	.word	0x20000478
 80074f0:	2000047c 	.word	0x2000047c
 80074f4:	20000480 	.word	0x20000480
 80074f8:	20000484 	.word	0x20000484
 80074fc:	20000488 	.word	0x20000488
 8007500:	2000048c 	.word	0x2000048c
 8007504:	20000490 	.word	0x20000490

08007508 <E32_SetMode>:

	return error;

}
E32_STATUS E32_SetMode(uint8_t mode)
{
 8007508:	b590      	push	{r4, r7, lr}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	4603      	mov	r3, r0
 8007510:	71fb      	strb	r3, [r7, #7]

	uint8_t prevMode = E32_GetMode();
 8007512:	f000 f88f 	bl	8007634 <E32_GetMode>
 8007516:	4603      	mov	r3, r0
 8007518:	73fb      	strb	r3, [r7, #15]
	if (mode == prevMode)
 800751a:	79fa      	ldrb	r2, [r7, #7]
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	429a      	cmp	r2, r3
 8007520:	d101      	bne.n	8007526 <E32_SetMode+0x1e>
			return E32_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	e072      	b.n	800760c <E32_SetMode+0x104>

	_disableAuxIrq = 1;
 8007526:	4b3b      	ldr	r3, [pc, #236]	; (8007614 <E32_SetMode+0x10c>)
 8007528:	2201      	movs	r2, #1
 800752a:	701a      	strb	r2, [r3, #0]
	if (E32_WaitForAux(1) != E32_OK) {
 800752c:	2001      	movs	r0, #1
 800752e:	f7ff ff11 	bl	8007354 <E32_WaitForAux>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <E32_SetMode+0x34>
		return E32_ERROR;
 8007538:	2364      	movs	r3, #100	; 0x64
 800753a:	e067      	b.n	800760c <E32_SetMode+0x104>
	}

	HAL_GPIO_WritePin(_m0Port, _m0Pin, (mode & 1));
 800753c:	4b36      	ldr	r3, [pc, #216]	; (8007618 <E32_SetMode+0x110>)
 800753e:	6818      	ldr	r0, [r3, #0]
 8007540:	4b36      	ldr	r3, [pc, #216]	; (800761c <E32_SetMode+0x114>)
 8007542:	8819      	ldrh	r1, [r3, #0]
 8007544:	79fb      	ldrb	r3, [r7, #7]
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	b2db      	uxtb	r3, r3
 800754c:	461a      	mov	r2, r3
 800754e:	f003 fea2 	bl	800b296 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_m1Port, _m1Pin, (mode & 2));
 8007552:	4b33      	ldr	r3, [pc, #204]	; (8007620 <E32_SetMode+0x118>)
 8007554:	6818      	ldr	r0, [r3, #0]
 8007556:	4b33      	ldr	r3, [pc, #204]	; (8007624 <E32_SetMode+0x11c>)
 8007558:	8819      	ldrh	r1, [r3, #0]
 800755a:	79fb      	ldrb	r3, [r7, #7]
 800755c:	f003 0302 	and.w	r3, r3, #2
 8007560:	b2db      	uxtb	r3, r3
 8007562:	461a      	mov	r2, r3
 8007564:	f003 fe97 	bl	800b296 <HAL_GPIO_WritePin>

	// Got to delay to catch the falling edge and then wait for rise again
	HAL_Delay(2);
 8007568:	2002      	movs	r0, #2
 800756a:	f003 fb15 	bl	800ab98 <HAL_Delay>
	if (E32_WaitForAux(1) != E32_OK) {
 800756e:	2001      	movs	r0, #1
 8007570:	f7ff fef0 	bl	8007354 <E32_WaitForAux>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <E32_SetMode+0x76>
		return E32_ERROR;
 800757a:	2364      	movs	r3, #100	; 0x64
 800757c:	e046      	b.n	800760c <E32_SetMode+0x104>
	}

	if (mode == SLEEP_MODE)
 800757e:	79fb      	ldrb	r3, [r7, #7]
 8007580:	2b03      	cmp	r3, #3
 8007582:	d105      	bne.n	8007590 <E32_SetMode+0x88>
		_huart->Init.BaudRate = 9600;
 8007584:	4b28      	ldr	r3, [pc, #160]	; (8007628 <E32_SetMode+0x120>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800758c:	605a      	str	r2, [r3, #4]
 800758e:	e009      	b.n	80075a4 <E32_SetMode+0x9c>
	else if (_currentConfig[0] != 0xff)
 8007590:	4b26      	ldr	r3, [pc, #152]	; (800762c <E32_SetMode+0x124>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	2bff      	cmp	r3, #255	; 0xff
 8007596:	d005      	beq.n	80075a4 <E32_SetMode+0x9c>
		_huart->Init.BaudRate = E32_GetBaud();
 8007598:	4b23      	ldr	r3, [pc, #140]	; (8007628 <E32_SetMode+0x120>)
 800759a:	681c      	ldr	r4, [r3, #0]
 800759c:	f7ff ff6c 	bl	8007478 <E32_GetBaud>
 80075a0:	4603      	mov	r3, r0
 80075a2:	6063      	str	r3, [r4, #4]

	HAL_UART_Init(_huart);
 80075a4:	4b20      	ldr	r3, [pc, #128]	; (8007628 <E32_SetMode+0x120>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f005 faeb 	bl	800cb84 <HAL_UART_Init>

	//Wake up needs a 200ms delay before things start to work
	if(prevMode == SLEEP_MODE) {
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
 80075b0:	2b03      	cmp	r3, #3
 80075b2:	d106      	bne.n	80075c2 <E32_SetMode+0xba>
		HAL_Delay(250);
 80075b4:	20fa      	movs	r0, #250	; 0xfa
 80075b6:	f003 faef 	bl	800ab98 <HAL_Delay>
		_disableAuxIrq=0;
 80075ba:	4b16      	ldr	r3, [pc, #88]	; (8007614 <E32_SetMode+0x10c>)
 80075bc:	2200      	movs	r2, #0
 80075be:	701a      	strb	r2, [r3, #0]
 80075c0:	e023      	b.n	800760a <E32_SetMode+0x102>
	}
	else if(mode==CONFIG_MODE) {
 80075c2:	79fb      	ldrb	r3, [r7, #7]
 80075c4:	2b07      	cmp	r3, #7
 80075c6:	d11a      	bne.n	80075fe <E32_SetMode+0xf6>
		uint8_t message[]={0xc1, 0xc1, 0xc1 };
 80075c8:	4a19      	ldr	r2, [pc, #100]	; (8007630 <E32_SetMode+0x128>)
 80075ca:	f107 0308 	add.w	r3, r7, #8
 80075ce:	6812      	ldr	r2, [r2, #0]
 80075d0:	4611      	mov	r1, r2
 80075d2:	8019      	strh	r1, [r3, #0]
 80075d4:	3302      	adds	r3, #2
 80075d6:	0c12      	lsrs	r2, r2, #16
 80075d8:	701a      	strb	r2, [r3, #0]
		E32_STATUS error = E32_ConfigRequest(message, 3, _currentConfig, 6);
 80075da:	f107 0008 	add.w	r0, r7, #8
 80075de:	2306      	movs	r3, #6
 80075e0:	4a12      	ldr	r2, [pc, #72]	; (800762c <E32_SetMode+0x124>)
 80075e2:	2103      	movs	r1, #3
 80075e4:	f7ff ff12 	bl	800740c <E32_ConfigRequest>
 80075e8:	4603      	mov	r3, r0
 80075ea:	73bb      	strb	r3, [r7, #14]
		if(error != E32_OK)
 80075ec:	7bbb      	ldrb	r3, [r7, #14]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d001      	beq.n	80075f6 <E32_SetMode+0xee>
			return error;
 80075f2:	7bbb      	ldrb	r3, [r7, #14]
 80075f4:	e00a      	b.n	800760c <E32_SetMode+0x104>
		_disableAuxIrq = 1;
 80075f6:	4b07      	ldr	r3, [pc, #28]	; (8007614 <E32_SetMode+0x10c>)
 80075f8:	2201      	movs	r2, #1
 80075fa:	701a      	strb	r2, [r3, #0]
 80075fc:	e005      	b.n	800760a <E32_SetMode+0x102>
	}
	else {
		HAL_Delay(50);
 80075fe:	2032      	movs	r0, #50	; 0x32
 8007600:	f003 faca 	bl	800ab98 <HAL_Delay>
		_disableAuxIrq = 0;
 8007604:	4b03      	ldr	r3, [pc, #12]	; (8007614 <E32_SetMode+0x10c>)
 8007606:	2200      	movs	r2, #0
 8007608:	701a      	strb	r2, [r3, #0]
	}

	return E32_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	bd90      	pop	{r4, r7, pc}
 8007614:	20000497 	.word	0x20000497
 8007618:	2000047c 	.word	0x2000047c
 800761c:	20000480 	.word	0x20000480
 8007620:	20000484 	.word	0x20000484
 8007624:	20000488 	.word	0x20000488
 8007628:	20000478 	.word	0x20000478
 800762c:	20000024 	.word	0x20000024
 8007630:	0801282c 	.word	0x0801282c

08007634 <E32_GetMode>:

uint8_t E32_GetMode()
{
 8007634:	b598      	push	{r3, r4, r7, lr}
 8007636:	af00      	add	r7, sp, #0
	return (HAL_GPIO_ReadPin(_m1Port, _m1Pin) << 1) |
 8007638:	4b0c      	ldr	r3, [pc, #48]	; (800766c <E32_GetMode+0x38>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a0c      	ldr	r2, [pc, #48]	; (8007670 <E32_GetMode+0x3c>)
 800763e:	8812      	ldrh	r2, [r2, #0]
 8007640:	4611      	mov	r1, r2
 8007642:	4618      	mov	r0, r3
 8007644:	f003 fe10 	bl	800b268 <HAL_GPIO_ReadPin>
 8007648:	4603      	mov	r3, r0
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(_m0Port, _m0Pin));
 800764e:	4b09      	ldr	r3, [pc, #36]	; (8007674 <E32_GetMode+0x40>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a09      	ldr	r2, [pc, #36]	; (8007678 <E32_GetMode+0x44>)
 8007654:	8812      	ldrh	r2, [r2, #0]
 8007656:	4611      	mov	r1, r2
 8007658:	4618      	mov	r0, r3
 800765a:	f003 fe05 	bl	800b268 <HAL_GPIO_ReadPin>
 800765e:	4603      	mov	r3, r0
 8007660:	b25b      	sxtb	r3, r3
	return (HAL_GPIO_ReadPin(_m1Port, _m1Pin) << 1) |
 8007662:	4323      	orrs	r3, r4
 8007664:	b25b      	sxtb	r3, r3
 8007666:	b2db      	uxtb	r3, r3
}
 8007668:	4618      	mov	r0, r3
 800766a:	bd98      	pop	{r3, r4, r7, pc}
 800766c:	20000484 	.word	0x20000484
 8007670:	20000488 	.word	0x20000488
 8007674:	2000047c 	.word	0x2000047c
 8007678:	20000480 	.word	0x20000480

0800767c <E32_Transmit>:
	_targetAddress = addr;

	return E32_OK;
}

E32_STATUS E32_Transmit(uint8_t *message, uint16_t length) {
 800767c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007680:	b085      	sub	sp, #20
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	460b      	mov	r3, r1
 8007688:	807b      	strh	r3, [r7, #2]
	if (E32_GetMode() == SLEEP_MODE)
 800768a:	f7ff ffd3 	bl	8007634 <E32_GetMode>
 800768e:	4603      	mov	r3, r0
 8007690:	2b03      	cmp	r3, #3
 8007692:	d101      	bne.n	8007698 <E32_Transmit+0x1c>
		return E32_INVALID_MODE;
 8007694:	2366      	movs	r3, #102	; 0x66
 8007696:	e06d      	b.n	8007774 <E32_Transmit+0xf8>

	if (length > 512)
 8007698:	887b      	ldrh	r3, [r7, #2]
 800769a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800769e:	d901      	bls.n	80076a4 <E32_Transmit+0x28>
		return E32_MESSAGE_TOO_LONG;
 80076a0:	2365      	movs	r3, #101	; 0x65
 80076a2:	e067      	b.n	8007774 <E32_Transmit+0xf8>

	if (_currentConfig[5] & 0x80) {
 80076a4:	4b36      	ldr	r3, [pc, #216]	; (8007780 <E32_Transmit+0x104>)
 80076a6:	795b      	ldrb	r3, [r3, #5]
 80076a8:	b25b      	sxtb	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	da54      	bge.n	8007758 <E32_Transmit+0xdc>
 80076ae:	466b      	mov	r3, sp
 80076b0:	461e      	mov	r6, r3
		if(length > 509)
 80076b2:	887b      	ldrh	r3, [r7, #2]
 80076b4:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80076b8:	d301      	bcc.n	80076be <E32_Transmit+0x42>
			return E32_MESSAGE_TOO_LONG;
 80076ba:	2365      	movs	r3, #101	; 0x65
 80076bc:	e04a      	b.n	8007754 <E32_Transmit+0xd8>
		uint8_t header[3 + length];
 80076be:	887b      	ldrh	r3, [r7, #2]
 80076c0:	1cd9      	adds	r1, r3, #3
 80076c2:	1e4b      	subs	r3, r1, #1
 80076c4:	60fb      	str	r3, [r7, #12]
 80076c6:	460a      	mov	r2, r1
 80076c8:	2300      	movs	r3, #0
 80076ca:	4690      	mov	r8, r2
 80076cc:	4699      	mov	r9, r3
 80076ce:	f04f 0200 	mov.w	r2, #0
 80076d2:	f04f 0300 	mov.w	r3, #0
 80076d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076e2:	460a      	mov	r2, r1
 80076e4:	2300      	movs	r3, #0
 80076e6:	4614      	mov	r4, r2
 80076e8:	461d      	mov	r5, r3
 80076ea:	f04f 0200 	mov.w	r2, #0
 80076ee:	f04f 0300 	mov.w	r3, #0
 80076f2:	00eb      	lsls	r3, r5, #3
 80076f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076f8:	00e2      	lsls	r2, r4, #3
 80076fa:	460b      	mov	r3, r1
 80076fc:	3307      	adds	r3, #7
 80076fe:	08db      	lsrs	r3, r3, #3
 8007700:	00db      	lsls	r3, r3, #3
 8007702:	ebad 0d03 	sub.w	sp, sp, r3
 8007706:	466b      	mov	r3, sp
 8007708:	3300      	adds	r3, #0
 800770a:	60bb      	str	r3, [r7, #8]
		header[0] = (_targetAddress & 0xFF) >> 8;
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2200      	movs	r2, #0
 8007710:	701a      	strb	r2, [r3, #0]
		header[1] = _targetAddress &0xff;
 8007712:	4b1c      	ldr	r3, [pc, #112]	; (8007784 <E32_Transmit+0x108>)
 8007714:	881b      	ldrh	r3, [r3, #0]
 8007716:	b2da      	uxtb	r2, r3
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	705a      	strb	r2, [r3, #1]
		header[2] = _targetChannel;
 800771c:	4b1a      	ldr	r3, [pc, #104]	; (8007788 <E32_Transmit+0x10c>)
 800771e:	781a      	ldrb	r2, [r3, #0]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	709a      	strb	r2, [r3, #2]
		memcpy(&header[3],message,length);
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	3303      	adds	r3, #3
 8007728:	887a      	ldrh	r2, [r7, #2]
 800772a:	6879      	ldr	r1, [r7, #4]
 800772c:	4618      	mov	r0, r3
 800772e:	f006 f95d 	bl	800d9ec <memcpy>
		if(HAL_UART_Transmit(_huart, header, length+3, 2000) != HAL_OK)
 8007732:	4b16      	ldr	r3, [pc, #88]	; (800778c <E32_Transmit+0x110>)
 8007734:	6818      	ldr	r0, [r3, #0]
 8007736:	887b      	ldrh	r3, [r7, #2]
 8007738:	3303      	adds	r3, #3
 800773a:	b29a      	uxth	r2, r3
 800773c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007740:	68b9      	ldr	r1, [r7, #8]
 8007742:	f005 fa6f 	bl	800cc24 <HAL_UART_Transmit>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <E32_Transmit+0xd4>
			return E32_ERROR;
 800774c:	2364      	movs	r3, #100	; 0x64
 800774e:	e001      	b.n	8007754 <E32_Transmit+0xd8>
 8007750:	46b5      	mov	sp, r6
 8007752:	e00e      	b.n	8007772 <E32_Transmit+0xf6>
 8007754:	46b5      	mov	sp, r6
 8007756:	e00d      	b.n	8007774 <E32_Transmit+0xf8>
	}
	else
		if(HAL_UART_Transmit(_huart, message, length, 2000) != HAL_OK)
 8007758:	4b0c      	ldr	r3, [pc, #48]	; (800778c <E32_Transmit+0x110>)
 800775a:	6818      	ldr	r0, [r3, #0]
 800775c:	887a      	ldrh	r2, [r7, #2]
 800775e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007762:	6879      	ldr	r1, [r7, #4]
 8007764:	f005 fa5e 	bl	800cc24 <HAL_UART_Transmit>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <E32_Transmit+0xf6>
			return E32_ERROR;
 800776e:	2364      	movs	r3, #100	; 0x64
 8007770:	e000      	b.n	8007774 <E32_Transmit+0xf8>

	return E32_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800777e:	bf00      	nop
 8007780:	20000024 	.word	0x20000024
 8007784:	20000494 	.word	0x20000494
 8007788:	20000492 	.word	0x20000492
 800778c:	20000478 	.word	0x20000478

08007790 <HAL_GPIO_EXTI_Callback>:
uint8_t E32_DataAvailable(void) {
	return _dataAvailable;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	4603      	mov	r3, r0
 8007798:	80fb      	strh	r3, [r7, #6]

	if ((GPIO_Pin == AUX_Pin) & (!_disableAuxIrq)) {
 800779a:	88fb      	ldrh	r3, [r7, #6]
 800779c:	2b10      	cmp	r3, #16
 800779e:	bf0c      	ite	eq
 80077a0:	2301      	moveq	r3, #1
 80077a2:	2300      	movne	r3, #0
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	4b09      	ldr	r3, [pc, #36]	; (80077cc <HAL_GPIO_EXTI_Callback+0x3c>)
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	bf0c      	ite	eq
 80077ae:	2301      	moveq	r3, #1
 80077b0:	2300      	movne	r3, #0
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	4013      	ands	r3, r2
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <HAL_GPIO_EXTI_Callback+0x32>
		_dataAvailable=1;
 80077bc:	4b04      	ldr	r3, [pc, #16]	; (80077d0 <HAL_GPIO_EXTI_Callback+0x40>)
 80077be:	2201      	movs	r2, #1
 80077c0:	701a      	strb	r2, [r3, #0]
	}
}
 80077c2:	bf00      	nop
 80077c4:	370c      	adds	r7, #12
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bc80      	pop	{r7}
 80077ca:	4770      	bx	lr
 80077cc:	20000497 	.word	0x20000497
 80077d0:	20000496 	.word	0x20000496

080077d4 <check_sum_hesapla>:
#include "stm32f1xx.h"



uint8_t check_sum_hesapla( const uint8_t * const ptVeri , const uint8_t START_IDX , const uint8_t END_IDX )
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	70fb      	strb	r3, [r7, #3]
 80077e0:	4613      	mov	r3, r2
 80077e2:	70bb      	strb	r3, [r7, #2]
    uint32_t check_sum = 0;
 80077e4:	2300      	movs	r3, #0
 80077e6:	60fb      	str	r3, [r7, #12]

    for( uint8_t i = START_IDX ; i < END_IDX ; i++ )
 80077e8:	78fb      	ldrb	r3, [r7, #3]
 80077ea:	72fb      	strb	r3, [r7, #11]
 80077ec:	e00a      	b.n	8007804 <check_sum_hesapla+0x30>
    {
        check_sum += ptVeri[i];
 80077ee:	7afb      	ldrb	r3, [r7, #11]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	4413      	add	r3, r2
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	461a      	mov	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4413      	add	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]
    for( uint8_t i = START_IDX ; i < END_IDX ; i++ )
 80077fe:	7afb      	ldrb	r3, [r7, #11]
 8007800:	3301      	adds	r3, #1
 8007802:	72fb      	strb	r3, [r7, #11]
 8007804:	7afa      	ldrb	r2, [r7, #11]
 8007806:	78bb      	ldrb	r3, [r7, #2]
 8007808:	429a      	cmp	r2, r3
 800780a:	d3f0      	bcc.n	80077ee <check_sum_hesapla+0x1a>
    }
    return ( uint8_t ) ( check_sum % 256 ) ;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	b2db      	uxtb	r3, r3
}
 8007810:	4618      	mov	r0, r3
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	bc80      	pop	{r7}
 8007818:	4770      	bx	lr

0800781a <veriPaketle>:

void veriPaketle ( dataPaket_t * const pkt , const  dataStruct_t * const data )
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b082      	sub	sp, #8
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	6039      	str	r1, [r7, #0]
    memcpy ( &( pkt->data ) , data , sizeof( dataStruct_t ) );
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	3306      	adds	r3, #6
 8007828:	222d      	movs	r2, #45	; 0x2d
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	4618      	mov	r0, r3
 800782e:	f006 f8dd 	bl	800d9ec <memcpy>
    pkt->u8_crc_data = check_sum_hesapla( pkt->u8_array , 4 , sizeof( dataPaket_t )-3 );
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2233      	movs	r2, #51	; 0x33
 8007836:	2104      	movs	r1, #4
 8007838:	4618      	mov	r0, r3
 800783a:	f7ff ffcb 	bl	80077d4 <check_sum_hesapla>
 800783e:	4603      	mov	r3, r0
 8007840:	461a      	mov	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8007848:	bf00      	nop
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <verileriYolla>:

void verileriYolla(uint8_t* ptVeri, const uint8_t veriLength)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	460b      	mov	r3, r1
 800785a:	70fb      	strb	r3, [r7, #3]

	uint8_t status=0;
 800785c:	2300      	movs	r3, #0
 800785e:	73fb      	strb	r3, [r7, #15]
    status=E32_Transmit(ptVeri, veriLength);
 8007860:	78fb      	ldrb	r3, [r7, #3]
 8007862:	b29b      	uxth	r3, r3
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7ff ff08 	bl	800767c <E32_Transmit>
 800786c:	4603      	mov	r3, r0
 800786e:	73fb      	strb	r3, [r7, #15]
    //status = HAL_UART_Transmit(&_huart, ptVeri, veriLength, 1000);

}
 8007870:	bf00      	nop
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <initDataPaket>:

void initDataPaket( dataPaket_t * const pkt , const uint8_t WHICH_NODE )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	460b      	mov	r3, r1
 8007882:	70fb      	strb	r3, [r7, #3]
    memset( pkt->u8_array , 0 , sizeof( dataPaket_t ) );
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2236      	movs	r2, #54	; 0x36
 8007888:	2100      	movs	r1, #0
 800788a:	4618      	mov	r0, r3
 800788c:	f006 f8bc 	bl	800da08 <memset>
    pkt->u32_start_header       = 0x5254FFFF; // 4
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f04f 32ff 	mov.w	r2, #4294967295
 8007896:	701a      	strb	r2, [r3, #0]
 8007898:	f04f 32ff 	mov.w	r2, #4294967295
 800789c:	705a      	strb	r2, [r3, #1]
 800789e:	2200      	movs	r2, #0
 80078a0:	f042 0254 	orr.w	r2, r2, #84	; 0x54
 80078a4:	709a      	strb	r2, [r3, #2]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f042 0252 	orr.w	r2, r2, #82	; 0x52
 80078ac:	70da      	strb	r2, [r3, #3]
    pkt->u8_node_information    = WHICH_NODE ;  // 1
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	78fa      	ldrb	r2, [r7, #3]
 80078b2:	711a      	strb	r2, [r3, #4]
    pkt->u8_package_length      = sizeof( dataPaket_t );
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2236      	movs	r2, #54	; 0x36
 80078b8:	715a      	strb	r2, [r3, #5]
    pkt->u16_end_header         = 0x0A0D;   // 2
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f042 020d 	orr.w	r2, r2, #13
 80078c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80078c6:	2200      	movs	r2, #0
 80078c8:	f042 020a 	orr.w	r2, r2, #10
 80078cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 80078d0:	bf00      	nop
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 80078e0:	2300      	movs	r3, #0
 80078e2:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f001 fb7f 	bl	8008fe8 <null_ptr_check>
 80078ea:	4603      	mov	r3, r0
 80078ec:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 80078ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d131      	bne.n	800795a <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	7a1b      	ldrb	r3, [r3, #8]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d003      	beq.n	8007906 <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	729a      	strb	r2, [r3, #10]
 8007904:	e002      	b.n	800790c <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	729a      	strb	r2, [r3, #10]
        }

        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 800790c:	f107 010e 	add.w	r1, r7, #14
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	2000      	movs	r0, #0
 8007916:	f000 f826 	bl	8007966 <bmp3_get_regs>
 800791a:	4603      	mov	r3, r0
 800791c:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 800791e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d119      	bne.n	800795a <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8007926:	7bbb      	ldrb	r3, [r7, #14]
 8007928:	2b50      	cmp	r3, #80	; 0x50
 800792a:	d002      	beq.n	8007932 <bmp3_init+0x5a>
 800792c:	7bbb      	ldrb	r3, [r7, #14]
 800792e:	2b60      	cmp	r3, #96	; 0x60
 8007930:	d111      	bne.n	8007956 <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 8007932:	7bba      	ldrb	r2, [r7, #14]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 f983 	bl	8007c44 <bmp3_soft_reset>
 800793e:	4603      	mov	r3, r0
 8007940:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8007942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d107      	bne.n	800795a <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fb23 	bl	8007f96 <get_calib_data>
 8007950:	4603      	mov	r3, r0
 8007952:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8007954:	e001      	b.n	800795a <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8007956:	23f9      	movs	r3, #249	; 0xf9
 8007958:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800795a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8007966:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800796a:	b08b      	sub	sp, #44	; 0x2c
 800796c:	af00      	add	r7, sp, #0
 800796e:	60b9      	str	r1, [r7, #8]
 8007970:	607a      	str	r2, [r7, #4]
 8007972:	603b      	str	r3, [r7, #0]
 8007974:	4603      	mov	r3, r0
 8007976:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8007978:	6838      	ldr	r0, [r7, #0]
 800797a:	f001 fb35 	bl	8008fe8 <null_ptr_check>
 800797e:	4603      	mov	r3, r0
 8007980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8007984:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8007988:	2b00      	cmp	r3, #0
 800798a:	d172      	bne.n	8007a72 <bmp3_get_regs+0x10c>
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d06f      	beq.n	8007a72 <bmp3_get_regs+0x10c>
    {
 8007992:	466b      	mov	r3, sp
 8007994:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	7a9b      	ldrb	r3, [r3, #10]
 800799a:	461a      	mov	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4413      	add	r3, r2
 80079a0:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	7a9b      	ldrb	r3, [r3, #10]
 80079a6:	461a      	mov	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	18d1      	adds	r1, r2, r3
 80079ac:	460b      	mov	r3, r1
 80079ae:	3b01      	subs	r3, #1
 80079b0:	61bb      	str	r3, [r7, #24]
 80079b2:	2300      	movs	r3, #0
 80079b4:	4688      	mov	r8, r1
 80079b6:	4699      	mov	r9, r3
 80079b8:	f04f 0200 	mov.w	r2, #0
 80079bc:	f04f 0300 	mov.w	r3, #0
 80079c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079cc:	2300      	movs	r3, #0
 80079ce:	460c      	mov	r4, r1
 80079d0:	461d      	mov	r5, r3
 80079d2:	f04f 0200 	mov.w	r2, #0
 80079d6:	f04f 0300 	mov.w	r3, #0
 80079da:	00eb      	lsls	r3, r5, #3
 80079dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079e0:	00e2      	lsls	r2, r4, #3
 80079e2:	1dcb      	adds	r3, r1, #7
 80079e4:	08db      	lsrs	r3, r3, #3
 80079e6:	00db      	lsls	r3, r3, #3
 80079e8:	ebad 0d03 	sub.w	sp, sp, r3
 80079ec:	466b      	mov	r3, sp
 80079ee:	3300      	adds	r3, #0
 80079f0:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	7a1b      	ldrb	r3, [r3, #8]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d025      	beq.n	8007a46 <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
 80079fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a00:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	68dc      	ldr	r4, [r3, #12]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	7bf8      	ldrb	r0, [r7, #15]
 8007a0c:	69fa      	ldr	r2, [r7, #28]
 8007a0e:	6979      	ldr	r1, [r7, #20]
 8007a10:	47a0      	blx	r4
 8007a12:	4603      	mov	r3, r0
 8007a14:	461a      	mov	r2, r3
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a1e:	e00d      	b.n	8007a3c <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	7a9b      	ldrb	r3, [r3, #10]
 8007a24:	461a      	mov	r2, r3
 8007a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a28:	441a      	add	r2, r3
 8007a2a:	68b9      	ldr	r1, [r7, #8]
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	440b      	add	r3, r1
 8007a30:	6979      	ldr	r1, [r7, #20]
 8007a32:	5c8a      	ldrb	r2, [r1, r2]
 8007a34:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 8007a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a38:	3301      	adds	r3, #1
 8007a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d3ed      	bcc.n	8007a20 <bmp3_get_regs+0xba>
 8007a44:	e00b      	b.n	8007a5e <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	68dc      	ldr	r4, [r3, #12]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	7bf8      	ldrb	r0, [r7, #15]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	68b9      	ldr	r1, [r7, #8]
 8007a54:	47a0      	blx	r4
 8007a56:	4603      	mov	r3, r0
 8007a58:	461a      	mov	r2, r3
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 8007a68:	23fe      	movs	r3, #254	; 0xfe
 8007a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a6e:	46b5      	mov	sp, r6
    {
 8007a70:	e002      	b.n	8007a78 <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8007a72:	23ff      	movs	r3, #255	; 0xff
 8007a74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }

    return rslt;
 8007a78:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	372c      	adds	r7, #44	; 0x2c
 8007a80:	46bd      	mov	sp, r7
 8007a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007a86 <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8007a86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a8a:	b089      	sub	sp, #36	; 0x24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
 8007a94:	603b      	str	r3, [r7, #0]
 8007a96:	466b      	mov	r3, sp
 8007a98:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	0059      	lsls	r1, r3, #1
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	617b      	str	r3, [r7, #20]
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	4688      	mov	r8, r1
 8007aa8:	4699      	mov	r9, r3
 8007aaa:	f04f 0200 	mov.w	r2, #0
 8007aae:	f04f 0300 	mov.w	r3, #0
 8007ab2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ab6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007aba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007abe:	2300      	movs	r3, #0
 8007ac0:	460c      	mov	r4, r1
 8007ac2:	461d      	mov	r5, r3
 8007ac4:	f04f 0200 	mov.w	r2, #0
 8007ac8:	f04f 0300 	mov.w	r3, #0
 8007acc:	00eb      	lsls	r3, r5, #3
 8007ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ad2:	00e2      	lsls	r2, r4, #3
 8007ad4:	1dcb      	adds	r3, r1, #7
 8007ad6:	08db      	lsrs	r3, r3, #3
 8007ad8:	00db      	lsls	r3, r3, #3
 8007ada:	ebad 0d03 	sub.w	sp, sp, r3
 8007ade:	466b      	mov	r3, sp
 8007ae0:	3300      	adds	r3, #0
 8007ae2:	613b      	str	r3, [r7, #16]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8007ae4:	6838      	ldr	r0, [r7, #0]
 8007ae6:	f001 fa7f 	bl	8008fe8 <null_ptr_check>
 8007aea:	4603      	mov	r3, r0
 8007aec:	76fb      	strb	r3, [r7, #27]

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8007aee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d14c      	bne.n	8007b90 <bmp3_set_regs+0x10a>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d049      	beq.n	8007b90 <bmp3_set_regs+0x10a>
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d046      	beq.n	8007b90 <bmp3_set_regs+0x10a>
    {
        if (len != 0)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d040      	beq.n	8007b8a <bmp3_set_regs+0x104>
        {
            temp_buff[0] = reg_data[0];
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	781a      	ldrb	r2, [r3, #0]
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	7a1b      	ldrb	r3, [r3, #8]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d114      	bne.n	8007b42 <bmp3_set_regs+0xbc>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8007b18:	2300      	movs	r3, #0
 8007b1a:	76bb      	strb	r3, [r7, #26]
 8007b1c:	e00d      	b.n	8007b3a <bmp3_set_regs+0xb4>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8007b1e:	7ebb      	ldrb	r3, [r7, #26]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	4413      	add	r3, r2
 8007b24:	781a      	ldrb	r2, [r3, #0]
 8007b26:	7ebb      	ldrb	r3, [r7, #26]
 8007b28:	68f9      	ldr	r1, [r7, #12]
 8007b2a:	440b      	add	r3, r1
 8007b2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007b30:	b2d2      	uxtb	r2, r2
 8007b32:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8007b34:	7ebb      	ldrb	r3, [r7, #26]
 8007b36:	3301      	adds	r3, #1
 8007b38:	76bb      	strb	r3, [r7, #26]
 8007b3a:	7ebb      	ldrb	r3, [r7, #26]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d8ed      	bhi.n	8007b1e <bmp3_set_regs+0x98>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d909      	bls.n	8007b5c <bmp3_set_regs+0xd6>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	6939      	ldr	r1, [r7, #16]
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f000 fa46 	bl	8007fe0 <interleave_reg_addr>
                temp_len = len * 2;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	61fb      	str	r3, [r7, #28]
 8007b5a:	e001      	b.n	8007b60 <bmp3_set_regs+0xda>
            }
            else
            {
                temp_len = len;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	61fb      	str	r3, [r7, #28]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	691c      	ldr	r4, [r3, #16]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	7818      	ldrb	r0, [r3, #0]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	69fa      	ldr	r2, [r7, #28]
 8007b6e:	6939      	ldr	r1, [r7, #16]
 8007b70:	47a0      	blx	r4
 8007b72:	4603      	mov	r3, r0
 8007b74:	461a      	mov	r2, r3
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d008      	beq.n	8007b96 <bmp3_set_regs+0x110>
            {
                rslt = BMP3_E_COMM_FAIL;
 8007b84:	23fe      	movs	r3, #254	; 0xfe
 8007b86:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 8007b88:	e005      	b.n	8007b96 <bmp3_set_regs+0x110>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 8007b8a:	23fa      	movs	r3, #250	; 0xfa
 8007b8c:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 8007b8e:	e002      	b.n	8007b96 <bmp3_set_regs+0x110>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8007b90:	23ff      	movs	r3, #255	; 0xff
 8007b92:	76fb      	strb	r3, [r7, #27]
 8007b94:	e000      	b.n	8007b98 <bmp3_set_regs+0x112>
        if (len != 0)
 8007b96:	bf00      	nop
    }

    return rslt;
 8007b98:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007b9c:	46b5      	mov	sp, r6
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3724      	adds	r7, #36	; 0x24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007ba8 <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	75fb      	strb	r3, [r7, #23]

    if (settings != NULL)
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d03a      	beq.n	8007c34 <bmp3_set_sensor_settings+0x8c>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 8007bbe:	68f9      	ldr	r1, [r7, #12]
 8007bc0:	2006      	movs	r0, #6
 8007bc2:	f001 f9fa 	bl	8008fba <are_settings_changed>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d006      	beq.n	8007bda <bmp3_set_sensor_settings+0x32>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	68b9      	ldr	r1, [r7, #8]
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f000 fa69 	bl	80080a8 <set_pwr_ctrl_settings>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 8007bda:	68f9      	ldr	r1, [r7, #12]
 8007bdc:	20f0      	movs	r0, #240	; 0xf0
 8007bde:	f001 f9ec 	bl	8008fba <are_settings_changed>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d006      	beq.n	8007bf6 <bmp3_set_sensor_settings+0x4e>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	68b9      	ldr	r1, [r7, #8]
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 faa9 	bl	8008144 <set_odr_filter_settings>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 8007bf6:	68f9      	ldr	r1, [r7, #12]
 8007bf8:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8007bfc:	f001 f9dd 	bl	8008fba <are_settings_changed>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d006      	beq.n	8007c14 <bmp3_set_sensor_settings+0x6c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	68b9      	ldr	r1, [r7, #8]
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 fb08 	bl	8008220 <set_int_ctrl_settings>
 8007c10:	4603      	mov	r3, r0
 8007c12:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 8007c14:	68f9      	ldr	r1, [r7, #12]
 8007c16:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8007c1a:	f001 f9ce 	bl	8008fba <are_settings_changed>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d009      	beq.n	8007c38 <bmp3_set_sensor_settings+0x90>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	68b9      	ldr	r1, [r7, #8]
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 fb73 	bl	8008314 <set_advance_settings>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	75fb      	strb	r3, [r7, #23]
 8007c32:	e001      	b.n	8007c38 <bmp3_set_sensor_settings+0x90>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8007c34:	23ff      	movs	r3, #255	; 0xff
 8007c36:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8007c38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3718      	adds	r7, #24
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 8007c4c:	237e      	movs	r3, #126	; 0x7e
 8007c4e:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 8007c50:	23b6      	movs	r3, #182	; 0xb6
 8007c52:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 8007c54:	f107 010c 	add.w	r1, r7, #12
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	2003      	movs	r0, #3
 8007c5e:	f7ff fe82 	bl	8007966 <bmp3_get_regs>
 8007c62:	4603      	mov	r3, r0
 8007c64:	73fb      	strb	r3, [r7, #15]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 8007c66:	7b3b      	ldrb	r3, [r7, #12]
 8007c68:	f003 0310 	and.w	r3, r3, #16
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d02d      	beq.n	8007ccc <bmp3_soft_reset+0x88>
 8007c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d129      	bne.n	8007ccc <bmp3_soft_reset+0x88>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8007c78:	f107 010d 	add.w	r1, r7, #13
 8007c7c:	f107 000e 	add.w	r0, r7, #14
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f7ff feff 	bl	8007a86 <bmp3_set_regs>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8007c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d11b      	bne.n	8007ccc <bmp3_soft_reset+0x88>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	6852      	ldr	r2, [r2, #4]
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007ca2:	4798      	blx	r3

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 8007ca4:	f107 010b 	add.w	r1, r7, #11
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	2002      	movs	r0, #2
 8007cae:	f7ff fe5a 	bl	8007966 <bmp3_get_regs>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	73fb      	strb	r3, [r7, #15]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 8007cb6:	7afb      	ldrb	r3, [r7, #11]
 8007cb8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d103      	bne.n	8007cc8 <bmp3_soft_reset+0x84>
 8007cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <bmp3_soft_reset+0x88>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 8007cc8:	23fc      	movs	r3, #252	; 0xfc
 8007cca:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8007ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8007ce2:	6838      	ldr	r0, [r7, #0]
 8007ce4:	f001 f980 	bl	8008fe8 <null_ptr_check>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (settings != NULL))
 8007cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d139      	bne.n	8007d68 <bmp3_set_op_mode+0x90>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d036      	beq.n	8007d68 <bmp3_set_op_mode+0x90>
    {
        uint8_t curr_mode = settings->op_mode;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 8007d00:	f107 030d 	add.w	r3, r7, #13
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f000 f838 	bl	8007d7c <bmp3_get_op_mode>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 8007d10:	7b7b      	ldrb	r3, [r7, #13]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d010      	beq.n	8007d38 <bmp3_set_op_mode+0x60>
 8007d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10c      	bne.n	8007d38 <bmp3_set_op_mode+0x60>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 8007d1e:	6838      	ldr	r0, [r7, #0]
 8007d20:	f000 f8f7 	bl	8007f12 <put_device_to_sleep>
 8007d24:	4603      	mov	r3, r0
 8007d26:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	695b      	ldr	r3, [r3, #20]
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	6852      	ldr	r2, [r2, #4]
 8007d30:	4611      	mov	r1, r2
 8007d32:	f241 3088 	movw	r0, #5000	; 0x1388
 8007d36:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 8007d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d116      	bne.n	8007d6e <bmp3_set_op_mode+0x96>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 8007d40:	7bbb      	ldrb	r3, [r7, #14]
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d106      	bne.n	8007d54 <bmp3_set_op_mode+0x7c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 8007d46:	6839      	ldr	r1, [r7, #0]
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f879 	bl	8007e40 <set_normal_mode>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	73fb      	strb	r3, [r7, #15]
    {
 8007d52:	e00c      	b.n	8007d6e <bmp3_set_op_mode+0x96>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 8007d54:	7bbb      	ldrb	r3, [r7, #14]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d109      	bne.n	8007d6e <bmp3_set_op_mode+0x96>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f8a2 	bl	8007ea6 <write_power_mode>
 8007d62:	4603      	mov	r3, r0
 8007d64:	73fb      	strb	r3, [r7, #15]
    {
 8007d66:	e002      	b.n	8007d6e <bmp3_set_op_mode+0x96>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8007d68:	23ff      	movs	r3, #255	; 0xff
 8007d6a:	73fb      	strb	r3, [r7, #15]
 8007d6c:	e000      	b.n	8007d70 <bmp3_set_op_mode+0x98>
    {
 8007d6e:	bf00      	nop
    }

    return rslt;
 8007d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d011      	beq.n	8007db0 <bmp3_get_op_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	6879      	ldr	r1, [r7, #4]
 8007d92:	201b      	movs	r0, #27
 8007d94:	f7ff fde7 	bl	8007966 <bmp3_get_regs>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	111b      	asrs	r3, r3, #4
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	f003 0303 	and.w	r3, r3, #3
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	701a      	strb	r2, [r3, #0]
 8007dae:	e001      	b.n	8007db4 <bmp3_get_op_mode+0x38>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8007db0:	23ff      	movs	r3, #255	; 0xff
 8007db2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8007db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b08a      	sub	sp, #40	; 0x28
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]
 8007dcc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 8007dce:	2300      	movs	r3, #0
 8007dd0:	623b      	str	r3, [r7, #32]
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	84bb      	strh	r3, [r7, #36]	; 0x24
    struct bmp3_uncomp_data uncomp_data = { 0 };
 8007dd6:	f107 0310 	add.w	r3, r7, #16
 8007dda:	2200      	movs	r2, #0
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	605a      	str	r2, [r3, #4]
 8007de0:	609a      	str	r2, [r3, #8]
 8007de2:	60da      	str	r2, [r3, #12]

    if (comp_data != NULL)
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d021      	beq.n	8007e2e <bmp3_get_sensor_data+0x6e>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 8007dea:	f107 0120 	add.w	r1, r7, #32
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2206      	movs	r2, #6
 8007df2:	2004      	movs	r0, #4
 8007df4:	f7ff fdb7 	bl	8007966 <bmp3_get_regs>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BMP3_OK)
 8007dfe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d116      	bne.n	8007e34 <bmp3_get_sensor_data+0x74>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 8007e06:	f107 0210 	add.w	r2, r7, #16
 8007e0a:	f107 0320 	add.w	r3, r7, #32
 8007e0e:	4611      	mov	r1, r2
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 fc6a 	bl	80086ea <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	3318      	adds	r3, #24
 8007e1a:	f107 0110 	add.w	r1, r7, #16
 8007e1e:	7bf8      	ldrb	r0, [r7, #15]
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	f000 fc9d 	bl	8008760 <compensate_data>
 8007e26:	4603      	mov	r3, r0
 8007e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007e2c:	e002      	b.n	8007e34 <bmp3_get_sensor_data+0x74>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8007e2e:	23ff      	movs	r3, #255	; 0xff
 8007e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8007e34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3728      	adds	r7, #40	; 0x28
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 8007e4a:	6839      	ldr	r1, [r7, #0]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f888 	bl	8007f62 <validate_normal_mode_settings>
 8007e52:	4603      	mov	r3, r0
 8007e54:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 8007e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d11d      	bne.n	8007e9a <set_normal_mode+0x5a>
    {
        rslt = write_power_mode(settings, dev);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f820 	bl	8007ea6 <write_power_mode>
 8007e66:	4603      	mov	r3, r0
 8007e68:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8007e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d113      	bne.n	8007e9a <set_normal_mode+0x5a>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 8007e72:	f107 010e 	add.w	r1, r7, #14
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	2002      	movs	r0, #2
 8007e7c:	f7ff fd73 	bl	8007966 <bmp3_get_regs>
 8007e80:	4603      	mov	r3, r0
 8007e82:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 8007e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d106      	bne.n	8007e9a <set_normal_mode+0x5a>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8007e8c:	7bbb      	ldrb	r3, [r7, #14]
 8007e8e:	f003 0304 	and.w	r3, r3, #4
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <set_normal_mode+0x5a>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 8007e96:	23fb      	movs	r3, #251	; 0xfb
 8007e98:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8007e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b084      	sub	sp, #16
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8007eb0:	231b      	movs	r3, #27
 8007eb2:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = settings->op_mode;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 8007eba:	7b78      	ldrb	r0, [r7, #13]
 8007ebc:	f107 010c 	add.w	r1, r7, #12
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f7ff fd4f 	bl	8007966 <bmp3_get_regs>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 8007ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d118      	bne.n	8007f06 <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 8007ed4:	7b3b      	ldrb	r3, [r7, #12]
 8007ed6:	b25b      	sxtb	r3, r3
 8007ed8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007edc:	b25a      	sxtb	r2, r3
 8007ede:	7bbb      	ldrb	r3, [r7, #14]
 8007ee0:	011b      	lsls	r3, r3, #4
 8007ee2:	b25b      	sxtb	r3, r3
 8007ee4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ee8:	b25b      	sxtb	r3, r3
 8007eea:	4313      	orrs	r3, r2
 8007eec:	b25b      	sxtb	r3, r3
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 8007ef2:	f107 010c 	add.w	r1, r7, #12
 8007ef6:	f107 000d 	add.w	r0, r7, #13
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f7ff fdc2 	bl	8007a86 <bmp3_set_regs>
 8007f02:	4603      	mov	r3, r0
 8007f04:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8007f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8007f1a:	231b      	movs	r3, #27
 8007f1c:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 8007f1e:	f107 010d 	add.w	r1, r7, #13
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	201b      	movs	r0, #27
 8007f28:	f7ff fd1d 	bl	8007966 <bmp3_get_regs>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8007f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10e      	bne.n	8007f56 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 8007f38:	7b7b      	ldrb	r3, [r7, #13]
 8007f3a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 8007f42:	f107 010d 	add.w	r1, r7, #13
 8007f46:	f107 000e 	add.w	r0, r7, #14
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f7ff fd9a 	bl	8007a86 <bmp3_set_regs>
 8007f52:	4603      	mov	r3, r0
 8007f54:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8007f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b084      	sub	sp, #16
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
 8007f6a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 fa23 	bl	80083ba <get_odr_filter_settings>
 8007f74:	4603      	mov	r3, r0
 8007f76:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8007f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d104      	bne.n	8007f8a <validate_normal_mode_settings+0x28>
    {
        rslt = validate_osr_and_odr_settings(settings);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fa37 	bl	80083f4 <validate_osr_and_odr_settings>
 8007f86:	4603      	mov	r3, r0
 8007f88:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8007f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b088      	sub	sp, #32
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 8007f9e:	2331      	movs	r3, #49	; 0x31
 8007fa0:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60bb      	str	r3, [r7, #8]
 8007fa6:	f107 030c 	add.w	r3, r7, #12
 8007faa:	2200      	movs	r2, #0
 8007fac:	601a      	str	r2, [r3, #0]
 8007fae:	605a      	str	r2, [r3, #4]
 8007fb0:	609a      	str	r2, [r3, #8]
 8007fb2:	60da      	str	r2, [r3, #12]
 8007fb4:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 8007fb6:	f107 0108 	add.w	r1, r7, #8
 8007fba:	7ff8      	ldrb	r0, [r7, #31]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2215      	movs	r2, #21
 8007fc0:	f7ff fcd1 	bl	8007966 <bmp3_get_regs>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 8007fc8:	f107 0308 	add.w	r3, r7, #8
 8007fcc:	6879      	ldr	r1, [r7, #4]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 fc38 	bl	8008844 <parse_calib_data>

    return rslt;
 8007fd4:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3720      	adds	r7, #32
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b087      	sub	sp, #28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
 8007fec:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8007fee:	2301      	movs	r3, #1
 8007ff0:	617b      	str	r3, [r7, #20]
 8007ff2:	e015      	b.n	8008020 <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	441a      	add	r2, r3
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	005b      	lsls	r3, r3, #1
 8007ffe:	3b01      	subs	r3, #1
 8008000:	68b9      	ldr	r1, [r7, #8]
 8008002:	440b      	add	r3, r1
 8008004:	7812      	ldrb	r2, [r2, #0]
 8008006:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	441a      	add	r2, r3
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	005b      	lsls	r3, r3, #1
 8008012:	68b9      	ldr	r1, [r7, #8]
 8008014:	440b      	add	r3, r1
 8008016:	7812      	ldrb	r2, [r2, #0]
 8008018:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	3301      	adds	r3, #1
 800801e:	617b      	str	r3, [r7, #20]
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	429a      	cmp	r2, r3
 8008026:	d3e5      	bcc.n	8007ff4 <interleave_reg_addr+0x14>
    }
}
 8008028:	bf00      	nop
 800802a:	bf00      	nop
 800802c:	371c      	adds	r7, #28
 800802e:	46bd      	mov	sp, r7
 8008030:	bc80      	pop	{r7}
 8008032:	4770      	bx	lr

08008034 <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 800803e:	2300      	movs	r3, #0
 8008040:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 8008042:	7bfb      	ldrb	r3, [r7, #15]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	4413      	add	r3, r2
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	f003 0307 	and.w	r3, r3, #7
 800804e:	b2da      	uxtb	r2, r3
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 8008054:	7bfb      	ldrb	r3, [r7, #15]
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	4413      	add	r3, r2
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	10db      	asrs	r3, r3, #3
 800805e:	b2db      	uxtb	r3, r3
 8008060:	f003 0307 	and.w	r3, r3, #7
 8008064:	b2da      	uxtb	r2, r3
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 800806a:	7bfb      	ldrb	r3, [r7, #15]
 800806c:	3301      	adds	r3, #1
 800806e:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 8008070:	7bfb      	ldrb	r3, [r7, #15]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	4413      	add	r3, r2
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	f003 031f 	and.w	r3, r3, #31
 800807c:	b2da      	uxtb	r2, r3
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 8008082:	7bfb      	ldrb	r3, [r7, #15]
 8008084:	3302      	adds	r3, #2
 8008086:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 8008088:	7bfb      	ldrb	r3, [r7, #15]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	4413      	add	r3, r2
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	105b      	asrs	r3, r3, #1
 8008092:	b2db      	uxtb	r3, r3
 8008094:	f003 0307 	and.w	r3, r3, #7
 8008098:	b2da      	uxtb	r2, r3
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	709a      	strb	r2, [r3, #2]
}
 800809e:	bf00      	nop
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bc80      	pop	{r7}
 80080a6:	4770      	bx	lr

080080a8 <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80080b4:	231b      	movs	r3, #27
 80080b6:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80080b8:	7db8      	ldrb	r0, [r7, #22]
 80080ba:	f107 0115 	add.w	r1, r7, #21
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f7ff fc50 	bl	8007966 <bmp3_get_regs>
 80080c6:	4603      	mov	r3, r0
 80080c8:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 80080ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d132      	bne.n	8008138 <set_pwr_ctrl_settings+0x90>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f003 0302 	and.w	r3, r3, #2
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00e      	beq.n	80080fa <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 80080dc:	7d7b      	ldrb	r3, [r7, #21]
 80080de:	b25b      	sxtb	r3, r3
 80080e0:	f023 0301 	bic.w	r3, r3, #1
 80080e4:	b25a      	sxtb	r2, r3
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	785b      	ldrb	r3, [r3, #1]
 80080ea:	b25b      	sxtb	r3, r3
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	b25b      	sxtb	r3, r3
 80080f2:	4313      	orrs	r3, r2
 80080f4:	b25b      	sxtb	r3, r3
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f003 0304 	and.w	r3, r3, #4
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00f      	beq.n	8008124 <set_pwr_ctrl_settings+0x7c>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 8008104:	7d7b      	ldrb	r3, [r7, #21]
 8008106:	b25b      	sxtb	r3, r3
 8008108:	f023 0302 	bic.w	r3, r3, #2
 800810c:	b25a      	sxtb	r2, r3
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	789b      	ldrb	r3, [r3, #2]
 8008112:	005b      	lsls	r3, r3, #1
 8008114:	b25b      	sxtb	r3, r3
 8008116:	f003 0302 	and.w	r3, r3, #2
 800811a:	b25b      	sxtb	r3, r3
 800811c:	4313      	orrs	r3, r2
 800811e:	b25b      	sxtb	r3, r3
 8008120:	b2db      	uxtb	r3, r3
 8008122:	757b      	strb	r3, [r7, #21]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8008124:	f107 0115 	add.w	r1, r7, #21
 8008128:	f107 0016 	add.w	r0, r7, #22
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f7ff fca9 	bl	8007a86 <bmp3_set_regs>
 8008134:	4603      	mov	r3, r0
 8008136:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8008138:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3718      	adds	r7, #24
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b08a      	sub	sp, #40	; 0x28
 8008148:	af02      	add	r7, sp, #8
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 8008150:	4b32      	ldr	r3, [pc, #200]	; (800821c <set_odr_filter_settings+0xd8>)
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	83bb      	strh	r3, [r7, #28]
 8008156:	2300      	movs	r3, #0
 8008158:	77bb      	strb	r3, [r7, #30]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 800815a:	2300      	movs	r3, #0
 800815c:	75fb      	strb	r3, [r7, #23]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 800815e:	f107 0118 	add.w	r1, r7, #24
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2204      	movs	r2, #4
 8008166:	201c      	movs	r0, #28
 8008168:	f7ff fbfd 	bl	8007966 <bmp3_get_regs>
 800816c:	4603      	mov	r3, r0
 800816e:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMP3_OK)
 8008170:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d14a      	bne.n	800820e <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8008178:	68f9      	ldr	r1, [r7, #12]
 800817a:	2030      	movs	r0, #48	; 0x30
 800817c:	f000 ff1d 	bl	8008fba <are_settings_changed>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00b      	beq.n	800819e <set_odr_filter_settings+0x5a>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 8008186:	f107 0017 	add.w	r0, r7, #23
 800818a:	f107 0218 	add.w	r2, r7, #24
 800818e:	f107 011c 	add.w	r1, r7, #28
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	4603      	mov	r3, r0
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 f9e1 	bl	8008560 <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 800819e:	68f9      	ldr	r1, [r7, #12]
 80081a0:	2080      	movs	r0, #128	; 0x80
 80081a2:	f000 ff0a 	bl	8008fba <are_settings_changed>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d008      	beq.n	80081be <set_odr_filter_settings+0x7a>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 80081ac:	f107 0217 	add.w	r2, r7, #23
 80081b0:	f107 0118 	add.w	r1, r7, #24
 80081b4:	f107 001c 	add.w	r0, r7, #28
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	f000 fa28 	bl	800860e <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 80081be:	68f9      	ldr	r1, [r7, #12]
 80081c0:	2040      	movs	r0, #64	; 0x40
 80081c2:	f000 fefa 	bl	8008fba <are_settings_changed>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d008      	beq.n	80081de <set_odr_filter_settings+0x9a>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 80081cc:	f107 0217 	add.w	r2, r7, #23
 80081d0:	f107 0118 	add.w	r1, r7, #24
 80081d4:	f107 001c 	add.w	r0, r7, #28
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	f000 fa51 	bl	8008680 <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	2b03      	cmp	r3, #3
 80081e4:	d104      	bne.n	80081f0 <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 80081e6:	68b8      	ldr	r0, [r7, #8]
 80081e8:	f000 f904 	bl	80083f4 <validate_osr_and_odr_settings>
 80081ec:	4603      	mov	r3, r0
 80081ee:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMP3_OK)
 80081f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10a      	bne.n	800820e <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 80081f8:	7dfb      	ldrb	r3, [r7, #23]
 80081fa:	461a      	mov	r2, r3
 80081fc:	f107 0118 	add.w	r1, r7, #24
 8008200:	f107 001c 	add.w	r0, r7, #28
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f7ff fc3e 	bl	8007a86 <bmp3_set_regs>
 800820a:	4603      	mov	r3, r0
 800820c:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 800820e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3720      	adds	r7, #32
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	08012838 	.word	0x08012838

08008220 <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 800822c:	2319      	movs	r3, #25
 800822e:	757b      	strb	r3, [r7, #21]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8008230:	7d78      	ldrb	r0, [r7, #21]
 8008232:	f107 0116 	add.w	r1, r7, #22
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f7ff fb94 	bl	8007966 <bmp3_get_regs>
 800823e:	4603      	mov	r3, r0
 8008240:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8008242:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d15e      	bne.n	8008308 <set_int_ctrl_settings+0xe8>
    {
        int_settings = settings->int_settings;
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	f107 0310 	add.w	r3, r7, #16
 8008250:	3207      	adds	r2, #7
 8008252:	6810      	ldr	r0, [r2, #0]
 8008254:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00d      	beq.n	800827c <set_int_ctrl_settings+0x5c>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8008260:	7dbb      	ldrb	r3, [r7, #22]
 8008262:	b25b      	sxtb	r3, r3
 8008264:	f023 0301 	bic.w	r3, r3, #1
 8008268:	b25a      	sxtb	r2, r3
 800826a:	7c3b      	ldrb	r3, [r7, #16]
 800826c:	b25b      	sxtb	r3, r3
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	b25b      	sxtb	r3, r3
 8008274:	4313      	orrs	r3, r2
 8008276:	b25b      	sxtb	r3, r3
 8008278:	b2db      	uxtb	r3, r3
 800827a:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00e      	beq.n	80082a4 <set_int_ctrl_settings+0x84>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 8008286:	7dbb      	ldrb	r3, [r7, #22]
 8008288:	b25b      	sxtb	r3, r3
 800828a:	f023 0302 	bic.w	r3, r3, #2
 800828e:	b25a      	sxtb	r2, r3
 8008290:	7c7b      	ldrb	r3, [r7, #17]
 8008292:	005b      	lsls	r3, r3, #1
 8008294:	b25b      	sxtb	r3, r3
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	b25b      	sxtb	r3, r3
 800829c:	4313      	orrs	r3, r2
 800829e:	b25b      	sxtb	r3, r3
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00e      	beq.n	80082cc <set_int_ctrl_settings+0xac>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 80082ae:	7dbb      	ldrb	r3, [r7, #22]
 80082b0:	b25b      	sxtb	r3, r3
 80082b2:	f023 0304 	bic.w	r3, r3, #4
 80082b6:	b25a      	sxtb	r2, r3
 80082b8:	7cbb      	ldrb	r3, [r7, #18]
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	b25b      	sxtb	r3, r3
 80082be:	f003 0304 	and.w	r3, r3, #4
 80082c2:	b25b      	sxtb	r3, r3
 80082c4:	4313      	orrs	r3, r2
 80082c6:	b25b      	sxtb	r3, r3
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f003 0308 	and.w	r3, r3, #8
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00e      	beq.n	80082f4 <set_int_ctrl_settings+0xd4>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 80082d6:	7dbb      	ldrb	r3, [r7, #22]
 80082d8:	b25b      	sxtb	r3, r3
 80082da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082de:	b25a      	sxtb	r2, r3
 80082e0:	7cfb      	ldrb	r3, [r7, #19]
 80082e2:	019b      	lsls	r3, r3, #6
 80082e4:	b25b      	sxtb	r3, r3
 80082e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ea:	b25b      	sxtb	r3, r3
 80082ec:	4313      	orrs	r3, r2
 80082ee:	b25b      	sxtb	r3, r3
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	75bb      	strb	r3, [r7, #22]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80082f4:	f107 0116 	add.w	r1, r7, #22
 80082f8:	f107 0015 	add.w	r0, r7, #21
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f7ff fbc1 	bl	8007a86 <bmp3_set_regs>
 8008304:	4603      	mov	r3, r0
 8008306:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8008308:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3718      	adds	r7, #24
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	f107 0310 	add.w	r3, r7, #16
 8008326:	320b      	adds	r2, #11
 8008328:	8812      	ldrh	r2, [r2, #0]
 800832a:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 800832c:	231a      	movs	r3, #26
 800832e:	75bb      	strb	r3, [r7, #22]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8008330:	7db8      	ldrb	r0, [r7, #22]
 8008332:	f107 0115 	add.w	r1, r7, #21
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2201      	movs	r2, #1
 800833a:	f7ff fb14 	bl	8007966 <bmp3_get_regs>
 800833e:	4603      	mov	r3, r0
 8008340:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8008342:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d131      	bne.n	80083ae <set_advance_settings+0x9a>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00e      	beq.n	8008372 <set_advance_settings+0x5e>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8008354:	7d7b      	ldrb	r3, [r7, #21]
 8008356:	b25b      	sxtb	r3, r3
 8008358:	f023 0302 	bic.w	r3, r3, #2
 800835c:	b25a      	sxtb	r2, r3
 800835e:	7c3b      	ldrb	r3, [r7, #16]
 8008360:	005b      	lsls	r3, r3, #1
 8008362:	b25b      	sxtb	r3, r3
 8008364:	f003 0302 	and.w	r3, r3, #2
 8008368:	b25b      	sxtb	r3, r3
 800836a:	4313      	orrs	r3, r2
 800836c:	b25b      	sxtb	r3, r3
 800836e:	b2db      	uxtb	r3, r3
 8008370:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00e      	beq.n	800839a <set_advance_settings+0x86>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 800837c:	7d7b      	ldrb	r3, [r7, #21]
 800837e:	b25b      	sxtb	r3, r3
 8008380:	f023 0304 	bic.w	r3, r3, #4
 8008384:	b25a      	sxtb	r2, r3
 8008386:	7c7b      	ldrb	r3, [r7, #17]
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	b25b      	sxtb	r3, r3
 800838c:	f003 0304 	and.w	r3, r3, #4
 8008390:	b25b      	sxtb	r3, r3
 8008392:	4313      	orrs	r3, r2
 8008394:	b25b      	sxtb	r3, r3
 8008396:	b2db      	uxtb	r3, r3
 8008398:	757b      	strb	r3, [r7, #21]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 800839a:	f107 0115 	add.w	r1, r7, #21
 800839e:	f107 0016 	add.w	r0, r7, #22
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f7ff fb6e 	bl	8007a86 <bmp3_set_regs>
 80083aa:	4603      	mov	r3, r0
 80083ac:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80083ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3718      	adds	r7, #24
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b084      	sub	sp, #16
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 80083c4:	f107 0108 	add.w	r1, r7, #8
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	2204      	movs	r2, #4
 80083cc:	201c      	movs	r0, #28
 80083ce:	f7ff faca 	bl	8007966 <bmp3_get_regs>
 80083d2:	4603      	mov	r3, r0
 80083d4:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	1cda      	adds	r2, r3, #3
 80083da:	f107 0308 	add.w	r3, r7, #8
 80083de:	4611      	mov	r1, r2
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7ff fe27 	bl	8008034 <parse_odr_filter_settings>

    return rslt;
 80083e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
	...

080083f4 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b098      	sub	sp, #96	; 0x60
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 80083fc:	23ea      	movs	r3, #234	; 0xea
 80083fe:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8008400:	2300      	movs	r3, #0
 8008402:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8008404:	4a1a      	ldr	r2, [pc, #104]	; (8008470 <validate_osr_and_odr_settings+0x7c>)
 8008406:	f107 030c 	add.w	r3, r7, #12
 800840a:	4611      	mov	r1, r2
 800840c:	2248      	movs	r2, #72	; 0x48
 800840e:	4618      	mov	r0, r3
 8008410:	f005 faec 	bl	800d9ec <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	785b      	ldrb	r3, [r3, #1]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d006      	beq.n	800842a <validate_osr_and_odr_settings+0x36>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f83f 	bl	80084a0 <calculate_press_meas_time>
 8008422:	4602      	mov	r2, r0
 8008424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008426:	4413      	add	r3, r2
 8008428:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (settings->temp_en)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	789b      	ldrb	r3, [r3, #2]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d006      	beq.n	8008440 <validate_osr_and_odr_settings+0x4c>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f864 	bl	8008500 <calculate_temp_meas_time>
 8008438:	4602      	mov	r2, r0
 800843a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800843c:	4413      	add	r3, r2
 800843e:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8008440:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008444:	4413      	add	r3, r2
 8008446:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	799b      	ldrb	r3, [r3, #6]
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	3360      	adds	r3, #96	; 0x60
 8008450:	443b      	add	r3, r7
 8008452:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008456:	4619      	mov	r1, r3
 8008458:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800845a:	f000 f80b 	bl	8008474 <verify_meas_time_and_odr_duration>
 800845e:	4603      	mov	r3, r0
 8008460:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 8008464:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8008468:	4618      	mov	r0, r3
 800846a:	3760      	adds	r7, #96	; 0x60
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	0801283c 	.word	0x0801283c

08008474 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	429a      	cmp	r2, r3
 8008484:	d202      	bcs.n	800848c <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	73fb      	strb	r3, [r7, #15]
 800848a:	e001      	b.n	8008490 <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 800848c:	23fd      	movs	r3, #253	; 0xfd
 800848e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008490:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3714      	adds	r7, #20
 8008498:	46bd      	mov	sp, r7
 800849a:	bc80      	pop	{r7}
 800849c:	4770      	bx	lr
	...

080084a0 <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b088      	sub	sp, #32
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	f107 030c 	add.w	r3, r7, #12
 80084ae:	3203      	adds	r2, #3
 80084b0:	6810      	ldr	r0, [r2, #0]
 80084b2:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 80084b4:	f04f 0200 	mov.w	r2, #0
 80084b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80084bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 80084c0:	7b3b      	ldrb	r3, [r7, #12]
 80084c2:	461a      	mov	r2, r3
 80084c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80084c8:	f000 fd56 	bl	8008f78 <pow_bmp3>
 80084cc:	6178      	str	r0, [r7, #20]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 80084ce:	490a      	ldr	r1, [pc, #40]	; (80084f8 <calculate_press_meas_time+0x58>)
 80084d0:	6978      	ldr	r0, [r7, #20]
 80084d2:	f7f8 fc57 	bl	8000d84 <__aeabi_fmul>
 80084d6:	4603      	mov	r3, r0
 80084d8:	4908      	ldr	r1, [pc, #32]	; (80084fc <calculate_press_meas_time+0x5c>)
 80084da:	4618      	mov	r0, r3
 80084dc:	f7f8 fb4a 	bl	8000b74 <__addsf3>
 80084e0:	4603      	mov	r3, r0
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7f8 fe50 	bl	8001188 <__aeabi_f2uiz>
 80084e8:	4603      	mov	r3, r0
 80084ea:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 80084ec:	693b      	ldr	r3, [r7, #16]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3720      	adds	r7, #32
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	44fa0000 	.word	0x44fa0000
 80084fc:	43c40000 	.word	0x43c40000

08008500 <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b088      	sub	sp, #32
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	f107 030c 	add.w	r3, r7, #12
 800850e:	3203      	adds	r2, #3
 8008510:	6810      	ldr	r0, [r2, #0]
 8008512:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8008514:	f04f 0200 	mov.w	r2, #0
 8008518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800851c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8008520:	7b7b      	ldrb	r3, [r7, #13]
 8008522:	461a      	mov	r2, r3
 8008524:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008528:	f000 fd26 	bl	8008f78 <pow_bmp3>
 800852c:	6178      	str	r0, [r7, #20]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 800852e:	490a      	ldr	r1, [pc, #40]	; (8008558 <calculate_temp_meas_time+0x58>)
 8008530:	6978      	ldr	r0, [r7, #20]
 8008532:	f7f8 fc27 	bl	8000d84 <__aeabi_fmul>
 8008536:	4603      	mov	r3, r0
 8008538:	4908      	ldr	r1, [pc, #32]	; (800855c <calculate_temp_meas_time+0x5c>)
 800853a:	4618      	mov	r0, r3
 800853c:	f7f8 fb1a 	bl	8000b74 <__addsf3>
 8008540:	4603      	mov	r3, r0
 8008542:	4618      	mov	r0, r3
 8008544:	f7f8 fe20 	bl	8001188 <__aeabi_f2uiz>
 8008548:	4603      	mov	r3, r0
 800854a:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 800854c:	693b      	ldr	r3, [r7, #16]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3720      	adds	r7, #32
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	44fa0000 	.word	0x44fa0000
 800855c:	439c8000 	.word	0x439c8000

08008560 <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 8008560:	b480      	push	{r7}
 8008562:	b087      	sub	sp, #28
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
 800856c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 800856e:	6a3a      	ldr	r2, [r7, #32]
 8008570:	f107 0314 	add.w	r3, r7, #20
 8008574:	3203      	adds	r2, #3
 8008576:	6810      	ldr	r0, [r2, #0]
 8008578:	6018      	str	r0, [r3, #0]

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008580:	2b00      	cmp	r3, #0
 8008582:	d03f      	beq.n	8008604 <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f003 0310 	and.w	r3, r3, #16
 800858a:	2b00      	cmp	r3, #0
 800858c:	d013      	beq.n	80085b6 <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	b25b      	sxtb	r3, r3
 8008594:	f023 0307 	bic.w	r3, r3, #7
 8008598:	b25a      	sxtb	r2, r3
 800859a:	7d3b      	ldrb	r3, [r7, #20]
 800859c:	b25b      	sxtb	r3, r3
 800859e:	f003 0307 	and.w	r3, r3, #7
 80085a2:	b25b      	sxtb	r3, r3
 80085a4:	4313      	orrs	r3, r2
 80085a6:	b25a      	sxtb	r2, r3
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	4619      	mov	r1, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	440b      	add	r3, r1
 80085b2:	b2d2      	uxtb	r2, r2
 80085b4:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f003 0320 	and.w	r3, r3, #32
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d014      	beq.n	80085ea <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	b25b      	sxtb	r3, r3
 80085c6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80085ca:	b25a      	sxtb	r2, r3
 80085cc:	7d7b      	ldrb	r3, [r7, #21]
 80085ce:	00db      	lsls	r3, r3, #3
 80085d0:	b25b      	sxtb	r3, r3
 80085d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085d6:	b25b      	sxtb	r3, r3
 80085d8:	4313      	orrs	r3, r2
 80085da:	b25a      	sxtb	r2, r3
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	4619      	mov	r1, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	440b      	add	r3, r1
 80085e6:	b2d2      	uxtb	r2, r2
 80085e8:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	461a      	mov	r2, r3
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	4413      	add	r3, r2
 80085f4:	221c      	movs	r2, #28
 80085f6:	701a      	strb	r2, [r3, #0]
        (*len)++;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	3301      	adds	r3, #1
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	701a      	strb	r2, [r3, #0]
    }
}
 8008604:	bf00      	nop
 8008606:	371c      	adds	r7, #28
 8008608:	46bd      	mov	sp, r7
 800860a:	bc80      	pop	{r7}
 800860c:	4770      	bx	lr

0800860e <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 800860e:	b480      	push	{r7}
 8008610:	b087      	sub	sp, #28
 8008612:	af00      	add	r7, sp, #0
 8008614:	60f8      	str	r0, [r7, #12]
 8008616:	60b9      	str	r1, [r7, #8]
 8008618:	607a      	str	r2, [r7, #4]
 800861a:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	3303      	adds	r3, #3
 8008620:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	78db      	ldrb	r3, [r3, #3]
 8008626:	2b11      	cmp	r3, #17
 8008628:	d902      	bls.n	8008630 <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	2211      	movs	r2, #17
 800862e:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	3301      	adds	r3, #1
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	b25b      	sxtb	r3, r3
 8008638:	f023 031f 	bic.w	r3, r3, #31
 800863c:	b25a      	sxtb	r2, r3
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	78db      	ldrb	r3, [r3, #3]
 8008642:	b25b      	sxtb	r3, r3
 8008644:	f003 031f 	and.w	r3, r3, #31
 8008648:	b25b      	sxtb	r3, r3
 800864a:	4313      	orrs	r3, r2
 800864c:	b25a      	sxtb	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	4619      	mov	r1, r3
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	440b      	add	r3, r1
 8008658:	b2d2      	uxtb	r2, r2
 800865a:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	461a      	mov	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	4413      	add	r3, r2
 8008666:	221d      	movs	r2, #29
 8008668:	701a      	strb	r2, [r3, #0]
    (*len)++;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	3301      	adds	r3, #1
 8008670:	b2da      	uxtb	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	701a      	strb	r2, [r3, #0]
}
 8008676:	bf00      	nop
 8008678:	371c      	adds	r7, #28
 800867a:	46bd      	mov	sp, r7
 800867c:	bc80      	pop	{r7}
 800867e:	4770      	bx	lr

08008680 <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
 800868c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	f107 0314 	add.w	r3, r7, #20
 8008694:	3203      	adds	r2, #3
 8008696:	6810      	ldr	r0, [r2, #0]
 8008698:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	3303      	adds	r3, #3
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	b25b      	sxtb	r3, r3
 80086a2:	f023 030e 	bic.w	r3, r3, #14
 80086a6:	b25a      	sxtb	r2, r3
 80086a8:	7dbb      	ldrb	r3, [r7, #22]
 80086aa:	005b      	lsls	r3, r3, #1
 80086ac:	b25b      	sxtb	r3, r3
 80086ae:	f003 030e 	and.w	r3, r3, #14
 80086b2:	b25b      	sxtb	r3, r3
 80086b4:	4313      	orrs	r3, r2
 80086b6:	b25a      	sxtb	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	4619      	mov	r1, r3
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	440b      	add	r3, r1
 80086c2:	b2d2      	uxtb	r2, r2
 80086c4:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	461a      	mov	r2, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	4413      	add	r3, r2
 80086d0:	221f      	movs	r2, #31
 80086d2:	701a      	strb	r2, [r3, #0]
    (*len)++;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	3301      	adds	r3, #1
 80086da:	b2da      	uxtb	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	701a      	strb	r2, [r3, #0]
}
 80086e0:	bf00      	nop
 80086e2:	371c      	adds	r7, #28
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bc80      	pop	{r7}
 80086e8:	4770      	bx	lr

080086ea <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 80086ea:	b4b0      	push	{r4, r5, r7}
 80086ec:	b087      	sub	sp, #28
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 80086f4:	6879      	ldr	r1, [r7, #4]
 80086f6:	7809      	ldrb	r1, [r1, #0]
 80086f8:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 80086fa:	6879      	ldr	r1, [r7, #4]
 80086fc:	3101      	adds	r1, #1
 80086fe:	7809      	ldrb	r1, [r1, #0]
 8008700:	0209      	lsls	r1, r1, #8
 8008702:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 8008704:	6879      	ldr	r1, [r7, #4]
 8008706:	3102      	adds	r1, #2
 8008708:	7809      	ldrb	r1, [r1, #0]
 800870a:	0409      	lsls	r1, r1, #16
 800870c:	60f9      	str	r1, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	6939      	ldr	r1, [r7, #16]
 8008712:	4308      	orrs	r0, r1
 8008714:	6979      	ldr	r1, [r7, #20]
 8008716:	4301      	orrs	r1, r0
 8008718:	2000      	movs	r0, #0
 800871a:	460c      	mov	r4, r1
 800871c:	4605      	mov	r5, r0
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	e9c1 4500 	strd	r4, r5, [r1]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 8008724:	6879      	ldr	r1, [r7, #4]
 8008726:	3103      	adds	r1, #3
 8008728:	7809      	ldrb	r1, [r1, #0]
 800872a:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 800872c:	6879      	ldr	r1, [r7, #4]
 800872e:	3104      	adds	r1, #4
 8008730:	7809      	ldrb	r1, [r1, #0]
 8008732:	0209      	lsls	r1, r1, #8
 8008734:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8008736:	6879      	ldr	r1, [r7, #4]
 8008738:	3105      	adds	r1, #5
 800873a:	7809      	ldrb	r1, [r1, #0]
 800873c:	0409      	lsls	r1, r1, #16
 800873e:	60f9      	str	r1, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	6939      	ldr	r1, [r7, #16]
 8008744:	4308      	orrs	r0, r1
 8008746:	6979      	ldr	r1, [r7, #20]
 8008748:	4301      	orrs	r1, r0
 800874a:	2000      	movs	r0, #0
 800874c:	460a      	mov	r2, r1
 800874e:	4603      	mov	r3, r0
 8008750:	6839      	ldr	r1, [r7, #0]
 8008752:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8008756:	bf00      	nop
 8008758:	371c      	adds	r7, #28
 800875a:	46bd      	mov	sp, r7
 800875c:	bcb0      	pop	{r4, r5, r7}
 800875e:	4770      	bx	lr

08008760 <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	607a      	str	r2, [r7, #4]
 800876a:	603b      	str	r3, [r7, #0]
 800876c:	4603      	mov	r3, r0
 800876e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d05a      	beq.n	8008830 <compensate_data+0xd0>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d057      	beq.n	8008830 <compensate_data+0xd0>
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d054      	beq.n	8008830 <compensate_data+0xd0>
    {
        /* If pressure and temperature component is selected */
        if (sensor_comp == BMP3_PRESS_TEMP)
 8008786:	7bfb      	ldrb	r3, [r7, #15]
 8008788:	2b03      	cmp	r3, #3
 800878a:	d115      	bne.n	80087b8 <compensate_data+0x58>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation
             */

            /* Compensate pressure and temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	683a      	ldr	r2, [r7, #0]
 8008790:	68b9      	ldr	r1, [r7, #8]
 8008792:	4618      	mov	r0, r3
 8008794:	f000 fa1e 	bl	8008bd4 <compensate_temperature>
 8008798:	4603      	mov	r3, r0
 800879a:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP3_OK)
 800879c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d148      	bne.n	8008836 <compensate_data+0xd6>
            {
                rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	3308      	adds	r3, #8
 80087a8:	683a      	ldr	r2, [r7, #0]
 80087aa:	68b9      	ldr	r1, [r7, #8]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f000 fa8b 	bl	8008cc8 <compensate_pressure>
 80087b2:	4603      	mov	r3, r0
 80087b4:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 80087b6:	e03e      	b.n	8008836 <compensate_data+0xd6>
            }
        }
        else if (sensor_comp == BMP3_PRESS)
 80087b8:	7bfb      	ldrb	r3, [r7, #15]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d116      	bne.n	80087ec <compensate_data+0x8c>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation.
             * As only pressure is enabled in 'sensor_comp', after calculating
             * compensated temperature, assign it to zero.
             */
            (void)compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	68b9      	ldr	r1, [r7, #8]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 fa05 	bl	8008bd4 <compensate_temperature>
            comp_data->temperature = 0;
 80087ca:	6879      	ldr	r1, [r7, #4]
 80087cc:	f04f 0200 	mov.w	r2, #0
 80087d0:	f04f 0300 	mov.w	r3, #0
 80087d4:	e9c1 2300 	strd	r2, r3, [r1]

            /* Compensate the pressure data */
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	3308      	adds	r3, #8
 80087dc:	683a      	ldr	r2, [r7, #0]
 80087de:	68b9      	ldr	r1, [r7, #8]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 fa71 	bl	8008cc8 <compensate_pressure>
 80087e6:	4603      	mov	r3, r0
 80087e8:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 80087ea:	e024      	b.n	8008836 <compensate_data+0xd6>
        }
        else if (sensor_comp == BMP3_TEMP)
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d10f      	bne.n	8008812 <compensate_data+0xb2>
        {
            /* Compensate the temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	683a      	ldr	r2, [r7, #0]
 80087f6:	68b9      	ldr	r1, [r7, #8]
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 f9eb 	bl	8008bd4 <compensate_temperature>
 80087fe:	4603      	mov	r3, r0
 8008800:	75fb      	strb	r3, [r7, #23]

            /*
             * As only temperature is enabled in 'sensor_comp'
             * make compensated pressure as zero
             */
            comp_data->pressure = 0;
 8008802:	6879      	ldr	r1, [r7, #4]
 8008804:	f04f 0200 	mov.w	r2, #0
 8008808:	f04f 0300 	mov.w	r3, #0
 800880c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8008810:	e011      	b.n	8008836 <compensate_data+0xd6>
        }
        else
        {
            comp_data->pressure = 0;
 8008812:	6879      	ldr	r1, [r7, #4]
 8008814:	f04f 0200 	mov.w	r2, #0
 8008818:	f04f 0300 	mov.w	r3, #0
 800881c:	e9c1 2302 	strd	r2, r3, [r1, #8]
            comp_data->temperature = 0;
 8008820:	6879      	ldr	r1, [r7, #4]
 8008822:	f04f 0200 	mov.w	r2, #0
 8008826:	f04f 0300 	mov.w	r3, #0
 800882a:	e9c1 2300 	strd	r2, r3, [r1]
        if (sensor_comp == BMP3_PRESS_TEMP)
 800882e:	e002      	b.n	8008836 <compensate_data+0xd6>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8008830:	23ff      	movs	r3, #255	; 0xff
 8008832:	75fb      	strb	r3, [r7, #23]
 8008834:	e000      	b.n	8008838 <compensate_data+0xd8>
        if (sensor_comp == BMP3_PRESS_TEMP)
 8008836:	bf00      	nop
    }

    return rslt;
 8008838:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3718      	adds	r7, #24
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	3390      	adds	r3, #144	; 0x90
 8008852:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	3318      	adds	r3, #24
 8008858:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 800885a:	f04f 0200 	mov.w	r2, #0
 800885e:	4ba4      	ldr	r3, [pc, #656]	; (8008af0 <parse_calib_data+0x2ac>)
 8008860:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	3301      	adds	r3, #1
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	021b      	lsls	r3, r3, #8
 800886c:	b21a      	sxth	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	b21b      	sxth	r3, r3
 8008874:	4313      	orrs	r3, r2
 8008876:	b21b      	sxth	r3, r3
 8008878:	b29a      	uxth	r2, r3
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	881b      	ldrh	r3, [r3, #0]
 8008882:	4618      	mov	r0, r3
 8008884:	f7f7 fdae 	bl	80003e4 <__aeabi_ui2d>
 8008888:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800888c:	f7f7 ff4e 	bl	800072c <__aeabi_ddiv>
 8008890:	4602      	mov	r2, r0
 8008892:	460b      	mov	r3, r1
 8008894:	6939      	ldr	r1, [r7, #16]
 8008896:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	3303      	adds	r3, #3
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	021b      	lsls	r3, r3, #8
 80088a2:	b21a      	sxth	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3302      	adds	r3, #2
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	b21b      	sxth	r3, r3
 80088ac:	4313      	orrs	r3, r2
 80088ae:	b21b      	sxth	r3, r3
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 80088b6:	f04f 0200 	mov.w	r2, #0
 80088ba:	4b8e      	ldr	r3, [pc, #568]	; (8008af4 <parse_calib_data+0x2b0>)
 80088bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	885b      	ldrh	r3, [r3, #2]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7f7 fd8d 	bl	80003e4 <__aeabi_ui2d>
 80088ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088ce:	f7f7 ff2d 	bl	800072c <__aeabi_ddiv>
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
 80088d6:	6939      	ldr	r1, [r7, #16]
 80088d8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	3304      	adds	r3, #4
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	b25a      	sxtb	r2, r3
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 80088e8:	f04f 0200 	mov.w	r2, #0
 80088ec:	4b82      	ldr	r3, [pc, #520]	; (8008af8 <parse_calib_data+0x2b4>)
 80088ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7f7 fd83 	bl	8000404 <__aeabi_i2d>
 80088fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008902:	f7f7 ff13 	bl	800072c <__aeabi_ddiv>
 8008906:	4602      	mov	r2, r0
 8008908:	460b      	mov	r3, r1
 800890a:	6939      	ldr	r1, [r7, #16]
 800890c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	3306      	adds	r3, #6
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	021b      	lsls	r3, r3, #8
 8008918:	b21a      	sxth	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	3305      	adds	r3, #5
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	b21b      	sxth	r3, r3
 8008922:	4313      	orrs	r3, r2
 8008924:	b21a      	sxth	r2, r3
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 800892a:	f04f 0200 	mov.w	r2, #0
 800892e:	4b73      	ldr	r3, [pc, #460]	; (8008afc <parse_calib_data+0x2b8>)
 8008930:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800893a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800893e:	4618      	mov	r0, r3
 8008940:	f7f7 fd60 	bl	8000404 <__aeabi_i2d>
 8008944:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008948:	f7f7 fef0 	bl	800072c <__aeabi_ddiv>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	6939      	ldr	r1, [r7, #16]
 8008952:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	3308      	adds	r3, #8
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	021b      	lsls	r3, r3, #8
 800895e:	b21a      	sxth	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3307      	adds	r3, #7
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	b21b      	sxth	r3, r3
 8008968:	4313      	orrs	r3, r2
 800896a:	b21a      	sxth	r2, r3
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 8008970:	f04f 0200 	mov.w	r2, #0
 8008974:	4b62      	ldr	r3, [pc, #392]	; (8008b00 <parse_calib_data+0x2bc>)
 8008976:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008980:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8008984:	4618      	mov	r0, r3
 8008986:	f7f7 fd3d 	bl	8000404 <__aeabi_i2d>
 800898a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800898e:	f7f7 fecd 	bl	800072c <__aeabi_ddiv>
 8008992:	4602      	mov	r2, r0
 8008994:	460b      	mov	r3, r1
 8008996:	6939      	ldr	r1, [r7, #16]
 8008998:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	3309      	adds	r3, #9
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	b25a      	sxtb	r2, r3
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 80089a8:	f04f 0200 	mov.w	r2, #0
 80089ac:	4b55      	ldr	r3, [pc, #340]	; (8008b04 <parse_calib_data+0x2c0>)
 80089ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7f7 fd23 	bl	8000404 <__aeabi_i2d>
 80089be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80089c2:	f7f7 feb3 	bl	800072c <__aeabi_ddiv>
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	6939      	ldr	r1, [r7, #16]
 80089cc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	330a      	adds	r3, #10
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	b25a      	sxtb	r2, r3
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 80089dc:	f04f 0200 	mov.w	r2, #0
 80089e0:	4b49      	ldr	r3, [pc, #292]	; (8008b08 <parse_calib_data+0x2c4>)
 80089e2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7f7 fd09 	bl	8000404 <__aeabi_i2d>
 80089f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80089f6:	f7f7 fe99 	bl	800072c <__aeabi_ddiv>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
 80089fe:	6939      	ldr	r1, [r7, #16]
 8008a00:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	330c      	adds	r3, #12
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	021b      	lsls	r3, r3, #8
 8008a0c:	b21a      	sxth	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	330b      	adds	r3, #11
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	b21b      	sxth	r3, r3
 8008a16:	4313      	orrs	r3, r2
 8008a18:	b21b      	sxth	r3, r3
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 8008a20:	f04f 0200 	mov.w	r2, #0
 8008a24:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008a28:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	899b      	ldrh	r3, [r3, #12]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7f7 fcd7 	bl	80003e4 <__aeabi_ui2d>
 8008a36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a3a:	f7f7 fe77 	bl	800072c <__aeabi_ddiv>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	460b      	mov	r3, r1
 8008a42:	6939      	ldr	r1, [r7, #16]
 8008a44:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	330e      	adds	r3, #14
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	021b      	lsls	r3, r3, #8
 8008a50:	b21a      	sxth	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	330d      	adds	r3, #13
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	b21b      	sxth	r3, r3
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	b21b      	sxth	r3, r3
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 8008a64:	f04f 0200 	mov.w	r2, #0
 8008a68:	4b28      	ldr	r3, [pc, #160]	; (8008b0c <parse_calib_data+0x2c8>)
 8008a6a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	89db      	ldrh	r3, [r3, #14]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7f7 fcb6 	bl	80003e4 <__aeabi_ui2d>
 8008a78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a7c:	f7f7 fe56 	bl	800072c <__aeabi_ddiv>
 8008a80:	4602      	mov	r2, r0
 8008a82:	460b      	mov	r3, r1
 8008a84:	6939      	ldr	r1, [r7, #16]
 8008a86:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	330f      	adds	r3, #15
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	b25a      	sxtb	r2, r3
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 8008a96:	f04f 0200 	mov.w	r2, #0
 8008a9a:	4b1d      	ldr	r3, [pc, #116]	; (8008b10 <parse_calib_data+0x2cc>)
 8008a9c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7f7 fcac 	bl	8000404 <__aeabi_i2d>
 8008aac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ab0:	f7f7 fe3c 	bl	800072c <__aeabi_ddiv>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	6939      	ldr	r1, [r7, #16]
 8008aba:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	3310      	adds	r3, #16
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	b25a      	sxtb	r2, r3
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 8008aca:	f04f 0200 	mov.w	r2, #0
 8008ace:	4b11      	ldr	r3, [pc, #68]	; (8008b14 <parse_calib_data+0x2d0>)
 8008ad0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7f7 fc92 	bl	8000404 <__aeabi_i2d>
 8008ae0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ae4:	f7f7 fe22 	bl	800072c <__aeabi_ddiv>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	460b      	mov	r3, r1
 8008aec:	6939      	ldr	r1, [r7, #16]
 8008aee:	e013      	b.n	8008b18 <parse_calib_data+0x2d4>
 8008af0:	3f700000 	.word	0x3f700000
 8008af4:	41d00000 	.word	0x41d00000
 8008af8:	42f00000 	.word	0x42f00000
 8008afc:	41300000 	.word	0x41300000
 8008b00:	41c00000 	.word	0x41c00000
 8008b04:	41f00000 	.word	0x41f00000
 8008b08:	42400000 	.word	0x42400000
 8008b0c:	40500000 	.word	0x40500000
 8008b10:	40700000 	.word	0x40700000
 8008b14:	40e00000 	.word	0x40e00000
 8008b18:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	3312      	adds	r3, #18
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	021b      	lsls	r3, r3, #8
 8008b24:	b21a      	sxth	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	3311      	adds	r3, #17
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	b21b      	sxth	r3, r3
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	b21a      	sxth	r2, r3
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 8008b36:	f04f 0200 	mov.w	r2, #0
 8008b3a:	4b25      	ldr	r3, [pc, #148]	; (8008bd0 <parse_calib_data+0x38c>)
 8008b3c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7f7 fc5c 	bl	8000404 <__aeabi_i2d>
 8008b4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b50:	f7f7 fdec 	bl	800072c <__aeabi_ddiv>
 8008b54:	4602      	mov	r2, r0
 8008b56:	460b      	mov	r3, r1
 8008b58:	6939      	ldr	r1, [r7, #16]
 8008b5a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	3313      	adds	r3, #19
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	b25a      	sxtb	r2, r3
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 8008b6a:	f04f 0200 	mov.w	r2, #0
 8008b6e:	4b18      	ldr	r3, [pc, #96]	; (8008bd0 <parse_calib_data+0x38c>)
 8008b70:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7f7 fc42 	bl	8000404 <__aeabi_i2d>
 8008b80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b84:	f7f7 fdd2 	bl	800072c <__aeabi_ddiv>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	6939      	ldr	r1, [r7, #16]
 8008b8e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	3314      	adds	r3, #20
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	b25a      	sxtb	r2, r3
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 8008b9e:	f04f 0200 	mov.w	r2, #0
 8008ba2:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 8008ba6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7f7 fc27 	bl	8000404 <__aeabi_i2d>
 8008bb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008bba:	f7f7 fdb7 	bl	800072c <__aeabi_ddiv>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	6939      	ldr	r1, [r7, #16]
 8008bc4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8008bc8:	bf00      	nop
 8008bca:	3718      	adds	r7, #24
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	42f00000 	.word	0x42f00000

08008bd4 <compensate_temperature>:
 * For e.g. Returns temperature 24.26 deg Celsius
 */
static int8_t compensate_temperature(double *temperature,
                                     const struct bmp3_uncomp_data *uncomp_data,
                                     struct bmp3_calib_data *calib_data)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b08c      	sub	sp, #48	; 0x30
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int64_t uncomp_temp = uncomp_data->temperature;
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008bec:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 8008bf0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008bf4:	f7f7 fc42 	bl	800047c <__aeabi_l2d>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfe:	f7f7 fab3 	bl	8000168 <__aeabi_dsub>
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008c10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008c14:	f7f7 fc60 	bl	80004d8 <__aeabi_dmul>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8008c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c24:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008c28:	f7f7 fc56 	bl	80004d8 <__aeabi_dmul>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	460b      	mov	r3, r1
 8008c30:	4610      	mov	r0, r2
 8008c32:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8008c3a:	f7f7 fc4d 	bl	80004d8 <__aeabi_dmul>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	460b      	mov	r3, r1
 8008c42:	4610      	mov	r0, r2
 8008c44:	4619      	mov	r1, r3
 8008c46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008c4a:	f7f7 fa8f 	bl	800016c <__adddf3>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	6879      	ldr	r1, [r7, #4]
 8008c54:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* Returns compensated temperature */
    if (calib_data->quantized_calib_data.t_lin < BMP3_MIN_TEMP_DOUBLE)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8008c5e:	f04f 0200 	mov.w	r2, #0
 8008c62:	4b17      	ldr	r3, [pc, #92]	; (8008cc0 <compensate_temperature+0xec>)
 8008c64:	f7f7 feaa 	bl	80009bc <__aeabi_dcmplt>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d008      	beq.n	8008c80 <compensate_temperature+0xac>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MIN_TEMP_DOUBLE;
 8008c6e:	6879      	ldr	r1, [r7, #4]
 8008c70:	f04f 0200 	mov.w	r2, #0
 8008c74:	4b12      	ldr	r3, [pc, #72]	; (8008cc0 <compensate_temperature+0xec>)
 8008c76:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MIN_TEMP;
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (calib_data->quantized_calib_data.t_lin > BMP3_MAX_TEMP_DOUBLE)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8008c86:	f04f 0200 	mov.w	r2, #0
 8008c8a:	4b0e      	ldr	r3, [pc, #56]	; (8008cc4 <compensate_temperature+0xf0>)
 8008c8c:	f7f7 feb4 	bl	80009f8 <__aeabi_dcmpgt>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d008      	beq.n	8008ca8 <compensate_temperature+0xd4>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MAX_TEMP_DOUBLE;
 8008c96:	6879      	ldr	r1, [r7, #4]
 8008c98:	f04f 0200 	mov.w	r2, #0
 8008c9c:	4b09      	ldr	r3, [pc, #36]	; (8008cc4 <compensate_temperature+0xf0>)
 8008c9e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MAX_TEMP;
 8008ca2:	2304      	movs	r3, #4
 8008ca4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*temperature) = calib_data->quantized_calib_data.t_lin;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8008cae:	68f9      	ldr	r1, [r7, #12]
 8008cb0:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8008cb4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3730      	adds	r7, #48	; 0x30
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	c0440000 	.word	0xc0440000
 8008cc4:	40554000 	.word	0x40554000

08008cc8 <compensate_pressure>:
 * For e.g. returns pressure in Pascal p = 95305.295
 */
static int8_t compensate_pressure(double *pressure,
                                  const struct bmp3_uncomp_data *uncomp_data,
                                  const struct bmp3_calib_data *calib_data)
{
 8008cc8:	b5b0      	push	{r4, r5, r7, lr}
 8008cca:	b096      	sub	sp, #88	; 0x58
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	647b      	str	r3, [r7, #68]	; 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 8008cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ce0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8008ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ce6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8008cea:	f7f7 fbf5 	bl	80004d8 <__aeabi_dmul>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 8008cf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cf8:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8008cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cfe:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8008d02:	2202      	movs	r2, #2
 8008d04:	f000 f938 	bl	8008f78 <pow_bmp3>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7f7 fb8c 	bl	8000428 <__aeabi_f2d>
 8008d10:	4602      	mov	r2, r0
 8008d12:	460b      	mov	r3, r1
 8008d14:	4620      	mov	r0, r4
 8008d16:	4629      	mov	r1, r5
 8008d18:	f7f7 fbde 	bl	80004d8 <__aeabi_dmul>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 8008d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d26:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8008d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d2c:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8008d30:	2203      	movs	r2, #3
 8008d32:	f000 f921 	bl	8008f78 <pow_bmp3>
 8008d36:	4603      	mov	r3, r0
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7f7 fb75 	bl	8000428 <__aeabi_f2d>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	460b      	mov	r3, r1
 8008d42:	4620      	mov	r0, r4
 8008d44:	4629      	mov	r1, r5
 8008d46:	f7f7 fbc7 	bl	80004d8 <__aeabi_dmul>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 8008d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d54:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008d58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d5c:	f7f7 fa06 	bl	800016c <__adddf3>
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	4610      	mov	r0, r2
 8008d66:	4619      	mov	r1, r3
 8008d68:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008d6c:	f7f7 f9fe 	bl	800016c <__adddf3>
 8008d70:	4602      	mov	r2, r0
 8008d72:	460b      	mov	r3, r1
 8008d74:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008d78:	f7f7 f9f8 	bl	800016c <__adddf3>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 8008d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d86:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8008d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d8c:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8008d90:	f7f7 fba2 	bl	80004d8 <__aeabi_dmul>
 8008d94:	4602      	mov	r2, r0
 8008d96:	460b      	mov	r3, r1
 8008d98:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 8008d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d9e:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008da4:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8008da8:	2202      	movs	r2, #2
 8008daa:	f000 f8e5 	bl	8008f78 <pow_bmp3>
 8008dae:	4603      	mov	r3, r0
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7f7 fb39 	bl	8000428 <__aeabi_f2d>
 8008db6:	4602      	mov	r2, r0
 8008db8:	460b      	mov	r3, r1
 8008dba:	4620      	mov	r0, r4
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	f7f7 fb8b 	bl	80004d8 <__aeabi_dmul>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 8008dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dcc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8008dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dd2:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8008dd6:	2203      	movs	r2, #3
 8008dd8:	f000 f8ce 	bl	8008f78 <pow_bmp3>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7f7 fb22 	bl	8000428 <__aeabi_f2d>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	4620      	mov	r0, r4
 8008dea:	4629      	mov	r1, r5
 8008dec:	f7f7 fb74 	bl	80004d8 <__aeabi_dmul>
 8008df0:	4602      	mov	r2, r0
 8008df2:	460b      	mov	r3, r1
 8008df4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out2 = uncomp_data->pressure *
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfe:	4610      	mov	r0, r2
 8008e00:	4619      	mov	r1, r3
 8008e02:	f7f7 fb33 	bl	800046c <__aeabi_ul2d>
 8008e06:	4604      	mov	r4, r0
 8008e08:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 8008e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e0c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008e10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008e14:	f7f7 f9aa 	bl	800016c <__adddf3>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	4619      	mov	r1, r3
 8008e20:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008e24:	f7f7 f9a2 	bl	800016c <__adddf3>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	4610      	mov	r0, r2
 8008e2e:	4619      	mov	r1, r3
 8008e30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e34:	f7f7 f99a 	bl	800016c <__adddf3>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	4629      	mov	r1, r5
 8008e40:	f7f7 fb4a 	bl	80004d8 <__aeabi_dmul>
 8008e44:	4602      	mov	r2, r0
 8008e46:	460b      	mov	r3, r1
 8008e48:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e52:	4610      	mov	r0, r2
 8008e54:	4619      	mov	r1, r3
 8008e56:	f7f7 fb09 	bl	800046c <__aeabi_ul2d>
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	f000 f88c 	bl	8008f78 <pow_bmp3>
 8008e60:	4603      	mov	r3, r0
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7f7 fae0 	bl	8000428 <__aeabi_f2d>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 8008e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e72:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8008e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e78:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8008e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e7e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8008e82:	f7f7 fb29 	bl	80004d8 <__aeabi_dmul>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	4629      	mov	r1, r5
 8008e8e:	f7f7 f96d 	bl	800016c <__adddf3>
 8008e92:	4602      	mov	r2, r0
 8008e94:	460b      	mov	r3, r1
 8008e96:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = partial_data1 * partial_data2;
 8008e9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008e9e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008ea2:	f7f7 fb19 	bl	80004d8 <__aeabi_dmul>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb4:	4610      	mov	r0, r2
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	f7f7 fad8 	bl	800046c <__aeabi_ul2d>
 8008ebc:	2203      	movs	r2, #3
 8008ebe:	f000 f85b 	bl	8008f78 <pow_bmp3>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7f7 faaf 	bl	8000428 <__aeabi_f2d>
 8008eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ecc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8008ed0:	f7f7 fb02 	bl	80004d8 <__aeabi_dmul>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008edc:	f7f7 f946 	bl	800016c <__adddf3>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 8008ee8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008eec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008ef0:	f7f7 f93c 	bl	800016c <__adddf3>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008efc:	f7f7 f936 	bl	800016c <__adddf3>
 8008f00:	4602      	mov	r2, r0
 8008f02:	460b      	mov	r3, r1
 8008f04:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (comp_press < BMP3_MIN_PRES_DOUBLE)
 8008f08:	a317      	add	r3, pc, #92	; (adr r3, 8008f68 <compensate_pressure+0x2a0>)
 8008f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008f12:	f7f7 fd53 	bl	80009bc <__aeabi_dcmplt>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d007      	beq.n	8008f2c <compensate_pressure+0x264>
    {
        comp_press = BMP3_MIN_PRES_DOUBLE;
 8008f1c:	a312      	add	r3, pc, #72	; (adr r3, 8008f68 <compensate_pressure+0x2a0>)
 8008f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f22:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MIN_PRES;
 8008f26:	2305      	movs	r3, #5
 8008f28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    if (comp_press > BMP3_MAX_PRES_DOUBLE)
 8008f2c:	a310      	add	r3, pc, #64	; (adr r3, 8008f70 <compensate_pressure+0x2a8>)
 8008f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f32:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008f36:	f7f7 fd5f 	bl	80009f8 <__aeabi_dcmpgt>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d007      	beq.n	8008f50 <compensate_pressure+0x288>
    {
        comp_press = BMP3_MAX_PRES_DOUBLE;
 8008f40:	a30b      	add	r3, pc, #44	; (adr r3, 8008f70 <compensate_pressure+0x2a8>)
 8008f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f46:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MAX_PRES;
 8008f4a:	2306      	movs	r3, #6
 8008f4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    (*pressure) = comp_press;
 8008f50:	68f9      	ldr	r1, [r7, #12]
 8008f52:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008f56:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8008f5a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3758      	adds	r7, #88	; 0x58
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bdb0      	pop	{r4, r5, r7, pc}
 8008f66:	bf00      	nop
 8008f68:	00000000 	.word	0x00000000
 8008f6c:	40dd4c00 	.word	0x40dd4c00
 8008f70:	00000000 	.word	0x00000000
 8008f74:	40fe8480 	.word	0x40fe8480

08008f78 <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8008f82:	4613      	mov	r3, r2
 8008f84:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 8008f86:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008f8a:	617b      	str	r3, [r7, #20]

    while (power != 0)
 8008f8c:	e00d      	b.n	8008faa <pow_bmp3+0x32>
    {
        pow_output = (float) base * pow_output;
 8008f8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f92:	f7f7 fd99 	bl	8000ac8 <__aeabi_d2f>
 8008f96:	4603      	mov	r3, r0
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6978      	ldr	r0, [r7, #20]
 8008f9c:	f7f7 fef2 	bl	8000d84 <__aeabi_fmul>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	617b      	str	r3, [r7, #20]
        power--;
 8008fa4:	79fb      	ldrb	r3, [r7, #7]
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 8008faa:	79fb      	ldrb	r3, [r7, #7]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1ee      	bne.n	8008f8e <pow_bmp3+0x16>
    }

    return pow_output;
 8008fb0:	697b      	ldr	r3, [r7, #20]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3718      	adds	r7, #24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 8008fba:	b480      	push	{r7}
 8008fbc:	b085      	sub	sp, #20
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	4013      	ands	r3, r2
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d002      	beq.n	8008fd8 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	73fb      	strb	r3, [r7, #15]
 8008fd6:	e001      	b.n	8008fdc <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 8008fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bc80      	pop	{r7}
 8008fe6:	4770      	bx	lr

08008fe8 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00f      	beq.n	8009016 <null_ptr_check+0x2e>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00b      	beq.n	8009016 <null_ptr_check+0x2e>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d007      	beq.n	8009016 <null_ptr_check+0x2e>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d003      	beq.n	8009016 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8009012:	2b00      	cmp	r3, #0
 8009014:	d102      	bne.n	800901c <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 8009016:	23ff      	movs	r3, #255	; 0xff
 8009018:	73fb      	strb	r3, [r7, #15]
 800901a:	e001      	b.n	8009020 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 800901c:	2300      	movs	r3, #0
 800901e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8009020:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3714      	adds	r7, #20
 8009028:	46bd      	mov	sp, r7
 800902a:	bc80      	pop	{r7}
 800902c:	4770      	bx	lr

0800902e <bmp3_delay_us>:


uint8_t GLTXBuffer[256], GLRXBuffer[1024];

void bmp3_delay_us(uint32_t period, void *intf_ptr)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b082      	sub	sp, #8
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	6039      	str	r1, [r7, #0]
   HAL_Delay(period);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f001 fdad 	bl	800ab98 <HAL_Delay>
}
 800903e:	bf00      	nop
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
	...

08009048 <SensorAPI_I2Cx_Read_bmp>:
* Output         : None
* Return         : None
*******************************************************************************/

BMP3_INTF_RET_TYPE SensorAPI_I2Cx_Read_bmp(uint8_t reg_addr, uint8_t *read_data, uint32_t len, void *intf_ptr)//(uint8_t reg_addr, uint8_t *read_data, uint32_t len, void *intf_ptr)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b088      	sub	sp, #32
 800904c:	af02      	add	r7, sp, #8
 800904e:	60b9      	str	r1, [r7, #8]
 8009050:	607a      	str	r2, [r7, #4]
 8009052:	603b      	str	r3, [r7, #0]
 8009054:	4603      	mov	r3, r0
 8009056:	73fb      	strb	r3, [r7, #15]
	uint8_t snc;
	snc=HAL_I2C_Master_Transmit(&I2C_HANDLE,BMP390_ADDR , &reg_addr, 1, I2CTIMEOUT);
 8009058:	f107 020f 	add.w	r2, r7, #15
 800905c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	2301      	movs	r3, #1
 8009064:	21ee      	movs	r1, #238	; 0xee
 8009066:	480b      	ldr	r0, [pc, #44]	; (8009094 <SensorAPI_I2Cx_Read_bmp+0x4c>)
 8009068:	f002 fa8a 	bl	800b580 <HAL_I2C_Master_Transmit>
 800906c:	4603      	mov	r3, r0
 800906e:	75fb      	strb	r3, [r7, #23]
	snc=HAL_I2C_Master_Receive(&I2C_HANDLE, BMP390_ADDR, read_data, len, I2CTIMEOUT);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	b29b      	uxth	r3, r3
 8009074:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009078:	9200      	str	r2, [sp, #0]
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	21ee      	movs	r1, #238	; 0xee
 800907e:	4805      	ldr	r0, [pc, #20]	; (8009094 <SensorAPI_I2Cx_Read_bmp+0x4c>)
 8009080:	f002 fb7c 	bl	800b77c <HAL_I2C_Master_Receive>
 8009084:	4603      	mov	r3, r0
 8009086:	75fb      	strb	r3, [r7, #23]
    return snc;
 8009088:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3718      	adds	r7, #24
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	2000067c 	.word	0x2000067c

08009098 <SensorAPI_I2Cx_Write_bmp>:
* Output         : None
* Return         : None
*******************************************************************************/

BMP3_INTF_RET_TYPE SensorAPI_I2Cx_Write_bmp(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b086      	sub	sp, #24
 800909c:	af02      	add	r7, sp, #8
 800909e:	60b9      	str	r1, [r7, #8]
 80090a0:	607a      	str	r2, [r7, #4]
 80090a2:	603b      	str	r3, [r7, #0]
 80090a4:	4603      	mov	r3, r0
 80090a6:	73fb      	strb	r3, [r7, #15]
	GLTXBuffer[0] = reg_addr;
 80090a8:	4a0c      	ldr	r2, [pc, #48]	; (80090dc <SensorAPI_I2Cx_Write_bmp+0x44>)
 80090aa:	7bfb      	ldrb	r3, [r7, #15]
 80090ac:	7013      	strb	r3, [r2, #0]
	memcpy(&GLTXBuffer[1], reg_data, len);
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	68b9      	ldr	r1, [r7, #8]
 80090b2:	480b      	ldr	r0, [pc, #44]	; (80090e0 <SensorAPI_I2Cx_Write_bmp+0x48>)
 80090b4:	f004 fc9a 	bl	800d9ec <memcpy>

	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMP390_ADDR, GLTXBuffer, len+1, I2CTIMEOUT);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	3301      	adds	r3, #1
 80090be:	b29b      	uxth	r3, r3
 80090c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80090c4:	9200      	str	r2, [sp, #0]
 80090c6:	4a05      	ldr	r2, [pc, #20]	; (80090dc <SensorAPI_I2Cx_Write_bmp+0x44>)
 80090c8:	21ee      	movs	r1, #238	; 0xee
 80090ca:	4806      	ldr	r0, [pc, #24]	; (80090e4 <SensorAPI_I2Cx_Write_bmp+0x4c>)
 80090cc:	f002 fa58 	bl	800b580 <HAL_I2C_Master_Transmit>
	return BMP3_INTF_RET_SUCCESS;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	20000498 	.word	0x20000498
 80090e0:	20000499 	.word	0x20000499
 80090e4:	2000067c 	.word	0x2000067c

080090e8 <BMP390_init>:


double sum=0,mean=0;
uint8_t i=0;

int8_t BMP390_init(BMP390_t *DataStruct){
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
	uint16_t settings_sel;
	int8_t snc;

	uint8_t dev_adress = BMP3_ADDR_I2C_SEC;
 80090f0:	2377      	movs	r3, #119	; 0x77
 80090f2:	72fb      	strb	r3, [r7, #11]
	dev.intf_ptr =&dev_adress;	//++
 80090f4:	4a38      	ldr	r2, [pc, #224]	; (80091d8 <BMP390_init+0xf0>)
 80090f6:	f107 030b 	add.w	r3, r7, #11
 80090fa:	6053      	str	r3, [r2, #4]

	dev.chip_id = BMP390_CHIP_ID;
 80090fc:	4b36      	ldr	r3, [pc, #216]	; (80091d8 <BMP390_init+0xf0>)
 80090fe:	2260      	movs	r2, #96	; 0x60
 8009100:	701a      	strb	r2, [r3, #0]
	dev.delay_us =bmp3_delay_us;
 8009102:	4b35      	ldr	r3, [pc, #212]	; (80091d8 <BMP390_init+0xf0>)
 8009104:	4a35      	ldr	r2, [pc, #212]	; (80091dc <BMP390_init+0xf4>)
 8009106:	615a      	str	r2, [r3, #20]
	dev.intf = BMP3_I2C_INTF; //+
 8009108:	4b33      	ldr	r3, [pc, #204]	; (80091d8 <BMP390_init+0xf0>)
 800910a:	2201      	movs	r2, #1
 800910c:	721a      	strb	r2, [r3, #8]
	dev.read = SensorAPI_I2Cx_Read_bmp;
 800910e:	4b32      	ldr	r3, [pc, #200]	; (80091d8 <BMP390_init+0xf0>)
 8009110:	4a33      	ldr	r2, [pc, #204]	; (80091e0 <BMP390_init+0xf8>)
 8009112:	60da      	str	r2, [r3, #12]
	dev.write = SensorAPI_I2Cx_Write_bmp;
 8009114:	4b30      	ldr	r3, [pc, #192]	; (80091d8 <BMP390_init+0xf0>)
 8009116:	4a33      	ldr	r2, [pc, #204]	; (80091e4 <BMP390_init+0xfc>)
 8009118:	611a      	str	r2, [r3, #16]
	snc= bmp3_soft_reset(&dev);
 800911a:	482f      	ldr	r0, [pc, #188]	; (80091d8 <BMP390_init+0xf0>)
 800911c:	f7fe fd92 	bl	8007c44 <bmp3_soft_reset>
 8009120:	4603      	mov	r3, r0
 8009122:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(300);
 8009124:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009128:	f001 fd36 	bl	800ab98 <HAL_Delay>

	snc = bmp3_init(&dev);
 800912c:	482a      	ldr	r0, [pc, #168]	; (80091d8 <BMP390_init+0xf0>)
 800912e:	f7fe fbd3 	bl	80078d8 <bmp3_init>
 8009132:	4603      	mov	r3, r0
 8009134:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(400);
 8009136:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800913a:	f001 fd2d 	bl	800ab98 <HAL_Delay>

	if (snc==BMP3_OK)
 800913e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d13d      	bne.n	80091c2 <BMP390_init+0xda>
	{

//dursun
		settings.int_settings.drdy_en = BMP3_ENABLE;
 8009146:	4b28      	ldr	r3, [pc, #160]	; (80091e8 <BMP390_init+0x100>)
 8009148:	2201      	movs	r2, #1
 800914a:	729a      	strb	r2, [r3, #10]
		settings.press_en = BMP3_ENABLE;
 800914c:	4b26      	ldr	r3, [pc, #152]	; (80091e8 <BMP390_init+0x100>)
 800914e:	2201      	movs	r2, #1
 8009150:	705a      	strb	r2, [r3, #1]
		settings.temp_en = BMP3_ENABLE;
 8009152:	4b25      	ldr	r3, [pc, #148]	; (80091e8 <BMP390_init+0x100>)
 8009154:	2201      	movs	r2, #1
 8009156:	709a      	strb	r2, [r3, #2]
		//dursun
		settings.odr_filter.temp_os = BMP3_OVERSAMPLING_2X;
 8009158:	4b23      	ldr	r3, [pc, #140]	; (80091e8 <BMP390_init+0x100>)
 800915a:	2201      	movs	r2, #1
 800915c:	711a      	strb	r2, [r3, #4]

		settings.odr_filter.press_os = BMP3_OVERSAMPLING_4X;
 800915e:	4b22      	ldr	r3, [pc, #136]	; (80091e8 <BMP390_init+0x100>)
 8009160:	2202      	movs	r2, #2
 8009162:	70da      	strb	r2, [r3, #3]

		settings.odr_filter.iir_filter= BMP3_IIR_FILTER_COEFF_3;
 8009164:	4b20      	ldr	r3, [pc, #128]	; (80091e8 <BMP390_init+0x100>)
 8009166:	2202      	movs	r2, #2
 8009168:	715a      	strb	r2, [r3, #5]

		settings.odr_filter.odr = BMP3_ODR_50_HZ;
 800916a:	4b1f      	ldr	r3, [pc, #124]	; (80091e8 <BMP390_init+0x100>)
 800916c:	2202      	movs	r2, #2
 800916e:	719a      	strb	r2, [r3, #6]

		settings.op_mode = BMP3_MODE_NORMAL;
 8009170:	4b1d      	ldr	r3, [pc, #116]	; (80091e8 <BMP390_init+0x100>)
 8009172:	2203      	movs	r2, #3
 8009174:	701a      	strb	r2, [r3, #0]
		HAL_Delay(200);
 8009176:	20c8      	movs	r0, #200	; 0xc8
 8009178:	f001 fd0e 	bl	800ab98 <HAL_Delay>
		settings_sel = BMP3_SEL_PRESS_EN |BMP3_SEL_IIR_FILTER | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR;
 800917c:	23f6      	movs	r3, #246	; 0xf6
 800917e:	81bb      	strh	r3, [r7, #12]
		snc = bmp3_set_sensor_settings(settings_sel, &settings, &dev);
 8009180:	89bb      	ldrh	r3, [r7, #12]
 8009182:	4a15      	ldr	r2, [pc, #84]	; (80091d8 <BMP390_init+0xf0>)
 8009184:	4918      	ldr	r1, [pc, #96]	; (80091e8 <BMP390_init+0x100>)
 8009186:	4618      	mov	r0, r3
 8009188:	f7fe fd0e 	bl	8007ba8 <bmp3_set_sensor_settings>
 800918c:	4603      	mov	r3, r0
 800918e:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(500);
 8009190:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009194:	f001 fd00 	bl	800ab98 <HAL_Delay>

		if (snc==BMP3_OK)
 8009198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d10d      	bne.n	80091bc <BMP390_init+0xd4>
		{
			settings.op_mode = BMP3_MODE_NORMAL;
 80091a0:	4b11      	ldr	r3, [pc, #68]	; (80091e8 <BMP390_init+0x100>)
 80091a2:	2203      	movs	r2, #3
 80091a4:	701a      	strb	r2, [r3, #0]
			snc= bmp3_set_op_mode(&settings, &dev);
 80091a6:	490c      	ldr	r1, [pc, #48]	; (80091d8 <BMP390_init+0xf0>)
 80091a8:	480f      	ldr	r0, [pc, #60]	; (80091e8 <BMP390_init+0x100>)
 80091aa:	f7fe fd95 	bl	8007cd8 <bmp3_set_op_mode>
 80091ae:	4603      	mov	r3, r0
 80091b0:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(4000);
 80091b2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80091b6:	f001 fcef 	bl	800ab98 <HAL_Delay>
 80091ba:	e004      	b.n	80091c6 <BMP390_init+0xde>

		}
		else
		{
			snc=0x23;//error
 80091bc:	2323      	movs	r3, #35	; 0x23
 80091be:	73fb      	strb	r3, [r7, #15]
 80091c0:	e001      	b.n	80091c6 <BMP390_init+0xde>

		}
	}
	else
	{
		snc=0x21;//error
 80091c2:	2321      	movs	r3, #33	; 0x21
 80091c4:	73fb      	strb	r3, [r7, #15]
	}

	DataStruct->INIT_OK_i8 = snc;//if 0 bmp3 ok
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	7bfa      	ldrb	r2, [r7, #15]
 80091ca:	751a      	strb	r2, [r3, #20]
	return snc;
 80091cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}//for function
 80091d0:	4618      	mov	r0, r3
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	200005b8 	.word	0x200005b8
 80091dc:	0800902f 	.word	0x0800902f
 80091e0:	08009049 	.word	0x08009049
 80091e4:	08009099 	.word	0x08009099
 80091e8:	20000598 	.word	0x20000598
 80091ec:	00000000 	.word	0x00000000

080091f0 <BMP390_get_data>:
	DataStruct->Status_OK=snc;
	return snc;
}


int8_t BMP390_get_data(BMP390_t *DataStruct){
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b090      	sub	sp, #64	; 0x40
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
	double pg,h,x,y,z;
	float irt;
	int8_t snc;

	snc=bmp3_get_sensor_data(BMP3_PRESS_TEMP, &bmp390_data, &dev);
 80091f8:	4a77      	ldr	r2, [pc, #476]	; (80093d8 <BMP390_get_data+0x1e8>)
 80091fa:	4978      	ldr	r1, [pc, #480]	; (80093dc <BMP390_get_data+0x1ec>)
 80091fc:	2003      	movs	r0, #3
 80091fe:	f7fe fddf 	bl	8007dc0 <bmp3_get_sensor_data>
 8009202:	4603      	mov	r3, r0
 8009204:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_Delay(5);
 8009208:	2005      	movs	r0, #5
 800920a:	f001 fcc5 	bl	800ab98 <HAL_Delay>
	if(i<20){
 800920e:	4b74      	ldr	r3, [pc, #464]	; (80093e0 <BMP390_get_data+0x1f0>)
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	2b13      	cmp	r3, #19
 8009214:	d867      	bhi.n	80092e6 <BMP390_get_data+0xf6>
		//calculate altitude
		pg=bmp390_data.pressure/101325;
 8009216:	4b71      	ldr	r3, [pc, #452]	; (80093dc <BMP390_get_data+0x1ec>)
 8009218:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800921c:	a366      	add	r3, pc, #408	; (adr r3, 80093b8 <BMP390_get_data+0x1c8>)
 800921e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009222:	f7f7 fa83 	bl	800072c <__aeabi_ddiv>
 8009226:	4602      	mov	r2, r0
 8009228:	460b      	mov	r3, r1
 800922a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		x= ((-8.31432)*(-0.0065))/(9.80665*0.0289644);
 800922e:	a364      	add	r3, pc, #400	; (adr r3, 80093c0 <BMP390_get_data+0x1d0>)
 8009230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009234:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		y=((pow(pg,x))-1);
 8009238:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800923c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8009240:	f007 fae4 	bl	801080c <pow>
 8009244:	f04f 0200 	mov.w	r2, #0
 8009248:	4b66      	ldr	r3, [pc, #408]	; (80093e4 <BMP390_get_data+0x1f4>)
 800924a:	f7f6 ff8d 	bl	8000168 <__aeabi_dsub>
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	e9c7 2308 	strd	r2, r3, [r7, #32]
		z= (bmp390_data.temperature+273)/(-0.0065);
 8009256:	4b61      	ldr	r3, [pc, #388]	; (80093dc <BMP390_get_data+0x1ec>)
 8009258:	e9d3 0100 	ldrd	r0, r1, [r3]
 800925c:	a35a      	add	r3, pc, #360	; (adr r3, 80093c8 <BMP390_get_data+0x1d8>)
 800925e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009262:	f7f6 ff83 	bl	800016c <__adddf3>
 8009266:	4602      	mov	r2, r0
 8009268:	460b      	mov	r3, r1
 800926a:	4610      	mov	r0, r2
 800926c:	4619      	mov	r1, r3
 800926e:	a358      	add	r3, pc, #352	; (adr r3, 80093d0 <BMP390_get_data+0x1e0>)
 8009270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009274:	f7f7 fa5a 	bl	800072c <__aeabi_ddiv>
 8009278:	4602      	mov	r2, r0
 800927a:	460b      	mov	r3, r1
 800927c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		h=z*y;
 8009280:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009284:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009288:	f7f7 f926 	bl	80004d8 <__aeabi_dmul>
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	e9c7 2304 	strd	r2, r3, [r7, #16]
		
		sum=sum+h;
 8009294:	4b54      	ldr	r3, [pc, #336]	; (80093e8 <BMP390_get_data+0x1f8>)
 8009296:	e9d3 0100 	ldrd	r0, r1, [r3]
 800929a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800929e:	f7f6 ff65 	bl	800016c <__adddf3>
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	4950      	ldr	r1, [pc, #320]	; (80093e8 <BMP390_get_data+0x1f8>)
 80092a8:	e9c1 2300 	strd	r2, r3, [r1]
		i++;
 80092ac:	4b4c      	ldr	r3, [pc, #304]	; (80093e0 <BMP390_get_data+0x1f0>)
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	3301      	adds	r3, #1
 80092b2:	b2da      	uxtb	r2, r3
 80092b4:	4b4a      	ldr	r3, [pc, #296]	; (80093e0 <BMP390_get_data+0x1f0>)
 80092b6:	701a      	strb	r2, [r3, #0]
		
		if(i==10){
 80092b8:	4b49      	ldr	r3, [pc, #292]	; (80093e0 <BMP390_get_data+0x1f0>)
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	2b0a      	cmp	r3, #10
 80092be:	d112      	bne.n	80092e6 <BMP390_get_data+0xf6>
			mean=sum/10;
 80092c0:	4b49      	ldr	r3, [pc, #292]	; (80093e8 <BMP390_get_data+0x1f8>)
 80092c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80092c6:	f04f 0200 	mov.w	r2, #0
 80092ca:	4b48      	ldr	r3, [pc, #288]	; (80093ec <BMP390_get_data+0x1fc>)
 80092cc:	f7f7 fa2e 	bl	800072c <__aeabi_ddiv>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4946      	ldr	r1, [pc, #280]	; (80093f0 <BMP390_get_data+0x200>)
 80092d6:	e9c1 2300 	strd	r2, r3, [r1]
			i++;
 80092da:	4b41      	ldr	r3, [pc, #260]	; (80093e0 <BMP390_get_data+0x1f0>)
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	3301      	adds	r3, #1
 80092e0:	b2da      	uxtb	r2, r3
 80092e2:	4b3f      	ldr	r3, [pc, #252]	; (80093e0 <BMP390_get_data+0x1f0>)
 80092e4:	701a      	strb	r2, [r3, #0]

		}
	}
	//tip dönüşümü hatası gelebilir.
	if(i>=10){
 80092e6:	4b3e      	ldr	r3, [pc, #248]	; (80093e0 <BMP390_get_data+0x1f0>)
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	2b09      	cmp	r3, #9
 80092ec:	d950      	bls.n	8009390 <BMP390_get_data+0x1a0>
		pg=bmp390_data.pressure/101325;
 80092ee:	4b3b      	ldr	r3, [pc, #236]	; (80093dc <BMP390_get_data+0x1ec>)
 80092f0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80092f4:	a330      	add	r3, pc, #192	; (adr r3, 80093b8 <BMP390_get_data+0x1c8>)
 80092f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fa:	f7f7 fa17 	bl	800072c <__aeabi_ddiv>
 80092fe:	4602      	mov	r2, r0
 8009300:	460b      	mov	r3, r1
 8009302:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		x= ((-8.31432)*(-0.0065))/(9.80665*0.0289644);
 8009306:	a32e      	add	r3, pc, #184	; (adr r3, 80093c0 <BMP390_get_data+0x1d0>)
 8009308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		y=((pow(pg,x))-1);
 8009310:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009314:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8009318:	f007 fa78 	bl	801080c <pow>
 800931c:	f04f 0200 	mov.w	r2, #0
 8009320:	4b30      	ldr	r3, [pc, #192]	; (80093e4 <BMP390_get_data+0x1f4>)
 8009322:	f7f6 ff21 	bl	8000168 <__aeabi_dsub>
 8009326:	4602      	mov	r2, r0
 8009328:	460b      	mov	r3, r1
 800932a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		z= (bmp390_data.temperature+273)/(-0.0065);
 800932e:	4b2b      	ldr	r3, [pc, #172]	; (80093dc <BMP390_get_data+0x1ec>)
 8009330:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009334:	a324      	add	r3, pc, #144	; (adr r3, 80093c8 <BMP390_get_data+0x1d8>)
 8009336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933a:	f7f6 ff17 	bl	800016c <__adddf3>
 800933e:	4602      	mov	r2, r0
 8009340:	460b      	mov	r3, r1
 8009342:	4610      	mov	r0, r2
 8009344:	4619      	mov	r1, r3
 8009346:	a322      	add	r3, pc, #136	; (adr r3, 80093d0 <BMP390_get_data+0x1e0>)
 8009348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934c:	f7f7 f9ee 	bl	800072c <__aeabi_ddiv>
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	e9c7 2306 	strd	r2, r3, [r7, #24]
		h=z*y;
 8009358:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800935c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009360:	f7f7 f8ba 	bl	80004d8 <__aeabi_dmul>
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	e9c7 2304 	strd	r2, r3, [r7, #16]
		irt = h-mean;
 800936c:	4b20      	ldr	r3, [pc, #128]	; (80093f0 <BMP390_get_data+0x200>)
 800936e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009372:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009376:	f7f6 fef7 	bl	8000168 <__aeabi_dsub>
 800937a:	4602      	mov	r2, r0
 800937c:	460b      	mov	r3, r1
 800937e:	4610      	mov	r0, r2
 8009380:	4619      	mov	r1, r3
 8009382:	f7f7 fba1 	bl	8000ac8 <__aeabi_d2f>
 8009386:	4603      	mov	r3, r0
 8009388:	60fb      	str	r3, [r7, #12]
		DataStruct->altitude=irt;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	611a      	str	r2, [r3, #16]

	}
	
	DataStruct->temperature=bmp390_data.temperature;
 8009390:	4b12      	ldr	r3, [pc, #72]	; (80093dc <BMP390_get_data+0x1ec>)
 8009392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009396:	6879      	ldr	r1, [r7, #4]
 8009398:	e9c1 2300 	strd	r2, r3, [r1]
	DataStruct->pressure=bmp390_data.pressure;
 800939c:	4b0f      	ldr	r3, [pc, #60]	; (80093dc <BMP390_get_data+0x1ec>)
 800939e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80093a2:	6879      	ldr	r1, [r7, #4]
 80093a4:	e9c1 2302 	strd	r2, r3, [r1, #8]

	return snc;
 80093a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3740      	adds	r7, #64	; 0x40
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	f3af 8000 	nop.w
 80093b8:	00000000 	.word	0x00000000
 80093bc:	40f8bcd0 	.word	0x40f8bcd0
 80093c0:	b537afba 	.word	0xb537afba
 80093c4:	3fc85a8b 	.word	0x3fc85a8b
 80093c8:	00000000 	.word	0x00000000
 80093cc:	40711000 	.word	0x40711000
 80093d0:	76c8b439 	.word	0x76c8b439
 80093d4:	bf7a9fbe 	.word	0xbf7a9fbe
 80093d8:	200005b8 	.word	0x200005b8
 80093dc:	200005a8 	.word	0x200005a8
 80093e0:	20000678 	.word	0x20000678
 80093e4:	3ff00000 	.word	0x3ff00000
 80093e8:	20000668 	.word	0x20000668
 80093ec:	40240000 	.word	0x40240000
 80093f0:	20000670 	.word	0x20000670

080093f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b088      	sub	sp, #32
 80093f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093fa:	f107 0310 	add.w	r3, r7, #16
 80093fe:	2200      	movs	r2, #0
 8009400:	601a      	str	r2, [r3, #0]
 8009402:	605a      	str	r2, [r3, #4]
 8009404:	609a      	str	r2, [r3, #8]
 8009406:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009408:	4b41      	ldr	r3, [pc, #260]	; (8009510 <MX_GPIO_Init+0x11c>)
 800940a:	699b      	ldr	r3, [r3, #24]
 800940c:	4a40      	ldr	r2, [pc, #256]	; (8009510 <MX_GPIO_Init+0x11c>)
 800940e:	f043 0320 	orr.w	r3, r3, #32
 8009412:	6193      	str	r3, [r2, #24]
 8009414:	4b3e      	ldr	r3, [pc, #248]	; (8009510 <MX_GPIO_Init+0x11c>)
 8009416:	699b      	ldr	r3, [r3, #24]
 8009418:	f003 0320 	and.w	r3, r3, #32
 800941c:	60fb      	str	r3, [r7, #12]
 800941e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009420:	4b3b      	ldr	r3, [pc, #236]	; (8009510 <MX_GPIO_Init+0x11c>)
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	4a3a      	ldr	r2, [pc, #232]	; (8009510 <MX_GPIO_Init+0x11c>)
 8009426:	f043 0304 	orr.w	r3, r3, #4
 800942a:	6193      	str	r3, [r2, #24]
 800942c:	4b38      	ldr	r3, [pc, #224]	; (8009510 <MX_GPIO_Init+0x11c>)
 800942e:	699b      	ldr	r3, [r3, #24]
 8009430:	f003 0304 	and.w	r3, r3, #4
 8009434:	60bb      	str	r3, [r7, #8]
 8009436:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009438:	4b35      	ldr	r3, [pc, #212]	; (8009510 <MX_GPIO_Init+0x11c>)
 800943a:	699b      	ldr	r3, [r3, #24]
 800943c:	4a34      	ldr	r2, [pc, #208]	; (8009510 <MX_GPIO_Init+0x11c>)
 800943e:	f043 0308 	orr.w	r3, r3, #8
 8009442:	6193      	str	r3, [r2, #24]
 8009444:	4b32      	ldr	r3, [pc, #200]	; (8009510 <MX_GPIO_Init+0x11c>)
 8009446:	699b      	ldr	r3, [r3, #24]
 8009448:	f003 0308 	and.w	r3, r3, #8
 800944c:	607b      	str	r3, [r7, #4]
 800944e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009450:	4b2f      	ldr	r3, [pc, #188]	; (8009510 <MX_GPIO_Init+0x11c>)
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	4a2e      	ldr	r2, [pc, #184]	; (8009510 <MX_GPIO_Init+0x11c>)
 8009456:	f043 0310 	orr.w	r3, r3, #16
 800945a:	6193      	str	r3, [r2, #24]
 800945c:	4b2c      	ldr	r3, [pc, #176]	; (8009510 <MX_GPIO_Init+0x11c>)
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	f003 0310 	and.w	r3, r3, #16
 8009464:	603b      	str	r3, [r7, #0]
 8009466:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|birincil_Pin|ikincil_Pin, GPIO_PIN_RESET);
 8009468:	2200      	movs	r2, #0
 800946a:	21a8      	movs	r1, #168	; 0xa8
 800946c:	4829      	ldr	r0, [pc, #164]	; (8009514 <MX_GPIO_Init+0x120>)
 800946e:	f001 ff12 	bl	800b296 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, GPIO_PIN_RESET);
 8009472:	2200      	movs	r2, #0
 8009474:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009478:	4827      	ldr	r0, [pc, #156]	; (8009518 <MX_GPIO_Init+0x124>)
 800947a:	f001 ff0c 	bl	800b296 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, GPIO_PIN_RESET);
 800947e:	2200      	movs	r2, #0
 8009480:	2108      	movs	r1, #8
 8009482:	4826      	ldr	r0, [pc, #152]	; (800951c <MX_GPIO_Init+0x128>)
 8009484:	f001 ff07 	bl	800b296 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Buzzer_Pin|birincil_Pin|ikincil_Pin;
 8009488:	23a8      	movs	r3, #168	; 0xa8
 800948a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800948c:	2301      	movs	r3, #1
 800948e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009490:	2300      	movs	r3, #0
 8009492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009494:	2302      	movs	r3, #2
 8009496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009498:	f107 0310 	add.w	r3, r7, #16
 800949c:	4619      	mov	r1, r3
 800949e:	481d      	ldr	r0, [pc, #116]	; (8009514 <MX_GPIO_Init+0x120>)
 80094a0:	f001 fd5e 	bl	800af60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M1_Pin;
 80094a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80094aa:	2301      	movs	r3, #1
 80094ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094ae:	2300      	movs	r3, #0
 80094b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094b2:	2302      	movs	r3, #2
 80094b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M1_GPIO_Port, &GPIO_InitStruct);
 80094b6:	f107 0310 	add.w	r3, r7, #16
 80094ba:	4619      	mov	r1, r3
 80094bc:	4816      	ldr	r0, [pc, #88]	; (8009518 <MX_GPIO_Init+0x124>)
 80094be:	f001 fd4f 	bl	800af60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M0_Pin;
 80094c2:	2308      	movs	r3, #8
 80094c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80094c6:	2301      	movs	r3, #1
 80094c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094ca:	2300      	movs	r3, #0
 80094cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094ce:	2302      	movs	r3, #2
 80094d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M0_GPIO_Port, &GPIO_InitStruct);
 80094d2:	f107 0310 	add.w	r3, r7, #16
 80094d6:	4619      	mov	r1, r3
 80094d8:	4810      	ldr	r0, [pc, #64]	; (800951c <MX_GPIO_Init+0x128>)
 80094da:	f001 fd41 	bl	800af60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUX_Pin;
 80094de:	2310      	movs	r3, #16
 80094e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80094e2:	4b0f      	ldr	r3, [pc, #60]	; (8009520 <MX_GPIO_Init+0x12c>)
 80094e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094e6:	2300      	movs	r3, #0
 80094e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 80094ea:	f107 0310 	add.w	r3, r7, #16
 80094ee:	4619      	mov	r1, r3
 80094f0:	480a      	ldr	r0, [pc, #40]	; (800951c <MX_GPIO_Init+0x128>)
 80094f2:	f001 fd35 	bl	800af60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80094f6:	2200      	movs	r2, #0
 80094f8:	2100      	movs	r1, #0
 80094fa:	200a      	movs	r0, #10
 80094fc:	f001 fc47 	bl	800ad8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8009500:	200a      	movs	r0, #10
 8009502:	f001 fc60 	bl	800adc6 <HAL_NVIC_EnableIRQ>

}
 8009506:	bf00      	nop
 8009508:	3720      	adds	r7, #32
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	40021000 	.word	0x40021000
 8009514:	40010800 	.word	0x40010800
 8009518:	40011000 	.word	0x40011000
 800951c:	40010c00 	.word	0x40010c00
 8009520:	10110000 	.word	0x10110000

08009524 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009528:	4b12      	ldr	r3, [pc, #72]	; (8009574 <MX_I2C1_Init+0x50>)
 800952a:	4a13      	ldr	r2, [pc, #76]	; (8009578 <MX_I2C1_Init+0x54>)
 800952c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800952e:	4b11      	ldr	r3, [pc, #68]	; (8009574 <MX_I2C1_Init+0x50>)
 8009530:	4a12      	ldr	r2, [pc, #72]	; (800957c <MX_I2C1_Init+0x58>)
 8009532:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009534:	4b0f      	ldr	r3, [pc, #60]	; (8009574 <MX_I2C1_Init+0x50>)
 8009536:	2200      	movs	r2, #0
 8009538:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800953a:	4b0e      	ldr	r3, [pc, #56]	; (8009574 <MX_I2C1_Init+0x50>)
 800953c:	2200      	movs	r2, #0
 800953e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009540:	4b0c      	ldr	r3, [pc, #48]	; (8009574 <MX_I2C1_Init+0x50>)
 8009542:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009546:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009548:	4b0a      	ldr	r3, [pc, #40]	; (8009574 <MX_I2C1_Init+0x50>)
 800954a:	2200      	movs	r2, #0
 800954c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800954e:	4b09      	ldr	r3, [pc, #36]	; (8009574 <MX_I2C1_Init+0x50>)
 8009550:	2200      	movs	r2, #0
 8009552:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009554:	4b07      	ldr	r3, [pc, #28]	; (8009574 <MX_I2C1_Init+0x50>)
 8009556:	2200      	movs	r2, #0
 8009558:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800955a:	4b06      	ldr	r3, [pc, #24]	; (8009574 <MX_I2C1_Init+0x50>)
 800955c:	2200      	movs	r2, #0
 800955e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009560:	4804      	ldr	r0, [pc, #16]	; (8009574 <MX_I2C1_Init+0x50>)
 8009562:	f001 fec9 	bl	800b2f8 <HAL_I2C_Init>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d001      	beq.n	8009570 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800956c:	f000 fae5 	bl	8009b3a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009570:	bf00      	nop
 8009572:	bd80      	pop	{r7, pc}
 8009574:	2000067c 	.word	0x2000067c
 8009578:	40005400 	.word	0x40005400
 800957c:	000186a0 	.word	0x000186a0

08009580 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8009584:	4b12      	ldr	r3, [pc, #72]	; (80095d0 <MX_I2C2_Init+0x50>)
 8009586:	4a13      	ldr	r2, [pc, #76]	; (80095d4 <MX_I2C2_Init+0x54>)
 8009588:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800958a:	4b11      	ldr	r3, [pc, #68]	; (80095d0 <MX_I2C2_Init+0x50>)
 800958c:	4a12      	ldr	r2, [pc, #72]	; (80095d8 <MX_I2C2_Init+0x58>)
 800958e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009590:	4b0f      	ldr	r3, [pc, #60]	; (80095d0 <MX_I2C2_Init+0x50>)
 8009592:	2200      	movs	r2, #0
 8009594:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8009596:	4b0e      	ldr	r3, [pc, #56]	; (80095d0 <MX_I2C2_Init+0x50>)
 8009598:	2200      	movs	r2, #0
 800959a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800959c:	4b0c      	ldr	r3, [pc, #48]	; (80095d0 <MX_I2C2_Init+0x50>)
 800959e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80095a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80095a4:	4b0a      	ldr	r3, [pc, #40]	; (80095d0 <MX_I2C2_Init+0x50>)
 80095a6:	2200      	movs	r2, #0
 80095a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80095aa:	4b09      	ldr	r3, [pc, #36]	; (80095d0 <MX_I2C2_Init+0x50>)
 80095ac:	2200      	movs	r2, #0
 80095ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80095b0:	4b07      	ldr	r3, [pc, #28]	; (80095d0 <MX_I2C2_Init+0x50>)
 80095b2:	2200      	movs	r2, #0
 80095b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80095b6:	4b06      	ldr	r3, [pc, #24]	; (80095d0 <MX_I2C2_Init+0x50>)
 80095b8:	2200      	movs	r2, #0
 80095ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80095bc:	4804      	ldr	r0, [pc, #16]	; (80095d0 <MX_I2C2_Init+0x50>)
 80095be:	f001 fe9b 	bl	800b2f8 <HAL_I2C_Init>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80095c8:	f000 fab7 	bl	8009b3a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80095cc:	bf00      	nop
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	200006d0 	.word	0x200006d0
 80095d4:	40005800 	.word	0x40005800
 80095d8:	000186a0 	.word	0x000186a0

080095dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b08a      	sub	sp, #40	; 0x28
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095e4:	f107 0318 	add.w	r3, r7, #24
 80095e8:	2200      	movs	r2, #0
 80095ea:	601a      	str	r2, [r3, #0]
 80095ec:	605a      	str	r2, [r3, #4]
 80095ee:	609a      	str	r2, [r3, #8]
 80095f0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a2b      	ldr	r2, [pc, #172]	; (80096a4 <HAL_I2C_MspInit+0xc8>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d124      	bne.n	8009646 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80095fc:	4b2a      	ldr	r3, [pc, #168]	; (80096a8 <HAL_I2C_MspInit+0xcc>)
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	4a29      	ldr	r2, [pc, #164]	; (80096a8 <HAL_I2C_MspInit+0xcc>)
 8009602:	f043 0308 	orr.w	r3, r3, #8
 8009606:	6193      	str	r3, [r2, #24]
 8009608:	4b27      	ldr	r3, [pc, #156]	; (80096a8 <HAL_I2C_MspInit+0xcc>)
 800960a:	699b      	ldr	r3, [r3, #24]
 800960c:	f003 0308 	and.w	r3, r3, #8
 8009610:	617b      	str	r3, [r7, #20]
 8009612:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009614:	23c0      	movs	r3, #192	; 0xc0
 8009616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009618:	2312      	movs	r3, #18
 800961a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800961c:	2303      	movs	r3, #3
 800961e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009620:	f107 0318 	add.w	r3, r7, #24
 8009624:	4619      	mov	r1, r3
 8009626:	4821      	ldr	r0, [pc, #132]	; (80096ac <HAL_I2C_MspInit+0xd0>)
 8009628:	f001 fc9a 	bl	800af60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800962c:	4b1e      	ldr	r3, [pc, #120]	; (80096a8 <HAL_I2C_MspInit+0xcc>)
 800962e:	69db      	ldr	r3, [r3, #28]
 8009630:	4a1d      	ldr	r2, [pc, #116]	; (80096a8 <HAL_I2C_MspInit+0xcc>)
 8009632:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009636:	61d3      	str	r3, [r2, #28]
 8009638:	4b1b      	ldr	r3, [pc, #108]	; (80096a8 <HAL_I2C_MspInit+0xcc>)
 800963a:	69db      	ldr	r3, [r3, #28]
 800963c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009640:	613b      	str	r3, [r7, #16]
 8009642:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8009644:	e029      	b.n	800969a <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a19      	ldr	r2, [pc, #100]	; (80096b0 <HAL_I2C_MspInit+0xd4>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d124      	bne.n	800969a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009650:	4b15      	ldr	r3, [pc, #84]	; (80096a8 <HAL_I2C_MspInit+0xcc>)
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	4a14      	ldr	r2, [pc, #80]	; (80096a8 <HAL_I2C_MspInit+0xcc>)
 8009656:	f043 0308 	orr.w	r3, r3, #8
 800965a:	6193      	str	r3, [r2, #24]
 800965c:	4b12      	ldr	r3, [pc, #72]	; (80096a8 <HAL_I2C_MspInit+0xcc>)
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	f003 0308 	and.w	r3, r3, #8
 8009664:	60fb      	str	r3, [r7, #12]
 8009666:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009668:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800966c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800966e:	2312      	movs	r3, #18
 8009670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009672:	2303      	movs	r3, #3
 8009674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009676:	f107 0318 	add.w	r3, r7, #24
 800967a:	4619      	mov	r1, r3
 800967c:	480b      	ldr	r0, [pc, #44]	; (80096ac <HAL_I2C_MspInit+0xd0>)
 800967e:	f001 fc6f 	bl	800af60 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8009682:	4b09      	ldr	r3, [pc, #36]	; (80096a8 <HAL_I2C_MspInit+0xcc>)
 8009684:	69db      	ldr	r3, [r3, #28]
 8009686:	4a08      	ldr	r2, [pc, #32]	; (80096a8 <HAL_I2C_MspInit+0xcc>)
 8009688:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800968c:	61d3      	str	r3, [r2, #28]
 800968e:	4b06      	ldr	r3, [pc, #24]	; (80096a8 <HAL_I2C_MspInit+0xcc>)
 8009690:	69db      	ldr	r3, [r3, #28]
 8009692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009696:	60bb      	str	r3, [r7, #8]
 8009698:	68bb      	ldr	r3, [r7, #8]
}
 800969a:	bf00      	nop
 800969c:	3728      	adds	r7, #40	; 0x28
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	40005400 	.word	0x40005400
 80096a8:	40021000 	.word	0x40021000
 80096ac:	40010c00 	.word	0x40010c00
 80096b0:	40005800 	.word	0x40005800

080096b4 <HAL_UART_RxCpltCallback>:
uint8_t lora_buffer[256];
uint8_t lora_index = 0;
uint8_t lora_data = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)	//interrupt ile tetiklenerek gps verilerini alır
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) //gpsin bağlı olduğu uart kanalı
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a15      	ldr	r2, [pc, #84]	; (8009714 <HAL_UART_RxCpltCallback+0x60>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d122      	bne.n	800970a <HAL_UART_RxCpltCallback+0x56>
	{
		if(gpsrx_data != '\n' && gpsrx_index < sizeof(gpsrx_buffer)) {
 80096c4:	4b14      	ldr	r3, [pc, #80]	; (8009718 <HAL_UART_RxCpltCallback+0x64>)
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	2b0a      	cmp	r3, #10
 80096ca:	d00b      	beq.n	80096e4 <HAL_UART_RxCpltCallback+0x30>
			gpsrx_buffer[gpsrx_index++] = gpsrx_data; //buffera data aktarılır
 80096cc:	4b13      	ldr	r3, [pc, #76]	; (800971c <HAL_UART_RxCpltCallback+0x68>)
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	1c5a      	adds	r2, r3, #1
 80096d2:	b2d1      	uxtb	r1, r2
 80096d4:	4a11      	ldr	r2, [pc, #68]	; (800971c <HAL_UART_RxCpltCallback+0x68>)
 80096d6:	7011      	strb	r1, [r2, #0]
 80096d8:	461a      	mov	r2, r3
 80096da:	4b0f      	ldr	r3, [pc, #60]	; (8009718 <HAL_UART_RxCpltCallback+0x64>)
 80096dc:	7819      	ldrb	r1, [r3, #0]
 80096de:	4b10      	ldr	r3, [pc, #64]	; (8009720 <HAL_UART_RxCpltCallback+0x6c>)
 80096e0:	5499      	strb	r1, [r3, r2]
 80096e2:	e00d      	b.n	8009700 <HAL_UART_RxCpltCallback+0x4c>
		} else {
			lwgps_process(&gps, gpsrx_buffer, gpsrx_index+1);//data parser
 80096e4:	4b0d      	ldr	r3, [pc, #52]	; (800971c <HAL_UART_RxCpltCallback+0x68>)
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	3301      	adds	r3, #1
 80096ea:	461a      	mov	r2, r3
 80096ec:	490c      	ldr	r1, [pc, #48]	; (8009720 <HAL_UART_RxCpltCallback+0x6c>)
 80096ee:	480d      	ldr	r0, [pc, #52]	; (8009724 <HAL_UART_RxCpltCallback+0x70>)
 80096f0:	f7fa f959 	bl	80039a6 <lwgps_process>
			gpsrx_index = 0;
 80096f4:	4b09      	ldr	r3, [pc, #36]	; (800971c <HAL_UART_RxCpltCallback+0x68>)
 80096f6:	2200      	movs	r2, #0
 80096f8:	701a      	strb	r2, [r3, #0]
			gpsrx_data = 0;//gelen data tekrar sıfıra eşitlenir
 80096fa:	4b07      	ldr	r3, [pc, #28]	; (8009718 <HAL_UART_RxCpltCallback+0x64>)
 80096fc:	2200      	movs	r2, #0
 80096fe:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, &gpsrx_data, 1);
 8009700:	2201      	movs	r2, #1
 8009702:	4905      	ldr	r1, [pc, #20]	; (8009718 <HAL_UART_RxCpltCallback+0x64>)
 8009704:	4803      	ldr	r0, [pc, #12]	; (8009714 <HAL_UART_RxCpltCallback+0x60>)
 8009706:	f003 fba2 	bl	800ce4e <HAL_UART_Receive_IT>
		lora_index++;
		HAL_UART_Receive_IT(&huart3, &lora_data, 1);


	}*/
}//gps interruot
 800970a:	bf00      	nop
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	200009ec 	.word	0x200009ec
 8009718:	200009e5 	.word	0x200009e5
 800971c:	200009e4 	.word	0x200009e4
 8009720:	200008e4 	.word	0x200008e4
 8009724:	20000728 	.word	0x20000728

08009728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009728:	b5b0      	push	{r4, r5, r7, lr}
 800972a:	b088      	sub	sp, #32
 800972c:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
 	uint8_t is_fly = 0;
 800972e:	2300      	movs	r3, #0
 8009730:	71fb      	strb	r3, [r7, #7]
 	uint8_t buz_delay=0;
 8009732:	2300      	movs	r3, #0
 8009734:	71bb      	strb	r3, [r7, #6]
 	uint8_t status=1;
 8009736:	2301      	movs	r3, #1
 8009738:	717b      	strb	r3, [r7, #5]
 	uint8_t first=0;
 800973a:	2300      	movs	r3, #0
 800973c:	713b      	strb	r3, [r7, #4]
 	uint8_t second=0;
 800973e:	2300      	movs	r3, #0
 8009740:	70fb      	strb	r3, [r7, #3]
 	uint8_t status_lora = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	707b      	strb	r3, [r7, #1]
 	uint8_t buz_init = 0;
 8009746:	2300      	movs	r3, #0
 8009748:	70bb      	strb	r3, [r7, #2]
 	uint8_t error=0;
 800974a:	2300      	movs	r3, #0
 800974c:	703b      	strb	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800974e:	f001 f9c1 	bl	800aad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009752:	f000 f9b1 	bl	8009ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009756:	f7ff fe4d 	bl	80093f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800975a:	f7ff fee3 	bl	8009524 <MX_I2C1_Init>
  MX_I2C2_Init();
 800975e:	f7ff ff0f 	bl	8009580 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8009762:	f000 fb1f 	bl	8009da4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8009766:	f000 fb47 	bl	8009df8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  initFusionAHRS(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, sample_time_sec_f32);
 800976a:	4ba4      	ldr	r3, [pc, #656]	; (80099fc <main+0x2d4>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4aa4      	ldr	r2, [pc, #656]	; (8009a00 <main+0x2d8>)
 8009770:	49a4      	ldr	r1, [pc, #656]	; (8009a04 <main+0x2dc>)
 8009772:	48a5      	ldr	r0, [pc, #660]	; (8009a08 <main+0x2e0>)
 8009774:	f000 fc34 	bl	8009fe0 <initFusionAHRS>

  lwgps_init(&gps);
 8009778:	48a4      	ldr	r0, [pc, #656]	; (8009a0c <main+0x2e4>)
 800977a:	f7fa f906 	bl	800398a <lwgps_init>


  while (BMI160_init(&imu_t) != 0 );
 800977e:	bf00      	nop
 8009780:	48a3      	ldr	r0, [pc, #652]	; (8009a10 <main+0x2e8>)
 8009782:	f7fd fb3d 	bl	8006e00 <BMI160_init>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d1f9      	bne.n	8009780 <main+0x58>
  while (BMP390_init(&bmp_t) != 0 );
 800978c:	bf00      	nop
 800978e:	48a1      	ldr	r0, [pc, #644]	; (8009a14 <main+0x2ec>)
 8009790:	f7ff fcaa 	bl	80090e8 <BMP390_init>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d1f9      	bne.n	800978e <main+0x66>
  HAL_Delay(50);
 800979a:	2032      	movs	r0, #50	; 0x32
 800979c:	f001 f9fc 	bl	800ab98 <HAL_Delay>

  //lora lib init
  E32_Init(M0_GPIO_Port, M0_Pin, M1_GPIO_Port, M1_Pin, AUX_GPIO_Port, AUX_Pin, &huart3);
 80097a0:	4b9d      	ldr	r3, [pc, #628]	; (8009a18 <main+0x2f0>)
 80097a2:	9302      	str	r3, [sp, #8]
 80097a4:	2310      	movs	r3, #16
 80097a6:	9301      	str	r3, [sp, #4]
 80097a8:	4b9c      	ldr	r3, [pc, #624]	; (8009a1c <main+0x2f4>)
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097b0:	4a9b      	ldr	r2, [pc, #620]	; (8009a20 <main+0x2f8>)
 80097b2:	2108      	movs	r1, #8
 80097b4:	4899      	ldr	r0, [pc, #612]	; (8009a1c <main+0x2f4>)
 80097b6:	f7fd fe71 	bl	800749c <E32_Init>
  E32_SetMode(SLEEP_MODE);
 80097ba:	2003      	movs	r0, #3
 80097bc:	f7fd fea4 	bl	8007508 <E32_SetMode>
  HAL_Delay(50);
 80097c0:	2032      	movs	r0, #50	; 0x32
 80097c2:	f001 f9e9 	bl	800ab98 <HAL_Delay>

  // Lora'nın , var olan configini okuyoruz.*********************
  status_lora = HAL_UART_Transmit(&huart3, message, MESSAGE_LENGTH , 2000);
 80097c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80097ca:	2203      	movs	r2, #3
 80097cc:	4995      	ldr	r1, [pc, #596]	; (8009a24 <main+0x2fc>)
 80097ce:	4892      	ldr	r0, [pc, #584]	; (8009a18 <main+0x2f0>)
 80097d0:	f003 fa28 	bl	800cc24 <HAL_UART_Transmit>
 80097d4:	4603      	mov	r3, r0
 80097d6:	707b      	strb	r3, [r7, #1]
  status_lora = HAL_UART_Receive(&huart3,recv, RECV_LENTH,2000);//config oku
 80097d8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80097dc:	2206      	movs	r2, #6
 80097de:	4992      	ldr	r1, [pc, #584]	; (8009a28 <main+0x300>)
 80097e0:	488d      	ldr	r0, [pc, #564]	; (8009a18 <main+0x2f0>)
 80097e2:	f003 faa2 	bl	800cd2a <HAL_UART_Receive>
 80097e6:	4603      	mov	r3, r0
 80097e8:	707b      	strb	r3, [r7, #1]
  HAL_Delay(50);
 80097ea:	2032      	movs	r0, #50	; 0x32
 80097ec:	f001 f9d4 	bl	800ab98 <HAL_Delay>

  //activate lora normal mod
  HAL_GPIO_WritePin(M0_GPIO_Port ,M0_Pin, GPIO_PIN_RESET);
 80097f0:	2200      	movs	r2, #0
 80097f2:	2108      	movs	r1, #8
 80097f4:	4889      	ldr	r0, [pc, #548]	; (8009a1c <main+0x2f4>)
 80097f6:	f001 fd4e 	bl	800b296 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, GPIO_PIN_RESET);
 80097fa:	2200      	movs	r2, #0
 80097fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009800:	4887      	ldr	r0, [pc, #540]	; (8009a20 <main+0x2f8>)
 8009802:	f001 fd48 	bl	800b296 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8009806:	20c8      	movs	r0, #200	; 0xc8
 8009808:	f001 f9c6 	bl	800ab98 <HAL_Delay>

  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 800980c:	2201      	movs	r2, #1
 800980e:	2108      	movs	r1, #8
 8009810:	4886      	ldr	r0, [pc, #536]	; (8009a2c <main+0x304>)
 8009812:	f001 fd40 	bl	800b296 <HAL_GPIO_WritePin>


  HAL_UART_Receive_IT(&huart1, &gpsrx_data, 1);//uart1den gelen interruptları almak için
 8009816:	2201      	movs	r2, #1
 8009818:	4985      	ldr	r1, [pc, #532]	; (8009a30 <main+0x308>)
 800981a:	4886      	ldr	r0, [pc, #536]	; (8009a34 <main+0x30c>)
 800981c:	f003 fb17 	bl	800ce4e <HAL_UART_Receive_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //buzzer reset for x sec
	  if(buz_delay <254){
 8009820:	79bb      	ldrb	r3, [r7, #6]
 8009822:	2bfd      	cmp	r3, #253	; 0xfd
 8009824:	d802      	bhi.n	800982c <main+0x104>
		  buz_delay++;
 8009826:	79bb      	ldrb	r3, [r7, #6]
 8009828:	3301      	adds	r3, #1
 800982a:	71bb      	strb	r3, [r7, #6]
	  }

	  if(buz_delay>250 && buz_init ==0){
 800982c:	79bb      	ldrb	r3, [r7, #6]
 800982e:	2bfa      	cmp	r3, #250	; 0xfa
 8009830:	d909      	bls.n	8009846 <main+0x11e>
 8009832:	78bb      	ldrb	r3, [r7, #2]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d106      	bne.n	8009846 <main+0x11e>
		  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8009838:	2200      	movs	r2, #0
 800983a:	2108      	movs	r1, #8
 800983c:	487b      	ldr	r0, [pc, #492]	; (8009a2c <main+0x304>)
 800983e:	f001 fd2a 	bl	800b296 <HAL_GPIO_WritePin>
		  buz_init=1;
 8009842:	2301      	movs	r3, #1
 8009844:	70bb      	strb	r3, [r7, #2]
	  }

	  // sensors okey?
	  if (  imu_t.INIT_OK_i8 != TRUE && bmp_t.INIT_OK_i8 != TRUE)
 8009846:	4b72      	ldr	r3, [pc, #456]	; (8009a10 <main+0x2e8>)
 8009848:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800984c:	2b01      	cmp	r3, #1
 800984e:	d025      	beq.n	800989c <main+0x174>
 8009850:	4b70      	ldr	r3, [pc, #448]	; (8009a14 <main+0x2ec>)
 8009852:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8009856:	2b01      	cmp	r3, #1
 8009858:	d020      	beq.n	800989c <main+0x174>
	  	 {
	  	  	//x*******Read Data******
	  	  	error=bmi160ReadAccelGyro(&imu_t);	//gyro verilerini oku (i2c1 kullanır)
 800985a:	486d      	ldr	r0, [pc, #436]	; (8009a10 <main+0x2e8>)
 800985c:	f7fd fbc4 	bl	8006fe8 <bmi160ReadAccelGyro>
 8009860:	4603      	mov	r3, r0
 8009862:	703b      	strb	r3, [r7, #0]
	  	  	error=BMP390_get_data(&bmp_t);//basınç oku (i2c2 kullanır)
 8009864:	486b      	ldr	r0, [pc, #428]	; (8009a14 <main+0x2ec>)
 8009866:	f7ff fcc3 	bl	80091f0 <BMP390_get_data>
 800986a:	4603      	mov	r3, r0
 800986c:	703b      	strb	r3, [r7, #0]

	  	  	getFusionAHRS_6DoF(&fusionBiasIMU1, &fusionAhrsIMU1, &AHRS_IMU1, imu_t.BMI160_Accel_f32[0], imu_t.BMI160_Accel_f32[1],
 800986e:	4b68      	ldr	r3, [pc, #416]	; (8009a10 <main+0x2e8>)
 8009870:	681d      	ldr	r5, [r3, #0]
 8009872:	4b67      	ldr	r3, [pc, #412]	; (8009a10 <main+0x2e8>)
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	4a66      	ldr	r2, [pc, #408]	; (8009a10 <main+0x2e8>)
 8009878:	6892      	ldr	r2, [r2, #8]
 800987a:	4965      	ldr	r1, [pc, #404]	; (8009a10 <main+0x2e8>)
 800987c:	68c9      	ldr	r1, [r1, #12]
 800987e:	4864      	ldr	r0, [pc, #400]	; (8009a10 <main+0x2e8>)
 8009880:	6900      	ldr	r0, [r0, #16]
 8009882:	4c63      	ldr	r4, [pc, #396]	; (8009a10 <main+0x2e8>)
 8009884:	6964      	ldr	r4, [r4, #20]
 8009886:	9404      	str	r4, [sp, #16]
 8009888:	9003      	str	r0, [sp, #12]
 800988a:	9102      	str	r1, [sp, #8]
 800988c:	9201      	str	r2, [sp, #4]
 800988e:	9300      	str	r3, [sp, #0]
 8009890:	462b      	mov	r3, r5
 8009892:	4a5b      	ldr	r2, [pc, #364]	; (8009a00 <main+0x2d8>)
 8009894:	495b      	ldr	r1, [pc, #364]	; (8009a04 <main+0x2dc>)
 8009896:	485c      	ldr	r0, [pc, #368]	; (8009a08 <main+0x2e0>)
 8009898:	f000 fbc6 	bl	800a028 <getFusionAHRS_6DoF>
		imu_t.BMI160_Accel_f32[2],imu_t.BMI160_Gyro_f32[0],imu_t.BMI160_Gyro_f32[1],imu_t.BMI160_Gyro_f32[2]);

	  	 }
//fly trigger
	  if(bmp_t.altitude>700){
 800989c:	4b5d      	ldr	r3, [pc, #372]	; (8009a14 <main+0x2ec>)
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	4965      	ldr	r1, [pc, #404]	; (8009a38 <main+0x310>)
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7f7 fc2a 	bl	80010fc <__aeabi_fcmpgt>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d001      	beq.n	80098b2 <main+0x18a>
	  	  	  is_fly= 1;
 80098ae:	2301      	movs	r3, #1
 80098b0:	71fb      	strb	r3, [r7, #7]
	  	 }

//birincil patlama
	  if ((AHRS_IMU1.PITCH<-55 || AHRS_IMU1.PITCH > 55 || AHRS_IMU1.ROLL<-50 || AHRS_IMU1.ROLL > 50)/* && is_fly==1*/){
 80098b2:	4b53      	ldr	r3, [pc, #332]	; (8009a00 <main+0x2d8>)
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	4961      	ldr	r1, [pc, #388]	; (8009a3c <main+0x314>)
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7f7 fc01 	bl	80010c0 <__aeabi_fcmplt>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d11a      	bne.n	80098fa <main+0x1d2>
 80098c4:	4b4e      	ldr	r3, [pc, #312]	; (8009a00 <main+0x2d8>)
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	495d      	ldr	r1, [pc, #372]	; (8009a40 <main+0x318>)
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7f7 fc16 	bl	80010fc <__aeabi_fcmpgt>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d111      	bne.n	80098fa <main+0x1d2>
 80098d6:	4b4a      	ldr	r3, [pc, #296]	; (8009a00 <main+0x2d8>)
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	495a      	ldr	r1, [pc, #360]	; (8009a44 <main+0x31c>)
 80098dc:	4618      	mov	r0, r3
 80098de:	f7f7 fbef 	bl	80010c0 <__aeabi_fcmplt>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d108      	bne.n	80098fa <main+0x1d2>
 80098e8:	4b45      	ldr	r3, [pc, #276]	; (8009a00 <main+0x2d8>)
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	4956      	ldr	r1, [pc, #344]	; (8009a48 <main+0x320>)
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7f7 fc04 	bl	80010fc <__aeabi_fcmpgt>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d006      	beq.n	8009908 <main+0x1e0>

	  		HAL_GPIO_WritePin(birincil_GPIO_Port,birincil_Pin,GPIO_PIN_SET);
 80098fa:	2201      	movs	r2, #1
 80098fc:	2120      	movs	r1, #32
 80098fe:	484b      	ldr	r0, [pc, #300]	; (8009a2c <main+0x304>)
 8009900:	f001 fcc9 	bl	800b296 <HAL_GPIO_WritePin>
	  		first=1;
 8009904:	2301      	movs	r3, #1
 8009906:	713b      	strb	r3, [r7, #4]
	  	}

//ikincil patlama
	  	if(bmp_t.altitude<600 && is_fly == 1 && first ==1){
 8009908:	4b42      	ldr	r3, [pc, #264]	; (8009a14 <main+0x2ec>)
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	494f      	ldr	r1, [pc, #316]	; (8009a4c <main+0x324>)
 800990e:	4618      	mov	r0, r3
 8009910:	f7f7 fbd6 	bl	80010c0 <__aeabi_fcmplt>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00c      	beq.n	8009934 <main+0x20c>
 800991a:	79fb      	ldrb	r3, [r7, #7]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d109      	bne.n	8009934 <main+0x20c>
 8009920:	793b      	ldrb	r3, [r7, #4]
 8009922:	2b01      	cmp	r3, #1
 8009924:	d106      	bne.n	8009934 <main+0x20c>

	  		HAL_GPIO_WritePin(ikincil_GPIO_Port, ikincil_Pin, GPIO_PIN_SET);
 8009926:	2201      	movs	r2, #1
 8009928:	2180      	movs	r1, #128	; 0x80
 800992a:	4840      	ldr	r0, [pc, #256]	; (8009a2c <main+0x304>)
 800992c:	f001 fcb3 	bl	800b296 <HAL_GPIO_WritePin>
	  		second=1;
 8009930:	2301      	movs	r3, #1
 8009932:	70fb      	strb	r3, [r7, #3]

	  	}



	  if ( variable.firstinit )
 8009934:	4b46      	ldr	r3, [pc, #280]	; (8009a50 <main+0x328>)
 8009936:	791b      	ldrb	r3, [r3, #4]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d010      	beq.n	800995e <main+0x236>
	  	{
	  		initDataPaket( &paket,  CURRENT_NODE );
 800993c:	21aa      	movs	r1, #170	; 0xaa
 800993e:	4845      	ldr	r0, [pc, #276]	; (8009a54 <main+0x32c>)
 8009940:	f7fd ff9a 	bl	8007878 <initDataPaket>
	  		variable.firstinit  = FALSE;
 8009944:	4b42      	ldr	r3, [pc, #264]	; (8009a50 <main+0x328>)
 8009946:	2200      	movs	r2, #0
 8009948:	711a      	strb	r2, [r3, #4]
	  		memset( &data , 0  , sizeof( dataStruct_t ) );
 800994a:	222d      	movs	r2, #45	; 0x2d
 800994c:	2100      	movs	r1, #0
 800994e:	4842      	ldr	r0, [pc, #264]	; (8009a58 <main+0x330>)
 8009950:	f004 f85a 	bl	800da08 <memset>
	  		variable.telemTimer = HAL_GetTick();
 8009954:	f001 f916 	bl	800ab84 <HAL_GetTick>
 8009958:	4603      	mov	r3, r0
 800995a:	4a3d      	ldr	r2, [pc, #244]	; (8009a50 <main+0x328>)
 800995c:	6013      	str	r3, [r2, #0]
	  	}

	  if(first==1){
 800995e:	793b      	ldrb	r3, [r7, #4]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d101      	bne.n	8009968 <main+0x240>
		  status=2;
 8009964:	2302      	movs	r3, #2
 8009966:	717b      	strb	r3, [r7, #5]
	  }
	  if(second==1){
 8009968:	78fb      	ldrb	r3, [r7, #3]
 800996a:	2b01      	cmp	r3, #1
 800996c:	d101      	bne.n	8009972 <main+0x24a>
		  status = 3;
 800996e:	2303      	movs	r3, #3
 8009970:	717b      	strb	r3, [r7, #5]
	  }
	  if(first==1 && second==1){
 8009972:	793b      	ldrb	r3, [r7, #4]
 8009974:	2b01      	cmp	r3, #1
 8009976:	d104      	bne.n	8009982 <main+0x25a>
 8009978:	78fb      	ldrb	r3, [r7, #3]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d101      	bne.n	8009982 <main+0x25a>
		  status=4;
 800997e:	2304      	movs	r3, #4
 8009980:	717b      	strb	r3, [r7, #5]
	  }

	  data.roket_gps_enlem= gps.latitude;
 8009982:	4b22      	ldr	r3, [pc, #136]	; (8009a0c <main+0x2e4>)
 8009984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009988:	4610      	mov	r0, r2
 800998a:	4619      	mov	r1, r3
 800998c:	f7f7 f89c 	bl	8000ac8 <__aeabi_d2f>
 8009990:	4603      	mov	r3, r0
 8009992:	4a31      	ldr	r2, [pc, #196]	; (8009a58 <main+0x330>)
 8009994:	6093      	str	r3, [r2, #8]
	  data.roket_gps_boylam = gps.longitude;
 8009996:	4b1d      	ldr	r3, [pc, #116]	; (8009a0c <main+0x2e4>)
 8009998:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800999c:	4610      	mov	r0, r2
 800999e:	4619      	mov	r1, r3
 80099a0:	f7f7 f892 	bl	8000ac8 <__aeabi_d2f>
 80099a4:	4603      	mov	r3, r0
 80099a6:	4a2c      	ldr	r2, [pc, #176]	; (8009a58 <main+0x330>)
 80099a8:	60d3      	str	r3, [r2, #12]
/*
	  data.roket_gps_enlem = 39.927170 ;
	  data.roket_gps_boylam = 32.835861;
*/
	  data.roket_gps_irtifa = gps.altitude;
 80099aa:	4b18      	ldr	r3, [pc, #96]	; (8009a0c <main+0x2e4>)
 80099ac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80099b0:	4610      	mov	r0, r2
 80099b2:	4619      	mov	r1, r3
 80099b4:	f7f7 f888 	bl	8000ac8 <__aeabi_d2f>
 80099b8:	4603      	mov	r3, r0
 80099ba:	4a27      	ldr	r2, [pc, #156]	; (8009a58 <main+0x330>)
 80099bc:	6053      	str	r3, [r2, #4]
	  data.acc_x= imu_t.BMI160_Accel_f32[0];
 80099be:	4b14      	ldr	r3, [pc, #80]	; (8009a10 <main+0x2e8>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a25      	ldr	r2, [pc, #148]	; (8009a58 <main+0x330>)
 80099c4:	61d3      	str	r3, [r2, #28]
	  data.acc_y=imu_t.BMI160_Accel_f32[1];
 80099c6:	4b12      	ldr	r3, [pc, #72]	; (8009a10 <main+0x2e8>)
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	4a23      	ldr	r2, [pc, #140]	; (8009a58 <main+0x330>)
 80099cc:	6213      	str	r3, [r2, #32]
	  data.acc_z=imu_t.BMI160_Accel_f32[2];
 80099ce:	4b10      	ldr	r3, [pc, #64]	; (8009a10 <main+0x2e8>)
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	4a21      	ldr	r2, [pc, #132]	; (8009a58 <main+0x330>)
 80099d4:	6253      	str	r3, [r2, #36]	; 0x24
	  data.angle=AHRS_IMU1.PITCH;
 80099d6:	4b0a      	ldr	r3, [pc, #40]	; (8009a00 <main+0x2d8>)
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	4a1f      	ldr	r2, [pc, #124]	; (8009a58 <main+0x330>)
 80099dc:	6293      	str	r3, [r2, #40]	; 0x28
	  data.gyro_x=imu_t.BMI160_Gyro_f32[0];
 80099de:	4b0c      	ldr	r3, [pc, #48]	; (8009a10 <main+0x2e8>)
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	4a1d      	ldr	r2, [pc, #116]	; (8009a58 <main+0x330>)
 80099e4:	6113      	str	r3, [r2, #16]
	  data.gyro_y=imu_t.BMI160_Gyro_f32[1];
 80099e6:	4b0a      	ldr	r3, [pc, #40]	; (8009a10 <main+0x2e8>)
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	4a1b      	ldr	r2, [pc, #108]	; (8009a58 <main+0x330>)
 80099ec:	6153      	str	r3, [r2, #20]
	  data.gyro_z=AHRS_IMU1.PITCH+5;
 80099ee:	4b04      	ldr	r3, [pc, #16]	; (8009a00 <main+0x2d8>)
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	491a      	ldr	r1, [pc, #104]	; (8009a5c <main+0x334>)
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7f7 f8bd 	bl	8000b74 <__addsf3>
 80099fa:	e031      	b.n	8009a60 <main+0x338>
 80099fc:	200000f4 	.word	0x200000f4
 8009a00:	200008d4 	.word	0x200008d4
 8009a04:	200008a4 	.word	0x200008a4
 8009a08:	20000888 	.word	0x20000888
 8009a0c:	20000728 	.word	0x20000728
 8009a10:	200007d8 	.word	0x200007d8
 8009a14:	20000800 	.word	0x20000800
 8009a18:	20000a34 	.word	0x20000a34
 8009a1c:	40010c00 	.word	0x40010c00
 8009a20:	40011000 	.word	0x40011000
 8009a24:	200000e8 	.word	0x200000e8
 8009a28:	200000ec 	.word	0x200000ec
 8009a2c:	40010800 	.word	0x40010800
 8009a30:	200009e5 	.word	0x200009e5
 8009a34:	200009ec 	.word	0x200009ec
 8009a38:	442f0000 	.word	0x442f0000
 8009a3c:	c25c0000 	.word	0xc25c0000
 8009a40:	425c0000 	.word	0x425c0000
 8009a44:	c2480000 	.word	0xc2480000
 8009a48:	42480000 	.word	0x42480000
 8009a4c:	44160000 	.word	0x44160000
 8009a50:	2000002c 	.word	0x2000002c
 8009a54:	20000820 	.word	0x20000820
 8009a58:	20000858 	.word	0x20000858
 8009a5c:	40a00000 	.word	0x40a00000
 8009a60:	4603      	mov	r3, r0
 8009a62:	461a      	mov	r2, r3
 8009a64:	4b10      	ldr	r3, [pc, #64]	; (8009aa8 <main+0x380>)
 8009a66:	619a      	str	r2, [r3, #24]
	  data.irtifa = bmp_t.altitude;
 8009a68:	4b10      	ldr	r3, [pc, #64]	; (8009aac <main+0x384>)
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	4a0e      	ldr	r2, [pc, #56]	; (8009aa8 <main+0x380>)
 8009a6e:	6013      	str	r3, [r2, #0]
	  data.status=status;
 8009a70:	4a0d      	ldr	r2, [pc, #52]	; (8009aa8 <main+0x380>)
 8009a72:	797b      	ldrb	r3, [r7, #5]
 8009a74:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c



	  if ( HAL_GetTick() - (variable.telemTimer)  >= 800 )
 8009a78:	f001 f884 	bl	800ab84 <HAL_GetTick>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	4b0c      	ldr	r3, [pc, #48]	; (8009ab0 <main+0x388>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009a88:	f4ff aeca 	bcc.w	8009820 <main+0xf8>
	 	{

		  veriPaketle( &paket,  &data);
 8009a8c:	4906      	ldr	r1, [pc, #24]	; (8009aa8 <main+0x380>)
 8009a8e:	4809      	ldr	r0, [pc, #36]	; (8009ab4 <main+0x38c>)
 8009a90:	f7fd fec3 	bl	800781a <veriPaketle>
	 	  verileriYolla( paket.u8_array , DATA_PKT_LENGTH );
 8009a94:	2136      	movs	r1, #54	; 0x36
 8009a96:	4807      	ldr	r0, [pc, #28]	; (8009ab4 <main+0x38c>)
 8009a98:	f7fd feda 	bl	8007850 <verileriYolla>
	 	  variable.telemTimer = HAL_GetTick();
 8009a9c:	f001 f872 	bl	800ab84 <HAL_GetTick>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	4a03      	ldr	r2, [pc, #12]	; (8009ab0 <main+0x388>)
 8009aa4:	6013      	str	r3, [r2, #0]
	  if(buz_delay <254){
 8009aa6:	e6bb      	b.n	8009820 <main+0xf8>
 8009aa8:	20000858 	.word	0x20000858
 8009aac:	20000800 	.word	0x20000800
 8009ab0:	2000002c 	.word	0x2000002c
 8009ab4:	20000820 	.word	0x20000820

08009ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b090      	sub	sp, #64	; 0x40
 8009abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009abe:	f107 0318 	add.w	r3, r7, #24
 8009ac2:	2228      	movs	r2, #40	; 0x28
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f003 ff9e 	bl	800da08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009acc:	1d3b      	adds	r3, r7, #4
 8009ace:	2200      	movs	r2, #0
 8009ad0:	601a      	str	r2, [r3, #0]
 8009ad2:	605a      	str	r2, [r3, #4]
 8009ad4:	609a      	str	r2, [r3, #8]
 8009ad6:	60da      	str	r2, [r3, #12]
 8009ad8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8009ada:	2302      	movs	r3, #2
 8009adc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009ae2:	2310      	movs	r3, #16
 8009ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8009aea:	2300      	movs	r3, #0
 8009aec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8009aee:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8009af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009af4:	f107 0318 	add.w	r3, r7, #24
 8009af8:	4618      	mov	r0, r3
 8009afa:	f002 fc31 	bl	800c360 <HAL_RCC_OscConfig>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d001      	beq.n	8009b08 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8009b04:	f000 f819 	bl	8009b3a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009b08:	230f      	movs	r3, #15
 8009b0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009b10:	2300      	movs	r3, #0
 8009b12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009b1e:	1d3b      	adds	r3, r7, #4
 8009b20:	2102      	movs	r1, #2
 8009b22:	4618      	mov	r0, r3
 8009b24:	f002 fe9e 	bl	800c864 <HAL_RCC_ClockConfig>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8009b2e:	f000 f804 	bl	8009b3a <Error_Handler>
  }
}
 8009b32:	bf00      	nop
 8009b34:	3740      	adds	r7, #64	; 0x40
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009b3a:	b480      	push	{r7}
 8009b3c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009b3e:	b672      	cpsid	i
}
 8009b40:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009b42:	e7fe      	b.n	8009b42 <Error_Handler+0x8>

08009b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8009b4a:	4b15      	ldr	r3, [pc, #84]	; (8009ba0 <HAL_MspInit+0x5c>)
 8009b4c:	699b      	ldr	r3, [r3, #24]
 8009b4e:	4a14      	ldr	r2, [pc, #80]	; (8009ba0 <HAL_MspInit+0x5c>)
 8009b50:	f043 0301 	orr.w	r3, r3, #1
 8009b54:	6193      	str	r3, [r2, #24]
 8009b56:	4b12      	ldr	r3, [pc, #72]	; (8009ba0 <HAL_MspInit+0x5c>)
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	f003 0301 	and.w	r3, r3, #1
 8009b5e:	60bb      	str	r3, [r7, #8]
 8009b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009b62:	4b0f      	ldr	r3, [pc, #60]	; (8009ba0 <HAL_MspInit+0x5c>)
 8009b64:	69db      	ldr	r3, [r3, #28]
 8009b66:	4a0e      	ldr	r2, [pc, #56]	; (8009ba0 <HAL_MspInit+0x5c>)
 8009b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b6c:	61d3      	str	r3, [r2, #28]
 8009b6e:	4b0c      	ldr	r3, [pc, #48]	; (8009ba0 <HAL_MspInit+0x5c>)
 8009b70:	69db      	ldr	r3, [r3, #28]
 8009b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b76:	607b      	str	r3, [r7, #4]
 8009b78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8009b7a:	4b0a      	ldr	r3, [pc, #40]	; (8009ba4 <HAL_MspInit+0x60>)
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	60fb      	str	r3, [r7, #12]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8009b86:	60fb      	str	r3, [r7, #12]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009b8e:	60fb      	str	r3, [r7, #12]
 8009b90:	4a04      	ldr	r2, [pc, #16]	; (8009ba4 <HAL_MspInit+0x60>)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009b96:	bf00      	nop
 8009b98:	3714      	adds	r7, #20
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bc80      	pop	{r7}
 8009b9e:	4770      	bx	lr
 8009ba0:	40021000 	.word	0x40021000
 8009ba4:	40010000 	.word	0x40010000

08009ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009bac:	e7fe      	b.n	8009bac <NMI_Handler+0x4>

08009bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009bae:	b480      	push	{r7}
 8009bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009bb2:	e7fe      	b.n	8009bb2 <HardFault_Handler+0x4>

08009bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009bb8:	e7fe      	b.n	8009bb8 <MemManage_Handler+0x4>

08009bba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009bba:	b480      	push	{r7}
 8009bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009bbe:	e7fe      	b.n	8009bbe <BusFault_Handler+0x4>

08009bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009bc4:	e7fe      	b.n	8009bc4 <UsageFault_Handler+0x4>

08009bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009bc6:	b480      	push	{r7}
 8009bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009bca:	bf00      	nop
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bc80      	pop	{r7}
 8009bd0:	4770      	bx	lr

08009bd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009bd6:	bf00      	nop
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bc80      	pop	{r7}
 8009bdc:	4770      	bx	lr

08009bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009bde:	b480      	push	{r7}
 8009be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009be2:	bf00      	nop
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bc80      	pop	{r7}
 8009be8:	4770      	bx	lr

08009bea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009bee:	f000 ffb7 	bl	800ab60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009bf2:	bf00      	nop
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AUX_Pin);
 8009bfa:	2010      	movs	r0, #16
 8009bfc:	f001 fb64 	bl	800b2c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8009c00:	bf00      	nop
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009c08:	4802      	ldr	r0, [pc, #8]	; (8009c14 <USART1_IRQHandler+0x10>)
 8009c0a:	f003 f945 	bl	800ce98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009c0e:	bf00      	nop
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	200009ec 	.word	0x200009ec

08009c18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	af00      	add	r7, sp, #0
  return 1;
 8009c1c:	2301      	movs	r3, #1
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bc80      	pop	{r7}
 8009c24:	4770      	bx	lr

08009c26 <_kill>:

int _kill(int pid, int sig)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b082      	sub	sp, #8
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8009c30:	f003 feb2 	bl	800d998 <__errno>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2216      	movs	r2, #22
 8009c38:	601a      	str	r2, [r3, #0]
  return -1;
 8009c3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3708      	adds	r7, #8
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <_exit>:

void _exit (int status)
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b082      	sub	sp, #8
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8009c4e:	f04f 31ff 	mov.w	r1, #4294967295
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7ff ffe7 	bl	8009c26 <_kill>
  while (1) {}    /* Make sure we hang here */
 8009c58:	e7fe      	b.n	8009c58 <_exit+0x12>

08009c5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b086      	sub	sp, #24
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009c66:	2300      	movs	r3, #0
 8009c68:	617b      	str	r3, [r7, #20]
 8009c6a:	e00a      	b.n	8009c82 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009c6c:	f3af 8000 	nop.w
 8009c70:	4601      	mov	r1, r0
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	1c5a      	adds	r2, r3, #1
 8009c76:	60ba      	str	r2, [r7, #8]
 8009c78:	b2ca      	uxtb	r2, r1
 8009c7a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	617b      	str	r3, [r7, #20]
 8009c82:	697a      	ldr	r2, [r7, #20]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	dbf0      	blt.n	8009c6c <_read+0x12>
  }

  return len;
 8009c8a:	687b      	ldr	r3, [r7, #4]
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3718      	adds	r7, #24
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	617b      	str	r3, [r7, #20]
 8009ca4:	e009      	b.n	8009cba <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	1c5a      	adds	r2, r3, #1
 8009caa:	60ba      	str	r2, [r7, #8]
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	617b      	str	r3, [r7, #20]
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	dbf1      	blt.n	8009ca6 <_write+0x12>
  }
  return len;
 8009cc2:	687b      	ldr	r3, [r7, #4]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3718      	adds	r7, #24
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <_close>:

int _close(int file)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009cd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	370c      	adds	r7, #12
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bc80      	pop	{r7}
 8009ce0:	4770      	bx	lr

08009ce2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009ce2:	b480      	push	{r7}
 8009ce4:	b083      	sub	sp, #12
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
 8009cea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009cf2:	605a      	str	r2, [r3, #4]
  return 0;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bc80      	pop	{r7}
 8009cfe:	4770      	bx	lr

08009d00 <_isatty>:

int _isatty(int file)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009d08:	2301      	movs	r3, #1
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	370c      	adds	r7, #12
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bc80      	pop	{r7}
 8009d12:	4770      	bx	lr

08009d14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3714      	adds	r7, #20
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bc80      	pop	{r7}
 8009d2a:	4770      	bx	lr

08009d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b086      	sub	sp, #24
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009d34:	4a14      	ldr	r2, [pc, #80]	; (8009d88 <_sbrk+0x5c>)
 8009d36:	4b15      	ldr	r3, [pc, #84]	; (8009d8c <_sbrk+0x60>)
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009d40:	4b13      	ldr	r3, [pc, #76]	; (8009d90 <_sbrk+0x64>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d102      	bne.n	8009d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009d48:	4b11      	ldr	r3, [pc, #68]	; (8009d90 <_sbrk+0x64>)
 8009d4a:	4a12      	ldr	r2, [pc, #72]	; (8009d94 <_sbrk+0x68>)
 8009d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009d4e:	4b10      	ldr	r3, [pc, #64]	; (8009d90 <_sbrk+0x64>)
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4413      	add	r3, r2
 8009d56:	693a      	ldr	r2, [r7, #16]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d207      	bcs.n	8009d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009d5c:	f003 fe1c 	bl	800d998 <__errno>
 8009d60:	4603      	mov	r3, r0
 8009d62:	220c      	movs	r2, #12
 8009d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009d66:	f04f 33ff 	mov.w	r3, #4294967295
 8009d6a:	e009      	b.n	8009d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009d6c:	4b08      	ldr	r3, [pc, #32]	; (8009d90 <_sbrk+0x64>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009d72:	4b07      	ldr	r3, [pc, #28]	; (8009d90 <_sbrk+0x64>)
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4413      	add	r3, r2
 8009d7a:	4a05      	ldr	r2, [pc, #20]	; (8009d90 <_sbrk+0x64>)
 8009d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	20005000 	.word	0x20005000
 8009d8c:	00000400 	.word	0x00000400
 8009d90:	200009e8 	.word	0x200009e8
 8009d94:	20000a90 	.word	0x20000a90

08009d98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009d9c:	bf00      	nop
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bc80      	pop	{r7}
 8009da2:	4770      	bx	lr

08009da4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009da8:	4b11      	ldr	r3, [pc, #68]	; (8009df0 <MX_USART1_UART_Init+0x4c>)
 8009daa:	4a12      	ldr	r2, [pc, #72]	; (8009df4 <MX_USART1_UART_Init+0x50>)
 8009dac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8009dae:	4b10      	ldr	r3, [pc, #64]	; (8009df0 <MX_USART1_UART_Init+0x4c>)
 8009db0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8009db4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009db6:	4b0e      	ldr	r3, [pc, #56]	; (8009df0 <MX_USART1_UART_Init+0x4c>)
 8009db8:	2200      	movs	r2, #0
 8009dba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009dbc:	4b0c      	ldr	r3, [pc, #48]	; (8009df0 <MX_USART1_UART_Init+0x4c>)
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009dc2:	4b0b      	ldr	r3, [pc, #44]	; (8009df0 <MX_USART1_UART_Init+0x4c>)
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009dc8:	4b09      	ldr	r3, [pc, #36]	; (8009df0 <MX_USART1_UART_Init+0x4c>)
 8009dca:	220c      	movs	r2, #12
 8009dcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009dce:	4b08      	ldr	r3, [pc, #32]	; (8009df0 <MX_USART1_UART_Init+0x4c>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009dd4:	4b06      	ldr	r3, [pc, #24]	; (8009df0 <MX_USART1_UART_Init+0x4c>)
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009dda:	4805      	ldr	r0, [pc, #20]	; (8009df0 <MX_USART1_UART_Init+0x4c>)
 8009ddc:	f002 fed2 	bl	800cb84 <HAL_UART_Init>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d001      	beq.n	8009dea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009de6:	f7ff fea8 	bl	8009b3a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009dea:	bf00      	nop
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	200009ec 	.word	0x200009ec
 8009df4:	40013800 	.word	0x40013800

08009df8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8009dfc:	4b11      	ldr	r3, [pc, #68]	; (8009e44 <MX_USART3_UART_Init+0x4c>)
 8009dfe:	4a12      	ldr	r2, [pc, #72]	; (8009e48 <MX_USART3_UART_Init+0x50>)
 8009e00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8009e02:	4b10      	ldr	r3, [pc, #64]	; (8009e44 <MX_USART3_UART_Init+0x4c>)
 8009e04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8009e08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009e0a:	4b0e      	ldr	r3, [pc, #56]	; (8009e44 <MX_USART3_UART_Init+0x4c>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009e10:	4b0c      	ldr	r3, [pc, #48]	; (8009e44 <MX_USART3_UART_Init+0x4c>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009e16:	4b0b      	ldr	r3, [pc, #44]	; (8009e44 <MX_USART3_UART_Init+0x4c>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009e1c:	4b09      	ldr	r3, [pc, #36]	; (8009e44 <MX_USART3_UART_Init+0x4c>)
 8009e1e:	220c      	movs	r2, #12
 8009e20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009e22:	4b08      	ldr	r3, [pc, #32]	; (8009e44 <MX_USART3_UART_Init+0x4c>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009e28:	4b06      	ldr	r3, [pc, #24]	; (8009e44 <MX_USART3_UART_Init+0x4c>)
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009e2e:	4805      	ldr	r0, [pc, #20]	; (8009e44 <MX_USART3_UART_Init+0x4c>)
 8009e30:	f002 fea8 	bl	800cb84 <HAL_UART_Init>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d001      	beq.n	8009e3e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8009e3a:	f7ff fe7e 	bl	8009b3a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8009e3e:	bf00      	nop
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	20000a34 	.word	0x20000a34
 8009e48:	40004800 	.word	0x40004800

08009e4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b08c      	sub	sp, #48	; 0x30
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e54:	f107 031c 	add.w	r3, r7, #28
 8009e58:	2200      	movs	r2, #0
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	605a      	str	r2, [r3, #4]
 8009e5e:	609a      	str	r2, [r3, #8]
 8009e60:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a45      	ldr	r2, [pc, #276]	; (8009f7c <HAL_UART_MspInit+0x130>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d13a      	bne.n	8009ee2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009e6c:	4b44      	ldr	r3, [pc, #272]	; (8009f80 <HAL_UART_MspInit+0x134>)
 8009e6e:	699b      	ldr	r3, [r3, #24]
 8009e70:	4a43      	ldr	r2, [pc, #268]	; (8009f80 <HAL_UART_MspInit+0x134>)
 8009e72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e76:	6193      	str	r3, [r2, #24]
 8009e78:	4b41      	ldr	r3, [pc, #260]	; (8009f80 <HAL_UART_MspInit+0x134>)
 8009e7a:	699b      	ldr	r3, [r3, #24]
 8009e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e80:	61bb      	str	r3, [r7, #24]
 8009e82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e84:	4b3e      	ldr	r3, [pc, #248]	; (8009f80 <HAL_UART_MspInit+0x134>)
 8009e86:	699b      	ldr	r3, [r3, #24]
 8009e88:	4a3d      	ldr	r2, [pc, #244]	; (8009f80 <HAL_UART_MspInit+0x134>)
 8009e8a:	f043 0304 	orr.w	r3, r3, #4
 8009e8e:	6193      	str	r3, [r2, #24]
 8009e90:	4b3b      	ldr	r3, [pc, #236]	; (8009f80 <HAL_UART_MspInit+0x134>)
 8009e92:	699b      	ldr	r3, [r3, #24]
 8009e94:	f003 0304 	and.w	r3, r3, #4
 8009e98:	617b      	str	r3, [r7, #20]
 8009e9a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ea2:	2302      	movs	r3, #2
 8009ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009eaa:	f107 031c 	add.w	r3, r7, #28
 8009eae:	4619      	mov	r1, r3
 8009eb0:	4834      	ldr	r0, [pc, #208]	; (8009f84 <HAL_UART_MspInit+0x138>)
 8009eb2:	f001 f855 	bl	800af60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ec4:	f107 031c 	add.w	r3, r7, #28
 8009ec8:	4619      	mov	r1, r3
 8009eca:	482e      	ldr	r0, [pc, #184]	; (8009f84 <HAL_UART_MspInit+0x138>)
 8009ecc:	f001 f848 	bl	800af60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	2100      	movs	r1, #0
 8009ed4:	2025      	movs	r0, #37	; 0x25
 8009ed6:	f000 ff5a 	bl	800ad8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009eda:	2025      	movs	r0, #37	; 0x25
 8009edc:	f000 ff73 	bl	800adc6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8009ee0:	e048      	b.n	8009f74 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a28      	ldr	r2, [pc, #160]	; (8009f88 <HAL_UART_MspInit+0x13c>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d143      	bne.n	8009f74 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART3_CLK_ENABLE();
 8009eec:	4b24      	ldr	r3, [pc, #144]	; (8009f80 <HAL_UART_MspInit+0x134>)
 8009eee:	69db      	ldr	r3, [r3, #28]
 8009ef0:	4a23      	ldr	r2, [pc, #140]	; (8009f80 <HAL_UART_MspInit+0x134>)
 8009ef2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ef6:	61d3      	str	r3, [r2, #28]
 8009ef8:	4b21      	ldr	r3, [pc, #132]	; (8009f80 <HAL_UART_MspInit+0x134>)
 8009efa:	69db      	ldr	r3, [r3, #28]
 8009efc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f00:	613b      	str	r3, [r7, #16]
 8009f02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f04:	4b1e      	ldr	r3, [pc, #120]	; (8009f80 <HAL_UART_MspInit+0x134>)
 8009f06:	699b      	ldr	r3, [r3, #24]
 8009f08:	4a1d      	ldr	r2, [pc, #116]	; (8009f80 <HAL_UART_MspInit+0x134>)
 8009f0a:	f043 0310 	orr.w	r3, r3, #16
 8009f0e:	6193      	str	r3, [r2, #24]
 8009f10:	4b1b      	ldr	r3, [pc, #108]	; (8009f80 <HAL_UART_MspInit+0x134>)
 8009f12:	699b      	ldr	r3, [r3, #24]
 8009f14:	f003 0310 	and.w	r3, r3, #16
 8009f18:	60fb      	str	r3, [r7, #12]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009f1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f22:	2302      	movs	r3, #2
 8009f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009f26:	2303      	movs	r3, #3
 8009f28:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f2a:	f107 031c 	add.w	r3, r7, #28
 8009f2e:	4619      	mov	r1, r3
 8009f30:	4816      	ldr	r0, [pc, #88]	; (8009f8c <HAL_UART_MspInit+0x140>)
 8009f32:	f001 f815 	bl	800af60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8009f36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f40:	2300      	movs	r3, #0
 8009f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f44:	f107 031c 	add.w	r3, r7, #28
 8009f48:	4619      	mov	r1, r3
 8009f4a:	4810      	ldr	r0, [pc, #64]	; (8009f8c <HAL_UART_MspInit+0x140>)
 8009f4c:	f001 f808 	bl	800af60 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8009f50:	4b0f      	ldr	r3, [pc, #60]	; (8009f90 <HAL_UART_MspInit+0x144>)
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f58:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f60:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8009f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f68:	f043 0310 	orr.w	r3, r3, #16
 8009f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f6e:	4a08      	ldr	r2, [pc, #32]	; (8009f90 <HAL_UART_MspInit+0x144>)
 8009f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f72:	6053      	str	r3, [r2, #4]
}
 8009f74:	bf00      	nop
 8009f76:	3730      	adds	r7, #48	; 0x30
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	40013800 	.word	0x40013800
 8009f80:	40021000 	.word	0x40021000
 8009f84:	40010800 	.word	0x40010800
 8009f88:	40004800 	.word	0x40004800
 8009f8c:	40011000 	.word	0x40011000
 8009f90:	40010000 	.word	0x40010000

08009f94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009f94:	480c      	ldr	r0, [pc, #48]	; (8009fc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009f96:	490d      	ldr	r1, [pc, #52]	; (8009fcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009f98:	4a0d      	ldr	r2, [pc, #52]	; (8009fd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009f9c:	e002      	b.n	8009fa4 <LoopCopyDataInit>

08009f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009fa2:	3304      	adds	r3, #4

08009fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009fa8:	d3f9      	bcc.n	8009f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009faa:	4a0a      	ldr	r2, [pc, #40]	; (8009fd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009fac:	4c0a      	ldr	r4, [pc, #40]	; (8009fd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009fb0:	e001      	b.n	8009fb6 <LoopFillZerobss>

08009fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009fb4:	3204      	adds	r2, #4

08009fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009fb8:	d3fb      	bcc.n	8009fb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009fba:	f7ff feed 	bl	8009d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009fbe:	f003 fcf1 	bl	800d9a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009fc2:	f7ff fbb1 	bl	8009728 <main>
  bx lr
 8009fc6:	4770      	bx	lr
  ldr r0, =_sdata
 8009fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009fcc:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 8009fd0:	08013158 	.word	0x08013158
  ldr r2, =_sbss
 8009fd4:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 8009fd8:	20000a90 	.word	0x20000a90

08009fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009fdc:	e7fe      	b.n	8009fdc <ADC1_2_IRQHandler>
	...

08009fe0 <initFusionAHRS>:
};

//


void initFusionAHRS(FusionBias*fusionBias, FusionAhrs*fusionAhrs, FusionAHRS_t*DataStruct, float sample_S){
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]
 8009fec:	603b      	str	r3, [r7, #0]

	DataStruct->samplePeriod = sample_S;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	683a      	ldr	r2, [r7, #0]
 8009ff2:	60da      	str	r2, [r3, #12]
	
	// Initialise gyroscope bias correction algorithm
    FusionBiasInitialise(fusionBias, 0.5f, DataStruct->samplePeriod); // stationary threshold = 0.5 degrees per second
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	f7f8 ff0e 	bl	8002e20 <FusionBiasInitialise>

    // Initialise AHRS algorithm
    FusionAhrsInitialise(fusionAhrs, 0.5f); // gain = 0.5
 800a004:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a008:	68b8      	ldr	r0, [r7, #8]
 800a00a:	f7f7 f915 	bl	8001238 <FusionAhrsInitialise>

    // Set optional magnetic field limits
    FusionAhrsSetMagneticField(fusionAhrs, 20.0f, 70.0f); // valid magnetic field range = 20 uT to 70 uT
 800a00e:	4a04      	ldr	r2, [pc, #16]	; (800a020 <initFusionAHRS+0x40>)
 800a010:	4904      	ldr	r1, [pc, #16]	; (800a024 <initFusionAHRS+0x44>)
 800a012:	68b8      	ldr	r0, [r7, #8]
 800a014:	f7f7 f94c 	bl	80012b0 <FusionAhrsSetMagneticField>
}
 800a018:	bf00      	nop
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	428c0000 	.word	0x428c0000
 800a024:	41a00000 	.word	0x41a00000

0800a028 <getFusionAHRS_6DoF>:
	DataStruct->YAW = eulerAngles.angle.yaw;
	DataStruct->PITCH = eulerAngles.angle.pitch;
	DataStruct->ROLL = eulerAngles.angle.roll;
}

void getFusionAHRS_6DoF(FusionBias*fusionBias, FusionAhrs*fusionAhrs, FusionAHRS_t*DataStruct, float accX, float accY, float accZ, float gyrX, float gyrY, float gyrZ) {
 800a028:	b5b0      	push	{r4, r5, r7, lr}
 800a02a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a02e:	af04      	add	r7, sp, #16
 800a030:	f507 741e 	add.w	r4, r7, #632	; 0x278
 800a034:	f5a4 7417 	sub.w	r4, r4, #604	; 0x25c
 800a038:	6020      	str	r0, [r4, #0]
 800a03a:	f507 701e 	add.w	r0, r7, #632	; 0x278
 800a03e:	f5a0 7018 	sub.w	r0, r0, #608	; 0x260
 800a042:	6001      	str	r1, [r0, #0]
 800a044:	f507 711e 	add.w	r1, r7, #632	; 0x278
 800a048:	f5a1 7119 	sub.w	r1, r1, #612	; 0x264
 800a04c:	600a      	str	r2, [r1, #0]
 800a04e:	f507 721e 	add.w	r2, r7, #632	; 0x278
 800a052:	f5a2 721a 	sub.w	r2, r2, #616	; 0x268
 800a056:	6013      	str	r3, [r2, #0]
	
	// Calibrate gyroscope
	FusionVector3 uncalibratedGyroscope = {
 800a058:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800a05c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800a060:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800a064:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800a068:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800a06c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
		.axis.x = gyrX, /* replace this value with actual gyroscope x axis measurement in lsb */
		.axis.y = gyrY, /* replace this value with actual gyroscope y axis measurement in lsb */
		.axis.z = gyrZ, /* replace this value with actual gyroscope z axis measurement in lsb */
	};
	FusionVector3 calibratedGyroscope = FusionCalibrationInertial(uncalibratedGyroscope, FUSION_ROTATION_MATRIX_IDENTITY, gyroscopeSensitivity, FUSION_VECTOR3_ZERO);
 800a070:	4bc5      	ldr	r3, [pc, #788]	; (800a388 <getFusionAHRS_6DoF+0x360>)
 800a072:	f507 74f6 	add.w	r4, r7, #492	; 0x1ec
 800a076:	461d      	mov	r5, r3
 800a078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a07a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a07c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a07e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a080:	682b      	ldr	r3, [r5, #0]
 800a082:	6023      	str	r3, [r4, #0]
 800a084:	f04f 0300 	mov.w	r3, #0
 800a088:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800a08c:	f04f 0300 	mov.w	r3, #0
 800a090:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800a094:	f04f 0300 	mov.w	r3, #0
 800a098:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800a09c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a0a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800a0a4:	461c      	mov	r4, r3
 800a0a6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a0aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a0ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a0b2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a0b6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800a0ba:	461d      	mov	r5, r3
 800a0bc:	f507 74f6 	add.w	r4, r7, #492	; 0x1ec
 800a0c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0c8:	6823      	ldr	r3, [r4, #0]
 800a0ca:	602b      	str	r3, [r5, #0]
 800a0cc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a0d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0d4:	4aad      	ldr	r2, [pc, #692]	; (800a38c <getFusionAHRS_6DoF+0x364>)
 800a0d6:	ca07      	ldmia	r2, {r0, r1, r2}
 800a0d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a0dc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800a0e0:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 800a0e4:	ca07      	ldmia	r2, {r0, r1, r2}
 800a0e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a0ea:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a0ee:	f5a3 7194 	sub.w	r1, r3, #296	; 0x128
 800a0f2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a0f6:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	ca07      	ldmia	r2, {r0, r1, r2}
 800a0fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a102:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a106:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a10a:	461c      	mov	r4, r3
 800a10c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800a110:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a114:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return vectorB subtracted from vectorA.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorSubtract(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 800a118:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a11c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a126:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4619      	mov	r1, r3
 800a12e:	4610      	mov	r0, r2
 800a130:	f7f6 fd1e 	bl	8000b70 <__aeabi_fsub>
 800a134:	4603      	mov	r3, r0
 800a136:	461a      	mov	r2, r3
 800a138:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a13c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a140:	601a      	str	r2, [r3, #0]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 800a142:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a146:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a14a:	685a      	ldr	r2, [r3, #4]
 800a14c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a150:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	4619      	mov	r1, r3
 800a158:	4610      	mov	r0, r2
 800a15a:	f7f6 fd09 	bl	8000b70 <__aeabi_fsub>
 800a15e:	4603      	mov	r3, r0
 800a160:	461a      	mov	r2, r3
 800a162:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a166:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a16a:	605a      	str	r2, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 800a16c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a170:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a174:	689a      	ldr	r2, [r3, #8]
 800a176:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a17a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	4619      	mov	r1, r3
 800a182:	4610      	mov	r0, r2
 800a184:	f7f6 fcf4 	bl	8000b70 <__aeabi_fsub>
 800a188:	4603      	mov	r3, r0
 800a18a:	461a      	mov	r2, r3
 800a18c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a190:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a194:	609a      	str	r2, [r3, #8]
    return result;
 800a196:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a19a:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 800a19e:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800a1a2:	ca07      	ldmia	r2, {r0, r1, r2}
 800a1a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a1a8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a1ac:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800a1b0:	461c      	mov	r4, r3
 800a1b2:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800a1b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a1ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a1be:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a1c2:	f5a3 71a0 	sub.w	r1, r3, #320	; 0x140
 800a1c6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a1ca:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	ca07      	ldmia	r2, {r0, r1, r2}
 800a1d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return Hadamard product of vectorA and vectorB.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorHadamardProduct(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 800a1d6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a1da:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a1e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	4610      	mov	r0, r2
 800a1ee:	f7f6 fdc9 	bl	8000d84 <__aeabi_fmul>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a1fa:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800a1fe:	601a      	str	r2, [r3, #0]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 800a200:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a204:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800a208:	685a      	ldr	r2, [r3, #4]
 800a20a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a20e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	4619      	mov	r1, r3
 800a216:	4610      	mov	r0, r2
 800a218:	f7f6 fdb4 	bl	8000d84 <__aeabi_fmul>
 800a21c:	4603      	mov	r3, r0
 800a21e:	461a      	mov	r2, r3
 800a220:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a224:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800a228:	605a      	str	r2, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 800a22a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a22e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800a232:	689a      	ldr	r2, [r3, #8]
 800a234:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a238:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	4619      	mov	r1, r3
 800a240:	4610      	mov	r0, r2
 800a242:	f7f6 fd9f 	bl	8000d84 <__aeabi_fmul>
 800a246:	4603      	mov	r3, r0
 800a248:	461a      	mov	r2, r3
 800a24a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a24e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800a252:	609a      	str	r2, [r3, #8]
    return result;
 800a254:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a258:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 800a25c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a260:	ca07      	ldmia	r2, {r0, r1, r2}
 800a262:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a266:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a26a:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 800a26e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a272:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800a276:	4614      	mov	r4, r2
 800a278:	461d      	mov	r5, r3
 800a27a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a27c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a27e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a282:	682b      	ldr	r3, [r5, #0]
 800a284:	6023      	str	r3, [r4, #0]
 800a286:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a28a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800a28e:	461c      	mov	r4, r3
 800a290:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a294:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a298:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 * @return Rotation matrix multiplied with scalar.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionRotationMatrixMultiplyVector(const FusionRotationMatrix rotationMatrix, const FusionVector3 vector) {
#define R rotationMatrix.element // define shorthand label for more readable code
    FusionVector3 result;
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 800a29c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a2a0:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a2aa:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	4610      	mov	r0, r2
 800a2b4:	f7f6 fd66 	bl	8000d84 <__aeabi_fmul>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	461c      	mov	r4, r3
 800a2bc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a2c0:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800a2c4:	685a      	ldr	r2, [r3, #4]
 800a2c6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a2ca:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	4610      	mov	r0, r2
 800a2d4:	f7f6 fd56 	bl	8000d84 <__aeabi_fmul>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	4619      	mov	r1, r3
 800a2dc:	4620      	mov	r0, r4
 800a2de:	f7f6 fc49 	bl	8000b74 <__addsf3>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	461c      	mov	r4, r3
 800a2e6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a2ea:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800a2ee:	689a      	ldr	r2, [r3, #8]
 800a2f0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a2f4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	4610      	mov	r0, r2
 800a2fe:	f7f6 fd41 	bl	8000d84 <__aeabi_fmul>
 800a302:	4603      	mov	r3, r0
 800a304:	4619      	mov	r1, r3
 800a306:	4620      	mov	r0, r4
 800a308:	f7f6 fc34 	bl	8000b74 <__addsf3>
 800a30c:	4603      	mov	r3, r0
 800a30e:	461a      	mov	r2, r3
 800a310:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a314:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800a318:	601a      	str	r2, [r3, #0]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 800a31a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a31e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800a322:	68da      	ldr	r2, [r3, #12]
 800a324:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a328:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4619      	mov	r1, r3
 800a330:	4610      	mov	r0, r2
 800a332:	f7f6 fd27 	bl	8000d84 <__aeabi_fmul>
 800a336:	4603      	mov	r3, r0
 800a338:	461c      	mov	r4, r3
 800a33a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a33e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800a342:	691a      	ldr	r2, [r3, #16]
 800a344:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a348:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	4619      	mov	r1, r3
 800a350:	4610      	mov	r0, r2
 800a352:	f7f6 fd17 	bl	8000d84 <__aeabi_fmul>
 800a356:	4603      	mov	r3, r0
 800a358:	4619      	mov	r1, r3
 800a35a:	4620      	mov	r0, r4
 800a35c:	f7f6 fc0a 	bl	8000b74 <__addsf3>
 800a360:	4603      	mov	r3, r0
 800a362:	461c      	mov	r4, r3
 800a364:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a368:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800a36c:	695a      	ldr	r2, [r3, #20]
 800a36e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a372:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	4619      	mov	r1, r3
 800a37a:	4610      	mov	r0, r2
 800a37c:	f7f6 fd02 	bl	8000d84 <__aeabi_fmul>
 800a380:	4603      	mov	r3, r0
 800a382:	4619      	mov	r1, r3
 800a384:	e004      	b.n	800a390 <getFusionAHRS_6DoF+0x368>
 800a386:	bf00      	nop
 800a388:	08012884 	.word	0x08012884
 800a38c:	200000fc 	.word	0x200000fc
 800a390:	4620      	mov	r0, r4
 800a392:	f7f6 fbef 	bl	8000b74 <__addsf3>
 800a396:	4603      	mov	r3, r0
 800a398:	461a      	mov	r2, r3
 800a39a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a39e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800a3a2:	605a      	str	r2, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 800a3a4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a3a8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800a3ac:	699a      	ldr	r2, [r3, #24]
 800a3ae:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a3b2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	4610      	mov	r0, r2
 800a3bc:	f7f6 fce2 	bl	8000d84 <__aeabi_fmul>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	461c      	mov	r4, r3
 800a3c4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a3c8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800a3cc:	69da      	ldr	r2, [r3, #28]
 800a3ce:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a3d2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	4619      	mov	r1, r3
 800a3da:	4610      	mov	r0, r2
 800a3dc:	f7f6 fcd2 	bl	8000d84 <__aeabi_fmul>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	f7f6 fbc5 	bl	8000b74 <__addsf3>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	461c      	mov	r4, r3
 800a3ee:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a3f2:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800a3f6:	6a1a      	ldr	r2, [r3, #32]
 800a3f8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a3fc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	4619      	mov	r1, r3
 800a404:	4610      	mov	r0, r2
 800a406:	f7f6 fcbd 	bl	8000d84 <__aeabi_fmul>
 800a40a:	4603      	mov	r3, r0
 800a40c:	4619      	mov	r1, r3
 800a40e:	4620      	mov	r0, r4
 800a410:	f7f6 fbb0 	bl	8000b74 <__addsf3>
 800a414:	4603      	mov	r3, r0
 800a416:	461a      	mov	r2, r3
 800a418:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a41c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800a420:	609a      	str	r2, [r3, #8]
    return result;
 800a422:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a426:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 800a42a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800a42e:	ca07      	ldmia	r2, {r0, r1, r2}
 800a430:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * per second per lsb for a gyroscope.
 * @param bias Bias in lsb.
 * @return Calibrated gyroscope or accelerometer measurement.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionCalibrationInertial(const FusionVector3 uncalibrated, const FusionRotationMatrix misalignment, const FusionVector3 sensitivity, const FusionVector3 bias) {
    return FusionRotationMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, bias), sensitivity));
 800a434:	bf00      	nop

	// Calibrate accelerometer
	FusionVector3 uncalibratedAccelerometer = {
 800a436:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a43a:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800a444:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 800a448:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800a44c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800a450:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
		.axis.x = accX, /* replace this value with actual accelerometer x axis measurement in lsb */
		.axis.y = accY, /* replace this value with actual accelerometer y axis measurement in lsb */
		.axis.z = accZ, /* replace this value with actual accelerometer z axis measurement in lsb */
	};
	FusionVector3 calibratedAccelerometer = FusionCalibrationInertial(uncalibratedAccelerometer, FUSION_ROTATION_MATRIX_IDENTITY, accelerometerSensitivity, FUSION_VECTOR3_ZERO);
 800a454:	4bc5      	ldr	r3, [pc, #788]	; (800a76c <getFusionAHRS_6DoF+0x744>)
 800a456:	f507 74d2 	add.w	r4, r7, #420	; 0x1a4
 800a45a:	461d      	mov	r5, r3
 800a45c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a45e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a464:	682b      	ldr	r3, [r5, #0]
 800a466:	6023      	str	r3, [r4, #0]
 800a468:	f04f 0300 	mov.w	r3, #0
 800a46c:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800a470:	f04f 0300 	mov.w	r3, #0
 800a474:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800a478:	f04f 0300 	mov.w	r3, #0
 800a47c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800a480:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a484:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800a488:	461c      	mov	r4, r3
 800a48a:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 800a48e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a492:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a496:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a49a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800a49e:	461d      	mov	r5, r3
 800a4a0:	f507 74d2 	add.w	r4, r7, #420	; 0x1a4
 800a4a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a4a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a4a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a4aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a4ac:	6823      	ldr	r3, [r4, #0]
 800a4ae:	602b      	str	r3, [r5, #0]
 800a4b0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a4b4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800a4b8:	4aad      	ldr	r2, [pc, #692]	; (800a770 <getFusionAHRS_6DoF+0x748>)
 800a4ba:	ca07      	ldmia	r2, {r0, r1, r2}
 800a4bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a4c0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a4c4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800a4c8:	461c      	mov	r4, r3
 800a4ca:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800a4ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a4d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a4d6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a4da:	f5a3 71d6 	sub.w	r1, r3, #428	; 0x1ac
 800a4de:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a4e2:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	ca07      	ldmia	r2, {r0, r1, r2}
 800a4ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a4ee:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a4f2:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 800a4f6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a4fa:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 800a4fe:	460b      	mov	r3, r1
 800a500:	ca07      	ldmia	r2, {r0, r1, r2}
 800a502:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 800a506:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a50a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a514:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4619      	mov	r1, r3
 800a51c:	4610      	mov	r0, r2
 800a51e:	f7f6 fb27 	bl	8000b70 <__aeabi_fsub>
 800a522:	4603      	mov	r3, r0
 800a524:	461a      	mov	r2, r3
 800a526:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a52a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800a52e:	601a      	str	r2, [r3, #0]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 800a530:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a534:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800a538:	685a      	ldr	r2, [r3, #4]
 800a53a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a53e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	4619      	mov	r1, r3
 800a546:	4610      	mov	r0, r2
 800a548:	f7f6 fb12 	bl	8000b70 <__aeabi_fsub>
 800a54c:	4603      	mov	r3, r0
 800a54e:	461a      	mov	r2, r3
 800a550:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a554:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800a558:	605a      	str	r2, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 800a55a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a55e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800a562:	689a      	ldr	r2, [r3, #8]
 800a564:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a568:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	4619      	mov	r1, r3
 800a570:	4610      	mov	r0, r2
 800a572:	f7f6 fafd 	bl	8000b70 <__aeabi_fsub>
 800a576:	4603      	mov	r3, r0
 800a578:	461a      	mov	r2, r3
 800a57a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a57e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800a582:	609a      	str	r2, [r3, #8]
    return result;
 800a584:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a588:	f5a3 72dc 	sub.w	r2, r3, #440	; 0x1b8
 800a58c:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800a590:	ca07      	ldmia	r2, {r0, r1, r2}
 800a592:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a596:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a59a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800a59e:	461c      	mov	r4, r3
 800a5a0:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800a5a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a5a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a5ac:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a5b0:	f5a3 71e2 	sub.w	r1, r3, #452	; 0x1c4
 800a5b4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a5b8:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 800a5bc:	460b      	mov	r3, r1
 800a5be:	ca07      	ldmia	r2, {r0, r1, r2}
 800a5c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 800a5c4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a5c8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a5d2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4619      	mov	r1, r3
 800a5da:	4610      	mov	r0, r2
 800a5dc:	f7f6 fbd2 	bl	8000d84 <__aeabi_fmul>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a5e8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800a5ec:	601a      	str	r2, [r3, #0]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 800a5ee:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a5f2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800a5f6:	685a      	ldr	r2, [r3, #4]
 800a5f8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a5fc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	4619      	mov	r1, r3
 800a604:	4610      	mov	r0, r2
 800a606:	f7f6 fbbd 	bl	8000d84 <__aeabi_fmul>
 800a60a:	4603      	mov	r3, r0
 800a60c:	461a      	mov	r2, r3
 800a60e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a612:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800a616:	605a      	str	r2, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 800a618:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a61c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800a620:	689a      	ldr	r2, [r3, #8]
 800a622:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a626:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	4619      	mov	r1, r3
 800a62e:	4610      	mov	r0, r2
 800a630:	f7f6 fba8 	bl	8000d84 <__aeabi_fmul>
 800a634:	4603      	mov	r3, r0
 800a636:	461a      	mov	r2, r3
 800a638:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a63c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800a640:	609a      	str	r2, [r3, #8]
    return result;
 800a642:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a646:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 800a64a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a64e:	ca07      	ldmia	r2, {r0, r1, r2}
 800a650:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a654:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a658:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 800a65c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a660:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800a664:	4614      	mov	r4, r2
 800a666:	461d      	mov	r5, r3
 800a668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a66a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a66c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a66e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a670:	682b      	ldr	r3, [r5, #0]
 800a672:	6023      	str	r3, [r4, #0]
 800a674:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a678:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800a67c:	461c      	mov	r4, r3
 800a67e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a682:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 800a68a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a68e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a698:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4619      	mov	r1, r3
 800a6a0:	4610      	mov	r0, r2
 800a6a2:	f7f6 fb6f 	bl	8000d84 <__aeabi_fmul>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	461c      	mov	r4, r3
 800a6aa:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a6ae:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800a6b2:	685a      	ldr	r2, [r3, #4]
 800a6b4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a6b8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	4619      	mov	r1, r3
 800a6c0:	4610      	mov	r0, r2
 800a6c2:	f7f6 fb5f 	bl	8000d84 <__aeabi_fmul>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f7f6 fa52 	bl	8000b74 <__addsf3>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	461c      	mov	r4, r3
 800a6d4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a6d8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800a6dc:	689a      	ldr	r2, [r3, #8]
 800a6de:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a6e2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	4610      	mov	r0, r2
 800a6ec:	f7f6 fb4a 	bl	8000d84 <__aeabi_fmul>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	f7f6 fa3d 	bl	8000b74 <__addsf3>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a702:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800a706:	601a      	str	r2, [r3, #0]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 800a708:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a70c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800a710:	68da      	ldr	r2, [r3, #12]
 800a712:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a716:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4619      	mov	r1, r3
 800a71e:	4610      	mov	r0, r2
 800a720:	f7f6 fb30 	bl	8000d84 <__aeabi_fmul>
 800a724:	4603      	mov	r3, r0
 800a726:	461c      	mov	r4, r3
 800a728:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a72c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800a730:	691a      	ldr	r2, [r3, #16]
 800a732:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a736:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	4619      	mov	r1, r3
 800a73e:	4610      	mov	r0, r2
 800a740:	f7f6 fb20 	bl	8000d84 <__aeabi_fmul>
 800a744:	4603      	mov	r3, r0
 800a746:	4619      	mov	r1, r3
 800a748:	4620      	mov	r0, r4
 800a74a:	f7f6 fa13 	bl	8000b74 <__addsf3>
 800a74e:	4603      	mov	r3, r0
 800a750:	461c      	mov	r4, r3
 800a752:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a756:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800a75a:	695a      	ldr	r2, [r3, #20]
 800a75c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a760:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800a764:	689b      	ldr	r3, [r3, #8]
 800a766:	4619      	mov	r1, r3
 800a768:	4610      	mov	r0, r2
 800a76a:	e003      	b.n	800a774 <getFusionAHRS_6DoF+0x74c>
 800a76c:	08012884 	.word	0x08012884
 800a770:	20000108 	.word	0x20000108
 800a774:	f7f6 fb06 	bl	8000d84 <__aeabi_fmul>
 800a778:	4603      	mov	r3, r0
 800a77a:	4619      	mov	r1, r3
 800a77c:	4620      	mov	r0, r4
 800a77e:	f7f6 f9f9 	bl	8000b74 <__addsf3>
 800a782:	4603      	mov	r3, r0
 800a784:	461a      	mov	r2, r3
 800a786:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a78a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800a78e:	605a      	str	r2, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 800a790:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a794:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800a798:	699a      	ldr	r2, [r3, #24]
 800a79a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a79e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	f7f6 faec 	bl	8000d84 <__aeabi_fmul>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	461c      	mov	r4, r3
 800a7b0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a7b4:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800a7b8:	69da      	ldr	r2, [r3, #28]
 800a7ba:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a7be:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	4610      	mov	r0, r2
 800a7c8:	f7f6 fadc 	bl	8000d84 <__aeabi_fmul>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	f7f6 f9cf 	bl	8000b74 <__addsf3>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	461c      	mov	r4, r3
 800a7da:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a7de:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800a7e2:	6a1a      	ldr	r2, [r3, #32]
 800a7e4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a7e8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	f7f6 fac7 	bl	8000d84 <__aeabi_fmul>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f7f6 f9ba 	bl	8000b74 <__addsf3>
 800a800:	4603      	mov	r3, r0
 800a802:	461a      	mov	r2, r3
 800a804:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a808:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800a80c:	609a      	str	r2, [r3, #8]
    return result;
 800a80e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a812:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800a816:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800a81a:	ca07      	ldmia	r2, {r0, r1, r2}
 800a81c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a820:	bf00      	nop

	// Update gyroscope bias correction algorithm
	calibratedGyroscope = FusionBiasUpdate(fusionBias, calibratedGyroscope);
 800a822:	4638      	mov	r0, r7
 800a824:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a828:	f5a3 7117 	sub.w	r1, r3, #604	; 0x25c
 800a82c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800a830:	9300      	str	r3, [sp, #0]
 800a832:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800a836:	cb0c      	ldmia	r3, {r2, r3}
 800a838:	6809      	ldr	r1, [r1, #0]
 800a83a:	f7f8 fb29 	bl	8002e90 <FusionBiasUpdate>
 800a83e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a842:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 800a846:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800a84a:	ca07      	ldmia	r2, {r0, r1, r2}
 800a84c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// Update AHRS algorithm
	FusionAhrsUpdateWithoutMagnetometer(fusionAhrs, calibratedGyroscope, calibratedAccelerometer, DataStruct->samplePeriod);
 800a850:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a854:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	f507 721e 	add.w	r2, r7, #632	; 0x278
 800a860:	f5a2 7518 	sub.w	r5, r2, #608	; 0x260
 800a864:	9303      	str	r3, [sp, #12]
 800a866:	466c      	mov	r4, sp
 800a868:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800a86c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a870:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a874:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800a878:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a87a:	6828      	ldr	r0, [r5, #0]
 800a87c:	f7f8 f890 	bl	80029a0 <FusionAhrsUpdateWithoutMagnetometer>

	// Get Euler angles
	FusionEulerAngles eulerAngles = FusionQuaternionToEulerAngles(FusionAhrsGetQuaternion(fusionAhrs));
 800a880:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800a884:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a888:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800a88c:	6819      	ldr	r1, [r3, #0]
 800a88e:	4610      	mov	r0, r2
 800a890:	f7f8 f8c7 	bl	8002a22 <FusionAhrsGetQuaternion>
 800a894:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a898:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800a89c:	461c      	mov	r4, r3
 800a89e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800a8a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a8a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be converted.
 * @return Euler angles in degrees.
 */
static inline __attribute__((always_inline)) FusionEulerAngles FusionQuaternionToEulerAngles(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float qwqwMinusHalf = Q.w * Q.w - 0.5f; // calculate common terms to avoid repeated operations
 800a8a8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a8ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a8b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4619      	mov	r1, r3
 800a8be:	4610      	mov	r0, r2
 800a8c0:	f7f6 fa60 	bl	8000d84 <__aeabi_fmul>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7f6 f950 	bl	8000b70 <__aeabi_fsub>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
    FusionEulerAngles eulerAngles;
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 800a8d6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a8da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800a8de:	689a      	ldr	r2, [r3, #8]
 800a8e0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a8e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	4610      	mov	r0, r2
 800a8ee:	f7f6 fa49 	bl	8000d84 <__aeabi_fmul>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	461c      	mov	r4, r3
 800a8f6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a8fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a904:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	4619      	mov	r1, r3
 800a90c:	4610      	mov	r0, r2
 800a90e:	f7f6 fa39 	bl	8000d84 <__aeabi_fmul>
 800a912:	4603      	mov	r3, r0
 800a914:	4619      	mov	r1, r3
 800a916:	4620      	mov	r0, r4
 800a918:	f7f6 f92a 	bl	8000b70 <__aeabi_fsub>
 800a91c:	4603      	mov	r3, r0
 800a91e:	461c      	mov	r4, r3
 800a920:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a924:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800a928:	68da      	ldr	r2, [r3, #12]
 800a92a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a92e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	4619      	mov	r1, r3
 800a936:	4610      	mov	r0, r2
 800a938:	f7f6 fa24 	bl	8000d84 <__aeabi_fmul>
 800a93c:	4603      	mov	r3, r0
 800a93e:	f8d7 1274 	ldr.w	r1, [r7, #628]	; 0x274
 800a942:	4618      	mov	r0, r3
 800a944:	f7f6 f916 	bl	8000b74 <__addsf3>
 800a948:	4603      	mov	r3, r0
 800a94a:	4619      	mov	r1, r3
 800a94c:	4620      	mov	r0, r4
 800a94e:	f005 ffe5 	bl	801091c <atan2f>
 800a952:	4603      	mov	r3, r0
 800a954:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
    return radians * (180.0f / (float) M_PI);
 800a958:	495d      	ldr	r1, [pc, #372]	; (800aad0 <getFusionAHRS_6DoF+0xaa8>)
 800a95a:	f8d7 0270 	ldr.w	r0, [r7, #624]	; 0x270
 800a95e:	f7f6 fa11 	bl	8000d84 <__aeabi_fmul>
 800a962:	4603      	mov	r3, r0
 800a964:	461a      	mov	r2, r3
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 800a966:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a96a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800a96e:	601a      	str	r2, [r3, #0]
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 800a970:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a974:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800a978:	685a      	ldr	r2, [r3, #4]
 800a97a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a97e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	4619      	mov	r1, r3
 800a986:	4610      	mov	r0, r2
 800a988:	f7f6 f9fc 	bl	8000d84 <__aeabi_fmul>
 800a98c:	4603      	mov	r3, r0
 800a98e:	461c      	mov	r4, r3
 800a990:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a994:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a99e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	4610      	mov	r0, r2
 800a9a8:	f7f6 f9ec 	bl	8000d84 <__aeabi_fmul>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	f7f6 f8df 	bl	8000b74 <__addsf3>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7f6 f8da 	bl	8000b74 <__addsf3>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f005 ff8a 	bl	80108dc <asinf>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a9ce:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
    return radians * (180.0f / (float) M_PI);
 800a9d2:	493f      	ldr	r1, [pc, #252]	; (800aad0 <getFusionAHRS_6DoF+0xaa8>)
 800a9d4:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 800a9d8:	f7f6 f9d4 	bl	8000d84 <__aeabi_fmul>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	461a      	mov	r2, r3
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 800a9e0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a9e4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800a9e8:	605a      	str	r2, [r3, #4]
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 800a9ea:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a9ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800a9f2:	685a      	ldr	r2, [r3, #4]
 800a9f4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800a9f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	4619      	mov	r1, r3
 800aa00:	4610      	mov	r0, r2
 800aa02:	f7f6 f9bf 	bl	8000d84 <__aeabi_fmul>
 800aa06:	4603      	mov	r3, r0
 800aa08:	461c      	mov	r4, r3
 800aa0a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800aa0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800aa18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	4619      	mov	r1, r3
 800aa20:	4610      	mov	r0, r2
 800aa22:	f7f6 f9af 	bl	8000d84 <__aeabi_fmul>
 800aa26:	4603      	mov	r3, r0
 800aa28:	4619      	mov	r1, r3
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f7f6 f8a0 	bl	8000b70 <__aeabi_fsub>
 800aa30:	4603      	mov	r3, r0
 800aa32:	461c      	mov	r4, r3
 800aa34:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800aa38:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800aa3c:	685a      	ldr	r2, [r3, #4]
 800aa3e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800aa42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	4619      	mov	r1, r3
 800aa4a:	4610      	mov	r0, r2
 800aa4c:	f7f6 f99a 	bl	8000d84 <__aeabi_fmul>
 800aa50:	4603      	mov	r3, r0
 800aa52:	f8d7 1274 	ldr.w	r1, [r7, #628]	; 0x274
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7f6 f88c 	bl	8000b74 <__addsf3>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	4619      	mov	r1, r3
 800aa60:	4620      	mov	r0, r4
 800aa62:	f005 ff5b 	bl	801091c <atan2f>
 800aa66:	4603      	mov	r3, r0
 800aa68:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
    return radians * (180.0f / (float) M_PI);
 800aa6c:	4918      	ldr	r1, [pc, #96]	; (800aad0 <getFusionAHRS_6DoF+0xaa8>)
 800aa6e:	f8d7 0268 	ldr.w	r0, [r7, #616]	; 0x268
 800aa72:	f7f6 f987 	bl	8000d84 <__aeabi_fmul>
 800aa76:	4603      	mov	r3, r0
 800aa78:	461a      	mov	r2, r3
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 800aa7a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800aa7e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800aa82:	609a      	str	r2, [r3, #8]
    return eulerAngles;
 800aa84:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800aa88:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 800aa8c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800aa90:	ca07      	ldmia	r2, {r0, r1, r2}
 800aa92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	
	// Write Euler Angles into data structs
	DataStruct->YAW = eulerAngles.angle.yaw;
 800aa96:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800aa9a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800aa9e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	601a      	str	r2, [r3, #0]
	DataStruct->PITCH = eulerAngles.angle.pitch;
 800aaa6:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 800aaaa:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800aaae:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	605a      	str	r2, [r3, #4]
	DataStruct->ROLL = eulerAngles.angle.roll;
 800aab6:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800aaba:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800aabe:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	609a      	str	r2, [r3, #8]
}
 800aac6:	bf00      	nop
 800aac8:	f507 771e 	add.w	r7, r7, #632	; 0x278
 800aacc:	46bd      	mov	sp, r7
 800aace:	bdb0      	pop	{r4, r5, r7, pc}
 800aad0:	42652ee0 	.word	0x42652ee0

0800aad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800aad8:	4b08      	ldr	r3, [pc, #32]	; (800aafc <HAL_Init+0x28>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a07      	ldr	r2, [pc, #28]	; (800aafc <HAL_Init+0x28>)
 800aade:	f043 0310 	orr.w	r3, r3, #16
 800aae2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800aae4:	2003      	movs	r0, #3
 800aae6:	f000 f947 	bl	800ad78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800aaea:	200f      	movs	r0, #15
 800aaec:	f000 f808 	bl	800ab00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800aaf0:	f7ff f828 	bl	8009b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	40022000 	.word	0x40022000

0800ab00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ab08:	4b12      	ldr	r3, [pc, #72]	; (800ab54 <HAL_InitTick+0x54>)
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	4b12      	ldr	r3, [pc, #72]	; (800ab58 <HAL_InitTick+0x58>)
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	4619      	mov	r1, r3
 800ab12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ab16:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f000 f95f 	bl	800ade2 <HAL_SYSTICK_Config>
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d001      	beq.n	800ab2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e00e      	b.n	800ab4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2b0f      	cmp	r3, #15
 800ab32:	d80a      	bhi.n	800ab4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ab34:	2200      	movs	r2, #0
 800ab36:	6879      	ldr	r1, [r7, #4]
 800ab38:	f04f 30ff 	mov.w	r0, #4294967295
 800ab3c:	f000 f927 	bl	800ad8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ab40:	4a06      	ldr	r2, [pc, #24]	; (800ab5c <HAL_InitTick+0x5c>)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ab46:	2300      	movs	r3, #0
 800ab48:	e000      	b.n	800ab4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3708      	adds	r7, #8
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	200000f8 	.word	0x200000f8
 800ab58:	20000118 	.word	0x20000118
 800ab5c:	20000114 	.word	0x20000114

0800ab60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ab60:	b480      	push	{r7}
 800ab62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ab64:	4b05      	ldr	r3, [pc, #20]	; (800ab7c <HAL_IncTick+0x1c>)
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	461a      	mov	r2, r3
 800ab6a:	4b05      	ldr	r3, [pc, #20]	; (800ab80 <HAL_IncTick+0x20>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4413      	add	r3, r2
 800ab70:	4a03      	ldr	r2, [pc, #12]	; (800ab80 <HAL_IncTick+0x20>)
 800ab72:	6013      	str	r3, [r2, #0]
}
 800ab74:	bf00      	nop
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bc80      	pop	{r7}
 800ab7a:	4770      	bx	lr
 800ab7c:	20000118 	.word	0x20000118
 800ab80:	20000a7c 	.word	0x20000a7c

0800ab84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ab84:	b480      	push	{r7}
 800ab86:	af00      	add	r7, sp, #0
  return uwTick;
 800ab88:	4b02      	ldr	r3, [pc, #8]	; (800ab94 <HAL_GetTick+0x10>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bc80      	pop	{r7}
 800ab92:	4770      	bx	lr
 800ab94:	20000a7c 	.word	0x20000a7c

0800ab98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800aba0:	f7ff fff0 	bl	800ab84 <HAL_GetTick>
 800aba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb0:	d005      	beq.n	800abbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800abb2:	4b0a      	ldr	r3, [pc, #40]	; (800abdc <HAL_Delay+0x44>)
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	461a      	mov	r2, r3
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	4413      	add	r3, r2
 800abbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800abbe:	bf00      	nop
 800abc0:	f7ff ffe0 	bl	800ab84 <HAL_GetTick>
 800abc4:	4602      	mov	r2, r0
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	1ad3      	subs	r3, r2, r3
 800abca:	68fa      	ldr	r2, [r7, #12]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d8f7      	bhi.n	800abc0 <HAL_Delay+0x28>
  {
  }
}
 800abd0:	bf00      	nop
 800abd2:	bf00      	nop
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	20000118 	.word	0x20000118

0800abe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f003 0307 	and.w	r3, r3, #7
 800abee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800abf0:	4b0c      	ldr	r3, [pc, #48]	; (800ac24 <__NVIC_SetPriorityGrouping+0x44>)
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800abf6:	68ba      	ldr	r2, [r7, #8]
 800abf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800abfc:	4013      	ands	r3, r2
 800abfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ac08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ac0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ac12:	4a04      	ldr	r2, [pc, #16]	; (800ac24 <__NVIC_SetPriorityGrouping+0x44>)
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	60d3      	str	r3, [r2, #12]
}
 800ac18:	bf00      	nop
 800ac1a:	3714      	adds	r7, #20
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bc80      	pop	{r7}
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	e000ed00 	.word	0xe000ed00

0800ac28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ac2c:	4b04      	ldr	r3, [pc, #16]	; (800ac40 <__NVIC_GetPriorityGrouping+0x18>)
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	0a1b      	lsrs	r3, r3, #8
 800ac32:	f003 0307 	and.w	r3, r3, #7
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bc80      	pop	{r7}
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	e000ed00 	.word	0xe000ed00

0800ac44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	db0b      	blt.n	800ac6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ac56:	79fb      	ldrb	r3, [r7, #7]
 800ac58:	f003 021f 	and.w	r2, r3, #31
 800ac5c:	4906      	ldr	r1, [pc, #24]	; (800ac78 <__NVIC_EnableIRQ+0x34>)
 800ac5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac62:	095b      	lsrs	r3, r3, #5
 800ac64:	2001      	movs	r0, #1
 800ac66:	fa00 f202 	lsl.w	r2, r0, r2
 800ac6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800ac6e:	bf00      	nop
 800ac70:	370c      	adds	r7, #12
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bc80      	pop	{r7}
 800ac76:	4770      	bx	lr
 800ac78:	e000e100 	.word	0xe000e100

0800ac7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	4603      	mov	r3, r0
 800ac84:	6039      	str	r1, [r7, #0]
 800ac86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	db0a      	blt.n	800aca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	b2da      	uxtb	r2, r3
 800ac94:	490c      	ldr	r1, [pc, #48]	; (800acc8 <__NVIC_SetPriority+0x4c>)
 800ac96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac9a:	0112      	lsls	r2, r2, #4
 800ac9c:	b2d2      	uxtb	r2, r2
 800ac9e:	440b      	add	r3, r1
 800aca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800aca4:	e00a      	b.n	800acbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	b2da      	uxtb	r2, r3
 800acaa:	4908      	ldr	r1, [pc, #32]	; (800accc <__NVIC_SetPriority+0x50>)
 800acac:	79fb      	ldrb	r3, [r7, #7]
 800acae:	f003 030f 	and.w	r3, r3, #15
 800acb2:	3b04      	subs	r3, #4
 800acb4:	0112      	lsls	r2, r2, #4
 800acb6:	b2d2      	uxtb	r2, r2
 800acb8:	440b      	add	r3, r1
 800acba:	761a      	strb	r2, [r3, #24]
}
 800acbc:	bf00      	nop
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bc80      	pop	{r7}
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop
 800acc8:	e000e100 	.word	0xe000e100
 800accc:	e000ed00 	.word	0xe000ed00

0800acd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b089      	sub	sp, #36	; 0x24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f003 0307 	and.w	r3, r3, #7
 800ace2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	f1c3 0307 	rsb	r3, r3, #7
 800acea:	2b04      	cmp	r3, #4
 800acec:	bf28      	it	cs
 800acee:	2304      	movcs	r3, #4
 800acf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800acf2:	69fb      	ldr	r3, [r7, #28]
 800acf4:	3304      	adds	r3, #4
 800acf6:	2b06      	cmp	r3, #6
 800acf8:	d902      	bls.n	800ad00 <NVIC_EncodePriority+0x30>
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	3b03      	subs	r3, #3
 800acfe:	e000      	b.n	800ad02 <NVIC_EncodePriority+0x32>
 800ad00:	2300      	movs	r3, #0
 800ad02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ad04:	f04f 32ff 	mov.w	r2, #4294967295
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad0e:	43da      	mvns	r2, r3
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	401a      	ands	r2, r3
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ad18:	f04f 31ff 	mov.w	r1, #4294967295
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad22:	43d9      	mvns	r1, r3
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ad28:	4313      	orrs	r3, r2
         );
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3724      	adds	r7, #36	; 0x24
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bc80      	pop	{r7}
 800ad32:	4770      	bx	lr

0800ad34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	3b01      	subs	r3, #1
 800ad40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad44:	d301      	bcc.n	800ad4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ad46:	2301      	movs	r3, #1
 800ad48:	e00f      	b.n	800ad6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ad4a:	4a0a      	ldr	r2, [pc, #40]	; (800ad74 <SysTick_Config+0x40>)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ad52:	210f      	movs	r1, #15
 800ad54:	f04f 30ff 	mov.w	r0, #4294967295
 800ad58:	f7ff ff90 	bl	800ac7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ad5c:	4b05      	ldr	r3, [pc, #20]	; (800ad74 <SysTick_Config+0x40>)
 800ad5e:	2200      	movs	r2, #0
 800ad60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ad62:	4b04      	ldr	r3, [pc, #16]	; (800ad74 <SysTick_Config+0x40>)
 800ad64:	2207      	movs	r2, #7
 800ad66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ad68:	2300      	movs	r3, #0
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3708      	adds	r7, #8
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	e000e010 	.word	0xe000e010

0800ad78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f7ff ff2d 	bl	800abe0 <__NVIC_SetPriorityGrouping>
}
 800ad86:	bf00      	nop
 800ad88:	3708      	adds	r7, #8
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b086      	sub	sp, #24
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	4603      	mov	r3, r0
 800ad96:	60b9      	str	r1, [r7, #8]
 800ad98:	607a      	str	r2, [r7, #4]
 800ad9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ada0:	f7ff ff42 	bl	800ac28 <__NVIC_GetPriorityGrouping>
 800ada4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	68b9      	ldr	r1, [r7, #8]
 800adaa:	6978      	ldr	r0, [r7, #20]
 800adac:	f7ff ff90 	bl	800acd0 <NVIC_EncodePriority>
 800adb0:	4602      	mov	r2, r0
 800adb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adb6:	4611      	mov	r1, r2
 800adb8:	4618      	mov	r0, r3
 800adba:	f7ff ff5f 	bl	800ac7c <__NVIC_SetPriority>
}
 800adbe:	bf00      	nop
 800adc0:	3718      	adds	r7, #24
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b082      	sub	sp, #8
 800adca:	af00      	add	r7, sp, #0
 800adcc:	4603      	mov	r3, r0
 800adce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800add0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800add4:	4618      	mov	r0, r3
 800add6:	f7ff ff35 	bl	800ac44 <__NVIC_EnableIRQ>
}
 800adda:	bf00      	nop
 800addc:	3708      	adds	r7, #8
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b082      	sub	sp, #8
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f7ff ffa2 	bl	800ad34 <SysTick_Config>
 800adf0:	4603      	mov	r3, r0
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3708      	adds	r7, #8
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800adfa:	b480      	push	{r7}
 800adfc:	b085      	sub	sp, #20
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae02:	2300      	movs	r3, #0
 800ae04:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	d008      	beq.n	800ae24 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2204      	movs	r2, #4
 800ae16:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	e020      	b.n	800ae66 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f022 020e 	bic.w	r2, r2, #14
 800ae32:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f022 0201 	bic.w	r2, r2, #1
 800ae42:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae4c:	2101      	movs	r1, #1
 800ae4e:	fa01 f202 	lsl.w	r2, r1, r2
 800ae52:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2201      	movs	r2, #1
 800ae58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800ae64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3714      	adds	r7, #20
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bc80      	pop	{r7}
 800ae6e:	4770      	bx	lr

0800ae70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d005      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2204      	movs	r2, #4
 800ae8c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	73fb      	strb	r3, [r7, #15]
 800ae92:	e051      	b.n	800af38 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f022 020e 	bic.w	r2, r2, #14
 800aea2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f022 0201 	bic.w	r2, r2, #1
 800aeb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a22      	ldr	r2, [pc, #136]	; (800af44 <HAL_DMA_Abort_IT+0xd4>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d029      	beq.n	800af12 <HAL_DMA_Abort_IT+0xa2>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a21      	ldr	r2, [pc, #132]	; (800af48 <HAL_DMA_Abort_IT+0xd8>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d022      	beq.n	800af0e <HAL_DMA_Abort_IT+0x9e>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a1f      	ldr	r2, [pc, #124]	; (800af4c <HAL_DMA_Abort_IT+0xdc>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d01a      	beq.n	800af08 <HAL_DMA_Abort_IT+0x98>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a1e      	ldr	r2, [pc, #120]	; (800af50 <HAL_DMA_Abort_IT+0xe0>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d012      	beq.n	800af02 <HAL_DMA_Abort_IT+0x92>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a1c      	ldr	r2, [pc, #112]	; (800af54 <HAL_DMA_Abort_IT+0xe4>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d00a      	beq.n	800aefc <HAL_DMA_Abort_IT+0x8c>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a1b      	ldr	r2, [pc, #108]	; (800af58 <HAL_DMA_Abort_IT+0xe8>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d102      	bne.n	800aef6 <HAL_DMA_Abort_IT+0x86>
 800aef0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800aef4:	e00e      	b.n	800af14 <HAL_DMA_Abort_IT+0xa4>
 800aef6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aefa:	e00b      	b.n	800af14 <HAL_DMA_Abort_IT+0xa4>
 800aefc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800af00:	e008      	b.n	800af14 <HAL_DMA_Abort_IT+0xa4>
 800af02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af06:	e005      	b.n	800af14 <HAL_DMA_Abort_IT+0xa4>
 800af08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af0c:	e002      	b.n	800af14 <HAL_DMA_Abort_IT+0xa4>
 800af0e:	2310      	movs	r3, #16
 800af10:	e000      	b.n	800af14 <HAL_DMA_Abort_IT+0xa4>
 800af12:	2301      	movs	r3, #1
 800af14:	4a11      	ldr	r2, [pc, #68]	; (800af5c <HAL_DMA_Abort_IT+0xec>)
 800af16:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2201      	movs	r2, #1
 800af1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d003      	beq.n	800af38 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	4798      	blx	r3
    } 
  }
  return status;
 800af38:	7bfb      	ldrb	r3, [r7, #15]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3710      	adds	r7, #16
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	40020008 	.word	0x40020008
 800af48:	4002001c 	.word	0x4002001c
 800af4c:	40020030 	.word	0x40020030
 800af50:	40020044 	.word	0x40020044
 800af54:	40020058 	.word	0x40020058
 800af58:	4002006c 	.word	0x4002006c
 800af5c:	40020000 	.word	0x40020000

0800af60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800af60:	b480      	push	{r7}
 800af62:	b08b      	sub	sp, #44	; 0x2c
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800af6a:	2300      	movs	r3, #0
 800af6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800af6e:	2300      	movs	r3, #0
 800af70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800af72:	e169      	b.n	800b248 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800af74:	2201      	movs	r2, #1
 800af76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af78:	fa02 f303 	lsl.w	r3, r2, r3
 800af7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	69fa      	ldr	r2, [r7, #28]
 800af84:	4013      	ands	r3, r2
 800af86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800af88:	69ba      	ldr	r2, [r7, #24]
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	f040 8158 	bne.w	800b242 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	4a9a      	ldr	r2, [pc, #616]	; (800b200 <HAL_GPIO_Init+0x2a0>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d05e      	beq.n	800b05a <HAL_GPIO_Init+0xfa>
 800af9c:	4a98      	ldr	r2, [pc, #608]	; (800b200 <HAL_GPIO_Init+0x2a0>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d875      	bhi.n	800b08e <HAL_GPIO_Init+0x12e>
 800afa2:	4a98      	ldr	r2, [pc, #608]	; (800b204 <HAL_GPIO_Init+0x2a4>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d058      	beq.n	800b05a <HAL_GPIO_Init+0xfa>
 800afa8:	4a96      	ldr	r2, [pc, #600]	; (800b204 <HAL_GPIO_Init+0x2a4>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d86f      	bhi.n	800b08e <HAL_GPIO_Init+0x12e>
 800afae:	4a96      	ldr	r2, [pc, #600]	; (800b208 <HAL_GPIO_Init+0x2a8>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d052      	beq.n	800b05a <HAL_GPIO_Init+0xfa>
 800afb4:	4a94      	ldr	r2, [pc, #592]	; (800b208 <HAL_GPIO_Init+0x2a8>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d869      	bhi.n	800b08e <HAL_GPIO_Init+0x12e>
 800afba:	4a94      	ldr	r2, [pc, #592]	; (800b20c <HAL_GPIO_Init+0x2ac>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d04c      	beq.n	800b05a <HAL_GPIO_Init+0xfa>
 800afc0:	4a92      	ldr	r2, [pc, #584]	; (800b20c <HAL_GPIO_Init+0x2ac>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d863      	bhi.n	800b08e <HAL_GPIO_Init+0x12e>
 800afc6:	4a92      	ldr	r2, [pc, #584]	; (800b210 <HAL_GPIO_Init+0x2b0>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d046      	beq.n	800b05a <HAL_GPIO_Init+0xfa>
 800afcc:	4a90      	ldr	r2, [pc, #576]	; (800b210 <HAL_GPIO_Init+0x2b0>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d85d      	bhi.n	800b08e <HAL_GPIO_Init+0x12e>
 800afd2:	2b12      	cmp	r3, #18
 800afd4:	d82a      	bhi.n	800b02c <HAL_GPIO_Init+0xcc>
 800afd6:	2b12      	cmp	r3, #18
 800afd8:	d859      	bhi.n	800b08e <HAL_GPIO_Init+0x12e>
 800afda:	a201      	add	r2, pc, #4	; (adr r2, 800afe0 <HAL_GPIO_Init+0x80>)
 800afdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe0:	0800b05b 	.word	0x0800b05b
 800afe4:	0800b035 	.word	0x0800b035
 800afe8:	0800b047 	.word	0x0800b047
 800afec:	0800b089 	.word	0x0800b089
 800aff0:	0800b08f 	.word	0x0800b08f
 800aff4:	0800b08f 	.word	0x0800b08f
 800aff8:	0800b08f 	.word	0x0800b08f
 800affc:	0800b08f 	.word	0x0800b08f
 800b000:	0800b08f 	.word	0x0800b08f
 800b004:	0800b08f 	.word	0x0800b08f
 800b008:	0800b08f 	.word	0x0800b08f
 800b00c:	0800b08f 	.word	0x0800b08f
 800b010:	0800b08f 	.word	0x0800b08f
 800b014:	0800b08f 	.word	0x0800b08f
 800b018:	0800b08f 	.word	0x0800b08f
 800b01c:	0800b08f 	.word	0x0800b08f
 800b020:	0800b08f 	.word	0x0800b08f
 800b024:	0800b03d 	.word	0x0800b03d
 800b028:	0800b051 	.word	0x0800b051
 800b02c:	4a79      	ldr	r2, [pc, #484]	; (800b214 <HAL_GPIO_Init+0x2b4>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d013      	beq.n	800b05a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800b032:	e02c      	b.n	800b08e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	623b      	str	r3, [r7, #32]
          break;
 800b03a:	e029      	b.n	800b090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	3304      	adds	r3, #4
 800b042:	623b      	str	r3, [r7, #32]
          break;
 800b044:	e024      	b.n	800b090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	3308      	adds	r3, #8
 800b04c:	623b      	str	r3, [r7, #32]
          break;
 800b04e:	e01f      	b.n	800b090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	330c      	adds	r3, #12
 800b056:	623b      	str	r3, [r7, #32]
          break;
 800b058:	e01a      	b.n	800b090 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d102      	bne.n	800b068 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800b062:	2304      	movs	r3, #4
 800b064:	623b      	str	r3, [r7, #32]
          break;
 800b066:	e013      	b.n	800b090 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d105      	bne.n	800b07c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800b070:	2308      	movs	r3, #8
 800b072:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	69fa      	ldr	r2, [r7, #28]
 800b078:	611a      	str	r2, [r3, #16]
          break;
 800b07a:	e009      	b.n	800b090 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800b07c:	2308      	movs	r3, #8
 800b07e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	69fa      	ldr	r2, [r7, #28]
 800b084:	615a      	str	r2, [r3, #20]
          break;
 800b086:	e003      	b.n	800b090 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800b088:	2300      	movs	r3, #0
 800b08a:	623b      	str	r3, [r7, #32]
          break;
 800b08c:	e000      	b.n	800b090 <HAL_GPIO_Init+0x130>
          break;
 800b08e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800b090:	69bb      	ldr	r3, [r7, #24]
 800b092:	2bff      	cmp	r3, #255	; 0xff
 800b094:	d801      	bhi.n	800b09a <HAL_GPIO_Init+0x13a>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	e001      	b.n	800b09e <HAL_GPIO_Init+0x13e>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	3304      	adds	r3, #4
 800b09e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	2bff      	cmp	r3, #255	; 0xff
 800b0a4:	d802      	bhi.n	800b0ac <HAL_GPIO_Init+0x14c>
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	e002      	b.n	800b0b2 <HAL_GPIO_Init+0x152>
 800b0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ae:	3b08      	subs	r3, #8
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	210f      	movs	r1, #15
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	fa01 f303 	lsl.w	r3, r1, r3
 800b0c0:	43db      	mvns	r3, r3
 800b0c2:	401a      	ands	r2, r3
 800b0c4:	6a39      	ldr	r1, [r7, #32]
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	fa01 f303 	lsl.w	r3, r1, r3
 800b0cc:	431a      	orrs	r2, r3
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	f000 80b1 	beq.w	800b242 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800b0e0:	4b4d      	ldr	r3, [pc, #308]	; (800b218 <HAL_GPIO_Init+0x2b8>)
 800b0e2:	699b      	ldr	r3, [r3, #24]
 800b0e4:	4a4c      	ldr	r2, [pc, #304]	; (800b218 <HAL_GPIO_Init+0x2b8>)
 800b0e6:	f043 0301 	orr.w	r3, r3, #1
 800b0ea:	6193      	str	r3, [r2, #24]
 800b0ec:	4b4a      	ldr	r3, [pc, #296]	; (800b218 <HAL_GPIO_Init+0x2b8>)
 800b0ee:	699b      	ldr	r3, [r3, #24]
 800b0f0:	f003 0301 	and.w	r3, r3, #1
 800b0f4:	60bb      	str	r3, [r7, #8]
 800b0f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800b0f8:	4a48      	ldr	r2, [pc, #288]	; (800b21c <HAL_GPIO_Init+0x2bc>)
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fc:	089b      	lsrs	r3, r3, #2
 800b0fe:	3302      	adds	r3, #2
 800b100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b104:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800b106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b108:	f003 0303 	and.w	r3, r3, #3
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	220f      	movs	r2, #15
 800b110:	fa02 f303 	lsl.w	r3, r2, r3
 800b114:	43db      	mvns	r3, r3
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	4013      	ands	r3, r2
 800b11a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	4a40      	ldr	r2, [pc, #256]	; (800b220 <HAL_GPIO_Init+0x2c0>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d013      	beq.n	800b14c <HAL_GPIO_Init+0x1ec>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	4a3f      	ldr	r2, [pc, #252]	; (800b224 <HAL_GPIO_Init+0x2c4>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d00d      	beq.n	800b148 <HAL_GPIO_Init+0x1e8>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	4a3e      	ldr	r2, [pc, #248]	; (800b228 <HAL_GPIO_Init+0x2c8>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d007      	beq.n	800b144 <HAL_GPIO_Init+0x1e4>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	4a3d      	ldr	r2, [pc, #244]	; (800b22c <HAL_GPIO_Init+0x2cc>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d101      	bne.n	800b140 <HAL_GPIO_Init+0x1e0>
 800b13c:	2303      	movs	r3, #3
 800b13e:	e006      	b.n	800b14e <HAL_GPIO_Init+0x1ee>
 800b140:	2304      	movs	r3, #4
 800b142:	e004      	b.n	800b14e <HAL_GPIO_Init+0x1ee>
 800b144:	2302      	movs	r3, #2
 800b146:	e002      	b.n	800b14e <HAL_GPIO_Init+0x1ee>
 800b148:	2301      	movs	r3, #1
 800b14a:	e000      	b.n	800b14e <HAL_GPIO_Init+0x1ee>
 800b14c:	2300      	movs	r3, #0
 800b14e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b150:	f002 0203 	and.w	r2, r2, #3
 800b154:	0092      	lsls	r2, r2, #2
 800b156:	4093      	lsls	r3, r2
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	4313      	orrs	r3, r2
 800b15c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800b15e:	492f      	ldr	r1, [pc, #188]	; (800b21c <HAL_GPIO_Init+0x2bc>)
 800b160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b162:	089b      	lsrs	r3, r3, #2
 800b164:	3302      	adds	r3, #2
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b174:	2b00      	cmp	r3, #0
 800b176:	d006      	beq.n	800b186 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800b178:	4b2d      	ldr	r3, [pc, #180]	; (800b230 <HAL_GPIO_Init+0x2d0>)
 800b17a:	689a      	ldr	r2, [r3, #8]
 800b17c:	492c      	ldr	r1, [pc, #176]	; (800b230 <HAL_GPIO_Init+0x2d0>)
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	4313      	orrs	r3, r2
 800b182:	608b      	str	r3, [r1, #8]
 800b184:	e006      	b.n	800b194 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800b186:	4b2a      	ldr	r3, [pc, #168]	; (800b230 <HAL_GPIO_Init+0x2d0>)
 800b188:	689a      	ldr	r2, [r3, #8]
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	43db      	mvns	r3, r3
 800b18e:	4928      	ldr	r1, [pc, #160]	; (800b230 <HAL_GPIO_Init+0x2d0>)
 800b190:	4013      	ands	r3, r2
 800b192:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d006      	beq.n	800b1ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800b1a0:	4b23      	ldr	r3, [pc, #140]	; (800b230 <HAL_GPIO_Init+0x2d0>)
 800b1a2:	68da      	ldr	r2, [r3, #12]
 800b1a4:	4922      	ldr	r1, [pc, #136]	; (800b230 <HAL_GPIO_Init+0x2d0>)
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	60cb      	str	r3, [r1, #12]
 800b1ac:	e006      	b.n	800b1bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800b1ae:	4b20      	ldr	r3, [pc, #128]	; (800b230 <HAL_GPIO_Init+0x2d0>)
 800b1b0:	68da      	ldr	r2, [r3, #12]
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	43db      	mvns	r3, r3
 800b1b6:	491e      	ldr	r1, [pc, #120]	; (800b230 <HAL_GPIO_Init+0x2d0>)
 800b1b8:	4013      	ands	r3, r2
 800b1ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d006      	beq.n	800b1d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800b1c8:	4b19      	ldr	r3, [pc, #100]	; (800b230 <HAL_GPIO_Init+0x2d0>)
 800b1ca:	685a      	ldr	r2, [r3, #4]
 800b1cc:	4918      	ldr	r1, [pc, #96]	; (800b230 <HAL_GPIO_Init+0x2d0>)
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	604b      	str	r3, [r1, #4]
 800b1d4:	e006      	b.n	800b1e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800b1d6:	4b16      	ldr	r3, [pc, #88]	; (800b230 <HAL_GPIO_Init+0x2d0>)
 800b1d8:	685a      	ldr	r2, [r3, #4]
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	43db      	mvns	r3, r3
 800b1de:	4914      	ldr	r1, [pc, #80]	; (800b230 <HAL_GPIO_Init+0x2d0>)
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d021      	beq.n	800b234 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800b1f0:	4b0f      	ldr	r3, [pc, #60]	; (800b230 <HAL_GPIO_Init+0x2d0>)
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	490e      	ldr	r1, [pc, #56]	; (800b230 <HAL_GPIO_Init+0x2d0>)
 800b1f6:	69bb      	ldr	r3, [r7, #24]
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	600b      	str	r3, [r1, #0]
 800b1fc:	e021      	b.n	800b242 <HAL_GPIO_Init+0x2e2>
 800b1fe:	bf00      	nop
 800b200:	10320000 	.word	0x10320000
 800b204:	10310000 	.word	0x10310000
 800b208:	10220000 	.word	0x10220000
 800b20c:	10210000 	.word	0x10210000
 800b210:	10120000 	.word	0x10120000
 800b214:	10110000 	.word	0x10110000
 800b218:	40021000 	.word	0x40021000
 800b21c:	40010000 	.word	0x40010000
 800b220:	40010800 	.word	0x40010800
 800b224:	40010c00 	.word	0x40010c00
 800b228:	40011000 	.word	0x40011000
 800b22c:	40011400 	.word	0x40011400
 800b230:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800b234:	4b0b      	ldr	r3, [pc, #44]	; (800b264 <HAL_GPIO_Init+0x304>)
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	43db      	mvns	r3, r3
 800b23c:	4909      	ldr	r1, [pc, #36]	; (800b264 <HAL_GPIO_Init+0x304>)
 800b23e:	4013      	ands	r3, r2
 800b240:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800b242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b244:	3301      	adds	r3, #1
 800b246:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24e:	fa22 f303 	lsr.w	r3, r2, r3
 800b252:	2b00      	cmp	r3, #0
 800b254:	f47f ae8e 	bne.w	800af74 <HAL_GPIO_Init+0x14>
  }
}
 800b258:	bf00      	nop
 800b25a:	bf00      	nop
 800b25c:	372c      	adds	r7, #44	; 0x2c
 800b25e:	46bd      	mov	sp, r7
 800b260:	bc80      	pop	{r7}
 800b262:	4770      	bx	lr
 800b264:	40010400 	.word	0x40010400

0800b268 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	460b      	mov	r3, r1
 800b272:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	689a      	ldr	r2, [r3, #8]
 800b278:	887b      	ldrh	r3, [r7, #2]
 800b27a:	4013      	ands	r3, r2
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d002      	beq.n	800b286 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b280:	2301      	movs	r3, #1
 800b282:	73fb      	strb	r3, [r7, #15]
 800b284:	e001      	b.n	800b28a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b286:	2300      	movs	r3, #0
 800b288:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b28a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3714      	adds	r7, #20
 800b290:	46bd      	mov	sp, r7
 800b292:	bc80      	pop	{r7}
 800b294:	4770      	bx	lr

0800b296 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b296:	b480      	push	{r7}
 800b298:	b083      	sub	sp, #12
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
 800b29e:	460b      	mov	r3, r1
 800b2a0:	807b      	strh	r3, [r7, #2]
 800b2a2:	4613      	mov	r3, r2
 800b2a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b2a6:	787b      	ldrb	r3, [r7, #1]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d003      	beq.n	800b2b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b2ac:	887a      	ldrh	r2, [r7, #2]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800b2b2:	e003      	b.n	800b2bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800b2b4:	887b      	ldrh	r3, [r7, #2]
 800b2b6:	041a      	lsls	r2, r3, #16
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	611a      	str	r2, [r3, #16]
}
 800b2bc:	bf00      	nop
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bc80      	pop	{r7}
 800b2c4:	4770      	bx	lr
	...

0800b2c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800b2d2:	4b08      	ldr	r3, [pc, #32]	; (800b2f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b2d4:	695a      	ldr	r2, [r3, #20]
 800b2d6:	88fb      	ldrh	r3, [r7, #6]
 800b2d8:	4013      	ands	r3, r2
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d006      	beq.n	800b2ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b2de:	4a05      	ldr	r2, [pc, #20]	; (800b2f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b2e0:	88fb      	ldrh	r3, [r7, #6]
 800b2e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b2e4:	88fb      	ldrh	r3, [r7, #6]
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7fc fa52 	bl	8007790 <HAL_GPIO_EXTI_Callback>
  }
}
 800b2ec:	bf00      	nop
 800b2ee:	3708      	adds	r7, #8
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	40010400 	.word	0x40010400

0800b2f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d101      	bne.n	800b30a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b306:	2301      	movs	r3, #1
 800b308:	e12b      	b.n	800b562 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b310:	b2db      	uxtb	r3, r3
 800b312:	2b00      	cmp	r3, #0
 800b314:	d106      	bne.n	800b324 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f7fe f95c 	bl	80095dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2224      	movs	r2, #36	; 0x24
 800b328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f022 0201 	bic.w	r2, r2, #1
 800b33a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b34a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b35a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b35c:	f001 fbcc 	bl	800caf8 <HAL_RCC_GetPCLK1Freq>
 800b360:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	4a81      	ldr	r2, [pc, #516]	; (800b56c <HAL_I2C_Init+0x274>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d807      	bhi.n	800b37c <HAL_I2C_Init+0x84>
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	4a80      	ldr	r2, [pc, #512]	; (800b570 <HAL_I2C_Init+0x278>)
 800b370:	4293      	cmp	r3, r2
 800b372:	bf94      	ite	ls
 800b374:	2301      	movls	r3, #1
 800b376:	2300      	movhi	r3, #0
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	e006      	b.n	800b38a <HAL_I2C_Init+0x92>
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	4a7d      	ldr	r2, [pc, #500]	; (800b574 <HAL_I2C_Init+0x27c>)
 800b380:	4293      	cmp	r3, r2
 800b382:	bf94      	ite	ls
 800b384:	2301      	movls	r3, #1
 800b386:	2300      	movhi	r3, #0
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d001      	beq.n	800b392 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b38e:	2301      	movs	r3, #1
 800b390:	e0e7      	b.n	800b562 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	4a78      	ldr	r2, [pc, #480]	; (800b578 <HAL_I2C_Init+0x280>)
 800b396:	fba2 2303 	umull	r2, r3, r2, r3
 800b39a:	0c9b      	lsrs	r3, r3, #18
 800b39c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	68ba      	ldr	r2, [r7, #8]
 800b3ae:	430a      	orrs	r2, r1
 800b3b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	6a1b      	ldr	r3, [r3, #32]
 800b3b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	4a6a      	ldr	r2, [pc, #424]	; (800b56c <HAL_I2C_Init+0x274>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d802      	bhi.n	800b3cc <HAL_I2C_Init+0xd4>
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	e009      	b.n	800b3e0 <HAL_I2C_Init+0xe8>
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b3d2:	fb02 f303 	mul.w	r3, r2, r3
 800b3d6:	4a69      	ldr	r2, [pc, #420]	; (800b57c <HAL_I2C_Init+0x284>)
 800b3d8:	fba2 2303 	umull	r2, r3, r2, r3
 800b3dc:	099b      	lsrs	r3, r3, #6
 800b3de:	3301      	adds	r3, #1
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	6812      	ldr	r2, [r2, #0]
 800b3e4:	430b      	orrs	r3, r1
 800b3e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	69db      	ldr	r3, [r3, #28]
 800b3ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b3f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	495c      	ldr	r1, [pc, #368]	; (800b56c <HAL_I2C_Init+0x274>)
 800b3fc:	428b      	cmp	r3, r1
 800b3fe:	d819      	bhi.n	800b434 <HAL_I2C_Init+0x13c>
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	1e59      	subs	r1, r3, #1
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	005b      	lsls	r3, r3, #1
 800b40a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b40e:	1c59      	adds	r1, r3, #1
 800b410:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b414:	400b      	ands	r3, r1
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00a      	beq.n	800b430 <HAL_I2C_Init+0x138>
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	1e59      	subs	r1, r3, #1
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	005b      	lsls	r3, r3, #1
 800b424:	fbb1 f3f3 	udiv	r3, r1, r3
 800b428:	3301      	adds	r3, #1
 800b42a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b42e:	e051      	b.n	800b4d4 <HAL_I2C_Init+0x1dc>
 800b430:	2304      	movs	r3, #4
 800b432:	e04f      	b.n	800b4d4 <HAL_I2C_Init+0x1dc>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d111      	bne.n	800b460 <HAL_I2C_Init+0x168>
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	1e58      	subs	r0, r3, #1
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6859      	ldr	r1, [r3, #4]
 800b444:	460b      	mov	r3, r1
 800b446:	005b      	lsls	r3, r3, #1
 800b448:	440b      	add	r3, r1
 800b44a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b44e:	3301      	adds	r3, #1
 800b450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b454:	2b00      	cmp	r3, #0
 800b456:	bf0c      	ite	eq
 800b458:	2301      	moveq	r3, #1
 800b45a:	2300      	movne	r3, #0
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	e012      	b.n	800b486 <HAL_I2C_Init+0x18e>
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	1e58      	subs	r0, r3, #1
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6859      	ldr	r1, [r3, #4]
 800b468:	460b      	mov	r3, r1
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	440b      	add	r3, r1
 800b46e:	0099      	lsls	r1, r3, #2
 800b470:	440b      	add	r3, r1
 800b472:	fbb0 f3f3 	udiv	r3, r0, r3
 800b476:	3301      	adds	r3, #1
 800b478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	bf0c      	ite	eq
 800b480:	2301      	moveq	r3, #1
 800b482:	2300      	movne	r3, #0
 800b484:	b2db      	uxtb	r3, r3
 800b486:	2b00      	cmp	r3, #0
 800b488:	d001      	beq.n	800b48e <HAL_I2C_Init+0x196>
 800b48a:	2301      	movs	r3, #1
 800b48c:	e022      	b.n	800b4d4 <HAL_I2C_Init+0x1dc>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	689b      	ldr	r3, [r3, #8]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d10e      	bne.n	800b4b4 <HAL_I2C_Init+0x1bc>
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	1e58      	subs	r0, r3, #1
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6859      	ldr	r1, [r3, #4]
 800b49e:	460b      	mov	r3, r1
 800b4a0:	005b      	lsls	r3, r3, #1
 800b4a2:	440b      	add	r3, r1
 800b4a4:	fbb0 f3f3 	udiv	r3, r0, r3
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b4ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4b2:	e00f      	b.n	800b4d4 <HAL_I2C_Init+0x1dc>
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	1e58      	subs	r0, r3, #1
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6859      	ldr	r1, [r3, #4]
 800b4bc:	460b      	mov	r3, r1
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	440b      	add	r3, r1
 800b4c2:	0099      	lsls	r1, r3, #2
 800b4c4:	440b      	add	r3, r1
 800b4c6:	fbb0 f3f3 	udiv	r3, r0, r3
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b4d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b4d4:	6879      	ldr	r1, [r7, #4]
 800b4d6:	6809      	ldr	r1, [r1, #0]
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	69da      	ldr	r2, [r3, #28]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6a1b      	ldr	r3, [r3, #32]
 800b4ee:	431a      	orrs	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	430a      	orrs	r2, r1
 800b4f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	689b      	ldr	r3, [r3, #8]
 800b4fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b502:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	6911      	ldr	r1, [r2, #16]
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	68d2      	ldr	r2, [r2, #12]
 800b50e:	4311      	orrs	r1, r2
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	6812      	ldr	r2, [r2, #0]
 800b514:	430b      	orrs	r3, r1
 800b516:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	695a      	ldr	r2, [r3, #20]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	699b      	ldr	r3, [r3, #24]
 800b52a:	431a      	orrs	r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	430a      	orrs	r2, r1
 800b532:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f042 0201 	orr.w	r2, r2, #1
 800b542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2220      	movs	r2, #32
 800b54e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2200      	movs	r2, #0
 800b556:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b560:	2300      	movs	r3, #0
}
 800b562:	4618      	mov	r0, r3
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	000186a0 	.word	0x000186a0
 800b570:	001e847f 	.word	0x001e847f
 800b574:	003d08ff 	.word	0x003d08ff
 800b578:	431bde83 	.word	0x431bde83
 800b57c:	10624dd3 	.word	0x10624dd3

0800b580 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b088      	sub	sp, #32
 800b584:	af02      	add	r7, sp, #8
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	607a      	str	r2, [r7, #4]
 800b58a:	461a      	mov	r2, r3
 800b58c:	460b      	mov	r3, r1
 800b58e:	817b      	strh	r3, [r7, #10]
 800b590:	4613      	mov	r3, r2
 800b592:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b594:	f7ff faf6 	bl	800ab84 <HAL_GetTick>
 800b598:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	2b20      	cmp	r3, #32
 800b5a4:	f040 80e0 	bne.w	800b768 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	9300      	str	r3, [sp, #0]
 800b5ac:	2319      	movs	r3, #25
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	4970      	ldr	r1, [pc, #448]	; (800b774 <HAL_I2C_Master_Transmit+0x1f4>)
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f000 fc9e 	bl	800bef4 <I2C_WaitOnFlagUntilTimeout>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d001      	beq.n	800b5c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b5be:	2302      	movs	r3, #2
 800b5c0:	e0d3      	b.n	800b76a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d101      	bne.n	800b5d0 <HAL_I2C_Master_Transmit+0x50>
 800b5cc:	2302      	movs	r3, #2
 800b5ce:	e0cc      	b.n	800b76a <HAL_I2C_Master_Transmit+0x1ea>
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f003 0301 	and.w	r3, r3, #1
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d007      	beq.n	800b5f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f042 0201 	orr.w	r2, r2, #1
 800b5f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b604:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2221      	movs	r2, #33	; 0x21
 800b60a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2210      	movs	r2, #16
 800b612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2200      	movs	r2, #0
 800b61a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	893a      	ldrh	r2, [r7, #8]
 800b626:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b62c:	b29a      	uxth	r2, r3
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	4a50      	ldr	r2, [pc, #320]	; (800b778 <HAL_I2C_Master_Transmit+0x1f8>)
 800b636:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b638:	8979      	ldrh	r1, [r7, #10]
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	6a3a      	ldr	r2, [r7, #32]
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	f000 fb08 	bl	800bc54 <I2C_MasterRequestWrite>
 800b644:	4603      	mov	r3, r0
 800b646:	2b00      	cmp	r3, #0
 800b648:	d001      	beq.n	800b64e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	e08d      	b.n	800b76a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b64e:	2300      	movs	r3, #0
 800b650:	613b      	str	r3, [r7, #16]
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	695b      	ldr	r3, [r3, #20]
 800b658:	613b      	str	r3, [r7, #16]
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	699b      	ldr	r3, [r3, #24]
 800b660:	613b      	str	r3, [r7, #16]
 800b662:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b664:	e066      	b.n	800b734 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b666:	697a      	ldr	r2, [r7, #20]
 800b668:	6a39      	ldr	r1, [r7, #32]
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f000 fd5c 	bl	800c128 <I2C_WaitOnTXEFlagUntilTimeout>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d00d      	beq.n	800b692 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b67a:	2b04      	cmp	r3, #4
 800b67c:	d107      	bne.n	800b68e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b68c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	e06b      	b.n	800b76a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b696:	781a      	ldrb	r2, [r3, #0]
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a2:	1c5a      	adds	r2, r3, #1
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	b29a      	uxth	r2, r3
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	695b      	ldr	r3, [r3, #20]
 800b6c8:	f003 0304 	and.w	r3, r3, #4
 800b6cc:	2b04      	cmp	r3, #4
 800b6ce:	d11b      	bne.n	800b708 <HAL_I2C_Master_Transmit+0x188>
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d017      	beq.n	800b708 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6dc:	781a      	ldrb	r2, [r3, #0]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e8:	1c5a      	adds	r2, r3, #1
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	3b01      	subs	r3, #1
 800b6f6:	b29a      	uxth	r2, r3
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b700:	3b01      	subs	r3, #1
 800b702:	b29a      	uxth	r2, r3
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b708:	697a      	ldr	r2, [r7, #20]
 800b70a:	6a39      	ldr	r1, [r7, #32]
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f000 fd53 	bl	800c1b8 <I2C_WaitOnBTFFlagUntilTimeout>
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d00d      	beq.n	800b734 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b71c:	2b04      	cmp	r3, #4
 800b71e:	d107      	bne.n	800b730 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b72e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b730:	2301      	movs	r3, #1
 800b732:	e01a      	b.n	800b76a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d194      	bne.n	800b666 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b74a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2220      	movs	r2, #32
 800b750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2200      	movs	r2, #0
 800b758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2200      	movs	r2, #0
 800b760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b764:	2300      	movs	r3, #0
 800b766:	e000      	b.n	800b76a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b768:	2302      	movs	r3, #2
  }
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3718      	adds	r7, #24
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	00100002 	.word	0x00100002
 800b778:	ffff0000 	.word	0xffff0000

0800b77c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b08c      	sub	sp, #48	; 0x30
 800b780:	af02      	add	r7, sp, #8
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	607a      	str	r2, [r7, #4]
 800b786:	461a      	mov	r2, r3
 800b788:	460b      	mov	r3, r1
 800b78a:	817b      	strh	r3, [r7, #10]
 800b78c:	4613      	mov	r3, r2
 800b78e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800b790:	2300      	movs	r3, #0
 800b792:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b794:	f7ff f9f6 	bl	800ab84 <HAL_GetTick>
 800b798:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	2b20      	cmp	r3, #32
 800b7a4:	f040 824b 	bne.w	800bc3e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7aa:	9300      	str	r3, [sp, #0]
 800b7ac:	2319      	movs	r3, #25
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	497f      	ldr	r1, [pc, #508]	; (800b9b0 <HAL_I2C_Master_Receive+0x234>)
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f000 fb9e 	bl	800bef4 <I2C_WaitOnFlagUntilTimeout>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d001      	beq.n	800b7c2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800b7be:	2302      	movs	r3, #2
 800b7c0:	e23e      	b.n	800bc40 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d101      	bne.n	800b7d0 <HAL_I2C_Master_Receive+0x54>
 800b7cc:	2302      	movs	r3, #2
 800b7ce:	e237      	b.n	800bc40 <HAL_I2C_Master_Receive+0x4c4>
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f003 0301 	and.w	r3, r3, #1
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d007      	beq.n	800b7f6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f042 0201 	orr.w	r2, r2, #1
 800b7f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b804:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2222      	movs	r2, #34	; 0x22
 800b80a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2210      	movs	r2, #16
 800b812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2200      	movs	r2, #0
 800b81a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	893a      	ldrh	r2, [r7, #8]
 800b826:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b82c:	b29a      	uxth	r2, r3
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	4a5f      	ldr	r2, [pc, #380]	; (800b9b4 <HAL_I2C_Master_Receive+0x238>)
 800b836:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b838:	8979      	ldrh	r1, [r7, #10]
 800b83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f000 fa8a 	bl	800bd58 <I2C_MasterRequestRead>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d001      	beq.n	800b84e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800b84a:	2301      	movs	r3, #1
 800b84c:	e1f8      	b.n	800bc40 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b852:	2b00      	cmp	r3, #0
 800b854:	d113      	bne.n	800b87e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b856:	2300      	movs	r3, #0
 800b858:	61fb      	str	r3, [r7, #28]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	695b      	ldr	r3, [r3, #20]
 800b860:	61fb      	str	r3, [r7, #28]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	699b      	ldr	r3, [r3, #24]
 800b868:	61fb      	str	r3, [r7, #28]
 800b86a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b87a:	601a      	str	r2, [r3, #0]
 800b87c:	e1cc      	b.n	800bc18 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b882:	2b01      	cmp	r3, #1
 800b884:	d11e      	bne.n	800b8c4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b894:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b896:	b672      	cpsid	i
}
 800b898:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b89a:	2300      	movs	r3, #0
 800b89c:	61bb      	str	r3, [r7, #24]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	695b      	ldr	r3, [r3, #20]
 800b8a4:	61bb      	str	r3, [r7, #24]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	699b      	ldr	r3, [r3, #24]
 800b8ac:	61bb      	str	r3, [r7, #24]
 800b8ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	681a      	ldr	r2, [r3, #0]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b8c0:	b662      	cpsie	i
}
 800b8c2:	e035      	b.n	800b930 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8c8:	2b02      	cmp	r3, #2
 800b8ca:	d11e      	bne.n	800b90a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b8da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8dc:	b672      	cpsid	i
}
 800b8de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	617b      	str	r3, [r7, #20]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	695b      	ldr	r3, [r3, #20]
 800b8ea:	617b      	str	r3, [r7, #20]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	699b      	ldr	r3, [r3, #24]
 800b8f2:	617b      	str	r3, [r7, #20]
 800b8f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b904:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b906:	b662      	cpsie	i
}
 800b908:	e012      	b.n	800b930 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b918:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b91a:	2300      	movs	r3, #0
 800b91c:	613b      	str	r3, [r7, #16]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	695b      	ldr	r3, [r3, #20]
 800b924:	613b      	str	r3, [r7, #16]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	699b      	ldr	r3, [r3, #24]
 800b92c:	613b      	str	r3, [r7, #16]
 800b92e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800b930:	e172      	b.n	800bc18 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b936:	2b03      	cmp	r3, #3
 800b938:	f200 811f 	bhi.w	800bb7a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b940:	2b01      	cmp	r3, #1
 800b942:	d123      	bne.n	800b98c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b946:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b948:	68f8      	ldr	r0, [r7, #12]
 800b94a:	f000 fc7d 	bl	800c248 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d001      	beq.n	800b958 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800b954:	2301      	movs	r3, #1
 800b956:	e173      	b.n	800bc40 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	691a      	ldr	r2, [r3, #16]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b962:	b2d2      	uxtb	r2, r2
 800b964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96a:	1c5a      	adds	r2, r3, #1
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b974:	3b01      	subs	r3, #1
 800b976:	b29a      	uxth	r2, r3
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b980:	b29b      	uxth	r3, r3
 800b982:	3b01      	subs	r3, #1
 800b984:	b29a      	uxth	r2, r3
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b98a:	e145      	b.n	800bc18 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b990:	2b02      	cmp	r3, #2
 800b992:	d152      	bne.n	800ba3a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b996:	9300      	str	r3, [sp, #0]
 800b998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99a:	2200      	movs	r2, #0
 800b99c:	4906      	ldr	r1, [pc, #24]	; (800b9b8 <HAL_I2C_Master_Receive+0x23c>)
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	f000 faa8 	bl	800bef4 <I2C_WaitOnFlagUntilTimeout>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d008      	beq.n	800b9bc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e148      	b.n	800bc40 <HAL_I2C_Master_Receive+0x4c4>
 800b9ae:	bf00      	nop
 800b9b0:	00100002 	.word	0x00100002
 800b9b4:	ffff0000 	.word	0xffff0000
 800b9b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800b9bc:	b672      	cpsid	i
}
 800b9be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	691a      	ldr	r2, [r3, #16]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9da:	b2d2      	uxtb	r2, r2
 800b9dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e2:	1c5a      	adds	r2, r3, #1
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9ec:	3b01      	subs	r3, #1
 800b9ee:	b29a      	uxth	r2, r3
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	b29a      	uxth	r2, r3
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800ba02:	b662      	cpsie	i
}
 800ba04:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	691a      	ldr	r2, [r3, #16]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba10:	b2d2      	uxtb	r2, r2
 800ba12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba18:	1c5a      	adds	r2, r3, #1
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba22:	3b01      	subs	r3, #1
 800ba24:	b29a      	uxth	r2, r3
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	3b01      	subs	r3, #1
 800ba32:	b29a      	uxth	r2, r3
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ba38:	e0ee      	b.n	800bc18 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ba3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3c:	9300      	str	r3, [sp, #0]
 800ba3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba40:	2200      	movs	r2, #0
 800ba42:	4981      	ldr	r1, [pc, #516]	; (800bc48 <HAL_I2C_Master_Receive+0x4cc>)
 800ba44:	68f8      	ldr	r0, [r7, #12]
 800ba46:	f000 fa55 	bl	800bef4 <I2C_WaitOnFlagUntilTimeout>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d001      	beq.n	800ba54 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800ba50:	2301      	movs	r3, #1
 800ba52:	e0f5      	b.n	800bc40 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba64:	b672      	cpsid	i
}
 800ba66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	691a      	ldr	r2, [r3, #16]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba72:	b2d2      	uxtb	r2, r2
 800ba74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7a:	1c5a      	adds	r2, r3, #1
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba84:	3b01      	subs	r3, #1
 800ba86:	b29a      	uxth	r2, r3
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	3b01      	subs	r3, #1
 800ba94:	b29a      	uxth	r2, r3
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800ba9a:	4b6c      	ldr	r3, [pc, #432]	; (800bc4c <HAL_I2C_Master_Receive+0x4d0>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	08db      	lsrs	r3, r3, #3
 800baa0:	4a6b      	ldr	r2, [pc, #428]	; (800bc50 <HAL_I2C_Master_Receive+0x4d4>)
 800baa2:	fba2 2303 	umull	r2, r3, r2, r3
 800baa6:	0a1a      	lsrs	r2, r3, #8
 800baa8:	4613      	mov	r3, r2
 800baaa:	009b      	lsls	r3, r3, #2
 800baac:	4413      	add	r3, r2
 800baae:	00da      	lsls	r2, r3, #3
 800bab0:	1ad3      	subs	r3, r2, r3
 800bab2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800bab4:	6a3b      	ldr	r3, [r7, #32]
 800bab6:	3b01      	subs	r3, #1
 800bab8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800baba:	6a3b      	ldr	r3, [r7, #32]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d118      	bne.n	800baf2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2200      	movs	r2, #0
 800bac4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2220      	movs	r2, #32
 800baca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bada:	f043 0220 	orr.w	r2, r3, #32
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800bae2:	b662      	cpsie	i
}
 800bae4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2200      	movs	r2, #0
 800baea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800baee:	2301      	movs	r3, #1
 800baf0:	e0a6      	b.n	800bc40 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	695b      	ldr	r3, [r3, #20]
 800baf8:	f003 0304 	and.w	r3, r3, #4
 800bafc:	2b04      	cmp	r3, #4
 800bafe:	d1d9      	bne.n	800bab4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	691a      	ldr	r2, [r3, #16]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb1a:	b2d2      	uxtb	r2, r2
 800bb1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb22:	1c5a      	adds	r2, r3, #1
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb2c:	3b01      	subs	r3, #1
 800bb2e:	b29a      	uxth	r2, r3
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	3b01      	subs	r3, #1
 800bb3c:	b29a      	uxth	r2, r3
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800bb42:	b662      	cpsie	i
}
 800bb44:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	691a      	ldr	r2, [r3, #16]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb50:	b2d2      	uxtb	r2, r2
 800bb52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb58:	1c5a      	adds	r2, r3, #1
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb62:	3b01      	subs	r3, #1
 800bb64:	b29a      	uxth	r2, r3
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	3b01      	subs	r3, #1
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb78:	e04e      	b.n	800bc18 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	f000 fb62 	bl	800c248 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d001      	beq.n	800bb8e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e058      	b.n	800bc40 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	691a      	ldr	r2, [r3, #16]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb98:	b2d2      	uxtb	r2, r2
 800bb9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba0:	1c5a      	adds	r2, r3, #1
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbaa:	3b01      	subs	r3, #1
 800bbac:	b29a      	uxth	r2, r3
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	3b01      	subs	r3, #1
 800bbba:	b29a      	uxth	r2, r3
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	695b      	ldr	r3, [r3, #20]
 800bbc6:	f003 0304 	and.w	r3, r3, #4
 800bbca:	2b04      	cmp	r3, #4
 800bbcc:	d124      	bne.n	800bc18 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbd2:	2b03      	cmp	r3, #3
 800bbd4:	d107      	bne.n	800bbe6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbe4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	691a      	ldr	r2, [r3, #16]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf0:	b2d2      	uxtb	r2, r2
 800bbf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf8:	1c5a      	adds	r2, r3, #1
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc02:	3b01      	subs	r3, #1
 800bc04:	b29a      	uxth	r2, r3
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	3b01      	subs	r3, #1
 800bc12:	b29a      	uxth	r2, r3
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f47f ae88 	bne.w	800b932 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2220      	movs	r2, #32
 800bc26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2200      	movs	r2, #0
 800bc36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	e000      	b.n	800bc40 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800bc3e:	2302      	movs	r3, #2
  }
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3728      	adds	r7, #40	; 0x28
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	00010004 	.word	0x00010004
 800bc4c:	200000f8 	.word	0x200000f8
 800bc50:	14f8b589 	.word	0x14f8b589

0800bc54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b088      	sub	sp, #32
 800bc58:	af02      	add	r7, sp, #8
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	607a      	str	r2, [r7, #4]
 800bc5e:	603b      	str	r3, [r7, #0]
 800bc60:	460b      	mov	r3, r1
 800bc62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	2b08      	cmp	r3, #8
 800bc6e:	d006      	beq.n	800bc7e <I2C_MasterRequestWrite+0x2a>
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d003      	beq.n	800bc7e <I2C_MasterRequestWrite+0x2a>
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bc7c:	d108      	bne.n	800bc90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc8c:	601a      	str	r2, [r3, #0]
 800bc8e:	e00b      	b.n	800bca8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc94:	2b12      	cmp	r3, #18
 800bc96:	d107      	bne.n	800bca8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	681a      	ldr	r2, [r3, #0]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bca6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bcb4:	68f8      	ldr	r0, [r7, #12]
 800bcb6:	f000 f91d 	bl	800bef4 <I2C_WaitOnFlagUntilTimeout>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00d      	beq.n	800bcdc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcce:	d103      	bne.n	800bcd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bcd8:	2303      	movs	r3, #3
 800bcda:	e035      	b.n	800bd48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bce4:	d108      	bne.n	800bcf8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bce6:	897b      	ldrh	r3, [r7, #10]
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	461a      	mov	r2, r3
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bcf4:	611a      	str	r2, [r3, #16]
 800bcf6:	e01b      	b.n	800bd30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bcf8:	897b      	ldrh	r3, [r7, #10]
 800bcfa:	11db      	asrs	r3, r3, #7
 800bcfc:	b2db      	uxtb	r3, r3
 800bcfe:	f003 0306 	and.w	r3, r3, #6
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	f063 030f 	orn	r3, r3, #15
 800bd08:	b2da      	uxtb	r2, r3
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	490e      	ldr	r1, [pc, #56]	; (800bd50 <I2C_MasterRequestWrite+0xfc>)
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f000 f966 	bl	800bfe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d001      	beq.n	800bd26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800bd22:	2301      	movs	r3, #1
 800bd24:	e010      	b.n	800bd48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bd26:	897b      	ldrh	r3, [r7, #10]
 800bd28:	b2da      	uxtb	r2, r3
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	4907      	ldr	r1, [pc, #28]	; (800bd54 <I2C_MasterRequestWrite+0x100>)
 800bd36:	68f8      	ldr	r0, [r7, #12]
 800bd38:	f000 f956 	bl	800bfe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d001      	beq.n	800bd46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800bd42:	2301      	movs	r3, #1
 800bd44:	e000      	b.n	800bd48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800bd46:	2300      	movs	r3, #0
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3718      	adds	r7, #24
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}
 800bd50:	00010008 	.word	0x00010008
 800bd54:	00010002 	.word	0x00010002

0800bd58 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b088      	sub	sp, #32
 800bd5c:	af02      	add	r7, sp, #8
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	607a      	str	r2, [r7, #4]
 800bd62:	603b      	str	r3, [r7, #0]
 800bd64:	460b      	mov	r3, r1
 800bd66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd6c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bd7c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	2b08      	cmp	r3, #8
 800bd82:	d006      	beq.n	800bd92 <I2C_MasterRequestRead+0x3a>
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d003      	beq.n	800bd92 <I2C_MasterRequestRead+0x3a>
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bd90:	d108      	bne.n	800bda4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bda0:	601a      	str	r2, [r3, #0]
 800bda2:	e00b      	b.n	800bdbc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda8:	2b11      	cmp	r3, #17
 800bdaa:	d107      	bne.n	800bdbc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bdba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	9300      	str	r3, [sp, #0]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f000 f893 	bl	800bef4 <I2C_WaitOnFlagUntilTimeout>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d00d      	beq.n	800bdf0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bde2:	d103      	bne.n	800bdec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bdec:	2303      	movs	r3, #3
 800bdee:	e079      	b.n	800bee4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdf8:	d108      	bne.n	800be0c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bdfa:	897b      	ldrh	r3, [r7, #10]
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	f043 0301 	orr.w	r3, r3, #1
 800be02:	b2da      	uxtb	r2, r3
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	611a      	str	r2, [r3, #16]
 800be0a:	e05f      	b.n	800becc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800be0c:	897b      	ldrh	r3, [r7, #10]
 800be0e:	11db      	asrs	r3, r3, #7
 800be10:	b2db      	uxtb	r3, r3
 800be12:	f003 0306 	and.w	r3, r3, #6
 800be16:	b2db      	uxtb	r3, r3
 800be18:	f063 030f 	orn	r3, r3, #15
 800be1c:	b2da      	uxtb	r2, r3
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	687a      	ldr	r2, [r7, #4]
 800be28:	4930      	ldr	r1, [pc, #192]	; (800beec <I2C_MasterRequestRead+0x194>)
 800be2a:	68f8      	ldr	r0, [r7, #12]
 800be2c:	f000 f8dc 	bl	800bfe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be30:	4603      	mov	r3, r0
 800be32:	2b00      	cmp	r3, #0
 800be34:	d001      	beq.n	800be3a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800be36:	2301      	movs	r3, #1
 800be38:	e054      	b.n	800bee4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800be3a:	897b      	ldrh	r3, [r7, #10]
 800be3c:	b2da      	uxtb	r2, r3
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	4929      	ldr	r1, [pc, #164]	; (800bef0 <I2C_MasterRequestRead+0x198>)
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f000 f8cc 	bl	800bfe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d001      	beq.n	800be5a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800be56:	2301      	movs	r3, #1
 800be58:	e044      	b.n	800bee4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be5a:	2300      	movs	r3, #0
 800be5c:	613b      	str	r3, [r7, #16]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	695b      	ldr	r3, [r3, #20]
 800be64:	613b      	str	r3, [r7, #16]
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	699b      	ldr	r3, [r3, #24]
 800be6c:	613b      	str	r3, [r7, #16]
 800be6e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be7e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	9300      	str	r3, [sp, #0]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2200      	movs	r2, #0
 800be88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	f000 f831 	bl	800bef4 <I2C_WaitOnFlagUntilTimeout>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00d      	beq.n	800beb4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bea6:	d103      	bne.n	800beb0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800beae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800beb0:	2303      	movs	r3, #3
 800beb2:	e017      	b.n	800bee4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800beb4:	897b      	ldrh	r3, [r7, #10]
 800beb6:	11db      	asrs	r3, r3, #7
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	f003 0306 	and.w	r3, r3, #6
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	f063 030e 	orn	r3, r3, #14
 800bec4:	b2da      	uxtb	r2, r3
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	4907      	ldr	r1, [pc, #28]	; (800bef0 <I2C_MasterRequestRead+0x198>)
 800bed2:	68f8      	ldr	r0, [r7, #12]
 800bed4:	f000 f888 	bl	800bfe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bed8:	4603      	mov	r3, r0
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d001      	beq.n	800bee2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800bede:	2301      	movs	r3, #1
 800bee0:	e000      	b.n	800bee4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3718      	adds	r7, #24
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	00010008 	.word	0x00010008
 800bef0:	00010002 	.word	0x00010002

0800bef4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	603b      	str	r3, [r7, #0]
 800bf00:	4613      	mov	r3, r2
 800bf02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf04:	e048      	b.n	800bf98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf0c:	d044      	beq.n	800bf98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf0e:	f7fe fe39 	bl	800ab84 <HAL_GetTick>
 800bf12:	4602      	mov	r2, r0
 800bf14:	69bb      	ldr	r3, [r7, #24]
 800bf16:	1ad3      	subs	r3, r2, r3
 800bf18:	683a      	ldr	r2, [r7, #0]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d302      	bcc.n	800bf24 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d139      	bne.n	800bf98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	0c1b      	lsrs	r3, r3, #16
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d10d      	bne.n	800bf4a <I2C_WaitOnFlagUntilTimeout+0x56>
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	695b      	ldr	r3, [r3, #20]
 800bf34:	43da      	mvns	r2, r3
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	4013      	ands	r3, r2
 800bf3a:	b29b      	uxth	r3, r3
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	bf0c      	ite	eq
 800bf40:	2301      	moveq	r3, #1
 800bf42:	2300      	movne	r3, #0
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	461a      	mov	r2, r3
 800bf48:	e00c      	b.n	800bf64 <I2C_WaitOnFlagUntilTimeout+0x70>
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	699b      	ldr	r3, [r3, #24]
 800bf50:	43da      	mvns	r2, r3
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	4013      	ands	r3, r2
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	bf0c      	ite	eq
 800bf5c:	2301      	moveq	r3, #1
 800bf5e:	2300      	movne	r3, #0
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	461a      	mov	r2, r3
 800bf64:	79fb      	ldrb	r3, [r7, #7]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d116      	bne.n	800bf98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2220      	movs	r2, #32
 800bf74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf84:	f043 0220 	orr.w	r2, r3, #32
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800bf94:	2301      	movs	r3, #1
 800bf96:	e023      	b.n	800bfe0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	0c1b      	lsrs	r3, r3, #16
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d10d      	bne.n	800bfbe <I2C_WaitOnFlagUntilTimeout+0xca>
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	695b      	ldr	r3, [r3, #20]
 800bfa8:	43da      	mvns	r2, r3
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	4013      	ands	r3, r2
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	bf0c      	ite	eq
 800bfb4:	2301      	moveq	r3, #1
 800bfb6:	2300      	movne	r3, #0
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	461a      	mov	r2, r3
 800bfbc:	e00c      	b.n	800bfd8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	699b      	ldr	r3, [r3, #24]
 800bfc4:	43da      	mvns	r2, r3
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	4013      	ands	r3, r2
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	bf0c      	ite	eq
 800bfd0:	2301      	moveq	r3, #1
 800bfd2:	2300      	movne	r3, #0
 800bfd4:	b2db      	uxtb	r3, r3
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	79fb      	ldrb	r3, [r7, #7]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d093      	beq.n	800bf06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bfde:	2300      	movs	r3, #0
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3710      	adds	r7, #16
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]
 800bff4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bff6:	e071      	b.n	800c0dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	695b      	ldr	r3, [r3, #20]
 800bffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c006:	d123      	bne.n	800c050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c016:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c020:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2200      	movs	r2, #0
 800c026:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2220      	movs	r2, #32
 800c02c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2200      	movs	r2, #0
 800c034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c03c:	f043 0204 	orr.w	r2, r3, #4
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2200      	movs	r2, #0
 800c048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c04c:	2301      	movs	r3, #1
 800c04e:	e067      	b.n	800c120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c056:	d041      	beq.n	800c0dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c058:	f7fe fd94 	bl	800ab84 <HAL_GetTick>
 800c05c:	4602      	mov	r2, r0
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	1ad3      	subs	r3, r2, r3
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	429a      	cmp	r2, r3
 800c066:	d302      	bcc.n	800c06e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d136      	bne.n	800c0dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	0c1b      	lsrs	r3, r3, #16
 800c072:	b2db      	uxtb	r3, r3
 800c074:	2b01      	cmp	r3, #1
 800c076:	d10c      	bne.n	800c092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	695b      	ldr	r3, [r3, #20]
 800c07e:	43da      	mvns	r2, r3
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	4013      	ands	r3, r2
 800c084:	b29b      	uxth	r3, r3
 800c086:	2b00      	cmp	r3, #0
 800c088:	bf14      	ite	ne
 800c08a:	2301      	movne	r3, #1
 800c08c:	2300      	moveq	r3, #0
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	e00b      	b.n	800c0aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	699b      	ldr	r3, [r3, #24]
 800c098:	43da      	mvns	r2, r3
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	4013      	ands	r3, r2
 800c09e:	b29b      	uxth	r3, r3
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	bf14      	ite	ne
 800c0a4:	2301      	movne	r3, #1
 800c0a6:	2300      	moveq	r3, #0
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d016      	beq.n	800c0dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2220      	movs	r2, #32
 800c0b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c8:	f043 0220 	orr.w	r2, r3, #32
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	e021      	b.n	800c120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	0c1b      	lsrs	r3, r3, #16
 800c0e0:	b2db      	uxtb	r3, r3
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d10c      	bne.n	800c100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	695b      	ldr	r3, [r3, #20]
 800c0ec:	43da      	mvns	r2, r3
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	4013      	ands	r3, r2
 800c0f2:	b29b      	uxth	r3, r3
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	bf14      	ite	ne
 800c0f8:	2301      	movne	r3, #1
 800c0fa:	2300      	moveq	r3, #0
 800c0fc:	b2db      	uxtb	r3, r3
 800c0fe:	e00b      	b.n	800c118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	699b      	ldr	r3, [r3, #24]
 800c106:	43da      	mvns	r2, r3
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	4013      	ands	r3, r2
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	2b00      	cmp	r3, #0
 800c110:	bf14      	ite	ne
 800c112:	2301      	movne	r3, #1
 800c114:	2300      	moveq	r3, #0
 800c116:	b2db      	uxtb	r3, r3
 800c118:	2b00      	cmp	r3, #0
 800c11a:	f47f af6d 	bne.w	800bff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800c11e:	2300      	movs	r3, #0
}
 800c120:	4618      	mov	r0, r3
 800c122:	3710      	adds	r7, #16
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	60b9      	str	r1, [r7, #8]
 800c132:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c134:	e034      	b.n	800c1a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c136:	68f8      	ldr	r0, [r7, #12]
 800c138:	f000 f8e3 	bl	800c302 <I2C_IsAcknowledgeFailed>
 800c13c:	4603      	mov	r3, r0
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d001      	beq.n	800c146 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c142:	2301      	movs	r3, #1
 800c144:	e034      	b.n	800c1b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c14c:	d028      	beq.n	800c1a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c14e:	f7fe fd19 	bl	800ab84 <HAL_GetTick>
 800c152:	4602      	mov	r2, r0
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	1ad3      	subs	r3, r2, r3
 800c158:	68ba      	ldr	r2, [r7, #8]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d302      	bcc.n	800c164 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d11d      	bne.n	800c1a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	695b      	ldr	r3, [r3, #20]
 800c16a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c16e:	2b80      	cmp	r3, #128	; 0x80
 800c170:	d016      	beq.n	800c1a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2200      	movs	r2, #0
 800c176:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2220      	movs	r2, #32
 800c17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2200      	movs	r2, #0
 800c184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c18c:	f043 0220 	orr.w	r2, r3, #32
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2200      	movs	r2, #0
 800c198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800c19c:	2301      	movs	r3, #1
 800c19e:	e007      	b.n	800c1b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	695b      	ldr	r3, [r3, #20]
 800c1a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1aa:	2b80      	cmp	r3, #128	; 0x80
 800c1ac:	d1c3      	bne.n	800c136 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c1ae:	2300      	movs	r3, #0
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3710      	adds	r7, #16
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c1c4:	e034      	b.n	800c230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c1c6:	68f8      	ldr	r0, [r7, #12]
 800c1c8:	f000 f89b 	bl	800c302 <I2C_IsAcknowledgeFailed>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d001      	beq.n	800c1d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e034      	b.n	800c240 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1dc:	d028      	beq.n	800c230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1de:	f7fe fcd1 	bl	800ab84 <HAL_GetTick>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	1ad3      	subs	r3, r2, r3
 800c1e8:	68ba      	ldr	r2, [r7, #8]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d302      	bcc.n	800c1f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d11d      	bne.n	800c230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	695b      	ldr	r3, [r3, #20]
 800c1fa:	f003 0304 	and.w	r3, r3, #4
 800c1fe:	2b04      	cmp	r3, #4
 800c200:	d016      	beq.n	800c230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2200      	movs	r2, #0
 800c206:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2220      	movs	r2, #32
 800c20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2200      	movs	r2, #0
 800c214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c21c:	f043 0220 	orr.w	r2, r3, #32
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2200      	movs	r2, #0
 800c228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800c22c:	2301      	movs	r3, #1
 800c22e:	e007      	b.n	800c240 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	695b      	ldr	r3, [r3, #20]
 800c236:	f003 0304 	and.w	r3, r3, #4
 800c23a:	2b04      	cmp	r3, #4
 800c23c:	d1c3      	bne.n	800c1c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	3710      	adds	r7, #16
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c254:	e049      	b.n	800c2ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	695b      	ldr	r3, [r3, #20]
 800c25c:	f003 0310 	and.w	r3, r3, #16
 800c260:	2b10      	cmp	r3, #16
 800c262:	d119      	bne.n	800c298 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f06f 0210 	mvn.w	r2, #16
 800c26c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2200      	movs	r2, #0
 800c272:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2220      	movs	r2, #32
 800c278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2200      	movs	r2, #0
 800c280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2200      	movs	r2, #0
 800c290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c294:	2301      	movs	r3, #1
 800c296:	e030      	b.n	800c2fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c298:	f7fe fc74 	bl	800ab84 <HAL_GetTick>
 800c29c:	4602      	mov	r2, r0
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	1ad3      	subs	r3, r2, r3
 800c2a2:	68ba      	ldr	r2, [r7, #8]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d302      	bcc.n	800c2ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d11d      	bne.n	800c2ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	695b      	ldr	r3, [r3, #20]
 800c2b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2b8:	2b40      	cmp	r3, #64	; 0x40
 800c2ba:	d016      	beq.n	800c2ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2220      	movs	r2, #32
 800c2c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2d6:	f043 0220 	orr.w	r2, r3, #32
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	e007      	b.n	800c2fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	695b      	ldr	r3, [r3, #20]
 800c2f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2f4:	2b40      	cmp	r3, #64	; 0x40
 800c2f6:	d1ae      	bne.n	800c256 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c2f8:	2300      	movs	r3, #0
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c302:	b480      	push	{r7}
 800c304:	b083      	sub	sp, #12
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	695b      	ldr	r3, [r3, #20]
 800c310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c318:	d11b      	bne.n	800c352 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c322:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2200      	movs	r2, #0
 800c328:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2220      	movs	r2, #32
 800c32e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c33e:	f043 0204 	orr.w	r2, r3, #4
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2200      	movs	r2, #0
 800c34a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c34e:	2301      	movs	r3, #1
 800c350:	e000      	b.n	800c354 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c352:	2300      	movs	r3, #0
}
 800c354:	4618      	mov	r0, r3
 800c356:	370c      	adds	r7, #12
 800c358:	46bd      	mov	sp, r7
 800c35a:	bc80      	pop	{r7}
 800c35c:	4770      	bx	lr
	...

0800c360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b086      	sub	sp, #24
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d101      	bne.n	800c372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c36e:	2301      	movs	r3, #1
 800c370:	e272      	b.n	800c858 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f003 0301 	and.w	r3, r3, #1
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	f000 8087 	beq.w	800c48e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c380:	4b92      	ldr	r3, [pc, #584]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	f003 030c 	and.w	r3, r3, #12
 800c388:	2b04      	cmp	r3, #4
 800c38a:	d00c      	beq.n	800c3a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800c38c:	4b8f      	ldr	r3, [pc, #572]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	f003 030c 	and.w	r3, r3, #12
 800c394:	2b08      	cmp	r3, #8
 800c396:	d112      	bne.n	800c3be <HAL_RCC_OscConfig+0x5e>
 800c398:	4b8c      	ldr	r3, [pc, #560]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3a4:	d10b      	bne.n	800c3be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c3a6:	4b89      	ldr	r3, [pc, #548]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d06c      	beq.n	800c48c <HAL_RCC_OscConfig+0x12c>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d168      	bne.n	800c48c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	e24c      	b.n	800c858 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3c6:	d106      	bne.n	800c3d6 <HAL_RCC_OscConfig+0x76>
 800c3c8:	4b80      	ldr	r3, [pc, #512]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4a7f      	ldr	r2, [pc, #508]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c3ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3d2:	6013      	str	r3, [r2, #0]
 800c3d4:	e02e      	b.n	800c434 <HAL_RCC_OscConfig+0xd4>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d10c      	bne.n	800c3f8 <HAL_RCC_OscConfig+0x98>
 800c3de:	4b7b      	ldr	r3, [pc, #492]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4a7a      	ldr	r2, [pc, #488]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c3e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3e8:	6013      	str	r3, [r2, #0]
 800c3ea:	4b78      	ldr	r3, [pc, #480]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	4a77      	ldr	r2, [pc, #476]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c3f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c3f4:	6013      	str	r3, [r2, #0]
 800c3f6:	e01d      	b.n	800c434 <HAL_RCC_OscConfig+0xd4>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c400:	d10c      	bne.n	800c41c <HAL_RCC_OscConfig+0xbc>
 800c402:	4b72      	ldr	r3, [pc, #456]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a71      	ldr	r2, [pc, #452]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c40c:	6013      	str	r3, [r2, #0]
 800c40e:	4b6f      	ldr	r3, [pc, #444]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4a6e      	ldr	r2, [pc, #440]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c418:	6013      	str	r3, [r2, #0]
 800c41a:	e00b      	b.n	800c434 <HAL_RCC_OscConfig+0xd4>
 800c41c:	4b6b      	ldr	r3, [pc, #428]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a6a      	ldr	r2, [pc, #424]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c426:	6013      	str	r3, [r2, #0]
 800c428:	4b68      	ldr	r3, [pc, #416]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a67      	ldr	r2, [pc, #412]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c42e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c432:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d013      	beq.n	800c464 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c43c:	f7fe fba2 	bl	800ab84 <HAL_GetTick>
 800c440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c442:	e008      	b.n	800c456 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c444:	f7fe fb9e 	bl	800ab84 <HAL_GetTick>
 800c448:	4602      	mov	r2, r0
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	1ad3      	subs	r3, r2, r3
 800c44e:	2b64      	cmp	r3, #100	; 0x64
 800c450:	d901      	bls.n	800c456 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800c452:	2303      	movs	r3, #3
 800c454:	e200      	b.n	800c858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c456:	4b5d      	ldr	r3, [pc, #372]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d0f0      	beq.n	800c444 <HAL_RCC_OscConfig+0xe4>
 800c462:	e014      	b.n	800c48e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c464:	f7fe fb8e 	bl	800ab84 <HAL_GetTick>
 800c468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c46a:	e008      	b.n	800c47e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c46c:	f7fe fb8a 	bl	800ab84 <HAL_GetTick>
 800c470:	4602      	mov	r2, r0
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	1ad3      	subs	r3, r2, r3
 800c476:	2b64      	cmp	r3, #100	; 0x64
 800c478:	d901      	bls.n	800c47e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800c47a:	2303      	movs	r3, #3
 800c47c:	e1ec      	b.n	800c858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c47e:	4b53      	ldr	r3, [pc, #332]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c486:	2b00      	cmp	r3, #0
 800c488:	d1f0      	bne.n	800c46c <HAL_RCC_OscConfig+0x10c>
 800c48a:	e000      	b.n	800c48e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c48c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f003 0302 	and.w	r3, r3, #2
 800c496:	2b00      	cmp	r3, #0
 800c498:	d063      	beq.n	800c562 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c49a:	4b4c      	ldr	r3, [pc, #304]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	f003 030c 	and.w	r3, r3, #12
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d00b      	beq.n	800c4be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800c4a6:	4b49      	ldr	r3, [pc, #292]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	f003 030c 	and.w	r3, r3, #12
 800c4ae:	2b08      	cmp	r3, #8
 800c4b0:	d11c      	bne.n	800c4ec <HAL_RCC_OscConfig+0x18c>
 800c4b2:	4b46      	ldr	r3, [pc, #280]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c4b4:	685b      	ldr	r3, [r3, #4]
 800c4b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d116      	bne.n	800c4ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c4be:	4b43      	ldr	r3, [pc, #268]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f003 0302 	and.w	r3, r3, #2
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d005      	beq.n	800c4d6 <HAL_RCC_OscConfig+0x176>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	691b      	ldr	r3, [r3, #16]
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d001      	beq.n	800c4d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	e1c0      	b.n	800c858 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c4d6:	4b3d      	ldr	r3, [pc, #244]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	695b      	ldr	r3, [r3, #20]
 800c4e2:	00db      	lsls	r3, r3, #3
 800c4e4:	4939      	ldr	r1, [pc, #228]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c4ea:	e03a      	b.n	800c562 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	691b      	ldr	r3, [r3, #16]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d020      	beq.n	800c536 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c4f4:	4b36      	ldr	r3, [pc, #216]	; (800c5d0 <HAL_RCC_OscConfig+0x270>)
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c4fa:	f7fe fb43 	bl	800ab84 <HAL_GetTick>
 800c4fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c500:	e008      	b.n	800c514 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c502:	f7fe fb3f 	bl	800ab84 <HAL_GetTick>
 800c506:	4602      	mov	r2, r0
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	1ad3      	subs	r3, r2, r3
 800c50c:	2b02      	cmp	r3, #2
 800c50e:	d901      	bls.n	800c514 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800c510:	2303      	movs	r3, #3
 800c512:	e1a1      	b.n	800c858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c514:	4b2d      	ldr	r3, [pc, #180]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f003 0302 	and.w	r3, r3, #2
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d0f0      	beq.n	800c502 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c520:	4b2a      	ldr	r3, [pc, #168]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	695b      	ldr	r3, [r3, #20]
 800c52c:	00db      	lsls	r3, r3, #3
 800c52e:	4927      	ldr	r1, [pc, #156]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c530:	4313      	orrs	r3, r2
 800c532:	600b      	str	r3, [r1, #0]
 800c534:	e015      	b.n	800c562 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c536:	4b26      	ldr	r3, [pc, #152]	; (800c5d0 <HAL_RCC_OscConfig+0x270>)
 800c538:	2200      	movs	r2, #0
 800c53a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c53c:	f7fe fb22 	bl	800ab84 <HAL_GetTick>
 800c540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c542:	e008      	b.n	800c556 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c544:	f7fe fb1e 	bl	800ab84 <HAL_GetTick>
 800c548:	4602      	mov	r2, r0
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	1ad3      	subs	r3, r2, r3
 800c54e:	2b02      	cmp	r3, #2
 800c550:	d901      	bls.n	800c556 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800c552:	2303      	movs	r3, #3
 800c554:	e180      	b.n	800c858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c556:	4b1d      	ldr	r3, [pc, #116]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f003 0302 	and.w	r3, r3, #2
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d1f0      	bne.n	800c544 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f003 0308 	and.w	r3, r3, #8
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d03a      	beq.n	800c5e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	699b      	ldr	r3, [r3, #24]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d019      	beq.n	800c5aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c576:	4b17      	ldr	r3, [pc, #92]	; (800c5d4 <HAL_RCC_OscConfig+0x274>)
 800c578:	2201      	movs	r2, #1
 800c57a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c57c:	f7fe fb02 	bl	800ab84 <HAL_GetTick>
 800c580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c582:	e008      	b.n	800c596 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c584:	f7fe fafe 	bl	800ab84 <HAL_GetTick>
 800c588:	4602      	mov	r2, r0
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	1ad3      	subs	r3, r2, r3
 800c58e:	2b02      	cmp	r3, #2
 800c590:	d901      	bls.n	800c596 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800c592:	2303      	movs	r3, #3
 800c594:	e160      	b.n	800c858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c596:	4b0d      	ldr	r3, [pc, #52]	; (800c5cc <HAL_RCC_OscConfig+0x26c>)
 800c598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c59a:	f003 0302 	and.w	r3, r3, #2
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d0f0      	beq.n	800c584 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800c5a2:	2001      	movs	r0, #1
 800c5a4:	f000 fad0 	bl	800cb48 <RCC_Delay>
 800c5a8:	e01c      	b.n	800c5e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c5aa:	4b0a      	ldr	r3, [pc, #40]	; (800c5d4 <HAL_RCC_OscConfig+0x274>)
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c5b0:	f7fe fae8 	bl	800ab84 <HAL_GetTick>
 800c5b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c5b6:	e00f      	b.n	800c5d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c5b8:	f7fe fae4 	bl	800ab84 <HAL_GetTick>
 800c5bc:	4602      	mov	r2, r0
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	1ad3      	subs	r3, r2, r3
 800c5c2:	2b02      	cmp	r3, #2
 800c5c4:	d908      	bls.n	800c5d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800c5c6:	2303      	movs	r3, #3
 800c5c8:	e146      	b.n	800c858 <HAL_RCC_OscConfig+0x4f8>
 800c5ca:	bf00      	nop
 800c5cc:	40021000 	.word	0x40021000
 800c5d0:	42420000 	.word	0x42420000
 800c5d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c5d8:	4b92      	ldr	r3, [pc, #584]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5dc:	f003 0302 	and.w	r3, r3, #2
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d1e9      	bne.n	800c5b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f003 0304 	and.w	r3, r3, #4
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f000 80a6 	beq.w	800c73e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c5f6:	4b8b      	ldr	r3, [pc, #556]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c5f8:	69db      	ldr	r3, [r3, #28]
 800c5fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d10d      	bne.n	800c61e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c602:	4b88      	ldr	r3, [pc, #544]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c604:	69db      	ldr	r3, [r3, #28]
 800c606:	4a87      	ldr	r2, [pc, #540]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c60c:	61d3      	str	r3, [r2, #28]
 800c60e:	4b85      	ldr	r3, [pc, #532]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c610:	69db      	ldr	r3, [r3, #28]
 800c612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c616:	60bb      	str	r3, [r7, #8]
 800c618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c61a:	2301      	movs	r3, #1
 800c61c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c61e:	4b82      	ldr	r3, [pc, #520]	; (800c828 <HAL_RCC_OscConfig+0x4c8>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c626:	2b00      	cmp	r3, #0
 800c628:	d118      	bne.n	800c65c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c62a:	4b7f      	ldr	r3, [pc, #508]	; (800c828 <HAL_RCC_OscConfig+0x4c8>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4a7e      	ldr	r2, [pc, #504]	; (800c828 <HAL_RCC_OscConfig+0x4c8>)
 800c630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c636:	f7fe faa5 	bl	800ab84 <HAL_GetTick>
 800c63a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c63c:	e008      	b.n	800c650 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c63e:	f7fe faa1 	bl	800ab84 <HAL_GetTick>
 800c642:	4602      	mov	r2, r0
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	1ad3      	subs	r3, r2, r3
 800c648:	2b64      	cmp	r3, #100	; 0x64
 800c64a:	d901      	bls.n	800c650 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800c64c:	2303      	movs	r3, #3
 800c64e:	e103      	b.n	800c858 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c650:	4b75      	ldr	r3, [pc, #468]	; (800c828 <HAL_RCC_OscConfig+0x4c8>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d0f0      	beq.n	800c63e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	68db      	ldr	r3, [r3, #12]
 800c660:	2b01      	cmp	r3, #1
 800c662:	d106      	bne.n	800c672 <HAL_RCC_OscConfig+0x312>
 800c664:	4b6f      	ldr	r3, [pc, #444]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c666:	6a1b      	ldr	r3, [r3, #32]
 800c668:	4a6e      	ldr	r2, [pc, #440]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c66a:	f043 0301 	orr.w	r3, r3, #1
 800c66e:	6213      	str	r3, [r2, #32]
 800c670:	e02d      	b.n	800c6ce <HAL_RCC_OscConfig+0x36e>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d10c      	bne.n	800c694 <HAL_RCC_OscConfig+0x334>
 800c67a:	4b6a      	ldr	r3, [pc, #424]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c67c:	6a1b      	ldr	r3, [r3, #32]
 800c67e:	4a69      	ldr	r2, [pc, #420]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c680:	f023 0301 	bic.w	r3, r3, #1
 800c684:	6213      	str	r3, [r2, #32]
 800c686:	4b67      	ldr	r3, [pc, #412]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c688:	6a1b      	ldr	r3, [r3, #32]
 800c68a:	4a66      	ldr	r2, [pc, #408]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c68c:	f023 0304 	bic.w	r3, r3, #4
 800c690:	6213      	str	r3, [r2, #32]
 800c692:	e01c      	b.n	800c6ce <HAL_RCC_OscConfig+0x36e>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	68db      	ldr	r3, [r3, #12]
 800c698:	2b05      	cmp	r3, #5
 800c69a:	d10c      	bne.n	800c6b6 <HAL_RCC_OscConfig+0x356>
 800c69c:	4b61      	ldr	r3, [pc, #388]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c69e:	6a1b      	ldr	r3, [r3, #32]
 800c6a0:	4a60      	ldr	r2, [pc, #384]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c6a2:	f043 0304 	orr.w	r3, r3, #4
 800c6a6:	6213      	str	r3, [r2, #32]
 800c6a8:	4b5e      	ldr	r3, [pc, #376]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c6aa:	6a1b      	ldr	r3, [r3, #32]
 800c6ac:	4a5d      	ldr	r2, [pc, #372]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c6ae:	f043 0301 	orr.w	r3, r3, #1
 800c6b2:	6213      	str	r3, [r2, #32]
 800c6b4:	e00b      	b.n	800c6ce <HAL_RCC_OscConfig+0x36e>
 800c6b6:	4b5b      	ldr	r3, [pc, #364]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c6b8:	6a1b      	ldr	r3, [r3, #32]
 800c6ba:	4a5a      	ldr	r2, [pc, #360]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c6bc:	f023 0301 	bic.w	r3, r3, #1
 800c6c0:	6213      	str	r3, [r2, #32]
 800c6c2:	4b58      	ldr	r3, [pc, #352]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c6c4:	6a1b      	ldr	r3, [r3, #32]
 800c6c6:	4a57      	ldr	r2, [pc, #348]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c6c8:	f023 0304 	bic.w	r3, r3, #4
 800c6cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	68db      	ldr	r3, [r3, #12]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d015      	beq.n	800c702 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c6d6:	f7fe fa55 	bl	800ab84 <HAL_GetTick>
 800c6da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c6dc:	e00a      	b.n	800c6f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6de:	f7fe fa51 	bl	800ab84 <HAL_GetTick>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	1ad3      	subs	r3, r2, r3
 800c6e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d901      	bls.n	800c6f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	e0b1      	b.n	800c858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c6f4:	4b4b      	ldr	r3, [pc, #300]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c6f6:	6a1b      	ldr	r3, [r3, #32]
 800c6f8:	f003 0302 	and.w	r3, r3, #2
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d0ee      	beq.n	800c6de <HAL_RCC_OscConfig+0x37e>
 800c700:	e014      	b.n	800c72c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c702:	f7fe fa3f 	bl	800ab84 <HAL_GetTick>
 800c706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c708:	e00a      	b.n	800c720 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c70a:	f7fe fa3b 	bl	800ab84 <HAL_GetTick>
 800c70e:	4602      	mov	r2, r0
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	1ad3      	subs	r3, r2, r3
 800c714:	f241 3288 	movw	r2, #5000	; 0x1388
 800c718:	4293      	cmp	r3, r2
 800c71a:	d901      	bls.n	800c720 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800c71c:	2303      	movs	r3, #3
 800c71e:	e09b      	b.n	800c858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c720:	4b40      	ldr	r3, [pc, #256]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c722:	6a1b      	ldr	r3, [r3, #32]
 800c724:	f003 0302 	and.w	r3, r3, #2
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d1ee      	bne.n	800c70a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800c72c:	7dfb      	ldrb	r3, [r7, #23]
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d105      	bne.n	800c73e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c732:	4b3c      	ldr	r3, [pc, #240]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c734:	69db      	ldr	r3, [r3, #28]
 800c736:	4a3b      	ldr	r2, [pc, #236]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c73c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	69db      	ldr	r3, [r3, #28]
 800c742:	2b00      	cmp	r3, #0
 800c744:	f000 8087 	beq.w	800c856 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c748:	4b36      	ldr	r3, [pc, #216]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	f003 030c 	and.w	r3, r3, #12
 800c750:	2b08      	cmp	r3, #8
 800c752:	d061      	beq.n	800c818 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	69db      	ldr	r3, [r3, #28]
 800c758:	2b02      	cmp	r3, #2
 800c75a:	d146      	bne.n	800c7ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c75c:	4b33      	ldr	r3, [pc, #204]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c75e:	2200      	movs	r2, #0
 800c760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c762:	f7fe fa0f 	bl	800ab84 <HAL_GetTick>
 800c766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c768:	e008      	b.n	800c77c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c76a:	f7fe fa0b 	bl	800ab84 <HAL_GetTick>
 800c76e:	4602      	mov	r2, r0
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	1ad3      	subs	r3, r2, r3
 800c774:	2b02      	cmp	r3, #2
 800c776:	d901      	bls.n	800c77c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800c778:	2303      	movs	r3, #3
 800c77a:	e06d      	b.n	800c858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c77c:	4b29      	ldr	r3, [pc, #164]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c784:	2b00      	cmp	r3, #0
 800c786:	d1f0      	bne.n	800c76a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6a1b      	ldr	r3, [r3, #32]
 800c78c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c790:	d108      	bne.n	800c7a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800c792:	4b24      	ldr	r3, [pc, #144]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	689b      	ldr	r3, [r3, #8]
 800c79e:	4921      	ldr	r1, [pc, #132]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c7a4:	4b1f      	ldr	r3, [pc, #124]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a19      	ldr	r1, [r3, #32]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b4:	430b      	orrs	r3, r1
 800c7b6:	491b      	ldr	r1, [pc, #108]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c7bc:	4b1b      	ldr	r3, [pc, #108]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c7be:	2201      	movs	r2, #1
 800c7c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c7c2:	f7fe f9df 	bl	800ab84 <HAL_GetTick>
 800c7c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c7c8:	e008      	b.n	800c7dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7ca:	f7fe f9db 	bl	800ab84 <HAL_GetTick>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	1ad3      	subs	r3, r2, r3
 800c7d4:	2b02      	cmp	r3, #2
 800c7d6:	d901      	bls.n	800c7dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800c7d8:	2303      	movs	r3, #3
 800c7da:	e03d      	b.n	800c858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c7dc:	4b11      	ldr	r3, [pc, #68]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d0f0      	beq.n	800c7ca <HAL_RCC_OscConfig+0x46a>
 800c7e8:	e035      	b.n	800c856 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c7ea:	4b10      	ldr	r3, [pc, #64]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c7f0:	f7fe f9c8 	bl	800ab84 <HAL_GetTick>
 800c7f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c7f6:	e008      	b.n	800c80a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7f8:	f7fe f9c4 	bl	800ab84 <HAL_GetTick>
 800c7fc:	4602      	mov	r2, r0
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	1ad3      	subs	r3, r2, r3
 800c802:	2b02      	cmp	r3, #2
 800c804:	d901      	bls.n	800c80a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800c806:	2303      	movs	r3, #3
 800c808:	e026      	b.n	800c858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c80a:	4b06      	ldr	r3, [pc, #24]	; (800c824 <HAL_RCC_OscConfig+0x4c4>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c812:	2b00      	cmp	r3, #0
 800c814:	d1f0      	bne.n	800c7f8 <HAL_RCC_OscConfig+0x498>
 800c816:	e01e      	b.n	800c856 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	69db      	ldr	r3, [r3, #28]
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d107      	bne.n	800c830 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800c820:	2301      	movs	r3, #1
 800c822:	e019      	b.n	800c858 <HAL_RCC_OscConfig+0x4f8>
 800c824:	40021000 	.word	0x40021000
 800c828:	40007000 	.word	0x40007000
 800c82c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800c830:	4b0b      	ldr	r3, [pc, #44]	; (800c860 <HAL_RCC_OscConfig+0x500>)
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6a1b      	ldr	r3, [r3, #32]
 800c840:	429a      	cmp	r2, r3
 800c842:	d106      	bne.n	800c852 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c84e:	429a      	cmp	r2, r3
 800c850:	d001      	beq.n	800c856 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800c852:	2301      	movs	r3, #1
 800c854:	e000      	b.n	800c858 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800c856:	2300      	movs	r3, #0
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3718      	adds	r7, #24
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	40021000 	.word	0x40021000

0800c864 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d101      	bne.n	800c878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c874:	2301      	movs	r3, #1
 800c876:	e0d0      	b.n	800ca1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c878:	4b6a      	ldr	r3, [pc, #424]	; (800ca24 <HAL_RCC_ClockConfig+0x1c0>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f003 0307 	and.w	r3, r3, #7
 800c880:	683a      	ldr	r2, [r7, #0]
 800c882:	429a      	cmp	r2, r3
 800c884:	d910      	bls.n	800c8a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c886:	4b67      	ldr	r3, [pc, #412]	; (800ca24 <HAL_RCC_ClockConfig+0x1c0>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f023 0207 	bic.w	r2, r3, #7
 800c88e:	4965      	ldr	r1, [pc, #404]	; (800ca24 <HAL_RCC_ClockConfig+0x1c0>)
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	4313      	orrs	r3, r2
 800c894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c896:	4b63      	ldr	r3, [pc, #396]	; (800ca24 <HAL_RCC_ClockConfig+0x1c0>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f003 0307 	and.w	r3, r3, #7
 800c89e:	683a      	ldr	r2, [r7, #0]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d001      	beq.n	800c8a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	e0b8      	b.n	800ca1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f003 0302 	and.w	r3, r3, #2
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d020      	beq.n	800c8f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f003 0304 	and.w	r3, r3, #4
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d005      	beq.n	800c8cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c8c0:	4b59      	ldr	r3, [pc, #356]	; (800ca28 <HAL_RCC_ClockConfig+0x1c4>)
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	4a58      	ldr	r2, [pc, #352]	; (800ca28 <HAL_RCC_ClockConfig+0x1c4>)
 800c8c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800c8ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f003 0308 	and.w	r3, r3, #8
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d005      	beq.n	800c8e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c8d8:	4b53      	ldr	r3, [pc, #332]	; (800ca28 <HAL_RCC_ClockConfig+0x1c4>)
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	4a52      	ldr	r2, [pc, #328]	; (800ca28 <HAL_RCC_ClockConfig+0x1c4>)
 800c8de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800c8e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c8e4:	4b50      	ldr	r3, [pc, #320]	; (800ca28 <HAL_RCC_ClockConfig+0x1c4>)
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	689b      	ldr	r3, [r3, #8]
 800c8f0:	494d      	ldr	r1, [pc, #308]	; (800ca28 <HAL_RCC_ClockConfig+0x1c4>)
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f003 0301 	and.w	r3, r3, #1
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d040      	beq.n	800c984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	2b01      	cmp	r3, #1
 800c908:	d107      	bne.n	800c91a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c90a:	4b47      	ldr	r3, [pc, #284]	; (800ca28 <HAL_RCC_ClockConfig+0x1c4>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c912:	2b00      	cmp	r3, #0
 800c914:	d115      	bne.n	800c942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c916:	2301      	movs	r3, #1
 800c918:	e07f      	b.n	800ca1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	2b02      	cmp	r3, #2
 800c920:	d107      	bne.n	800c932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c922:	4b41      	ldr	r3, [pc, #260]	; (800ca28 <HAL_RCC_ClockConfig+0x1c4>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d109      	bne.n	800c942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c92e:	2301      	movs	r3, #1
 800c930:	e073      	b.n	800ca1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c932:	4b3d      	ldr	r3, [pc, #244]	; (800ca28 <HAL_RCC_ClockConfig+0x1c4>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f003 0302 	and.w	r3, r3, #2
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d101      	bne.n	800c942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c93e:	2301      	movs	r3, #1
 800c940:	e06b      	b.n	800ca1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c942:	4b39      	ldr	r3, [pc, #228]	; (800ca28 <HAL_RCC_ClockConfig+0x1c4>)
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	f023 0203 	bic.w	r2, r3, #3
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	4936      	ldr	r1, [pc, #216]	; (800ca28 <HAL_RCC_ClockConfig+0x1c4>)
 800c950:	4313      	orrs	r3, r2
 800c952:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c954:	f7fe f916 	bl	800ab84 <HAL_GetTick>
 800c958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c95a:	e00a      	b.n	800c972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c95c:	f7fe f912 	bl	800ab84 <HAL_GetTick>
 800c960:	4602      	mov	r2, r0
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	1ad3      	subs	r3, r2, r3
 800c966:	f241 3288 	movw	r2, #5000	; 0x1388
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d901      	bls.n	800c972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c96e:	2303      	movs	r3, #3
 800c970:	e053      	b.n	800ca1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c972:	4b2d      	ldr	r3, [pc, #180]	; (800ca28 <HAL_RCC_ClockConfig+0x1c4>)
 800c974:	685b      	ldr	r3, [r3, #4]
 800c976:	f003 020c 	and.w	r2, r3, #12
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	429a      	cmp	r2, r3
 800c982:	d1eb      	bne.n	800c95c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c984:	4b27      	ldr	r3, [pc, #156]	; (800ca24 <HAL_RCC_ClockConfig+0x1c0>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f003 0307 	and.w	r3, r3, #7
 800c98c:	683a      	ldr	r2, [r7, #0]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d210      	bcs.n	800c9b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c992:	4b24      	ldr	r3, [pc, #144]	; (800ca24 <HAL_RCC_ClockConfig+0x1c0>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f023 0207 	bic.w	r2, r3, #7
 800c99a:	4922      	ldr	r1, [pc, #136]	; (800ca24 <HAL_RCC_ClockConfig+0x1c0>)
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c9a2:	4b20      	ldr	r3, [pc, #128]	; (800ca24 <HAL_RCC_ClockConfig+0x1c0>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f003 0307 	and.w	r3, r3, #7
 800c9aa:	683a      	ldr	r2, [r7, #0]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d001      	beq.n	800c9b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	e032      	b.n	800ca1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f003 0304 	and.w	r3, r3, #4
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d008      	beq.n	800c9d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c9c0:	4b19      	ldr	r3, [pc, #100]	; (800ca28 <HAL_RCC_ClockConfig+0x1c4>)
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	68db      	ldr	r3, [r3, #12]
 800c9cc:	4916      	ldr	r1, [pc, #88]	; (800ca28 <HAL_RCC_ClockConfig+0x1c4>)
 800c9ce:	4313      	orrs	r3, r2
 800c9d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f003 0308 	and.w	r3, r3, #8
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d009      	beq.n	800c9f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c9de:	4b12      	ldr	r3, [pc, #72]	; (800ca28 <HAL_RCC_ClockConfig+0x1c4>)
 800c9e0:	685b      	ldr	r3, [r3, #4]
 800c9e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	691b      	ldr	r3, [r3, #16]
 800c9ea:	00db      	lsls	r3, r3, #3
 800c9ec:	490e      	ldr	r1, [pc, #56]	; (800ca28 <HAL_RCC_ClockConfig+0x1c4>)
 800c9ee:	4313      	orrs	r3, r2
 800c9f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c9f2:	f000 f821 	bl	800ca38 <HAL_RCC_GetSysClockFreq>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	4b0b      	ldr	r3, [pc, #44]	; (800ca28 <HAL_RCC_ClockConfig+0x1c4>)
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	091b      	lsrs	r3, r3, #4
 800c9fe:	f003 030f 	and.w	r3, r3, #15
 800ca02:	490a      	ldr	r1, [pc, #40]	; (800ca2c <HAL_RCC_ClockConfig+0x1c8>)
 800ca04:	5ccb      	ldrb	r3, [r1, r3]
 800ca06:	fa22 f303 	lsr.w	r3, r2, r3
 800ca0a:	4a09      	ldr	r2, [pc, #36]	; (800ca30 <HAL_RCC_ClockConfig+0x1cc>)
 800ca0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ca0e:	4b09      	ldr	r3, [pc, #36]	; (800ca34 <HAL_RCC_ClockConfig+0x1d0>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7fe f874 	bl	800ab00 <HAL_InitTick>

  return HAL_OK;
 800ca18:	2300      	movs	r3, #0
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3710      	adds	r7, #16
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop
 800ca24:	40022000 	.word	0x40022000
 800ca28:	40021000 	.word	0x40021000
 800ca2c:	080128b8 	.word	0x080128b8
 800ca30:	200000f8 	.word	0x200000f8
 800ca34:	20000114 	.word	0x20000114

0800ca38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b087      	sub	sp, #28
 800ca3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	60fb      	str	r3, [r7, #12]
 800ca42:	2300      	movs	r3, #0
 800ca44:	60bb      	str	r3, [r7, #8]
 800ca46:	2300      	movs	r3, #0
 800ca48:	617b      	str	r3, [r7, #20]
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800ca52:	4b1e      	ldr	r3, [pc, #120]	; (800cacc <HAL_RCC_GetSysClockFreq+0x94>)
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	f003 030c 	and.w	r3, r3, #12
 800ca5e:	2b04      	cmp	r3, #4
 800ca60:	d002      	beq.n	800ca68 <HAL_RCC_GetSysClockFreq+0x30>
 800ca62:	2b08      	cmp	r3, #8
 800ca64:	d003      	beq.n	800ca6e <HAL_RCC_GetSysClockFreq+0x36>
 800ca66:	e027      	b.n	800cab8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ca68:	4b19      	ldr	r3, [pc, #100]	; (800cad0 <HAL_RCC_GetSysClockFreq+0x98>)
 800ca6a:	613b      	str	r3, [r7, #16]
      break;
 800ca6c:	e027      	b.n	800cabe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	0c9b      	lsrs	r3, r3, #18
 800ca72:	f003 030f 	and.w	r3, r3, #15
 800ca76:	4a17      	ldr	r2, [pc, #92]	; (800cad4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800ca78:	5cd3      	ldrb	r3, [r2, r3]
 800ca7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d010      	beq.n	800caa8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ca86:	4b11      	ldr	r3, [pc, #68]	; (800cacc <HAL_RCC_GetSysClockFreq+0x94>)
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	0c5b      	lsrs	r3, r3, #17
 800ca8c:	f003 0301 	and.w	r3, r3, #1
 800ca90:	4a11      	ldr	r2, [pc, #68]	; (800cad8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800ca92:	5cd3      	ldrb	r3, [r2, r3]
 800ca94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	4a0d      	ldr	r2, [pc, #52]	; (800cad0 <HAL_RCC_GetSysClockFreq+0x98>)
 800ca9a:	fb03 f202 	mul.w	r2, r3, r2
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800caa4:	617b      	str	r3, [r7, #20]
 800caa6:	e004      	b.n	800cab2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	4a0c      	ldr	r2, [pc, #48]	; (800cadc <HAL_RCC_GetSysClockFreq+0xa4>)
 800caac:	fb02 f303 	mul.w	r3, r2, r3
 800cab0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	613b      	str	r3, [r7, #16]
      break;
 800cab6:	e002      	b.n	800cabe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800cab8:	4b09      	ldr	r3, [pc, #36]	; (800cae0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800caba:	613b      	str	r3, [r7, #16]
      break;
 800cabc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cabe:	693b      	ldr	r3, [r7, #16]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	371c      	adds	r7, #28
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bc80      	pop	{r7}
 800cac8:	4770      	bx	lr
 800caca:	bf00      	nop
 800cacc:	40021000 	.word	0x40021000
 800cad0:	00f42400 	.word	0x00f42400
 800cad4:	080128d0 	.word	0x080128d0
 800cad8:	080128e0 	.word	0x080128e0
 800cadc:	003d0900 	.word	0x003d0900
 800cae0:	007a1200 	.word	0x007a1200

0800cae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cae4:	b480      	push	{r7}
 800cae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cae8:	4b02      	ldr	r3, [pc, #8]	; (800caf4 <HAL_RCC_GetHCLKFreq+0x10>)
 800caea:	681b      	ldr	r3, [r3, #0]
}
 800caec:	4618      	mov	r0, r3
 800caee:	46bd      	mov	sp, r7
 800caf0:	bc80      	pop	{r7}
 800caf2:	4770      	bx	lr
 800caf4:	200000f8 	.word	0x200000f8

0800caf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cafc:	f7ff fff2 	bl	800cae4 <HAL_RCC_GetHCLKFreq>
 800cb00:	4602      	mov	r2, r0
 800cb02:	4b05      	ldr	r3, [pc, #20]	; (800cb18 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	0a1b      	lsrs	r3, r3, #8
 800cb08:	f003 0307 	and.w	r3, r3, #7
 800cb0c:	4903      	ldr	r1, [pc, #12]	; (800cb1c <HAL_RCC_GetPCLK1Freq+0x24>)
 800cb0e:	5ccb      	ldrb	r3, [r1, r3]
 800cb10:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	bd80      	pop	{r7, pc}
 800cb18:	40021000 	.word	0x40021000
 800cb1c:	080128c8 	.word	0x080128c8

0800cb20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800cb24:	f7ff ffde 	bl	800cae4 <HAL_RCC_GetHCLKFreq>
 800cb28:	4602      	mov	r2, r0
 800cb2a:	4b05      	ldr	r3, [pc, #20]	; (800cb40 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	0adb      	lsrs	r3, r3, #11
 800cb30:	f003 0307 	and.w	r3, r3, #7
 800cb34:	4903      	ldr	r1, [pc, #12]	; (800cb44 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cb36:	5ccb      	ldrb	r3, [r1, r3]
 800cb38:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	bd80      	pop	{r7, pc}
 800cb40:	40021000 	.word	0x40021000
 800cb44:	080128c8 	.word	0x080128c8

0800cb48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b085      	sub	sp, #20
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800cb50:	4b0a      	ldr	r3, [pc, #40]	; (800cb7c <RCC_Delay+0x34>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4a0a      	ldr	r2, [pc, #40]	; (800cb80 <RCC_Delay+0x38>)
 800cb56:	fba2 2303 	umull	r2, r3, r2, r3
 800cb5a:	0a5b      	lsrs	r3, r3, #9
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	fb02 f303 	mul.w	r3, r2, r3
 800cb62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800cb64:	bf00      	nop
  }
  while (Delay --);
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	1e5a      	subs	r2, r3, #1
 800cb6a:	60fa      	str	r2, [r7, #12]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d1f9      	bne.n	800cb64 <RCC_Delay+0x1c>
}
 800cb70:	bf00      	nop
 800cb72:	bf00      	nop
 800cb74:	3714      	adds	r7, #20
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bc80      	pop	{r7}
 800cb7a:	4770      	bx	lr
 800cb7c:	200000f8 	.word	0x200000f8
 800cb80:	10624dd3 	.word	0x10624dd3

0800cb84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d101      	bne.n	800cb96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb92:	2301      	movs	r3, #1
 800cb94:	e042      	b.n	800cc1c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d106      	bne.n	800cbb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2200      	movs	r2, #0
 800cba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f7fd f94e 	bl	8009e4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2224      	movs	r2, #36	; 0x24
 800cbb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	68da      	ldr	r2, [r3, #12]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cbc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 fe57 	bl	800d87c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	691a      	ldr	r2, [r3, #16]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cbdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	695a      	ldr	r2, [r3, #20]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cbec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	68da      	ldr	r2, [r3, #12]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cbfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2200      	movs	r2, #0
 800cc02:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2220      	movs	r2, #32
 800cc08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2220      	movs	r2, #32
 800cc10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cc1a:	2300      	movs	r3, #0
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3708      	adds	r7, #8
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b08a      	sub	sp, #40	; 0x28
 800cc28:	af02      	add	r7, sp, #8
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	603b      	str	r3, [r7, #0]
 800cc30:	4613      	mov	r3, r2
 800cc32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cc34:	2300      	movs	r3, #0
 800cc36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	2b20      	cmp	r3, #32
 800cc42:	d16d      	bne.n	800cd20 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d002      	beq.n	800cc50 <HAL_UART_Transmit+0x2c>
 800cc4a:	88fb      	ldrh	r3, [r7, #6]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d101      	bne.n	800cc54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cc50:	2301      	movs	r3, #1
 800cc52:	e066      	b.n	800cd22 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2200      	movs	r2, #0
 800cc58:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2221      	movs	r2, #33	; 0x21
 800cc5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cc62:	f7fd ff8f 	bl	800ab84 <HAL_GetTick>
 800cc66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	88fa      	ldrh	r2, [r7, #6]
 800cc6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	88fa      	ldrh	r2, [r7, #6]
 800cc72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc7c:	d108      	bne.n	800cc90 <HAL_UART_Transmit+0x6c>
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	691b      	ldr	r3, [r3, #16]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d104      	bne.n	800cc90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cc86:	2300      	movs	r3, #0
 800cc88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	61bb      	str	r3, [r7, #24]
 800cc8e:	e003      	b.n	800cc98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cc94:	2300      	movs	r3, #0
 800cc96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cc98:	e02a      	b.n	800ccf0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	9300      	str	r3, [sp, #0]
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	2200      	movs	r2, #0
 800cca2:	2180      	movs	r1, #128	; 0x80
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	f000 fba6 	bl	800d3f6 <UART_WaitOnFlagUntilTimeout>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d001      	beq.n	800ccb4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800ccb0:	2303      	movs	r3, #3
 800ccb2:	e036      	b.n	800cd22 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800ccb4:	69fb      	ldr	r3, [r7, #28]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d10b      	bne.n	800ccd2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	881b      	ldrh	r3, [r3, #0]
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ccc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	3302      	adds	r3, #2
 800ccce:	61bb      	str	r3, [r7, #24]
 800ccd0:	e007      	b.n	800cce2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ccd2:	69fb      	ldr	r3, [r7, #28]
 800ccd4:	781a      	ldrb	r2, [r3, #0]
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	3301      	adds	r3, #1
 800cce0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	3b01      	subs	r3, #1
 800ccea:	b29a      	uxth	r2, r3
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d1cf      	bne.n	800cc9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	9300      	str	r3, [sp, #0]
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	2200      	movs	r2, #0
 800cd02:	2140      	movs	r1, #64	; 0x40
 800cd04:	68f8      	ldr	r0, [r7, #12]
 800cd06:	f000 fb76 	bl	800d3f6 <UART_WaitOnFlagUntilTimeout>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d001      	beq.n	800cd14 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800cd10:	2303      	movs	r3, #3
 800cd12:	e006      	b.n	800cd22 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2220      	movs	r2, #32
 800cd18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	e000      	b.n	800cd22 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800cd20:	2302      	movs	r3, #2
  }
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3720      	adds	r7, #32
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}

0800cd2a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd2a:	b580      	push	{r7, lr}
 800cd2c:	b08a      	sub	sp, #40	; 0x28
 800cd2e:	af02      	add	r7, sp, #8
 800cd30:	60f8      	str	r0, [r7, #12]
 800cd32:	60b9      	str	r1, [r7, #8]
 800cd34:	603b      	str	r3, [r7, #0]
 800cd36:	4613      	mov	r3, r2
 800cd38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	2b20      	cmp	r3, #32
 800cd48:	d17c      	bne.n	800ce44 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d002      	beq.n	800cd56 <HAL_UART_Receive+0x2c>
 800cd50:	88fb      	ldrh	r3, [r7, #6]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d101      	bne.n	800cd5a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800cd56:	2301      	movs	r3, #1
 800cd58:	e075      	b.n	800ce46 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2222      	movs	r2, #34	; 0x22
 800cd64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cd6e:	f7fd ff09 	bl	800ab84 <HAL_GetTick>
 800cd72:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	88fa      	ldrh	r2, [r7, #6]
 800cd78:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	88fa      	ldrh	r2, [r7, #6]
 800cd7e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	689b      	ldr	r3, [r3, #8]
 800cd84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd88:	d108      	bne.n	800cd9c <HAL_UART_Receive+0x72>
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	691b      	ldr	r3, [r3, #16]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d104      	bne.n	800cd9c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800cd92:	2300      	movs	r3, #0
 800cd94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	61bb      	str	r3, [r7, #24]
 800cd9a:	e003      	b.n	800cda4 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cda0:	2300      	movs	r3, #0
 800cda2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800cda4:	e043      	b.n	800ce2e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	9300      	str	r3, [sp, #0]
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	2200      	movs	r2, #0
 800cdae:	2120      	movs	r1, #32
 800cdb0:	68f8      	ldr	r0, [r7, #12]
 800cdb2:	f000 fb20 	bl	800d3f6 <UART_WaitOnFlagUntilTimeout>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d001      	beq.n	800cdc0 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800cdbc:	2303      	movs	r3, #3
 800cdbe:	e042      	b.n	800ce46 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800cdc0:	69fb      	ldr	r3, [r7, #28]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d10c      	bne.n	800cde0 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdd2:	b29a      	uxth	r2, r3
 800cdd4:	69bb      	ldr	r3, [r7, #24]
 800cdd6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800cdd8:	69bb      	ldr	r3, [r7, #24]
 800cdda:	3302      	adds	r3, #2
 800cddc:	61bb      	str	r3, [r7, #24]
 800cdde:	e01f      	b.n	800ce20 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	689b      	ldr	r3, [r3, #8]
 800cde4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cde8:	d007      	beq.n	800cdfa <HAL_UART_Receive+0xd0>
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	689b      	ldr	r3, [r3, #8]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d10a      	bne.n	800ce08 <HAL_UART_Receive+0xde>
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	691b      	ldr	r3, [r3, #16]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d106      	bne.n	800ce08 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	b2da      	uxtb	r2, r3
 800ce02:	69fb      	ldr	r3, [r7, #28]
 800ce04:	701a      	strb	r2, [r3, #0]
 800ce06:	e008      	b.n	800ce1a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	b2db      	uxtb	r3, r3
 800ce10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce14:	b2da      	uxtb	r2, r3
 800ce16:	69fb      	ldr	r3, [r7, #28]
 800ce18:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800ce1a:	69fb      	ldr	r3, [r7, #28]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	3b01      	subs	r3, #1
 800ce28:	b29a      	uxth	r2, r3
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d1b6      	bne.n	800cda6 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2220      	movs	r2, #32
 800ce3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800ce40:	2300      	movs	r3, #0
 800ce42:	e000      	b.n	800ce46 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ce44:	2302      	movs	r3, #2
  }
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3720      	adds	r7, #32
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}

0800ce4e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b084      	sub	sp, #16
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	60f8      	str	r0, [r7, #12]
 800ce56:	60b9      	str	r1, [r7, #8]
 800ce58:	4613      	mov	r3, r2
 800ce5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce62:	b2db      	uxtb	r3, r3
 800ce64:	2b20      	cmp	r3, #32
 800ce66:	d112      	bne.n	800ce8e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d002      	beq.n	800ce74 <HAL_UART_Receive_IT+0x26>
 800ce6e:	88fb      	ldrh	r3, [r7, #6]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d101      	bne.n	800ce78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ce74:	2301      	movs	r3, #1
 800ce76:	e00b      	b.n	800ce90 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ce7e:	88fb      	ldrh	r3, [r7, #6]
 800ce80:	461a      	mov	r2, r3
 800ce82:	68b9      	ldr	r1, [r7, #8]
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f000 fb24 	bl	800d4d2 <UART_Start_Receive_IT>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	e000      	b.n	800ce90 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800ce8e:	2302      	movs	r3, #2
  }
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3710      	adds	r7, #16
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}

0800ce98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b0ba      	sub	sp, #232	; 0xe8
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	68db      	ldr	r3, [r3, #12]
 800ceb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	695b      	ldr	r3, [r3, #20]
 800ceba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800cebe:	2300      	movs	r3, #0
 800cec0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800cec4:	2300      	movs	r3, #0
 800cec6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ceca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cece:	f003 030f 	and.w	r3, r3, #15
 800ced2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ced6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d10f      	bne.n	800cefe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cee2:	f003 0320 	and.w	r3, r3, #32
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d009      	beq.n	800cefe <HAL_UART_IRQHandler+0x66>
 800ceea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ceee:	f003 0320 	and.w	r3, r3, #32
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d003      	beq.n	800cefe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 fc01 	bl	800d6fe <UART_Receive_IT>
      return;
 800cefc:	e25b      	b.n	800d3b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800cefe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	f000 80de 	beq.w	800d0c4 <HAL_UART_IRQHandler+0x22c>
 800cf08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf0c:	f003 0301 	and.w	r3, r3, #1
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d106      	bne.n	800cf22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800cf14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	f000 80d1 	beq.w	800d0c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800cf22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf26:	f003 0301 	and.w	r3, r3, #1
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d00b      	beq.n	800cf46 <HAL_UART_IRQHandler+0xae>
 800cf2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d005      	beq.n	800cf46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf3e:	f043 0201 	orr.w	r2, r3, #1
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cf46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf4a:	f003 0304 	and.w	r3, r3, #4
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d00b      	beq.n	800cf6a <HAL_UART_IRQHandler+0xd2>
 800cf52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf56:	f003 0301 	and.w	r3, r3, #1
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d005      	beq.n	800cf6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf62:	f043 0202 	orr.w	r2, r3, #2
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cf6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf6e:	f003 0302 	and.w	r3, r3, #2
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d00b      	beq.n	800cf8e <HAL_UART_IRQHandler+0xf6>
 800cf76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf7a:	f003 0301 	and.w	r3, r3, #1
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d005      	beq.n	800cf8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf86:	f043 0204 	orr.w	r2, r3, #4
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800cf8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf92:	f003 0308 	and.w	r3, r3, #8
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d011      	beq.n	800cfbe <HAL_UART_IRQHandler+0x126>
 800cf9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf9e:	f003 0320 	and.w	r3, r3, #32
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d105      	bne.n	800cfb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800cfa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cfaa:	f003 0301 	and.w	r3, r3, #1
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d005      	beq.n	800cfbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfb6:	f043 0208 	orr.w	r2, r3, #8
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	f000 81f2 	beq.w	800d3ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cfc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfcc:	f003 0320 	and.w	r3, r3, #32
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d008      	beq.n	800cfe6 <HAL_UART_IRQHandler+0x14e>
 800cfd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfd8:	f003 0320 	and.w	r3, r3, #32
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d002      	beq.n	800cfe6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f000 fb8c 	bl	800d6fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	695b      	ldr	r3, [r3, #20]
 800cfec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	bf14      	ite	ne
 800cff4:	2301      	movne	r3, #1
 800cff6:	2300      	moveq	r3, #0
 800cff8:	b2db      	uxtb	r3, r3
 800cffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d002:	f003 0308 	and.w	r3, r3, #8
 800d006:	2b00      	cmp	r3, #0
 800d008:	d103      	bne.n	800d012 <HAL_UART_IRQHandler+0x17a>
 800d00a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d04f      	beq.n	800d0b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f000 fa96 	bl	800d544 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	695b      	ldr	r3, [r3, #20]
 800d01e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d022:	2b00      	cmp	r3, #0
 800d024:	d041      	beq.n	800d0aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	3314      	adds	r3, #20
 800d02c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d030:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d034:	e853 3f00 	ldrex	r3, [r3]
 800d038:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d03c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	3314      	adds	r3, #20
 800d04e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d052:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d056:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d05a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d05e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d062:	e841 2300 	strex	r3, r2, [r1]
 800d066:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d06a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d1d9      	bne.n	800d026 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d076:	2b00      	cmp	r3, #0
 800d078:	d013      	beq.n	800d0a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d07e:	4a7e      	ldr	r2, [pc, #504]	; (800d278 <HAL_UART_IRQHandler+0x3e0>)
 800d080:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d086:	4618      	mov	r0, r3
 800d088:	f7fd fef2 	bl	800ae70 <HAL_DMA_Abort_IT>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d016      	beq.n	800d0c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d09c:	4610      	mov	r0, r2
 800d09e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0a0:	e00e      	b.n	800d0c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f000 f993 	bl	800d3ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0a8:	e00a      	b.n	800d0c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f000 f98f 	bl	800d3ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0b0:	e006      	b.n	800d0c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 f98b 	bl	800d3ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800d0be:	e175      	b.n	800d3ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0c0:	bf00      	nop
    return;
 800d0c2:	e173      	b.n	800d3ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	f040 814f 	bne.w	800d36c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d0ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0d2:	f003 0310 	and.w	r3, r3, #16
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	f000 8148 	beq.w	800d36c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d0dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0e0:	f003 0310 	and.w	r3, r3, #16
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	f000 8141 	beq.w	800d36c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	60bb      	str	r3, [r7, #8]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	60bb      	str	r3, [r7, #8]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	685b      	ldr	r3, [r3, #4]
 800d0fc:	60bb      	str	r3, [r7, #8]
 800d0fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	695b      	ldr	r3, [r3, #20]
 800d106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	f000 80b6 	beq.w	800d27c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d11c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d120:	2b00      	cmp	r3, #0
 800d122:	f000 8145 	beq.w	800d3b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d12a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d12e:	429a      	cmp	r2, r3
 800d130:	f080 813e 	bcs.w	800d3b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d13a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d140:	699b      	ldr	r3, [r3, #24]
 800d142:	2b20      	cmp	r3, #32
 800d144:	f000 8088 	beq.w	800d258 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	330c      	adds	r3, #12
 800d14e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d152:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d156:	e853 3f00 	ldrex	r3, [r3]
 800d15a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d15e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d162:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d166:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	330c      	adds	r3, #12
 800d170:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d174:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d178:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d17c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d180:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d184:	e841 2300 	strex	r3, r2, [r1]
 800d188:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d18c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d190:	2b00      	cmp	r3, #0
 800d192:	d1d9      	bne.n	800d148 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	3314      	adds	r3, #20
 800d19a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d19c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d19e:	e853 3f00 	ldrex	r3, [r3]
 800d1a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d1a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d1a6:	f023 0301 	bic.w	r3, r3, #1
 800d1aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	3314      	adds	r3, #20
 800d1b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d1b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d1bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d1c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d1c4:	e841 2300 	strex	r3, r2, [r1]
 800d1c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d1ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d1e1      	bne.n	800d194 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	3314      	adds	r3, #20
 800d1d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1da:	e853 3f00 	ldrex	r3, [r3]
 800d1de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d1e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	3314      	adds	r3, #20
 800d1f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d1f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d1f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d1fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d1fc:	e841 2300 	strex	r3, r2, [r1]
 800d200:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d204:	2b00      	cmp	r3, #0
 800d206:	d1e3      	bne.n	800d1d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2220      	movs	r2, #32
 800d20c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2200      	movs	r2, #0
 800d214:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	330c      	adds	r3, #12
 800d21c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d21e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d220:	e853 3f00 	ldrex	r3, [r3]
 800d224:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d228:	f023 0310 	bic.w	r3, r3, #16
 800d22c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	330c      	adds	r3, #12
 800d236:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d23a:	65ba      	str	r2, [r7, #88]	; 0x58
 800d23c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d23e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d240:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d242:	e841 2300 	strex	r3, r2, [r1]
 800d246:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d1e3      	bne.n	800d216 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d252:	4618      	mov	r0, r3
 800d254:	f7fd fdd1 	bl	800adfa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2202      	movs	r2, #2
 800d25c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d266:	b29b      	uxth	r3, r3
 800d268:	1ad3      	subs	r3, r2, r3
 800d26a:	b29b      	uxth	r3, r3
 800d26c:	4619      	mov	r1, r3
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f000 f8b6 	bl	800d3e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d274:	e09c      	b.n	800d3b0 <HAL_UART_IRQHandler+0x518>
 800d276:	bf00      	nop
 800d278:	0800d609 	.word	0x0800d609
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d284:	b29b      	uxth	r3, r3
 800d286:	1ad3      	subs	r3, r2, r3
 800d288:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d290:	b29b      	uxth	r3, r3
 800d292:	2b00      	cmp	r3, #0
 800d294:	f000 808e 	beq.w	800d3b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800d298:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	f000 8089 	beq.w	800d3b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	330c      	adds	r3, #12
 800d2a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ac:	e853 3f00 	ldrex	r3, [r3]
 800d2b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d2b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	330c      	adds	r3, #12
 800d2c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d2c6:	647a      	str	r2, [r7, #68]	; 0x44
 800d2c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d2cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2ce:	e841 2300 	strex	r3, r2, [r1]
 800d2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d2d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d1e3      	bne.n	800d2a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	3314      	adds	r3, #20
 800d2e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e4:	e853 3f00 	ldrex	r3, [r3]
 800d2e8:	623b      	str	r3, [r7, #32]
   return(result);
 800d2ea:	6a3b      	ldr	r3, [r7, #32]
 800d2ec:	f023 0301 	bic.w	r3, r3, #1
 800d2f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	3314      	adds	r3, #20
 800d2fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d2fe:	633a      	str	r2, [r7, #48]	; 0x30
 800d300:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d306:	e841 2300 	strex	r3, r2, [r1]
 800d30a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d1e3      	bne.n	800d2da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2220      	movs	r2, #32
 800d316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2200      	movs	r2, #0
 800d31e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	330c      	adds	r3, #12
 800d326:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	e853 3f00 	ldrex	r3, [r3]
 800d32e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f023 0310 	bic.w	r3, r3, #16
 800d336:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	330c      	adds	r3, #12
 800d340:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d344:	61fa      	str	r2, [r7, #28]
 800d346:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d348:	69b9      	ldr	r1, [r7, #24]
 800d34a:	69fa      	ldr	r2, [r7, #28]
 800d34c:	e841 2300 	strex	r3, r2, [r1]
 800d350:	617b      	str	r3, [r7, #20]
   return(result);
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d1e3      	bne.n	800d320 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2202      	movs	r2, #2
 800d35c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d35e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d362:	4619      	mov	r1, r3
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f000 f83b 	bl	800d3e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d36a:	e023      	b.n	800d3b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d36c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d374:	2b00      	cmp	r3, #0
 800d376:	d009      	beq.n	800d38c <HAL_UART_IRQHandler+0x4f4>
 800d378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d37c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d380:	2b00      	cmp	r3, #0
 800d382:	d003      	beq.n	800d38c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 f953 	bl	800d630 <UART_Transmit_IT>
    return;
 800d38a:	e014      	b.n	800d3b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d38c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d394:	2b00      	cmp	r3, #0
 800d396:	d00e      	beq.n	800d3b6 <HAL_UART_IRQHandler+0x51e>
 800d398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d39c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d008      	beq.n	800d3b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f000 f992 	bl	800d6ce <UART_EndTransmit_IT>
    return;
 800d3aa:	e004      	b.n	800d3b6 <HAL_UART_IRQHandler+0x51e>
    return;
 800d3ac:	bf00      	nop
 800d3ae:	e002      	b.n	800d3b6 <HAL_UART_IRQHandler+0x51e>
      return;
 800d3b0:	bf00      	nop
 800d3b2:	e000      	b.n	800d3b6 <HAL_UART_IRQHandler+0x51e>
      return;
 800d3b4:	bf00      	nop
  }
}
 800d3b6:	37e8      	adds	r7, #232	; 0xe8
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b083      	sub	sp, #12
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d3c4:	bf00      	nop
 800d3c6:	370c      	adds	r7, #12
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bc80      	pop	{r7}
 800d3cc:	4770      	bx	lr

0800d3ce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d3ce:	b480      	push	{r7}
 800d3d0:	b083      	sub	sp, #12
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d3d6:	bf00      	nop
 800d3d8:	370c      	adds	r7, #12
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bc80      	pop	{r7}
 800d3de:	4770      	bx	lr

0800d3e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b083      	sub	sp, #12
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d3ec:	bf00      	nop
 800d3ee:	370c      	adds	r7, #12
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bc80      	pop	{r7}
 800d3f4:	4770      	bx	lr

0800d3f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d3f6:	b580      	push	{r7, lr}
 800d3f8:	b090      	sub	sp, #64	; 0x40
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	60f8      	str	r0, [r7, #12]
 800d3fe:	60b9      	str	r1, [r7, #8]
 800d400:	603b      	str	r3, [r7, #0]
 800d402:	4613      	mov	r3, r2
 800d404:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d406:	e050      	b.n	800d4aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d40e:	d04c      	beq.n	800d4aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d412:	2b00      	cmp	r3, #0
 800d414:	d007      	beq.n	800d426 <UART_WaitOnFlagUntilTimeout+0x30>
 800d416:	f7fd fbb5 	bl	800ab84 <HAL_GetTick>
 800d41a:	4602      	mov	r2, r0
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	1ad3      	subs	r3, r2, r3
 800d420:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d422:	429a      	cmp	r2, r3
 800d424:	d241      	bcs.n	800d4aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	330c      	adds	r3, #12
 800d42c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d430:	e853 3f00 	ldrex	r3, [r3]
 800d434:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d438:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d43c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	330c      	adds	r3, #12
 800d444:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d446:	637a      	str	r2, [r7, #52]	; 0x34
 800d448:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d44a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d44c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d44e:	e841 2300 	strex	r3, r2, [r1]
 800d452:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d456:	2b00      	cmp	r3, #0
 800d458:	d1e5      	bne.n	800d426 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	3314      	adds	r3, #20
 800d460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	e853 3f00 	ldrex	r3, [r3]
 800d468:	613b      	str	r3, [r7, #16]
   return(result);
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	f023 0301 	bic.w	r3, r3, #1
 800d470:	63bb      	str	r3, [r7, #56]	; 0x38
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	3314      	adds	r3, #20
 800d478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d47a:	623a      	str	r2, [r7, #32]
 800d47c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d47e:	69f9      	ldr	r1, [r7, #28]
 800d480:	6a3a      	ldr	r2, [r7, #32]
 800d482:	e841 2300 	strex	r3, r2, [r1]
 800d486:	61bb      	str	r3, [r7, #24]
   return(result);
 800d488:	69bb      	ldr	r3, [r7, #24]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d1e5      	bne.n	800d45a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2220      	movs	r2, #32
 800d492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2220      	movs	r2, #32
 800d49a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800d4a6:	2303      	movs	r3, #3
 800d4a8:	e00f      	b.n	800d4ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	4013      	ands	r3, r2
 800d4b4:	68ba      	ldr	r2, [r7, #8]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	bf0c      	ite	eq
 800d4ba:	2301      	moveq	r3, #1
 800d4bc:	2300      	movne	r3, #0
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	79fb      	ldrb	r3, [r7, #7]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d09f      	beq.n	800d408 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d4c8:	2300      	movs	r3, #0
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3740      	adds	r7, #64	; 0x40
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d4d2:	b480      	push	{r7}
 800d4d4:	b085      	sub	sp, #20
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	60f8      	str	r0, [r7, #12]
 800d4da:	60b9      	str	r1, [r7, #8]
 800d4dc:	4613      	mov	r3, r2
 800d4de:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	68ba      	ldr	r2, [r7, #8]
 800d4e4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	88fa      	ldrh	r2, [r7, #6]
 800d4ea:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	88fa      	ldrh	r2, [r7, #6]
 800d4f0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2222      	movs	r2, #34	; 0x22
 800d4fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	691b      	ldr	r3, [r3, #16]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d007      	beq.n	800d518 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	68da      	ldr	r2, [r3, #12]
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d516:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	695a      	ldr	r2, [r3, #20]
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f042 0201 	orr.w	r2, r2, #1
 800d526:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	68da      	ldr	r2, [r3, #12]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f042 0220 	orr.w	r2, r2, #32
 800d536:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d538:	2300      	movs	r3, #0
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3714      	adds	r7, #20
 800d53e:	46bd      	mov	sp, r7
 800d540:	bc80      	pop	{r7}
 800d542:	4770      	bx	lr

0800d544 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d544:	b480      	push	{r7}
 800d546:	b095      	sub	sp, #84	; 0x54
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	330c      	adds	r3, #12
 800d552:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d556:	e853 3f00 	ldrex	r3, [r3]
 800d55a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d55e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d562:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	330c      	adds	r3, #12
 800d56a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d56c:	643a      	str	r2, [r7, #64]	; 0x40
 800d56e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d570:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d572:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d574:	e841 2300 	strex	r3, r2, [r1]
 800d578:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d1e5      	bne.n	800d54c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	3314      	adds	r3, #20
 800d586:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d588:	6a3b      	ldr	r3, [r7, #32]
 800d58a:	e853 3f00 	ldrex	r3, [r3]
 800d58e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d590:	69fb      	ldr	r3, [r7, #28]
 800d592:	f023 0301 	bic.w	r3, r3, #1
 800d596:	64bb      	str	r3, [r7, #72]	; 0x48
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	3314      	adds	r3, #20
 800d59e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d5a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d5a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5a8:	e841 2300 	strex	r3, r2, [r1]
 800d5ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d1e5      	bne.n	800d580 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	d119      	bne.n	800d5f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	330c      	adds	r3, #12
 800d5c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	e853 3f00 	ldrex	r3, [r3]
 800d5ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	f023 0310 	bic.w	r3, r3, #16
 800d5d2:	647b      	str	r3, [r7, #68]	; 0x44
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	330c      	adds	r3, #12
 800d5da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d5dc:	61ba      	str	r2, [r7, #24]
 800d5de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e0:	6979      	ldr	r1, [r7, #20]
 800d5e2:	69ba      	ldr	r2, [r7, #24]
 800d5e4:	e841 2300 	strex	r3, r2, [r1]
 800d5e8:	613b      	str	r3, [r7, #16]
   return(result);
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d1e5      	bne.n	800d5bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2220      	movs	r2, #32
 800d5f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d5fe:	bf00      	nop
 800d600:	3754      	adds	r7, #84	; 0x54
 800d602:	46bd      	mov	sp, r7
 800d604:	bc80      	pop	{r7}
 800d606:	4770      	bx	lr

0800d608 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d614:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2200      	movs	r2, #0
 800d61a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2200      	movs	r2, #0
 800d620:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d622:	68f8      	ldr	r0, [r7, #12]
 800d624:	f7ff fed3 	bl	800d3ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d628:	bf00      	nop
 800d62a:	3710      	adds	r7, #16
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d630:	b480      	push	{r7}
 800d632:	b085      	sub	sp, #20
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d63e:	b2db      	uxtb	r3, r3
 800d640:	2b21      	cmp	r3, #33	; 0x21
 800d642:	d13e      	bne.n	800d6c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	689b      	ldr	r3, [r3, #8]
 800d648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d64c:	d114      	bne.n	800d678 <UART_Transmit_IT+0x48>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	691b      	ldr	r3, [r3, #16]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d110      	bne.n	800d678 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6a1b      	ldr	r3, [r3, #32]
 800d65a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	881b      	ldrh	r3, [r3, #0]
 800d660:	461a      	mov	r2, r3
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d66a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6a1b      	ldr	r3, [r3, #32]
 800d670:	1c9a      	adds	r2, r3, #2
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	621a      	str	r2, [r3, #32]
 800d676:	e008      	b.n	800d68a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6a1b      	ldr	r3, [r3, #32]
 800d67c:	1c59      	adds	r1, r3, #1
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	6211      	str	r1, [r2, #32]
 800d682:	781a      	ldrb	r2, [r3, #0]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d68e:	b29b      	uxth	r3, r3
 800d690:	3b01      	subs	r3, #1
 800d692:	b29b      	uxth	r3, r3
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	4619      	mov	r1, r3
 800d698:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d10f      	bne.n	800d6be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	68da      	ldr	r2, [r3, #12]
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d6ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	68da      	ldr	r2, [r3, #12]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d6bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	e000      	b.n	800d6c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d6c2:	2302      	movs	r3, #2
  }
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3714      	adds	r7, #20
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bc80      	pop	{r7}
 800d6cc:	4770      	bx	lr

0800d6ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d6ce:	b580      	push	{r7, lr}
 800d6d0:	b082      	sub	sp, #8
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	68da      	ldr	r2, [r3, #12]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d6e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2220      	movs	r2, #32
 800d6ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f7ff fe64 	bl	800d3bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d6f4:	2300      	movs	r3, #0
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3708      	adds	r7, #8
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}

0800d6fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d6fe:	b580      	push	{r7, lr}
 800d700:	b08c      	sub	sp, #48	; 0x30
 800d702:	af00      	add	r7, sp, #0
 800d704:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	2b22      	cmp	r3, #34	; 0x22
 800d710:	f040 80ae 	bne.w	800d870 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d71c:	d117      	bne.n	800d74e <UART_Receive_IT+0x50>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	691b      	ldr	r3, [r3, #16]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d113      	bne.n	800d74e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d726:	2300      	movs	r3, #0
 800d728:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d72e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	b29b      	uxth	r3, r3
 800d738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d73c:	b29a      	uxth	r2, r3
 800d73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d740:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d746:	1c9a      	adds	r2, r3, #2
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	629a      	str	r2, [r3, #40]	; 0x28
 800d74c:	e026      	b.n	800d79c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d752:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d754:	2300      	movs	r3, #0
 800d756:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	689b      	ldr	r3, [r3, #8]
 800d75c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d760:	d007      	beq.n	800d772 <UART_Receive_IT+0x74>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	689b      	ldr	r3, [r3, #8]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d10a      	bne.n	800d780 <UART_Receive_IT+0x82>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	691b      	ldr	r3, [r3, #16]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d106      	bne.n	800d780 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	685b      	ldr	r3, [r3, #4]
 800d778:	b2da      	uxtb	r2, r3
 800d77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77c:	701a      	strb	r2, [r3, #0]
 800d77e:	e008      	b.n	800d792 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	685b      	ldr	r3, [r3, #4]
 800d786:	b2db      	uxtb	r3, r3
 800d788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d78c:	b2da      	uxtb	r2, r3
 800d78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d790:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d796:	1c5a      	adds	r2, r3, #1
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	3b01      	subs	r3, #1
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d15d      	bne.n	800d86c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	68da      	ldr	r2, [r3, #12]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f022 0220 	bic.w	r2, r2, #32
 800d7be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	68da      	ldr	r2, [r3, #12]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d7ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	695a      	ldr	r2, [r3, #20]
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f022 0201 	bic.w	r2, r2, #1
 800d7de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2220      	movs	r2, #32
 800d7e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7f2:	2b01      	cmp	r3, #1
 800d7f4:	d135      	bne.n	800d862 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	330c      	adds	r3, #12
 800d802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	e853 3f00 	ldrex	r3, [r3]
 800d80a:	613b      	str	r3, [r7, #16]
   return(result);
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	f023 0310 	bic.w	r3, r3, #16
 800d812:	627b      	str	r3, [r7, #36]	; 0x24
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	330c      	adds	r3, #12
 800d81a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d81c:	623a      	str	r2, [r7, #32]
 800d81e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d820:	69f9      	ldr	r1, [r7, #28]
 800d822:	6a3a      	ldr	r2, [r7, #32]
 800d824:	e841 2300 	strex	r3, r2, [r1]
 800d828:	61bb      	str	r3, [r7, #24]
   return(result);
 800d82a:	69bb      	ldr	r3, [r7, #24]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d1e5      	bne.n	800d7fc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f003 0310 	and.w	r3, r3, #16
 800d83a:	2b10      	cmp	r3, #16
 800d83c:	d10a      	bne.n	800d854 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d83e:	2300      	movs	r3, #0
 800d840:	60fb      	str	r3, [r7, #12]
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	60fb      	str	r3, [r7, #12]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	60fb      	str	r3, [r7, #12]
 800d852:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d858:	4619      	mov	r1, r3
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f7ff fdc0 	bl	800d3e0 <HAL_UARTEx_RxEventCallback>
 800d860:	e002      	b.n	800d868 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f7fb ff26 	bl	80096b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d868:	2300      	movs	r3, #0
 800d86a:	e002      	b.n	800d872 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d86c:	2300      	movs	r3, #0
 800d86e:	e000      	b.n	800d872 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d870:	2302      	movs	r3, #2
  }
}
 800d872:	4618      	mov	r0, r3
 800d874:	3730      	adds	r7, #48	; 0x30
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
	...

0800d87c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b084      	sub	sp, #16
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	691b      	ldr	r3, [r3, #16]
 800d88a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	68da      	ldr	r2, [r3, #12]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	430a      	orrs	r2, r1
 800d898:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	689a      	ldr	r2, [r3, #8]
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	691b      	ldr	r3, [r3, #16]
 800d8a2:	431a      	orrs	r2, r3
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	695b      	ldr	r3, [r3, #20]
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	68db      	ldr	r3, [r3, #12]
 800d8b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800d8b6:	f023 030c 	bic.w	r3, r3, #12
 800d8ba:	687a      	ldr	r2, [r7, #4]
 800d8bc:	6812      	ldr	r2, [r2, #0]
 800d8be:	68b9      	ldr	r1, [r7, #8]
 800d8c0:	430b      	orrs	r3, r1
 800d8c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	695b      	ldr	r3, [r3, #20]
 800d8ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	699a      	ldr	r2, [r3, #24]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	430a      	orrs	r2, r1
 800d8d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4a2c      	ldr	r2, [pc, #176]	; (800d990 <UART_SetConfig+0x114>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d103      	bne.n	800d8ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800d8e4:	f7ff f91c 	bl	800cb20 <HAL_RCC_GetPCLK2Freq>
 800d8e8:	60f8      	str	r0, [r7, #12]
 800d8ea:	e002      	b.n	800d8f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800d8ec:	f7ff f904 	bl	800caf8 <HAL_RCC_GetPCLK1Freq>
 800d8f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d8f2:	68fa      	ldr	r2, [r7, #12]
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	4413      	add	r3, r2
 800d8fa:	009a      	lsls	r2, r3, #2
 800d8fc:	441a      	add	r2, r3
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	009b      	lsls	r3, r3, #2
 800d904:	fbb2 f3f3 	udiv	r3, r2, r3
 800d908:	4a22      	ldr	r2, [pc, #136]	; (800d994 <UART_SetConfig+0x118>)
 800d90a:	fba2 2303 	umull	r2, r3, r2, r3
 800d90e:	095b      	lsrs	r3, r3, #5
 800d910:	0119      	lsls	r1, r3, #4
 800d912:	68fa      	ldr	r2, [r7, #12]
 800d914:	4613      	mov	r3, r2
 800d916:	009b      	lsls	r3, r3, #2
 800d918:	4413      	add	r3, r2
 800d91a:	009a      	lsls	r2, r3, #2
 800d91c:	441a      	add	r2, r3
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	685b      	ldr	r3, [r3, #4]
 800d922:	009b      	lsls	r3, r3, #2
 800d924:	fbb2 f2f3 	udiv	r2, r2, r3
 800d928:	4b1a      	ldr	r3, [pc, #104]	; (800d994 <UART_SetConfig+0x118>)
 800d92a:	fba3 0302 	umull	r0, r3, r3, r2
 800d92e:	095b      	lsrs	r3, r3, #5
 800d930:	2064      	movs	r0, #100	; 0x64
 800d932:	fb00 f303 	mul.w	r3, r0, r3
 800d936:	1ad3      	subs	r3, r2, r3
 800d938:	011b      	lsls	r3, r3, #4
 800d93a:	3332      	adds	r3, #50	; 0x32
 800d93c:	4a15      	ldr	r2, [pc, #84]	; (800d994 <UART_SetConfig+0x118>)
 800d93e:	fba2 2303 	umull	r2, r3, r2, r3
 800d942:	095b      	lsrs	r3, r3, #5
 800d944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d948:	4419      	add	r1, r3
 800d94a:	68fa      	ldr	r2, [r7, #12]
 800d94c:	4613      	mov	r3, r2
 800d94e:	009b      	lsls	r3, r3, #2
 800d950:	4413      	add	r3, r2
 800d952:	009a      	lsls	r2, r3, #2
 800d954:	441a      	add	r2, r3
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	685b      	ldr	r3, [r3, #4]
 800d95a:	009b      	lsls	r3, r3, #2
 800d95c:	fbb2 f2f3 	udiv	r2, r2, r3
 800d960:	4b0c      	ldr	r3, [pc, #48]	; (800d994 <UART_SetConfig+0x118>)
 800d962:	fba3 0302 	umull	r0, r3, r3, r2
 800d966:	095b      	lsrs	r3, r3, #5
 800d968:	2064      	movs	r0, #100	; 0x64
 800d96a:	fb00 f303 	mul.w	r3, r0, r3
 800d96e:	1ad3      	subs	r3, r2, r3
 800d970:	011b      	lsls	r3, r3, #4
 800d972:	3332      	adds	r3, #50	; 0x32
 800d974:	4a07      	ldr	r2, [pc, #28]	; (800d994 <UART_SetConfig+0x118>)
 800d976:	fba2 2303 	umull	r2, r3, r2, r3
 800d97a:	095b      	lsrs	r3, r3, #5
 800d97c:	f003 020f 	and.w	r2, r3, #15
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	440a      	add	r2, r1
 800d986:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800d988:	bf00      	nop
 800d98a:	3710      	adds	r7, #16
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	40013800 	.word	0x40013800
 800d994:	51eb851f 	.word	0x51eb851f

0800d998 <__errno>:
 800d998:	4b01      	ldr	r3, [pc, #4]	; (800d9a0 <__errno+0x8>)
 800d99a:	6818      	ldr	r0, [r3, #0]
 800d99c:	4770      	bx	lr
 800d99e:	bf00      	nop
 800d9a0:	2000011c 	.word	0x2000011c

0800d9a4 <__libc_init_array>:
 800d9a4:	b570      	push	{r4, r5, r6, lr}
 800d9a6:	2600      	movs	r6, #0
 800d9a8:	4d0c      	ldr	r5, [pc, #48]	; (800d9dc <__libc_init_array+0x38>)
 800d9aa:	4c0d      	ldr	r4, [pc, #52]	; (800d9e0 <__libc_init_array+0x3c>)
 800d9ac:	1b64      	subs	r4, r4, r5
 800d9ae:	10a4      	asrs	r4, r4, #2
 800d9b0:	42a6      	cmp	r6, r4
 800d9b2:	d109      	bne.n	800d9c8 <__libc_init_array+0x24>
 800d9b4:	f004 ff0c 	bl	80127d0 <_init>
 800d9b8:	2600      	movs	r6, #0
 800d9ba:	4d0a      	ldr	r5, [pc, #40]	; (800d9e4 <__libc_init_array+0x40>)
 800d9bc:	4c0a      	ldr	r4, [pc, #40]	; (800d9e8 <__libc_init_array+0x44>)
 800d9be:	1b64      	subs	r4, r4, r5
 800d9c0:	10a4      	asrs	r4, r4, #2
 800d9c2:	42a6      	cmp	r6, r4
 800d9c4:	d105      	bne.n	800d9d2 <__libc_init_array+0x2e>
 800d9c6:	bd70      	pop	{r4, r5, r6, pc}
 800d9c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9cc:	4798      	blx	r3
 800d9ce:	3601      	adds	r6, #1
 800d9d0:	e7ee      	b.n	800d9b0 <__libc_init_array+0xc>
 800d9d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9d6:	4798      	blx	r3
 800d9d8:	3601      	adds	r6, #1
 800d9da:	e7f2      	b.n	800d9c2 <__libc_init_array+0x1e>
 800d9dc:	08013150 	.word	0x08013150
 800d9e0:	08013150 	.word	0x08013150
 800d9e4:	08013150 	.word	0x08013150
 800d9e8:	08013154 	.word	0x08013154

0800d9ec <memcpy>:
 800d9ec:	440a      	add	r2, r1
 800d9ee:	4291      	cmp	r1, r2
 800d9f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d9f4:	d100      	bne.n	800d9f8 <memcpy+0xc>
 800d9f6:	4770      	bx	lr
 800d9f8:	b510      	push	{r4, lr}
 800d9fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9fe:	4291      	cmp	r1, r2
 800da00:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da04:	d1f9      	bne.n	800d9fa <memcpy+0xe>
 800da06:	bd10      	pop	{r4, pc}

0800da08 <memset>:
 800da08:	4603      	mov	r3, r0
 800da0a:	4402      	add	r2, r0
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d100      	bne.n	800da12 <memset+0xa>
 800da10:	4770      	bx	lr
 800da12:	f803 1b01 	strb.w	r1, [r3], #1
 800da16:	e7f9      	b.n	800da0c <memset+0x4>

0800da18 <strncmp>:
 800da18:	4603      	mov	r3, r0
 800da1a:	b510      	push	{r4, lr}
 800da1c:	b172      	cbz	r2, 800da3c <strncmp+0x24>
 800da1e:	3901      	subs	r1, #1
 800da20:	1884      	adds	r4, r0, r2
 800da22:	f813 0b01 	ldrb.w	r0, [r3], #1
 800da26:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800da2a:	4290      	cmp	r0, r2
 800da2c:	d101      	bne.n	800da32 <strncmp+0x1a>
 800da2e:	42a3      	cmp	r3, r4
 800da30:	d101      	bne.n	800da36 <strncmp+0x1e>
 800da32:	1a80      	subs	r0, r0, r2
 800da34:	bd10      	pop	{r4, pc}
 800da36:	2800      	cmp	r0, #0
 800da38:	d1f3      	bne.n	800da22 <strncmp+0xa>
 800da3a:	e7fa      	b.n	800da32 <strncmp+0x1a>
 800da3c:	4610      	mov	r0, r2
 800da3e:	e7f9      	b.n	800da34 <strncmp+0x1c>

0800da40 <sulp>:
 800da40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da44:	460f      	mov	r7, r1
 800da46:	4690      	mov	r8, r2
 800da48:	f001 fcfa 	bl	800f440 <__ulp>
 800da4c:	4604      	mov	r4, r0
 800da4e:	460d      	mov	r5, r1
 800da50:	f1b8 0f00 	cmp.w	r8, #0
 800da54:	d011      	beq.n	800da7a <sulp+0x3a>
 800da56:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800da5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800da5e:	2b00      	cmp	r3, #0
 800da60:	dd0b      	ble.n	800da7a <sulp+0x3a>
 800da62:	2400      	movs	r4, #0
 800da64:	051b      	lsls	r3, r3, #20
 800da66:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800da6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800da6e:	4622      	mov	r2, r4
 800da70:	462b      	mov	r3, r5
 800da72:	f7f2 fd31 	bl	80004d8 <__aeabi_dmul>
 800da76:	4604      	mov	r4, r0
 800da78:	460d      	mov	r5, r1
 800da7a:	4620      	mov	r0, r4
 800da7c:	4629      	mov	r1, r5
 800da7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da82:	0000      	movs	r0, r0
 800da84:	0000      	movs	r0, r0
	...

0800da88 <_strtod_l>:
 800da88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da8c:	469b      	mov	fp, r3
 800da8e:	2300      	movs	r3, #0
 800da90:	b09f      	sub	sp, #124	; 0x7c
 800da92:	931a      	str	r3, [sp, #104]	; 0x68
 800da94:	4b9e      	ldr	r3, [pc, #632]	; (800dd10 <_strtod_l+0x288>)
 800da96:	4682      	mov	sl, r0
 800da98:	681f      	ldr	r7, [r3, #0]
 800da9a:	460e      	mov	r6, r1
 800da9c:	4638      	mov	r0, r7
 800da9e:	9215      	str	r2, [sp, #84]	; 0x54
 800daa0:	f7f2 fb56 	bl	8000150 <strlen>
 800daa4:	f04f 0800 	mov.w	r8, #0
 800daa8:	4604      	mov	r4, r0
 800daaa:	f04f 0900 	mov.w	r9, #0
 800daae:	9619      	str	r6, [sp, #100]	; 0x64
 800dab0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dab2:	781a      	ldrb	r2, [r3, #0]
 800dab4:	2a2b      	cmp	r2, #43	; 0x2b
 800dab6:	d04c      	beq.n	800db52 <_strtod_l+0xca>
 800dab8:	d83a      	bhi.n	800db30 <_strtod_l+0xa8>
 800daba:	2a0d      	cmp	r2, #13
 800dabc:	d833      	bhi.n	800db26 <_strtod_l+0x9e>
 800dabe:	2a08      	cmp	r2, #8
 800dac0:	d833      	bhi.n	800db2a <_strtod_l+0xa2>
 800dac2:	2a00      	cmp	r2, #0
 800dac4:	d03d      	beq.n	800db42 <_strtod_l+0xba>
 800dac6:	2300      	movs	r3, #0
 800dac8:	930a      	str	r3, [sp, #40]	; 0x28
 800daca:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800dacc:	782b      	ldrb	r3, [r5, #0]
 800dace:	2b30      	cmp	r3, #48	; 0x30
 800dad0:	f040 80aa 	bne.w	800dc28 <_strtod_l+0x1a0>
 800dad4:	786b      	ldrb	r3, [r5, #1]
 800dad6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dada:	2b58      	cmp	r3, #88	; 0x58
 800dadc:	d166      	bne.n	800dbac <_strtod_l+0x124>
 800dade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dae0:	4650      	mov	r0, sl
 800dae2:	9301      	str	r3, [sp, #4]
 800dae4:	ab1a      	add	r3, sp, #104	; 0x68
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	4a8a      	ldr	r2, [pc, #552]	; (800dd14 <_strtod_l+0x28c>)
 800daea:	f8cd b008 	str.w	fp, [sp, #8]
 800daee:	ab1b      	add	r3, sp, #108	; 0x6c
 800daf0:	a919      	add	r1, sp, #100	; 0x64
 800daf2:	f000 fe25 	bl	800e740 <__gethex>
 800daf6:	f010 0607 	ands.w	r6, r0, #7
 800dafa:	4604      	mov	r4, r0
 800dafc:	d005      	beq.n	800db0a <_strtod_l+0x82>
 800dafe:	2e06      	cmp	r6, #6
 800db00:	d129      	bne.n	800db56 <_strtod_l+0xce>
 800db02:	2300      	movs	r3, #0
 800db04:	3501      	adds	r5, #1
 800db06:	9519      	str	r5, [sp, #100]	; 0x64
 800db08:	930a      	str	r3, [sp, #40]	; 0x28
 800db0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	f040 858a 	bne.w	800e626 <_strtod_l+0xb9e>
 800db12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db14:	b1d3      	cbz	r3, 800db4c <_strtod_l+0xc4>
 800db16:	4642      	mov	r2, r8
 800db18:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800db1c:	4610      	mov	r0, r2
 800db1e:	4619      	mov	r1, r3
 800db20:	b01f      	add	sp, #124	; 0x7c
 800db22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db26:	2a20      	cmp	r2, #32
 800db28:	d1cd      	bne.n	800dac6 <_strtod_l+0x3e>
 800db2a:	3301      	adds	r3, #1
 800db2c:	9319      	str	r3, [sp, #100]	; 0x64
 800db2e:	e7bf      	b.n	800dab0 <_strtod_l+0x28>
 800db30:	2a2d      	cmp	r2, #45	; 0x2d
 800db32:	d1c8      	bne.n	800dac6 <_strtod_l+0x3e>
 800db34:	2201      	movs	r2, #1
 800db36:	920a      	str	r2, [sp, #40]	; 0x28
 800db38:	1c5a      	adds	r2, r3, #1
 800db3a:	9219      	str	r2, [sp, #100]	; 0x64
 800db3c:	785b      	ldrb	r3, [r3, #1]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d1c3      	bne.n	800daca <_strtod_l+0x42>
 800db42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db44:	9619      	str	r6, [sp, #100]	; 0x64
 800db46:	2b00      	cmp	r3, #0
 800db48:	f040 856b 	bne.w	800e622 <_strtod_l+0xb9a>
 800db4c:	4642      	mov	r2, r8
 800db4e:	464b      	mov	r3, r9
 800db50:	e7e4      	b.n	800db1c <_strtod_l+0x94>
 800db52:	2200      	movs	r2, #0
 800db54:	e7ef      	b.n	800db36 <_strtod_l+0xae>
 800db56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800db58:	b13a      	cbz	r2, 800db6a <_strtod_l+0xe2>
 800db5a:	2135      	movs	r1, #53	; 0x35
 800db5c:	a81c      	add	r0, sp, #112	; 0x70
 800db5e:	f001 fd73 	bl	800f648 <__copybits>
 800db62:	4650      	mov	r0, sl
 800db64:	991a      	ldr	r1, [sp, #104]	; 0x68
 800db66:	f001 f93b 	bl	800ede0 <_Bfree>
 800db6a:	3e01      	subs	r6, #1
 800db6c:	2e04      	cmp	r6, #4
 800db6e:	d806      	bhi.n	800db7e <_strtod_l+0xf6>
 800db70:	e8df f006 	tbb	[pc, r6]
 800db74:	1714030a 	.word	0x1714030a
 800db78:	0a          	.byte	0x0a
 800db79:	00          	.byte	0x00
 800db7a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800db7e:	0721      	lsls	r1, r4, #28
 800db80:	d5c3      	bpl.n	800db0a <_strtod_l+0x82>
 800db82:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800db86:	e7c0      	b.n	800db0a <_strtod_l+0x82>
 800db88:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800db8a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800db8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800db92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800db96:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800db9a:	e7f0      	b.n	800db7e <_strtod_l+0xf6>
 800db9c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800dd18 <_strtod_l+0x290>
 800dba0:	e7ed      	b.n	800db7e <_strtod_l+0xf6>
 800dba2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800dba6:	f04f 38ff 	mov.w	r8, #4294967295
 800dbaa:	e7e8      	b.n	800db7e <_strtod_l+0xf6>
 800dbac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dbae:	1c5a      	adds	r2, r3, #1
 800dbb0:	9219      	str	r2, [sp, #100]	; 0x64
 800dbb2:	785b      	ldrb	r3, [r3, #1]
 800dbb4:	2b30      	cmp	r3, #48	; 0x30
 800dbb6:	d0f9      	beq.n	800dbac <_strtod_l+0x124>
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d0a6      	beq.n	800db0a <_strtod_l+0x82>
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	9307      	str	r3, [sp, #28]
 800dbc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dbc2:	220a      	movs	r2, #10
 800dbc4:	9308      	str	r3, [sp, #32]
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	469b      	mov	fp, r3
 800dbca:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800dbce:	9819      	ldr	r0, [sp, #100]	; 0x64
 800dbd0:	7805      	ldrb	r5, [r0, #0]
 800dbd2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800dbd6:	b2d9      	uxtb	r1, r3
 800dbd8:	2909      	cmp	r1, #9
 800dbda:	d927      	bls.n	800dc2c <_strtod_l+0x1a4>
 800dbdc:	4622      	mov	r2, r4
 800dbde:	4639      	mov	r1, r7
 800dbe0:	f7ff ff1a 	bl	800da18 <strncmp>
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	d033      	beq.n	800dc50 <_strtod_l+0x1c8>
 800dbe8:	2000      	movs	r0, #0
 800dbea:	462a      	mov	r2, r5
 800dbec:	465c      	mov	r4, fp
 800dbee:	4603      	mov	r3, r0
 800dbf0:	9004      	str	r0, [sp, #16]
 800dbf2:	2a65      	cmp	r2, #101	; 0x65
 800dbf4:	d001      	beq.n	800dbfa <_strtod_l+0x172>
 800dbf6:	2a45      	cmp	r2, #69	; 0x45
 800dbf8:	d114      	bne.n	800dc24 <_strtod_l+0x19c>
 800dbfa:	b91c      	cbnz	r4, 800dc04 <_strtod_l+0x17c>
 800dbfc:	9a07      	ldr	r2, [sp, #28]
 800dbfe:	4302      	orrs	r2, r0
 800dc00:	d09f      	beq.n	800db42 <_strtod_l+0xba>
 800dc02:	2400      	movs	r4, #0
 800dc04:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800dc06:	1c72      	adds	r2, r6, #1
 800dc08:	9219      	str	r2, [sp, #100]	; 0x64
 800dc0a:	7872      	ldrb	r2, [r6, #1]
 800dc0c:	2a2b      	cmp	r2, #43	; 0x2b
 800dc0e:	d079      	beq.n	800dd04 <_strtod_l+0x27c>
 800dc10:	2a2d      	cmp	r2, #45	; 0x2d
 800dc12:	f000 8083 	beq.w	800dd1c <_strtod_l+0x294>
 800dc16:	2700      	movs	r7, #0
 800dc18:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800dc1c:	2909      	cmp	r1, #9
 800dc1e:	f240 8083 	bls.w	800dd28 <_strtod_l+0x2a0>
 800dc22:	9619      	str	r6, [sp, #100]	; 0x64
 800dc24:	2500      	movs	r5, #0
 800dc26:	e09f      	b.n	800dd68 <_strtod_l+0x2e0>
 800dc28:	2300      	movs	r3, #0
 800dc2a:	e7c8      	b.n	800dbbe <_strtod_l+0x136>
 800dc2c:	f1bb 0f08 	cmp.w	fp, #8
 800dc30:	bfd5      	itete	le
 800dc32:	9906      	ldrle	r1, [sp, #24]
 800dc34:	9905      	ldrgt	r1, [sp, #20]
 800dc36:	fb02 3301 	mlale	r3, r2, r1, r3
 800dc3a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800dc3e:	f100 0001 	add.w	r0, r0, #1
 800dc42:	bfd4      	ite	le
 800dc44:	9306      	strle	r3, [sp, #24]
 800dc46:	9305      	strgt	r3, [sp, #20]
 800dc48:	f10b 0b01 	add.w	fp, fp, #1
 800dc4c:	9019      	str	r0, [sp, #100]	; 0x64
 800dc4e:	e7be      	b.n	800dbce <_strtod_l+0x146>
 800dc50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dc52:	191a      	adds	r2, r3, r4
 800dc54:	9219      	str	r2, [sp, #100]	; 0x64
 800dc56:	5d1a      	ldrb	r2, [r3, r4]
 800dc58:	f1bb 0f00 	cmp.w	fp, #0
 800dc5c:	d036      	beq.n	800dccc <_strtod_l+0x244>
 800dc5e:	465c      	mov	r4, fp
 800dc60:	9004      	str	r0, [sp, #16]
 800dc62:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800dc66:	2b09      	cmp	r3, #9
 800dc68:	d912      	bls.n	800dc90 <_strtod_l+0x208>
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	e7c1      	b.n	800dbf2 <_strtod_l+0x16a>
 800dc6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dc70:	3001      	adds	r0, #1
 800dc72:	1c5a      	adds	r2, r3, #1
 800dc74:	9219      	str	r2, [sp, #100]	; 0x64
 800dc76:	785a      	ldrb	r2, [r3, #1]
 800dc78:	2a30      	cmp	r2, #48	; 0x30
 800dc7a:	d0f8      	beq.n	800dc6e <_strtod_l+0x1e6>
 800dc7c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800dc80:	2b08      	cmp	r3, #8
 800dc82:	f200 84d5 	bhi.w	800e630 <_strtod_l+0xba8>
 800dc86:	9004      	str	r0, [sp, #16]
 800dc88:	2000      	movs	r0, #0
 800dc8a:	4604      	mov	r4, r0
 800dc8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dc8e:	9308      	str	r3, [sp, #32]
 800dc90:	3a30      	subs	r2, #48	; 0x30
 800dc92:	f100 0301 	add.w	r3, r0, #1
 800dc96:	d013      	beq.n	800dcc0 <_strtod_l+0x238>
 800dc98:	9904      	ldr	r1, [sp, #16]
 800dc9a:	1905      	adds	r5, r0, r4
 800dc9c:	4419      	add	r1, r3
 800dc9e:	9104      	str	r1, [sp, #16]
 800dca0:	4623      	mov	r3, r4
 800dca2:	210a      	movs	r1, #10
 800dca4:	42ab      	cmp	r3, r5
 800dca6:	d113      	bne.n	800dcd0 <_strtod_l+0x248>
 800dca8:	1823      	adds	r3, r4, r0
 800dcaa:	2b08      	cmp	r3, #8
 800dcac:	f104 0401 	add.w	r4, r4, #1
 800dcb0:	4404      	add	r4, r0
 800dcb2:	dc1b      	bgt.n	800dcec <_strtod_l+0x264>
 800dcb4:	230a      	movs	r3, #10
 800dcb6:	9906      	ldr	r1, [sp, #24]
 800dcb8:	fb03 2301 	mla	r3, r3, r1, r2
 800dcbc:	9306      	str	r3, [sp, #24]
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	1c51      	adds	r1, r2, #1
 800dcc6:	9119      	str	r1, [sp, #100]	; 0x64
 800dcc8:	7852      	ldrb	r2, [r2, #1]
 800dcca:	e7ca      	b.n	800dc62 <_strtod_l+0x1da>
 800dccc:	4658      	mov	r0, fp
 800dcce:	e7d3      	b.n	800dc78 <_strtod_l+0x1f0>
 800dcd0:	2b08      	cmp	r3, #8
 800dcd2:	dc04      	bgt.n	800dcde <_strtod_l+0x256>
 800dcd4:	9f06      	ldr	r7, [sp, #24]
 800dcd6:	434f      	muls	r7, r1
 800dcd8:	9706      	str	r7, [sp, #24]
 800dcda:	3301      	adds	r3, #1
 800dcdc:	e7e2      	b.n	800dca4 <_strtod_l+0x21c>
 800dcde:	1c5f      	adds	r7, r3, #1
 800dce0:	2f10      	cmp	r7, #16
 800dce2:	bfde      	ittt	le
 800dce4:	9f05      	ldrle	r7, [sp, #20]
 800dce6:	434f      	mulle	r7, r1
 800dce8:	9705      	strle	r7, [sp, #20]
 800dcea:	e7f6      	b.n	800dcda <_strtod_l+0x252>
 800dcec:	2c10      	cmp	r4, #16
 800dcee:	bfdf      	itttt	le
 800dcf0:	230a      	movle	r3, #10
 800dcf2:	9905      	ldrle	r1, [sp, #20]
 800dcf4:	fb03 2301 	mlale	r3, r3, r1, r2
 800dcf8:	9305      	strle	r3, [sp, #20]
 800dcfa:	e7e0      	b.n	800dcbe <_strtod_l+0x236>
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	9304      	str	r3, [sp, #16]
 800dd00:	2301      	movs	r3, #1
 800dd02:	e77b      	b.n	800dbfc <_strtod_l+0x174>
 800dd04:	2700      	movs	r7, #0
 800dd06:	1cb2      	adds	r2, r6, #2
 800dd08:	9219      	str	r2, [sp, #100]	; 0x64
 800dd0a:	78b2      	ldrb	r2, [r6, #2]
 800dd0c:	e784      	b.n	800dc18 <_strtod_l+0x190>
 800dd0e:	bf00      	nop
 800dd10:	080129c0 	.word	0x080129c0
 800dd14:	080128f4 	.word	0x080128f4
 800dd18:	7ff00000 	.word	0x7ff00000
 800dd1c:	2701      	movs	r7, #1
 800dd1e:	e7f2      	b.n	800dd06 <_strtod_l+0x27e>
 800dd20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dd22:	1c51      	adds	r1, r2, #1
 800dd24:	9119      	str	r1, [sp, #100]	; 0x64
 800dd26:	7852      	ldrb	r2, [r2, #1]
 800dd28:	2a30      	cmp	r2, #48	; 0x30
 800dd2a:	d0f9      	beq.n	800dd20 <_strtod_l+0x298>
 800dd2c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800dd30:	2908      	cmp	r1, #8
 800dd32:	f63f af77 	bhi.w	800dc24 <_strtod_l+0x19c>
 800dd36:	f04f 0e0a 	mov.w	lr, #10
 800dd3a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800dd3e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dd40:	9209      	str	r2, [sp, #36]	; 0x24
 800dd42:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dd44:	1c51      	adds	r1, r2, #1
 800dd46:	9119      	str	r1, [sp, #100]	; 0x64
 800dd48:	7852      	ldrb	r2, [r2, #1]
 800dd4a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800dd4e:	2d09      	cmp	r5, #9
 800dd50:	d935      	bls.n	800ddbe <_strtod_l+0x336>
 800dd52:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dd54:	1b49      	subs	r1, r1, r5
 800dd56:	2908      	cmp	r1, #8
 800dd58:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800dd5c:	dc02      	bgt.n	800dd64 <_strtod_l+0x2dc>
 800dd5e:	4565      	cmp	r5, ip
 800dd60:	bfa8      	it	ge
 800dd62:	4665      	movge	r5, ip
 800dd64:	b107      	cbz	r7, 800dd68 <_strtod_l+0x2e0>
 800dd66:	426d      	negs	r5, r5
 800dd68:	2c00      	cmp	r4, #0
 800dd6a:	d14c      	bne.n	800de06 <_strtod_l+0x37e>
 800dd6c:	9907      	ldr	r1, [sp, #28]
 800dd6e:	4301      	orrs	r1, r0
 800dd70:	f47f aecb 	bne.w	800db0a <_strtod_l+0x82>
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	f47f aee4 	bne.w	800db42 <_strtod_l+0xba>
 800dd7a:	2a69      	cmp	r2, #105	; 0x69
 800dd7c:	d026      	beq.n	800ddcc <_strtod_l+0x344>
 800dd7e:	dc23      	bgt.n	800ddc8 <_strtod_l+0x340>
 800dd80:	2a49      	cmp	r2, #73	; 0x49
 800dd82:	d023      	beq.n	800ddcc <_strtod_l+0x344>
 800dd84:	2a4e      	cmp	r2, #78	; 0x4e
 800dd86:	f47f aedc 	bne.w	800db42 <_strtod_l+0xba>
 800dd8a:	499d      	ldr	r1, [pc, #628]	; (800e000 <_strtod_l+0x578>)
 800dd8c:	a819      	add	r0, sp, #100	; 0x64
 800dd8e:	f000 ff25 	bl	800ebdc <__match>
 800dd92:	2800      	cmp	r0, #0
 800dd94:	f43f aed5 	beq.w	800db42 <_strtod_l+0xba>
 800dd98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	2b28      	cmp	r3, #40	; 0x28
 800dd9e:	d12c      	bne.n	800ddfa <_strtod_l+0x372>
 800dda0:	4998      	ldr	r1, [pc, #608]	; (800e004 <_strtod_l+0x57c>)
 800dda2:	aa1c      	add	r2, sp, #112	; 0x70
 800dda4:	a819      	add	r0, sp, #100	; 0x64
 800dda6:	f000 ff2d 	bl	800ec04 <__hexnan>
 800ddaa:	2805      	cmp	r0, #5
 800ddac:	d125      	bne.n	800ddfa <_strtod_l+0x372>
 800ddae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ddb0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800ddb4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ddb8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ddbc:	e6a5      	b.n	800db0a <_strtod_l+0x82>
 800ddbe:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800ddc2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800ddc6:	e7bc      	b.n	800dd42 <_strtod_l+0x2ba>
 800ddc8:	2a6e      	cmp	r2, #110	; 0x6e
 800ddca:	e7dc      	b.n	800dd86 <_strtod_l+0x2fe>
 800ddcc:	498e      	ldr	r1, [pc, #568]	; (800e008 <_strtod_l+0x580>)
 800ddce:	a819      	add	r0, sp, #100	; 0x64
 800ddd0:	f000 ff04 	bl	800ebdc <__match>
 800ddd4:	2800      	cmp	r0, #0
 800ddd6:	f43f aeb4 	beq.w	800db42 <_strtod_l+0xba>
 800ddda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dddc:	498b      	ldr	r1, [pc, #556]	; (800e00c <_strtod_l+0x584>)
 800ddde:	3b01      	subs	r3, #1
 800dde0:	a819      	add	r0, sp, #100	; 0x64
 800dde2:	9319      	str	r3, [sp, #100]	; 0x64
 800dde4:	f000 fefa 	bl	800ebdc <__match>
 800dde8:	b910      	cbnz	r0, 800ddf0 <_strtod_l+0x368>
 800ddea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ddec:	3301      	adds	r3, #1
 800ddee:	9319      	str	r3, [sp, #100]	; 0x64
 800ddf0:	f04f 0800 	mov.w	r8, #0
 800ddf4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800e010 <_strtod_l+0x588>
 800ddf8:	e687      	b.n	800db0a <_strtod_l+0x82>
 800ddfa:	4886      	ldr	r0, [pc, #536]	; (800e014 <_strtod_l+0x58c>)
 800ddfc:	f001 fd10 	bl	800f820 <nan>
 800de00:	4680      	mov	r8, r0
 800de02:	4689      	mov	r9, r1
 800de04:	e681      	b.n	800db0a <_strtod_l+0x82>
 800de06:	9b04      	ldr	r3, [sp, #16]
 800de08:	f1bb 0f00 	cmp.w	fp, #0
 800de0c:	bf08      	it	eq
 800de0e:	46a3      	moveq	fp, r4
 800de10:	1aeb      	subs	r3, r5, r3
 800de12:	2c10      	cmp	r4, #16
 800de14:	9806      	ldr	r0, [sp, #24]
 800de16:	4626      	mov	r6, r4
 800de18:	9307      	str	r3, [sp, #28]
 800de1a:	bfa8      	it	ge
 800de1c:	2610      	movge	r6, #16
 800de1e:	f7f2 fae1 	bl	80003e4 <__aeabi_ui2d>
 800de22:	2c09      	cmp	r4, #9
 800de24:	4680      	mov	r8, r0
 800de26:	4689      	mov	r9, r1
 800de28:	dd13      	ble.n	800de52 <_strtod_l+0x3ca>
 800de2a:	4b7b      	ldr	r3, [pc, #492]	; (800e018 <_strtod_l+0x590>)
 800de2c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800de30:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800de34:	f7f2 fb50 	bl	80004d8 <__aeabi_dmul>
 800de38:	4680      	mov	r8, r0
 800de3a:	9805      	ldr	r0, [sp, #20]
 800de3c:	4689      	mov	r9, r1
 800de3e:	f7f2 fad1 	bl	80003e4 <__aeabi_ui2d>
 800de42:	4602      	mov	r2, r0
 800de44:	460b      	mov	r3, r1
 800de46:	4640      	mov	r0, r8
 800de48:	4649      	mov	r1, r9
 800de4a:	f7f2 f98f 	bl	800016c <__adddf3>
 800de4e:	4680      	mov	r8, r0
 800de50:	4689      	mov	r9, r1
 800de52:	2c0f      	cmp	r4, #15
 800de54:	dc36      	bgt.n	800dec4 <_strtod_l+0x43c>
 800de56:	9b07      	ldr	r3, [sp, #28]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	f43f ae56 	beq.w	800db0a <_strtod_l+0x82>
 800de5e:	dd22      	ble.n	800dea6 <_strtod_l+0x41e>
 800de60:	2b16      	cmp	r3, #22
 800de62:	dc09      	bgt.n	800de78 <_strtod_l+0x3f0>
 800de64:	496c      	ldr	r1, [pc, #432]	; (800e018 <_strtod_l+0x590>)
 800de66:	4642      	mov	r2, r8
 800de68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800de6c:	464b      	mov	r3, r9
 800de6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de72:	f7f2 fb31 	bl	80004d8 <__aeabi_dmul>
 800de76:	e7c3      	b.n	800de00 <_strtod_l+0x378>
 800de78:	9a07      	ldr	r2, [sp, #28]
 800de7a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800de7e:	4293      	cmp	r3, r2
 800de80:	db20      	blt.n	800dec4 <_strtod_l+0x43c>
 800de82:	4d65      	ldr	r5, [pc, #404]	; (800e018 <_strtod_l+0x590>)
 800de84:	f1c4 040f 	rsb	r4, r4, #15
 800de88:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800de8c:	4642      	mov	r2, r8
 800de8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de92:	464b      	mov	r3, r9
 800de94:	f7f2 fb20 	bl	80004d8 <__aeabi_dmul>
 800de98:	9b07      	ldr	r3, [sp, #28]
 800de9a:	1b1c      	subs	r4, r3, r4
 800de9c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800dea0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dea4:	e7e5      	b.n	800de72 <_strtod_l+0x3ea>
 800dea6:	9b07      	ldr	r3, [sp, #28]
 800dea8:	3316      	adds	r3, #22
 800deaa:	db0b      	blt.n	800dec4 <_strtod_l+0x43c>
 800deac:	9b04      	ldr	r3, [sp, #16]
 800deae:	4640      	mov	r0, r8
 800deb0:	1b5d      	subs	r5, r3, r5
 800deb2:	4b59      	ldr	r3, [pc, #356]	; (800e018 <_strtod_l+0x590>)
 800deb4:	4649      	mov	r1, r9
 800deb6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800deba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800debe:	f7f2 fc35 	bl	800072c <__aeabi_ddiv>
 800dec2:	e79d      	b.n	800de00 <_strtod_l+0x378>
 800dec4:	9b07      	ldr	r3, [sp, #28]
 800dec6:	1ba6      	subs	r6, r4, r6
 800dec8:	441e      	add	r6, r3
 800deca:	2e00      	cmp	r6, #0
 800decc:	dd74      	ble.n	800dfb8 <_strtod_l+0x530>
 800dece:	f016 030f 	ands.w	r3, r6, #15
 800ded2:	d00a      	beq.n	800deea <_strtod_l+0x462>
 800ded4:	4950      	ldr	r1, [pc, #320]	; (800e018 <_strtod_l+0x590>)
 800ded6:	4642      	mov	r2, r8
 800ded8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dedc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dee0:	464b      	mov	r3, r9
 800dee2:	f7f2 faf9 	bl	80004d8 <__aeabi_dmul>
 800dee6:	4680      	mov	r8, r0
 800dee8:	4689      	mov	r9, r1
 800deea:	f036 060f 	bics.w	r6, r6, #15
 800deee:	d052      	beq.n	800df96 <_strtod_l+0x50e>
 800def0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800def4:	dd27      	ble.n	800df46 <_strtod_l+0x4be>
 800def6:	f04f 0b00 	mov.w	fp, #0
 800defa:	f8cd b010 	str.w	fp, [sp, #16]
 800defe:	f8cd b020 	str.w	fp, [sp, #32]
 800df02:	f8cd b018 	str.w	fp, [sp, #24]
 800df06:	2322      	movs	r3, #34	; 0x22
 800df08:	f04f 0800 	mov.w	r8, #0
 800df0c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800e010 <_strtod_l+0x588>
 800df10:	f8ca 3000 	str.w	r3, [sl]
 800df14:	9b08      	ldr	r3, [sp, #32]
 800df16:	2b00      	cmp	r3, #0
 800df18:	f43f adf7 	beq.w	800db0a <_strtod_l+0x82>
 800df1c:	4650      	mov	r0, sl
 800df1e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800df20:	f000 ff5e 	bl	800ede0 <_Bfree>
 800df24:	4650      	mov	r0, sl
 800df26:	9906      	ldr	r1, [sp, #24]
 800df28:	f000 ff5a 	bl	800ede0 <_Bfree>
 800df2c:	4650      	mov	r0, sl
 800df2e:	9904      	ldr	r1, [sp, #16]
 800df30:	f000 ff56 	bl	800ede0 <_Bfree>
 800df34:	4650      	mov	r0, sl
 800df36:	9908      	ldr	r1, [sp, #32]
 800df38:	f000 ff52 	bl	800ede0 <_Bfree>
 800df3c:	4659      	mov	r1, fp
 800df3e:	4650      	mov	r0, sl
 800df40:	f000 ff4e 	bl	800ede0 <_Bfree>
 800df44:	e5e1      	b.n	800db0a <_strtod_l+0x82>
 800df46:	4b35      	ldr	r3, [pc, #212]	; (800e01c <_strtod_l+0x594>)
 800df48:	4640      	mov	r0, r8
 800df4a:	9305      	str	r3, [sp, #20]
 800df4c:	2300      	movs	r3, #0
 800df4e:	4649      	mov	r1, r9
 800df50:	461f      	mov	r7, r3
 800df52:	1136      	asrs	r6, r6, #4
 800df54:	2e01      	cmp	r6, #1
 800df56:	dc21      	bgt.n	800df9c <_strtod_l+0x514>
 800df58:	b10b      	cbz	r3, 800df5e <_strtod_l+0x4d6>
 800df5a:	4680      	mov	r8, r0
 800df5c:	4689      	mov	r9, r1
 800df5e:	4b2f      	ldr	r3, [pc, #188]	; (800e01c <_strtod_l+0x594>)
 800df60:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800df64:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800df68:	4642      	mov	r2, r8
 800df6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800df6e:	464b      	mov	r3, r9
 800df70:	f7f2 fab2 	bl	80004d8 <__aeabi_dmul>
 800df74:	4b26      	ldr	r3, [pc, #152]	; (800e010 <_strtod_l+0x588>)
 800df76:	460a      	mov	r2, r1
 800df78:	400b      	ands	r3, r1
 800df7a:	4929      	ldr	r1, [pc, #164]	; (800e020 <_strtod_l+0x598>)
 800df7c:	4680      	mov	r8, r0
 800df7e:	428b      	cmp	r3, r1
 800df80:	d8b9      	bhi.n	800def6 <_strtod_l+0x46e>
 800df82:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800df86:	428b      	cmp	r3, r1
 800df88:	bf86      	itte	hi
 800df8a:	f04f 38ff 	movhi.w	r8, #4294967295
 800df8e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800e024 <_strtod_l+0x59c>
 800df92:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800df96:	2300      	movs	r3, #0
 800df98:	9305      	str	r3, [sp, #20]
 800df9a:	e07f      	b.n	800e09c <_strtod_l+0x614>
 800df9c:	07f2      	lsls	r2, r6, #31
 800df9e:	d505      	bpl.n	800dfac <_strtod_l+0x524>
 800dfa0:	9b05      	ldr	r3, [sp, #20]
 800dfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa6:	f7f2 fa97 	bl	80004d8 <__aeabi_dmul>
 800dfaa:	2301      	movs	r3, #1
 800dfac:	9a05      	ldr	r2, [sp, #20]
 800dfae:	3701      	adds	r7, #1
 800dfb0:	3208      	adds	r2, #8
 800dfb2:	1076      	asrs	r6, r6, #1
 800dfb4:	9205      	str	r2, [sp, #20]
 800dfb6:	e7cd      	b.n	800df54 <_strtod_l+0x4cc>
 800dfb8:	d0ed      	beq.n	800df96 <_strtod_l+0x50e>
 800dfba:	4276      	negs	r6, r6
 800dfbc:	f016 020f 	ands.w	r2, r6, #15
 800dfc0:	d00a      	beq.n	800dfd8 <_strtod_l+0x550>
 800dfc2:	4b15      	ldr	r3, [pc, #84]	; (800e018 <_strtod_l+0x590>)
 800dfc4:	4640      	mov	r0, r8
 800dfc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dfca:	4649      	mov	r1, r9
 800dfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd0:	f7f2 fbac 	bl	800072c <__aeabi_ddiv>
 800dfd4:	4680      	mov	r8, r0
 800dfd6:	4689      	mov	r9, r1
 800dfd8:	1136      	asrs	r6, r6, #4
 800dfda:	d0dc      	beq.n	800df96 <_strtod_l+0x50e>
 800dfdc:	2e1f      	cmp	r6, #31
 800dfde:	dd23      	ble.n	800e028 <_strtod_l+0x5a0>
 800dfe0:	f04f 0b00 	mov.w	fp, #0
 800dfe4:	f8cd b010 	str.w	fp, [sp, #16]
 800dfe8:	f8cd b020 	str.w	fp, [sp, #32]
 800dfec:	f8cd b018 	str.w	fp, [sp, #24]
 800dff0:	2322      	movs	r3, #34	; 0x22
 800dff2:	f04f 0800 	mov.w	r8, #0
 800dff6:	f04f 0900 	mov.w	r9, #0
 800dffa:	f8ca 3000 	str.w	r3, [sl]
 800dffe:	e789      	b.n	800df14 <_strtod_l+0x48c>
 800e000:	080128f1 	.word	0x080128f1
 800e004:	08012908 	.word	0x08012908
 800e008:	080128e8 	.word	0x080128e8
 800e00c:	080128eb 	.word	0x080128eb
 800e010:	7ff00000 	.word	0x7ff00000
 800e014:	08012b7f 	.word	0x08012b7f
 800e018:	08012a70 	.word	0x08012a70
 800e01c:	08012a48 	.word	0x08012a48
 800e020:	7ca00000 	.word	0x7ca00000
 800e024:	7fefffff 	.word	0x7fefffff
 800e028:	f016 0310 	ands.w	r3, r6, #16
 800e02c:	bf18      	it	ne
 800e02e:	236a      	movne	r3, #106	; 0x6a
 800e030:	4640      	mov	r0, r8
 800e032:	9305      	str	r3, [sp, #20]
 800e034:	4649      	mov	r1, r9
 800e036:	2300      	movs	r3, #0
 800e038:	4fb0      	ldr	r7, [pc, #704]	; (800e2fc <_strtod_l+0x874>)
 800e03a:	07f2      	lsls	r2, r6, #31
 800e03c:	d504      	bpl.n	800e048 <_strtod_l+0x5c0>
 800e03e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e042:	f7f2 fa49 	bl	80004d8 <__aeabi_dmul>
 800e046:	2301      	movs	r3, #1
 800e048:	1076      	asrs	r6, r6, #1
 800e04a:	f107 0708 	add.w	r7, r7, #8
 800e04e:	d1f4      	bne.n	800e03a <_strtod_l+0x5b2>
 800e050:	b10b      	cbz	r3, 800e056 <_strtod_l+0x5ce>
 800e052:	4680      	mov	r8, r0
 800e054:	4689      	mov	r9, r1
 800e056:	9b05      	ldr	r3, [sp, #20]
 800e058:	b1c3      	cbz	r3, 800e08c <_strtod_l+0x604>
 800e05a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e05e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e062:	2b00      	cmp	r3, #0
 800e064:	4649      	mov	r1, r9
 800e066:	dd11      	ble.n	800e08c <_strtod_l+0x604>
 800e068:	2b1f      	cmp	r3, #31
 800e06a:	f340 8127 	ble.w	800e2bc <_strtod_l+0x834>
 800e06e:	2b34      	cmp	r3, #52	; 0x34
 800e070:	bfd8      	it	le
 800e072:	f04f 33ff 	movle.w	r3, #4294967295
 800e076:	f04f 0800 	mov.w	r8, #0
 800e07a:	bfcf      	iteee	gt
 800e07c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e080:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e084:	fa03 f202 	lslle.w	r2, r3, r2
 800e088:	ea02 0901 	andle.w	r9, r2, r1
 800e08c:	2200      	movs	r2, #0
 800e08e:	2300      	movs	r3, #0
 800e090:	4640      	mov	r0, r8
 800e092:	4649      	mov	r1, r9
 800e094:	f7f2 fc88 	bl	80009a8 <__aeabi_dcmpeq>
 800e098:	2800      	cmp	r0, #0
 800e09a:	d1a1      	bne.n	800dfe0 <_strtod_l+0x558>
 800e09c:	9b06      	ldr	r3, [sp, #24]
 800e09e:	465a      	mov	r2, fp
 800e0a0:	9300      	str	r3, [sp, #0]
 800e0a2:	4650      	mov	r0, sl
 800e0a4:	4623      	mov	r3, r4
 800e0a6:	9908      	ldr	r1, [sp, #32]
 800e0a8:	f000 ff02 	bl	800eeb0 <__s2b>
 800e0ac:	9008      	str	r0, [sp, #32]
 800e0ae:	2800      	cmp	r0, #0
 800e0b0:	f43f af21 	beq.w	800def6 <_strtod_l+0x46e>
 800e0b4:	9b04      	ldr	r3, [sp, #16]
 800e0b6:	f04f 0b00 	mov.w	fp, #0
 800e0ba:	1b5d      	subs	r5, r3, r5
 800e0bc:	9b07      	ldr	r3, [sp, #28]
 800e0be:	f8cd b010 	str.w	fp, [sp, #16]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	bfb4      	ite	lt
 800e0c6:	462b      	movlt	r3, r5
 800e0c8:	2300      	movge	r3, #0
 800e0ca:	930e      	str	r3, [sp, #56]	; 0x38
 800e0cc:	9b07      	ldr	r3, [sp, #28]
 800e0ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e0d2:	9314      	str	r3, [sp, #80]	; 0x50
 800e0d4:	9b08      	ldr	r3, [sp, #32]
 800e0d6:	4650      	mov	r0, sl
 800e0d8:	6859      	ldr	r1, [r3, #4]
 800e0da:	f000 fe41 	bl	800ed60 <_Balloc>
 800e0de:	9006      	str	r0, [sp, #24]
 800e0e0:	2800      	cmp	r0, #0
 800e0e2:	f43f af10 	beq.w	800df06 <_strtod_l+0x47e>
 800e0e6:	9b08      	ldr	r3, [sp, #32]
 800e0e8:	300c      	adds	r0, #12
 800e0ea:	691a      	ldr	r2, [r3, #16]
 800e0ec:	f103 010c 	add.w	r1, r3, #12
 800e0f0:	3202      	adds	r2, #2
 800e0f2:	0092      	lsls	r2, r2, #2
 800e0f4:	f7ff fc7a 	bl	800d9ec <memcpy>
 800e0f8:	ab1c      	add	r3, sp, #112	; 0x70
 800e0fa:	9301      	str	r3, [sp, #4]
 800e0fc:	ab1b      	add	r3, sp, #108	; 0x6c
 800e0fe:	9300      	str	r3, [sp, #0]
 800e100:	4642      	mov	r2, r8
 800e102:	464b      	mov	r3, r9
 800e104:	4650      	mov	r0, sl
 800e106:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800e10a:	f001 fa13 	bl	800f534 <__d2b>
 800e10e:	901a      	str	r0, [sp, #104]	; 0x68
 800e110:	2800      	cmp	r0, #0
 800e112:	f43f aef8 	beq.w	800df06 <_strtod_l+0x47e>
 800e116:	2101      	movs	r1, #1
 800e118:	4650      	mov	r0, sl
 800e11a:	f000 ff61 	bl	800efe0 <__i2b>
 800e11e:	4603      	mov	r3, r0
 800e120:	9004      	str	r0, [sp, #16]
 800e122:	2800      	cmp	r0, #0
 800e124:	f43f aeef 	beq.w	800df06 <_strtod_l+0x47e>
 800e128:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e12a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e12c:	2d00      	cmp	r5, #0
 800e12e:	bfab      	itete	ge
 800e130:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800e132:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800e134:	18ee      	addge	r6, r5, r3
 800e136:	1b5c      	sublt	r4, r3, r5
 800e138:	9b05      	ldr	r3, [sp, #20]
 800e13a:	bfa8      	it	ge
 800e13c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800e13e:	eba5 0503 	sub.w	r5, r5, r3
 800e142:	4415      	add	r5, r2
 800e144:	4b6e      	ldr	r3, [pc, #440]	; (800e300 <_strtod_l+0x878>)
 800e146:	f105 35ff 	add.w	r5, r5, #4294967295
 800e14a:	bfb8      	it	lt
 800e14c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800e14e:	429d      	cmp	r5, r3
 800e150:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e154:	f280 80c4 	bge.w	800e2e0 <_strtod_l+0x858>
 800e158:	1b5b      	subs	r3, r3, r5
 800e15a:	2b1f      	cmp	r3, #31
 800e15c:	f04f 0701 	mov.w	r7, #1
 800e160:	eba2 0203 	sub.w	r2, r2, r3
 800e164:	f300 80b1 	bgt.w	800e2ca <_strtod_l+0x842>
 800e168:	2500      	movs	r5, #0
 800e16a:	fa07 f303 	lsl.w	r3, r7, r3
 800e16e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e170:	18b7      	adds	r7, r6, r2
 800e172:	9b05      	ldr	r3, [sp, #20]
 800e174:	42be      	cmp	r6, r7
 800e176:	4414      	add	r4, r2
 800e178:	441c      	add	r4, r3
 800e17a:	4633      	mov	r3, r6
 800e17c:	bfa8      	it	ge
 800e17e:	463b      	movge	r3, r7
 800e180:	42a3      	cmp	r3, r4
 800e182:	bfa8      	it	ge
 800e184:	4623      	movge	r3, r4
 800e186:	2b00      	cmp	r3, #0
 800e188:	bfc2      	ittt	gt
 800e18a:	1aff      	subgt	r7, r7, r3
 800e18c:	1ae4      	subgt	r4, r4, r3
 800e18e:	1af6      	subgt	r6, r6, r3
 800e190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e192:	2b00      	cmp	r3, #0
 800e194:	dd17      	ble.n	800e1c6 <_strtod_l+0x73e>
 800e196:	461a      	mov	r2, r3
 800e198:	4650      	mov	r0, sl
 800e19a:	9904      	ldr	r1, [sp, #16]
 800e19c:	f000 ffde 	bl	800f15c <__pow5mult>
 800e1a0:	9004      	str	r0, [sp, #16]
 800e1a2:	2800      	cmp	r0, #0
 800e1a4:	f43f aeaf 	beq.w	800df06 <_strtod_l+0x47e>
 800e1a8:	4601      	mov	r1, r0
 800e1aa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e1ac:	4650      	mov	r0, sl
 800e1ae:	f000 ff2d 	bl	800f00c <__multiply>
 800e1b2:	9009      	str	r0, [sp, #36]	; 0x24
 800e1b4:	2800      	cmp	r0, #0
 800e1b6:	f43f aea6 	beq.w	800df06 <_strtod_l+0x47e>
 800e1ba:	4650      	mov	r0, sl
 800e1bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e1be:	f000 fe0f 	bl	800ede0 <_Bfree>
 800e1c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1c4:	931a      	str	r3, [sp, #104]	; 0x68
 800e1c6:	2f00      	cmp	r7, #0
 800e1c8:	f300 808e 	bgt.w	800e2e8 <_strtod_l+0x860>
 800e1cc:	9b07      	ldr	r3, [sp, #28]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	dd08      	ble.n	800e1e4 <_strtod_l+0x75c>
 800e1d2:	4650      	mov	r0, sl
 800e1d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e1d6:	9906      	ldr	r1, [sp, #24]
 800e1d8:	f000 ffc0 	bl	800f15c <__pow5mult>
 800e1dc:	9006      	str	r0, [sp, #24]
 800e1de:	2800      	cmp	r0, #0
 800e1e0:	f43f ae91 	beq.w	800df06 <_strtod_l+0x47e>
 800e1e4:	2c00      	cmp	r4, #0
 800e1e6:	dd08      	ble.n	800e1fa <_strtod_l+0x772>
 800e1e8:	4622      	mov	r2, r4
 800e1ea:	4650      	mov	r0, sl
 800e1ec:	9906      	ldr	r1, [sp, #24]
 800e1ee:	f001 f80f 	bl	800f210 <__lshift>
 800e1f2:	9006      	str	r0, [sp, #24]
 800e1f4:	2800      	cmp	r0, #0
 800e1f6:	f43f ae86 	beq.w	800df06 <_strtod_l+0x47e>
 800e1fa:	2e00      	cmp	r6, #0
 800e1fc:	dd08      	ble.n	800e210 <_strtod_l+0x788>
 800e1fe:	4632      	mov	r2, r6
 800e200:	4650      	mov	r0, sl
 800e202:	9904      	ldr	r1, [sp, #16]
 800e204:	f001 f804 	bl	800f210 <__lshift>
 800e208:	9004      	str	r0, [sp, #16]
 800e20a:	2800      	cmp	r0, #0
 800e20c:	f43f ae7b 	beq.w	800df06 <_strtod_l+0x47e>
 800e210:	4650      	mov	r0, sl
 800e212:	9a06      	ldr	r2, [sp, #24]
 800e214:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e216:	f001 f887 	bl	800f328 <__mdiff>
 800e21a:	4683      	mov	fp, r0
 800e21c:	2800      	cmp	r0, #0
 800e21e:	f43f ae72 	beq.w	800df06 <_strtod_l+0x47e>
 800e222:	2400      	movs	r4, #0
 800e224:	68c3      	ldr	r3, [r0, #12]
 800e226:	9904      	ldr	r1, [sp, #16]
 800e228:	60c4      	str	r4, [r0, #12]
 800e22a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e22c:	f001 f860 	bl	800f2f0 <__mcmp>
 800e230:	42a0      	cmp	r0, r4
 800e232:	da6b      	bge.n	800e30c <_strtod_l+0x884>
 800e234:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e236:	ea53 0308 	orrs.w	r3, r3, r8
 800e23a:	f040 8091 	bne.w	800e360 <_strtod_l+0x8d8>
 800e23e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e242:	2b00      	cmp	r3, #0
 800e244:	f040 808c 	bne.w	800e360 <_strtod_l+0x8d8>
 800e248:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e24c:	0d1b      	lsrs	r3, r3, #20
 800e24e:	051b      	lsls	r3, r3, #20
 800e250:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e254:	f240 8084 	bls.w	800e360 <_strtod_l+0x8d8>
 800e258:	f8db 3014 	ldr.w	r3, [fp, #20]
 800e25c:	b91b      	cbnz	r3, 800e266 <_strtod_l+0x7de>
 800e25e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e262:	2b01      	cmp	r3, #1
 800e264:	dd7c      	ble.n	800e360 <_strtod_l+0x8d8>
 800e266:	4659      	mov	r1, fp
 800e268:	2201      	movs	r2, #1
 800e26a:	4650      	mov	r0, sl
 800e26c:	f000 ffd0 	bl	800f210 <__lshift>
 800e270:	9904      	ldr	r1, [sp, #16]
 800e272:	4683      	mov	fp, r0
 800e274:	f001 f83c 	bl	800f2f0 <__mcmp>
 800e278:	2800      	cmp	r0, #0
 800e27a:	dd71      	ble.n	800e360 <_strtod_l+0x8d8>
 800e27c:	9905      	ldr	r1, [sp, #20]
 800e27e:	464b      	mov	r3, r9
 800e280:	4a20      	ldr	r2, [pc, #128]	; (800e304 <_strtod_l+0x87c>)
 800e282:	2900      	cmp	r1, #0
 800e284:	f000 808c 	beq.w	800e3a0 <_strtod_l+0x918>
 800e288:	ea02 0109 	and.w	r1, r2, r9
 800e28c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e290:	f300 8086 	bgt.w	800e3a0 <_strtod_l+0x918>
 800e294:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e298:	f77f aeaa 	ble.w	800dff0 <_strtod_l+0x568>
 800e29c:	4640      	mov	r0, r8
 800e29e:	4649      	mov	r1, r9
 800e2a0:	4b19      	ldr	r3, [pc, #100]	; (800e308 <_strtod_l+0x880>)
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	f7f2 f918 	bl	80004d8 <__aeabi_dmul>
 800e2a8:	460b      	mov	r3, r1
 800e2aa:	4303      	orrs	r3, r0
 800e2ac:	bf08      	it	eq
 800e2ae:	2322      	moveq	r3, #34	; 0x22
 800e2b0:	4680      	mov	r8, r0
 800e2b2:	4689      	mov	r9, r1
 800e2b4:	bf08      	it	eq
 800e2b6:	f8ca 3000 	streq.w	r3, [sl]
 800e2ba:	e62f      	b.n	800df1c <_strtod_l+0x494>
 800e2bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e2c0:	fa02 f303 	lsl.w	r3, r2, r3
 800e2c4:	ea03 0808 	and.w	r8, r3, r8
 800e2c8:	e6e0      	b.n	800e08c <_strtod_l+0x604>
 800e2ca:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800e2ce:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800e2d2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800e2d6:	35e2      	adds	r5, #226	; 0xe2
 800e2d8:	fa07 f505 	lsl.w	r5, r7, r5
 800e2dc:	970f      	str	r7, [sp, #60]	; 0x3c
 800e2de:	e747      	b.n	800e170 <_strtod_l+0x6e8>
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	2500      	movs	r5, #0
 800e2e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800e2e6:	e743      	b.n	800e170 <_strtod_l+0x6e8>
 800e2e8:	463a      	mov	r2, r7
 800e2ea:	4650      	mov	r0, sl
 800e2ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e2ee:	f000 ff8f 	bl	800f210 <__lshift>
 800e2f2:	901a      	str	r0, [sp, #104]	; 0x68
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	f47f af69 	bne.w	800e1cc <_strtod_l+0x744>
 800e2fa:	e604      	b.n	800df06 <_strtod_l+0x47e>
 800e2fc:	08012920 	.word	0x08012920
 800e300:	fffffc02 	.word	0xfffffc02
 800e304:	7ff00000 	.word	0x7ff00000
 800e308:	39500000 	.word	0x39500000
 800e30c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e310:	d165      	bne.n	800e3de <_strtod_l+0x956>
 800e312:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e314:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e318:	b35a      	cbz	r2, 800e372 <_strtod_l+0x8ea>
 800e31a:	4a99      	ldr	r2, [pc, #612]	; (800e580 <_strtod_l+0xaf8>)
 800e31c:	4293      	cmp	r3, r2
 800e31e:	d12b      	bne.n	800e378 <_strtod_l+0x8f0>
 800e320:	9b05      	ldr	r3, [sp, #20]
 800e322:	4641      	mov	r1, r8
 800e324:	b303      	cbz	r3, 800e368 <_strtod_l+0x8e0>
 800e326:	464a      	mov	r2, r9
 800e328:	4b96      	ldr	r3, [pc, #600]	; (800e584 <_strtod_l+0xafc>)
 800e32a:	4013      	ands	r3, r2
 800e32c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e330:	f04f 32ff 	mov.w	r2, #4294967295
 800e334:	d81b      	bhi.n	800e36e <_strtod_l+0x8e6>
 800e336:	0d1b      	lsrs	r3, r3, #20
 800e338:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e33c:	fa02 f303 	lsl.w	r3, r2, r3
 800e340:	4299      	cmp	r1, r3
 800e342:	d119      	bne.n	800e378 <_strtod_l+0x8f0>
 800e344:	4b90      	ldr	r3, [pc, #576]	; (800e588 <_strtod_l+0xb00>)
 800e346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e348:	429a      	cmp	r2, r3
 800e34a:	d102      	bne.n	800e352 <_strtod_l+0x8ca>
 800e34c:	3101      	adds	r1, #1
 800e34e:	f43f adda 	beq.w	800df06 <_strtod_l+0x47e>
 800e352:	f04f 0800 	mov.w	r8, #0
 800e356:	4b8b      	ldr	r3, [pc, #556]	; (800e584 <_strtod_l+0xafc>)
 800e358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e35a:	401a      	ands	r2, r3
 800e35c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800e360:	9b05      	ldr	r3, [sp, #20]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d19a      	bne.n	800e29c <_strtod_l+0x814>
 800e366:	e5d9      	b.n	800df1c <_strtod_l+0x494>
 800e368:	f04f 33ff 	mov.w	r3, #4294967295
 800e36c:	e7e8      	b.n	800e340 <_strtod_l+0x8b8>
 800e36e:	4613      	mov	r3, r2
 800e370:	e7e6      	b.n	800e340 <_strtod_l+0x8b8>
 800e372:	ea53 0308 	orrs.w	r3, r3, r8
 800e376:	d081      	beq.n	800e27c <_strtod_l+0x7f4>
 800e378:	b1e5      	cbz	r5, 800e3b4 <_strtod_l+0x92c>
 800e37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e37c:	421d      	tst	r5, r3
 800e37e:	d0ef      	beq.n	800e360 <_strtod_l+0x8d8>
 800e380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e382:	4640      	mov	r0, r8
 800e384:	4649      	mov	r1, r9
 800e386:	9a05      	ldr	r2, [sp, #20]
 800e388:	b1c3      	cbz	r3, 800e3bc <_strtod_l+0x934>
 800e38a:	f7ff fb59 	bl	800da40 <sulp>
 800e38e:	4602      	mov	r2, r0
 800e390:	460b      	mov	r3, r1
 800e392:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e396:	f7f1 fee9 	bl	800016c <__adddf3>
 800e39a:	4680      	mov	r8, r0
 800e39c:	4689      	mov	r9, r1
 800e39e:	e7df      	b.n	800e360 <_strtod_l+0x8d8>
 800e3a0:	4013      	ands	r3, r2
 800e3a2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e3a6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e3aa:	f04f 38ff 	mov.w	r8, #4294967295
 800e3ae:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e3b2:	e7d5      	b.n	800e360 <_strtod_l+0x8d8>
 800e3b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e3b6:	ea13 0f08 	tst.w	r3, r8
 800e3ba:	e7e0      	b.n	800e37e <_strtod_l+0x8f6>
 800e3bc:	f7ff fb40 	bl	800da40 <sulp>
 800e3c0:	4602      	mov	r2, r0
 800e3c2:	460b      	mov	r3, r1
 800e3c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e3c8:	f7f1 fece 	bl	8000168 <__aeabi_dsub>
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	4680      	mov	r8, r0
 800e3d2:	4689      	mov	r9, r1
 800e3d4:	f7f2 fae8 	bl	80009a8 <__aeabi_dcmpeq>
 800e3d8:	2800      	cmp	r0, #0
 800e3da:	d0c1      	beq.n	800e360 <_strtod_l+0x8d8>
 800e3dc:	e608      	b.n	800dff0 <_strtod_l+0x568>
 800e3de:	4658      	mov	r0, fp
 800e3e0:	9904      	ldr	r1, [sp, #16]
 800e3e2:	f001 f903 	bl	800f5ec <__ratio>
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e3ec:	4606      	mov	r6, r0
 800e3ee:	460f      	mov	r7, r1
 800e3f0:	f7f2 faee 	bl	80009d0 <__aeabi_dcmple>
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	d070      	beq.n	800e4da <_strtod_l+0xa52>
 800e3f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d042      	beq.n	800e484 <_strtod_l+0x9fc>
 800e3fe:	2600      	movs	r6, #0
 800e400:	4f62      	ldr	r7, [pc, #392]	; (800e58c <_strtod_l+0xb04>)
 800e402:	4d62      	ldr	r5, [pc, #392]	; (800e58c <_strtod_l+0xb04>)
 800e404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e406:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e40a:	0d1b      	lsrs	r3, r3, #20
 800e40c:	051b      	lsls	r3, r3, #20
 800e40e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e410:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e412:	4b5f      	ldr	r3, [pc, #380]	; (800e590 <_strtod_l+0xb08>)
 800e414:	429a      	cmp	r2, r3
 800e416:	f040 80c3 	bne.w	800e5a0 <_strtod_l+0xb18>
 800e41a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e41c:	4640      	mov	r0, r8
 800e41e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800e422:	4649      	mov	r1, r9
 800e424:	f001 f80c 	bl	800f440 <__ulp>
 800e428:	4602      	mov	r2, r0
 800e42a:	460b      	mov	r3, r1
 800e42c:	4630      	mov	r0, r6
 800e42e:	4639      	mov	r1, r7
 800e430:	f7f2 f852 	bl	80004d8 <__aeabi_dmul>
 800e434:	4642      	mov	r2, r8
 800e436:	464b      	mov	r3, r9
 800e438:	f7f1 fe98 	bl	800016c <__adddf3>
 800e43c:	460b      	mov	r3, r1
 800e43e:	4951      	ldr	r1, [pc, #324]	; (800e584 <_strtod_l+0xafc>)
 800e440:	4a54      	ldr	r2, [pc, #336]	; (800e594 <_strtod_l+0xb0c>)
 800e442:	4019      	ands	r1, r3
 800e444:	4291      	cmp	r1, r2
 800e446:	4680      	mov	r8, r0
 800e448:	d95d      	bls.n	800e506 <_strtod_l+0xa7e>
 800e44a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e44c:	4b4e      	ldr	r3, [pc, #312]	; (800e588 <_strtod_l+0xb00>)
 800e44e:	429a      	cmp	r2, r3
 800e450:	d103      	bne.n	800e45a <_strtod_l+0x9d2>
 800e452:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e454:	3301      	adds	r3, #1
 800e456:	f43f ad56 	beq.w	800df06 <_strtod_l+0x47e>
 800e45a:	f04f 38ff 	mov.w	r8, #4294967295
 800e45e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800e588 <_strtod_l+0xb00>
 800e462:	4650      	mov	r0, sl
 800e464:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e466:	f000 fcbb 	bl	800ede0 <_Bfree>
 800e46a:	4650      	mov	r0, sl
 800e46c:	9906      	ldr	r1, [sp, #24]
 800e46e:	f000 fcb7 	bl	800ede0 <_Bfree>
 800e472:	4650      	mov	r0, sl
 800e474:	9904      	ldr	r1, [sp, #16]
 800e476:	f000 fcb3 	bl	800ede0 <_Bfree>
 800e47a:	4659      	mov	r1, fp
 800e47c:	4650      	mov	r0, sl
 800e47e:	f000 fcaf 	bl	800ede0 <_Bfree>
 800e482:	e627      	b.n	800e0d4 <_strtod_l+0x64c>
 800e484:	f1b8 0f00 	cmp.w	r8, #0
 800e488:	d119      	bne.n	800e4be <_strtod_l+0xa36>
 800e48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e48c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e490:	b9e3      	cbnz	r3, 800e4cc <_strtod_l+0xa44>
 800e492:	2200      	movs	r2, #0
 800e494:	4630      	mov	r0, r6
 800e496:	4639      	mov	r1, r7
 800e498:	4b3c      	ldr	r3, [pc, #240]	; (800e58c <_strtod_l+0xb04>)
 800e49a:	f7f2 fa8f 	bl	80009bc <__aeabi_dcmplt>
 800e49e:	b9c8      	cbnz	r0, 800e4d4 <_strtod_l+0xa4c>
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	4630      	mov	r0, r6
 800e4a4:	4639      	mov	r1, r7
 800e4a6:	4b3c      	ldr	r3, [pc, #240]	; (800e598 <_strtod_l+0xb10>)
 800e4a8:	f7f2 f816 	bl	80004d8 <__aeabi_dmul>
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	460d      	mov	r5, r1
 800e4b0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800e4b4:	9416      	str	r4, [sp, #88]	; 0x58
 800e4b6:	9317      	str	r3, [sp, #92]	; 0x5c
 800e4b8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800e4bc:	e7a2      	b.n	800e404 <_strtod_l+0x97c>
 800e4be:	f1b8 0f01 	cmp.w	r8, #1
 800e4c2:	d103      	bne.n	800e4cc <_strtod_l+0xa44>
 800e4c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	f43f ad92 	beq.w	800dff0 <_strtod_l+0x568>
 800e4cc:	2600      	movs	r6, #0
 800e4ce:	2400      	movs	r4, #0
 800e4d0:	4f32      	ldr	r7, [pc, #200]	; (800e59c <_strtod_l+0xb14>)
 800e4d2:	e796      	b.n	800e402 <_strtod_l+0x97a>
 800e4d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e4d6:	4d30      	ldr	r5, [pc, #192]	; (800e598 <_strtod_l+0xb10>)
 800e4d8:	e7ea      	b.n	800e4b0 <_strtod_l+0xa28>
 800e4da:	4b2f      	ldr	r3, [pc, #188]	; (800e598 <_strtod_l+0xb10>)
 800e4dc:	2200      	movs	r2, #0
 800e4de:	4630      	mov	r0, r6
 800e4e0:	4639      	mov	r1, r7
 800e4e2:	f7f1 fff9 	bl	80004d8 <__aeabi_dmul>
 800e4e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4e8:	4604      	mov	r4, r0
 800e4ea:	460d      	mov	r5, r1
 800e4ec:	b933      	cbnz	r3, 800e4fc <_strtod_l+0xa74>
 800e4ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e4f2:	9010      	str	r0, [sp, #64]	; 0x40
 800e4f4:	9311      	str	r3, [sp, #68]	; 0x44
 800e4f6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800e4fa:	e783      	b.n	800e404 <_strtod_l+0x97c>
 800e4fc:	4602      	mov	r2, r0
 800e4fe:	460b      	mov	r3, r1
 800e500:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800e504:	e7f7      	b.n	800e4f6 <_strtod_l+0xa6e>
 800e506:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e50a:	9b05      	ldr	r3, [sp, #20]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d1a8      	bne.n	800e462 <_strtod_l+0x9da>
 800e510:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e514:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e516:	0d1b      	lsrs	r3, r3, #20
 800e518:	051b      	lsls	r3, r3, #20
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d1a1      	bne.n	800e462 <_strtod_l+0x9da>
 800e51e:	4620      	mov	r0, r4
 800e520:	4629      	mov	r1, r5
 800e522:	f7f2 fe51 	bl	80011c8 <__aeabi_d2lz>
 800e526:	f7f1 ffa9 	bl	800047c <__aeabi_l2d>
 800e52a:	4602      	mov	r2, r0
 800e52c:	460b      	mov	r3, r1
 800e52e:	4620      	mov	r0, r4
 800e530:	4629      	mov	r1, r5
 800e532:	f7f1 fe19 	bl	8000168 <__aeabi_dsub>
 800e536:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e538:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e53c:	ea43 0308 	orr.w	r3, r3, r8
 800e540:	4313      	orrs	r3, r2
 800e542:	4604      	mov	r4, r0
 800e544:	460d      	mov	r5, r1
 800e546:	d066      	beq.n	800e616 <_strtod_l+0xb8e>
 800e548:	a309      	add	r3, pc, #36	; (adr r3, 800e570 <_strtod_l+0xae8>)
 800e54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54e:	f7f2 fa35 	bl	80009bc <__aeabi_dcmplt>
 800e552:	2800      	cmp	r0, #0
 800e554:	f47f ace2 	bne.w	800df1c <_strtod_l+0x494>
 800e558:	a307      	add	r3, pc, #28	; (adr r3, 800e578 <_strtod_l+0xaf0>)
 800e55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55e:	4620      	mov	r0, r4
 800e560:	4629      	mov	r1, r5
 800e562:	f7f2 fa49 	bl	80009f8 <__aeabi_dcmpgt>
 800e566:	2800      	cmp	r0, #0
 800e568:	f43f af7b 	beq.w	800e462 <_strtod_l+0x9da>
 800e56c:	e4d6      	b.n	800df1c <_strtod_l+0x494>
 800e56e:	bf00      	nop
 800e570:	94a03595 	.word	0x94a03595
 800e574:	3fdfffff 	.word	0x3fdfffff
 800e578:	35afe535 	.word	0x35afe535
 800e57c:	3fe00000 	.word	0x3fe00000
 800e580:	000fffff 	.word	0x000fffff
 800e584:	7ff00000 	.word	0x7ff00000
 800e588:	7fefffff 	.word	0x7fefffff
 800e58c:	3ff00000 	.word	0x3ff00000
 800e590:	7fe00000 	.word	0x7fe00000
 800e594:	7c9fffff 	.word	0x7c9fffff
 800e598:	3fe00000 	.word	0x3fe00000
 800e59c:	bff00000 	.word	0xbff00000
 800e5a0:	9b05      	ldr	r3, [sp, #20]
 800e5a2:	b313      	cbz	r3, 800e5ea <_strtod_l+0xb62>
 800e5a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e5a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e5aa:	d81e      	bhi.n	800e5ea <_strtod_l+0xb62>
 800e5ac:	a326      	add	r3, pc, #152	; (adr r3, 800e648 <_strtod_l+0xbc0>)
 800e5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b2:	4620      	mov	r0, r4
 800e5b4:	4629      	mov	r1, r5
 800e5b6:	f7f2 fa0b 	bl	80009d0 <__aeabi_dcmple>
 800e5ba:	b190      	cbz	r0, 800e5e2 <_strtod_l+0xb5a>
 800e5bc:	4629      	mov	r1, r5
 800e5be:	4620      	mov	r0, r4
 800e5c0:	f7f2 fa62 	bl	8000a88 <__aeabi_d2uiz>
 800e5c4:	2801      	cmp	r0, #1
 800e5c6:	bf38      	it	cc
 800e5c8:	2001      	movcc	r0, #1
 800e5ca:	f7f1 ff0b 	bl	80003e4 <__aeabi_ui2d>
 800e5ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5d0:	4604      	mov	r4, r0
 800e5d2:	460d      	mov	r5, r1
 800e5d4:	b9d3      	cbnz	r3, 800e60c <_strtod_l+0xb84>
 800e5d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5da:	9012      	str	r0, [sp, #72]	; 0x48
 800e5dc:	9313      	str	r3, [sp, #76]	; 0x4c
 800e5de:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800e5e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e5e4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800e5e8:	1a9f      	subs	r7, r3, r2
 800e5ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e5ee:	f000 ff27 	bl	800f440 <__ulp>
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	4630      	mov	r0, r6
 800e5f8:	4639      	mov	r1, r7
 800e5fa:	f7f1 ff6d 	bl	80004d8 <__aeabi_dmul>
 800e5fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e602:	f7f1 fdb3 	bl	800016c <__adddf3>
 800e606:	4680      	mov	r8, r0
 800e608:	4689      	mov	r9, r1
 800e60a:	e77e      	b.n	800e50a <_strtod_l+0xa82>
 800e60c:	4602      	mov	r2, r0
 800e60e:	460b      	mov	r3, r1
 800e610:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800e614:	e7e3      	b.n	800e5de <_strtod_l+0xb56>
 800e616:	a30e      	add	r3, pc, #56	; (adr r3, 800e650 <_strtod_l+0xbc8>)
 800e618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e61c:	f7f2 f9ce 	bl	80009bc <__aeabi_dcmplt>
 800e620:	e7a1      	b.n	800e566 <_strtod_l+0xade>
 800e622:	2300      	movs	r3, #0
 800e624:	930a      	str	r3, [sp, #40]	; 0x28
 800e626:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e628:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e62a:	6013      	str	r3, [r2, #0]
 800e62c:	f7ff ba71 	b.w	800db12 <_strtod_l+0x8a>
 800e630:	2a65      	cmp	r2, #101	; 0x65
 800e632:	f43f ab63 	beq.w	800dcfc <_strtod_l+0x274>
 800e636:	2a45      	cmp	r2, #69	; 0x45
 800e638:	f43f ab60 	beq.w	800dcfc <_strtod_l+0x274>
 800e63c:	2301      	movs	r3, #1
 800e63e:	f7ff bb95 	b.w	800dd6c <_strtod_l+0x2e4>
 800e642:	bf00      	nop
 800e644:	f3af 8000 	nop.w
 800e648:	ffc00000 	.word	0xffc00000
 800e64c:	41dfffff 	.word	0x41dfffff
 800e650:	94a03595 	.word	0x94a03595
 800e654:	3fcfffff 	.word	0x3fcfffff

0800e658 <strtod>:
 800e658:	460a      	mov	r2, r1
 800e65a:	4601      	mov	r1, r0
 800e65c:	4802      	ldr	r0, [pc, #8]	; (800e668 <strtod+0x10>)
 800e65e:	4b03      	ldr	r3, [pc, #12]	; (800e66c <strtod+0x14>)
 800e660:	6800      	ldr	r0, [r0, #0]
 800e662:	f7ff ba11 	b.w	800da88 <_strtod_l>
 800e666:	bf00      	nop
 800e668:	2000011c 	.word	0x2000011c
 800e66c:	20000184 	.word	0x20000184

0800e670 <rshift>:
 800e670:	6903      	ldr	r3, [r0, #16]
 800e672:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e676:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e67a:	f100 0414 	add.w	r4, r0, #20
 800e67e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e682:	dd46      	ble.n	800e712 <rshift+0xa2>
 800e684:	f011 011f 	ands.w	r1, r1, #31
 800e688:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e68c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e690:	d10c      	bne.n	800e6ac <rshift+0x3c>
 800e692:	4629      	mov	r1, r5
 800e694:	f100 0710 	add.w	r7, r0, #16
 800e698:	42b1      	cmp	r1, r6
 800e69a:	d335      	bcc.n	800e708 <rshift+0x98>
 800e69c:	1a9b      	subs	r3, r3, r2
 800e69e:	009b      	lsls	r3, r3, #2
 800e6a0:	1eea      	subs	r2, r5, #3
 800e6a2:	4296      	cmp	r6, r2
 800e6a4:	bf38      	it	cc
 800e6a6:	2300      	movcc	r3, #0
 800e6a8:	4423      	add	r3, r4
 800e6aa:	e015      	b.n	800e6d8 <rshift+0x68>
 800e6ac:	46a1      	mov	r9, r4
 800e6ae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e6b2:	f1c1 0820 	rsb	r8, r1, #32
 800e6b6:	40cf      	lsrs	r7, r1
 800e6b8:	f105 0e04 	add.w	lr, r5, #4
 800e6bc:	4576      	cmp	r6, lr
 800e6be:	46f4      	mov	ip, lr
 800e6c0:	d816      	bhi.n	800e6f0 <rshift+0x80>
 800e6c2:	1a9a      	subs	r2, r3, r2
 800e6c4:	0092      	lsls	r2, r2, #2
 800e6c6:	3a04      	subs	r2, #4
 800e6c8:	3501      	adds	r5, #1
 800e6ca:	42ae      	cmp	r6, r5
 800e6cc:	bf38      	it	cc
 800e6ce:	2200      	movcc	r2, #0
 800e6d0:	18a3      	adds	r3, r4, r2
 800e6d2:	50a7      	str	r7, [r4, r2]
 800e6d4:	b107      	cbz	r7, 800e6d8 <rshift+0x68>
 800e6d6:	3304      	adds	r3, #4
 800e6d8:	42a3      	cmp	r3, r4
 800e6da:	eba3 0204 	sub.w	r2, r3, r4
 800e6de:	bf08      	it	eq
 800e6e0:	2300      	moveq	r3, #0
 800e6e2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e6e6:	6102      	str	r2, [r0, #16]
 800e6e8:	bf08      	it	eq
 800e6ea:	6143      	streq	r3, [r0, #20]
 800e6ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6f0:	f8dc c000 	ldr.w	ip, [ip]
 800e6f4:	fa0c fc08 	lsl.w	ip, ip, r8
 800e6f8:	ea4c 0707 	orr.w	r7, ip, r7
 800e6fc:	f849 7b04 	str.w	r7, [r9], #4
 800e700:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e704:	40cf      	lsrs	r7, r1
 800e706:	e7d9      	b.n	800e6bc <rshift+0x4c>
 800e708:	f851 cb04 	ldr.w	ip, [r1], #4
 800e70c:	f847 cf04 	str.w	ip, [r7, #4]!
 800e710:	e7c2      	b.n	800e698 <rshift+0x28>
 800e712:	4623      	mov	r3, r4
 800e714:	e7e0      	b.n	800e6d8 <rshift+0x68>

0800e716 <__hexdig_fun>:
 800e716:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e71a:	2b09      	cmp	r3, #9
 800e71c:	d802      	bhi.n	800e724 <__hexdig_fun+0xe>
 800e71e:	3820      	subs	r0, #32
 800e720:	b2c0      	uxtb	r0, r0
 800e722:	4770      	bx	lr
 800e724:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e728:	2b05      	cmp	r3, #5
 800e72a:	d801      	bhi.n	800e730 <__hexdig_fun+0x1a>
 800e72c:	3847      	subs	r0, #71	; 0x47
 800e72e:	e7f7      	b.n	800e720 <__hexdig_fun+0xa>
 800e730:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e734:	2b05      	cmp	r3, #5
 800e736:	d801      	bhi.n	800e73c <__hexdig_fun+0x26>
 800e738:	3827      	subs	r0, #39	; 0x27
 800e73a:	e7f1      	b.n	800e720 <__hexdig_fun+0xa>
 800e73c:	2000      	movs	r0, #0
 800e73e:	4770      	bx	lr

0800e740 <__gethex>:
 800e740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e744:	b08b      	sub	sp, #44	; 0x2c
 800e746:	9305      	str	r3, [sp, #20]
 800e748:	4bb2      	ldr	r3, [pc, #712]	; (800ea14 <__gethex+0x2d4>)
 800e74a:	9002      	str	r0, [sp, #8]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	468b      	mov	fp, r1
 800e750:	4618      	mov	r0, r3
 800e752:	4690      	mov	r8, r2
 800e754:	9303      	str	r3, [sp, #12]
 800e756:	f7f1 fcfb 	bl	8000150 <strlen>
 800e75a:	4682      	mov	sl, r0
 800e75c:	9b03      	ldr	r3, [sp, #12]
 800e75e:	f8db 2000 	ldr.w	r2, [fp]
 800e762:	4403      	add	r3, r0
 800e764:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e768:	9306      	str	r3, [sp, #24]
 800e76a:	1c93      	adds	r3, r2, #2
 800e76c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e770:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e774:	32fe      	adds	r2, #254	; 0xfe
 800e776:	18d1      	adds	r1, r2, r3
 800e778:	461f      	mov	r7, r3
 800e77a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e77e:	9101      	str	r1, [sp, #4]
 800e780:	2830      	cmp	r0, #48	; 0x30
 800e782:	d0f8      	beq.n	800e776 <__gethex+0x36>
 800e784:	f7ff ffc7 	bl	800e716 <__hexdig_fun>
 800e788:	4604      	mov	r4, r0
 800e78a:	2800      	cmp	r0, #0
 800e78c:	d13a      	bne.n	800e804 <__gethex+0xc4>
 800e78e:	4652      	mov	r2, sl
 800e790:	4638      	mov	r0, r7
 800e792:	9903      	ldr	r1, [sp, #12]
 800e794:	f7ff f940 	bl	800da18 <strncmp>
 800e798:	4605      	mov	r5, r0
 800e79a:	2800      	cmp	r0, #0
 800e79c:	d166      	bne.n	800e86c <__gethex+0x12c>
 800e79e:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e7a2:	eb07 060a 	add.w	r6, r7, sl
 800e7a6:	f7ff ffb6 	bl	800e716 <__hexdig_fun>
 800e7aa:	2800      	cmp	r0, #0
 800e7ac:	d060      	beq.n	800e870 <__gethex+0x130>
 800e7ae:	4633      	mov	r3, r6
 800e7b0:	7818      	ldrb	r0, [r3, #0]
 800e7b2:	461f      	mov	r7, r3
 800e7b4:	2830      	cmp	r0, #48	; 0x30
 800e7b6:	f103 0301 	add.w	r3, r3, #1
 800e7ba:	d0f9      	beq.n	800e7b0 <__gethex+0x70>
 800e7bc:	f7ff ffab 	bl	800e716 <__hexdig_fun>
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	fab0 f480 	clz	r4, r0
 800e7c6:	4635      	mov	r5, r6
 800e7c8:	0964      	lsrs	r4, r4, #5
 800e7ca:	9301      	str	r3, [sp, #4]
 800e7cc:	463a      	mov	r2, r7
 800e7ce:	4616      	mov	r6, r2
 800e7d0:	7830      	ldrb	r0, [r6, #0]
 800e7d2:	3201      	adds	r2, #1
 800e7d4:	f7ff ff9f 	bl	800e716 <__hexdig_fun>
 800e7d8:	2800      	cmp	r0, #0
 800e7da:	d1f8      	bne.n	800e7ce <__gethex+0x8e>
 800e7dc:	4652      	mov	r2, sl
 800e7de:	4630      	mov	r0, r6
 800e7e0:	9903      	ldr	r1, [sp, #12]
 800e7e2:	f7ff f919 	bl	800da18 <strncmp>
 800e7e6:	b980      	cbnz	r0, 800e80a <__gethex+0xca>
 800e7e8:	b94d      	cbnz	r5, 800e7fe <__gethex+0xbe>
 800e7ea:	eb06 050a 	add.w	r5, r6, sl
 800e7ee:	462a      	mov	r2, r5
 800e7f0:	4616      	mov	r6, r2
 800e7f2:	7830      	ldrb	r0, [r6, #0]
 800e7f4:	3201      	adds	r2, #1
 800e7f6:	f7ff ff8e 	bl	800e716 <__hexdig_fun>
 800e7fa:	2800      	cmp	r0, #0
 800e7fc:	d1f8      	bne.n	800e7f0 <__gethex+0xb0>
 800e7fe:	1bad      	subs	r5, r5, r6
 800e800:	00ad      	lsls	r5, r5, #2
 800e802:	e004      	b.n	800e80e <__gethex+0xce>
 800e804:	2400      	movs	r4, #0
 800e806:	4625      	mov	r5, r4
 800e808:	e7e0      	b.n	800e7cc <__gethex+0x8c>
 800e80a:	2d00      	cmp	r5, #0
 800e80c:	d1f7      	bne.n	800e7fe <__gethex+0xbe>
 800e80e:	7833      	ldrb	r3, [r6, #0]
 800e810:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e814:	2b50      	cmp	r3, #80	; 0x50
 800e816:	d139      	bne.n	800e88c <__gethex+0x14c>
 800e818:	7873      	ldrb	r3, [r6, #1]
 800e81a:	2b2b      	cmp	r3, #43	; 0x2b
 800e81c:	d02a      	beq.n	800e874 <__gethex+0x134>
 800e81e:	2b2d      	cmp	r3, #45	; 0x2d
 800e820:	d02c      	beq.n	800e87c <__gethex+0x13c>
 800e822:	f04f 0900 	mov.w	r9, #0
 800e826:	1c71      	adds	r1, r6, #1
 800e828:	7808      	ldrb	r0, [r1, #0]
 800e82a:	f7ff ff74 	bl	800e716 <__hexdig_fun>
 800e82e:	1e43      	subs	r3, r0, #1
 800e830:	b2db      	uxtb	r3, r3
 800e832:	2b18      	cmp	r3, #24
 800e834:	d82a      	bhi.n	800e88c <__gethex+0x14c>
 800e836:	f1a0 0210 	sub.w	r2, r0, #16
 800e83a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e83e:	f7ff ff6a 	bl	800e716 <__hexdig_fun>
 800e842:	1e43      	subs	r3, r0, #1
 800e844:	b2db      	uxtb	r3, r3
 800e846:	2b18      	cmp	r3, #24
 800e848:	d91b      	bls.n	800e882 <__gethex+0x142>
 800e84a:	f1b9 0f00 	cmp.w	r9, #0
 800e84e:	d000      	beq.n	800e852 <__gethex+0x112>
 800e850:	4252      	negs	r2, r2
 800e852:	4415      	add	r5, r2
 800e854:	f8cb 1000 	str.w	r1, [fp]
 800e858:	b1d4      	cbz	r4, 800e890 <__gethex+0x150>
 800e85a:	9b01      	ldr	r3, [sp, #4]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	bf14      	ite	ne
 800e860:	2700      	movne	r7, #0
 800e862:	2706      	moveq	r7, #6
 800e864:	4638      	mov	r0, r7
 800e866:	b00b      	add	sp, #44	; 0x2c
 800e868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e86c:	463e      	mov	r6, r7
 800e86e:	4625      	mov	r5, r4
 800e870:	2401      	movs	r4, #1
 800e872:	e7cc      	b.n	800e80e <__gethex+0xce>
 800e874:	f04f 0900 	mov.w	r9, #0
 800e878:	1cb1      	adds	r1, r6, #2
 800e87a:	e7d5      	b.n	800e828 <__gethex+0xe8>
 800e87c:	f04f 0901 	mov.w	r9, #1
 800e880:	e7fa      	b.n	800e878 <__gethex+0x138>
 800e882:	230a      	movs	r3, #10
 800e884:	fb03 0202 	mla	r2, r3, r2, r0
 800e888:	3a10      	subs	r2, #16
 800e88a:	e7d6      	b.n	800e83a <__gethex+0xfa>
 800e88c:	4631      	mov	r1, r6
 800e88e:	e7e1      	b.n	800e854 <__gethex+0x114>
 800e890:	4621      	mov	r1, r4
 800e892:	1bf3      	subs	r3, r6, r7
 800e894:	3b01      	subs	r3, #1
 800e896:	2b07      	cmp	r3, #7
 800e898:	dc0a      	bgt.n	800e8b0 <__gethex+0x170>
 800e89a:	9802      	ldr	r0, [sp, #8]
 800e89c:	f000 fa60 	bl	800ed60 <_Balloc>
 800e8a0:	4604      	mov	r4, r0
 800e8a2:	b940      	cbnz	r0, 800e8b6 <__gethex+0x176>
 800e8a4:	4602      	mov	r2, r0
 800e8a6:	21de      	movs	r1, #222	; 0xde
 800e8a8:	4b5b      	ldr	r3, [pc, #364]	; (800ea18 <__gethex+0x2d8>)
 800e8aa:	485c      	ldr	r0, [pc, #368]	; (800ea1c <__gethex+0x2dc>)
 800e8ac:	f000 ffe0 	bl	800f870 <__assert_func>
 800e8b0:	3101      	adds	r1, #1
 800e8b2:	105b      	asrs	r3, r3, #1
 800e8b4:	e7ef      	b.n	800e896 <__gethex+0x156>
 800e8b6:	f04f 0b00 	mov.w	fp, #0
 800e8ba:	f100 0914 	add.w	r9, r0, #20
 800e8be:	f1ca 0301 	rsb	r3, sl, #1
 800e8c2:	f8cd 9010 	str.w	r9, [sp, #16]
 800e8c6:	f8cd b004 	str.w	fp, [sp, #4]
 800e8ca:	9308      	str	r3, [sp, #32]
 800e8cc:	42b7      	cmp	r7, r6
 800e8ce:	d33f      	bcc.n	800e950 <__gethex+0x210>
 800e8d0:	9f04      	ldr	r7, [sp, #16]
 800e8d2:	9b01      	ldr	r3, [sp, #4]
 800e8d4:	f847 3b04 	str.w	r3, [r7], #4
 800e8d8:	eba7 0709 	sub.w	r7, r7, r9
 800e8dc:	10bf      	asrs	r7, r7, #2
 800e8de:	6127      	str	r7, [r4, #16]
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f000 fb2f 	bl	800ef44 <__hi0bits>
 800e8e6:	017f      	lsls	r7, r7, #5
 800e8e8:	f8d8 6000 	ldr.w	r6, [r8]
 800e8ec:	1a3f      	subs	r7, r7, r0
 800e8ee:	42b7      	cmp	r7, r6
 800e8f0:	dd62      	ble.n	800e9b8 <__gethex+0x278>
 800e8f2:	1bbf      	subs	r7, r7, r6
 800e8f4:	4639      	mov	r1, r7
 800e8f6:	4620      	mov	r0, r4
 800e8f8:	f000 fec9 	bl	800f68e <__any_on>
 800e8fc:	4682      	mov	sl, r0
 800e8fe:	b1a8      	cbz	r0, 800e92c <__gethex+0x1ec>
 800e900:	f04f 0a01 	mov.w	sl, #1
 800e904:	1e7b      	subs	r3, r7, #1
 800e906:	1159      	asrs	r1, r3, #5
 800e908:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e90c:	f003 021f 	and.w	r2, r3, #31
 800e910:	fa0a f202 	lsl.w	r2, sl, r2
 800e914:	420a      	tst	r2, r1
 800e916:	d009      	beq.n	800e92c <__gethex+0x1ec>
 800e918:	4553      	cmp	r3, sl
 800e91a:	dd05      	ble.n	800e928 <__gethex+0x1e8>
 800e91c:	4620      	mov	r0, r4
 800e91e:	1eb9      	subs	r1, r7, #2
 800e920:	f000 feb5 	bl	800f68e <__any_on>
 800e924:	2800      	cmp	r0, #0
 800e926:	d144      	bne.n	800e9b2 <__gethex+0x272>
 800e928:	f04f 0a02 	mov.w	sl, #2
 800e92c:	4639      	mov	r1, r7
 800e92e:	4620      	mov	r0, r4
 800e930:	f7ff fe9e 	bl	800e670 <rshift>
 800e934:	443d      	add	r5, r7
 800e936:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e93a:	42ab      	cmp	r3, r5
 800e93c:	da4a      	bge.n	800e9d4 <__gethex+0x294>
 800e93e:	4621      	mov	r1, r4
 800e940:	9802      	ldr	r0, [sp, #8]
 800e942:	f000 fa4d 	bl	800ede0 <_Bfree>
 800e946:	2300      	movs	r3, #0
 800e948:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e94a:	27a3      	movs	r7, #163	; 0xa3
 800e94c:	6013      	str	r3, [r2, #0]
 800e94e:	e789      	b.n	800e864 <__gethex+0x124>
 800e950:	1e73      	subs	r3, r6, #1
 800e952:	9a06      	ldr	r2, [sp, #24]
 800e954:	9307      	str	r3, [sp, #28]
 800e956:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d019      	beq.n	800e992 <__gethex+0x252>
 800e95e:	f1bb 0f20 	cmp.w	fp, #32
 800e962:	d107      	bne.n	800e974 <__gethex+0x234>
 800e964:	9b04      	ldr	r3, [sp, #16]
 800e966:	9a01      	ldr	r2, [sp, #4]
 800e968:	f843 2b04 	str.w	r2, [r3], #4
 800e96c:	9304      	str	r3, [sp, #16]
 800e96e:	2300      	movs	r3, #0
 800e970:	469b      	mov	fp, r3
 800e972:	9301      	str	r3, [sp, #4]
 800e974:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e978:	f7ff fecd 	bl	800e716 <__hexdig_fun>
 800e97c:	9b01      	ldr	r3, [sp, #4]
 800e97e:	f000 000f 	and.w	r0, r0, #15
 800e982:	fa00 f00b 	lsl.w	r0, r0, fp
 800e986:	4303      	orrs	r3, r0
 800e988:	9301      	str	r3, [sp, #4]
 800e98a:	f10b 0b04 	add.w	fp, fp, #4
 800e98e:	9b07      	ldr	r3, [sp, #28]
 800e990:	e00d      	b.n	800e9ae <__gethex+0x26e>
 800e992:	9a08      	ldr	r2, [sp, #32]
 800e994:	1e73      	subs	r3, r6, #1
 800e996:	4413      	add	r3, r2
 800e998:	42bb      	cmp	r3, r7
 800e99a:	d3e0      	bcc.n	800e95e <__gethex+0x21e>
 800e99c:	4618      	mov	r0, r3
 800e99e:	4652      	mov	r2, sl
 800e9a0:	9903      	ldr	r1, [sp, #12]
 800e9a2:	9309      	str	r3, [sp, #36]	; 0x24
 800e9a4:	f7ff f838 	bl	800da18 <strncmp>
 800e9a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	d1d7      	bne.n	800e95e <__gethex+0x21e>
 800e9ae:	461e      	mov	r6, r3
 800e9b0:	e78c      	b.n	800e8cc <__gethex+0x18c>
 800e9b2:	f04f 0a03 	mov.w	sl, #3
 800e9b6:	e7b9      	b.n	800e92c <__gethex+0x1ec>
 800e9b8:	da09      	bge.n	800e9ce <__gethex+0x28e>
 800e9ba:	1bf7      	subs	r7, r6, r7
 800e9bc:	4621      	mov	r1, r4
 800e9be:	463a      	mov	r2, r7
 800e9c0:	9802      	ldr	r0, [sp, #8]
 800e9c2:	f000 fc25 	bl	800f210 <__lshift>
 800e9c6:	4604      	mov	r4, r0
 800e9c8:	1bed      	subs	r5, r5, r7
 800e9ca:	f100 0914 	add.w	r9, r0, #20
 800e9ce:	f04f 0a00 	mov.w	sl, #0
 800e9d2:	e7b0      	b.n	800e936 <__gethex+0x1f6>
 800e9d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e9d8:	42a8      	cmp	r0, r5
 800e9da:	dd72      	ble.n	800eac2 <__gethex+0x382>
 800e9dc:	1b45      	subs	r5, r0, r5
 800e9de:	42ae      	cmp	r6, r5
 800e9e0:	dc35      	bgt.n	800ea4e <__gethex+0x30e>
 800e9e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e9e6:	2b02      	cmp	r3, #2
 800e9e8:	d029      	beq.n	800ea3e <__gethex+0x2fe>
 800e9ea:	2b03      	cmp	r3, #3
 800e9ec:	d02b      	beq.n	800ea46 <__gethex+0x306>
 800e9ee:	2b01      	cmp	r3, #1
 800e9f0:	d11c      	bne.n	800ea2c <__gethex+0x2ec>
 800e9f2:	42ae      	cmp	r6, r5
 800e9f4:	d11a      	bne.n	800ea2c <__gethex+0x2ec>
 800e9f6:	2e01      	cmp	r6, #1
 800e9f8:	d112      	bne.n	800ea20 <__gethex+0x2e0>
 800e9fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e9fe:	9a05      	ldr	r2, [sp, #20]
 800ea00:	2762      	movs	r7, #98	; 0x62
 800ea02:	6013      	str	r3, [r2, #0]
 800ea04:	2301      	movs	r3, #1
 800ea06:	6123      	str	r3, [r4, #16]
 800ea08:	f8c9 3000 	str.w	r3, [r9]
 800ea0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ea0e:	601c      	str	r4, [r3, #0]
 800ea10:	e728      	b.n	800e864 <__gethex+0x124>
 800ea12:	bf00      	nop
 800ea14:	080129c0 	.word	0x080129c0
 800ea18:	08012948 	.word	0x08012948
 800ea1c:	08012959 	.word	0x08012959
 800ea20:	4620      	mov	r0, r4
 800ea22:	1e71      	subs	r1, r6, #1
 800ea24:	f000 fe33 	bl	800f68e <__any_on>
 800ea28:	2800      	cmp	r0, #0
 800ea2a:	d1e6      	bne.n	800e9fa <__gethex+0x2ba>
 800ea2c:	4621      	mov	r1, r4
 800ea2e:	9802      	ldr	r0, [sp, #8]
 800ea30:	f000 f9d6 	bl	800ede0 <_Bfree>
 800ea34:	2300      	movs	r3, #0
 800ea36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ea38:	2750      	movs	r7, #80	; 0x50
 800ea3a:	6013      	str	r3, [r2, #0]
 800ea3c:	e712      	b.n	800e864 <__gethex+0x124>
 800ea3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d1f3      	bne.n	800ea2c <__gethex+0x2ec>
 800ea44:	e7d9      	b.n	800e9fa <__gethex+0x2ba>
 800ea46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d1d6      	bne.n	800e9fa <__gethex+0x2ba>
 800ea4c:	e7ee      	b.n	800ea2c <__gethex+0x2ec>
 800ea4e:	1e6f      	subs	r7, r5, #1
 800ea50:	f1ba 0f00 	cmp.w	sl, #0
 800ea54:	d132      	bne.n	800eabc <__gethex+0x37c>
 800ea56:	b127      	cbz	r7, 800ea62 <__gethex+0x322>
 800ea58:	4639      	mov	r1, r7
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	f000 fe17 	bl	800f68e <__any_on>
 800ea60:	4682      	mov	sl, r0
 800ea62:	2101      	movs	r1, #1
 800ea64:	117b      	asrs	r3, r7, #5
 800ea66:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ea6a:	f007 071f 	and.w	r7, r7, #31
 800ea6e:	fa01 f707 	lsl.w	r7, r1, r7
 800ea72:	421f      	tst	r7, r3
 800ea74:	f04f 0702 	mov.w	r7, #2
 800ea78:	4629      	mov	r1, r5
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	bf18      	it	ne
 800ea7e:	f04a 0a02 	orrne.w	sl, sl, #2
 800ea82:	1b76      	subs	r6, r6, r5
 800ea84:	f7ff fdf4 	bl	800e670 <rshift>
 800ea88:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ea8c:	f1ba 0f00 	cmp.w	sl, #0
 800ea90:	d048      	beq.n	800eb24 <__gethex+0x3e4>
 800ea92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ea96:	2b02      	cmp	r3, #2
 800ea98:	d015      	beq.n	800eac6 <__gethex+0x386>
 800ea9a:	2b03      	cmp	r3, #3
 800ea9c:	d017      	beq.n	800eace <__gethex+0x38e>
 800ea9e:	2b01      	cmp	r3, #1
 800eaa0:	d109      	bne.n	800eab6 <__gethex+0x376>
 800eaa2:	f01a 0f02 	tst.w	sl, #2
 800eaa6:	d006      	beq.n	800eab6 <__gethex+0x376>
 800eaa8:	f8d9 0000 	ldr.w	r0, [r9]
 800eaac:	ea4a 0a00 	orr.w	sl, sl, r0
 800eab0:	f01a 0f01 	tst.w	sl, #1
 800eab4:	d10e      	bne.n	800ead4 <__gethex+0x394>
 800eab6:	f047 0710 	orr.w	r7, r7, #16
 800eaba:	e033      	b.n	800eb24 <__gethex+0x3e4>
 800eabc:	f04f 0a01 	mov.w	sl, #1
 800eac0:	e7cf      	b.n	800ea62 <__gethex+0x322>
 800eac2:	2701      	movs	r7, #1
 800eac4:	e7e2      	b.n	800ea8c <__gethex+0x34c>
 800eac6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eac8:	f1c3 0301 	rsb	r3, r3, #1
 800eacc:	9315      	str	r3, [sp, #84]	; 0x54
 800eace:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d0f0      	beq.n	800eab6 <__gethex+0x376>
 800ead4:	f04f 0c00 	mov.w	ip, #0
 800ead8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eadc:	f104 0314 	add.w	r3, r4, #20
 800eae0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800eae4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800eae8:	4618      	mov	r0, r3
 800eaea:	f853 2b04 	ldr.w	r2, [r3], #4
 800eaee:	f1b2 3fff 	cmp.w	r2, #4294967295
 800eaf2:	d01c      	beq.n	800eb2e <__gethex+0x3ee>
 800eaf4:	3201      	adds	r2, #1
 800eaf6:	6002      	str	r2, [r0, #0]
 800eaf8:	2f02      	cmp	r7, #2
 800eafa:	f104 0314 	add.w	r3, r4, #20
 800eafe:	d13d      	bne.n	800eb7c <__gethex+0x43c>
 800eb00:	f8d8 2000 	ldr.w	r2, [r8]
 800eb04:	3a01      	subs	r2, #1
 800eb06:	42b2      	cmp	r2, r6
 800eb08:	d10a      	bne.n	800eb20 <__gethex+0x3e0>
 800eb0a:	2201      	movs	r2, #1
 800eb0c:	1171      	asrs	r1, r6, #5
 800eb0e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eb12:	f006 061f 	and.w	r6, r6, #31
 800eb16:	fa02 f606 	lsl.w	r6, r2, r6
 800eb1a:	421e      	tst	r6, r3
 800eb1c:	bf18      	it	ne
 800eb1e:	4617      	movne	r7, r2
 800eb20:	f047 0720 	orr.w	r7, r7, #32
 800eb24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eb26:	601c      	str	r4, [r3, #0]
 800eb28:	9b05      	ldr	r3, [sp, #20]
 800eb2a:	601d      	str	r5, [r3, #0]
 800eb2c:	e69a      	b.n	800e864 <__gethex+0x124>
 800eb2e:	4299      	cmp	r1, r3
 800eb30:	f843 cc04 	str.w	ip, [r3, #-4]
 800eb34:	d8d8      	bhi.n	800eae8 <__gethex+0x3a8>
 800eb36:	68a3      	ldr	r3, [r4, #8]
 800eb38:	459b      	cmp	fp, r3
 800eb3a:	db17      	blt.n	800eb6c <__gethex+0x42c>
 800eb3c:	6861      	ldr	r1, [r4, #4]
 800eb3e:	9802      	ldr	r0, [sp, #8]
 800eb40:	3101      	adds	r1, #1
 800eb42:	f000 f90d 	bl	800ed60 <_Balloc>
 800eb46:	4681      	mov	r9, r0
 800eb48:	b918      	cbnz	r0, 800eb52 <__gethex+0x412>
 800eb4a:	4602      	mov	r2, r0
 800eb4c:	2184      	movs	r1, #132	; 0x84
 800eb4e:	4b19      	ldr	r3, [pc, #100]	; (800ebb4 <__gethex+0x474>)
 800eb50:	e6ab      	b.n	800e8aa <__gethex+0x16a>
 800eb52:	6922      	ldr	r2, [r4, #16]
 800eb54:	f104 010c 	add.w	r1, r4, #12
 800eb58:	3202      	adds	r2, #2
 800eb5a:	0092      	lsls	r2, r2, #2
 800eb5c:	300c      	adds	r0, #12
 800eb5e:	f7fe ff45 	bl	800d9ec <memcpy>
 800eb62:	4621      	mov	r1, r4
 800eb64:	9802      	ldr	r0, [sp, #8]
 800eb66:	f000 f93b 	bl	800ede0 <_Bfree>
 800eb6a:	464c      	mov	r4, r9
 800eb6c:	6923      	ldr	r3, [r4, #16]
 800eb6e:	1c5a      	adds	r2, r3, #1
 800eb70:	6122      	str	r2, [r4, #16]
 800eb72:	2201      	movs	r2, #1
 800eb74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eb78:	615a      	str	r2, [r3, #20]
 800eb7a:	e7bd      	b.n	800eaf8 <__gethex+0x3b8>
 800eb7c:	6922      	ldr	r2, [r4, #16]
 800eb7e:	455a      	cmp	r2, fp
 800eb80:	dd0b      	ble.n	800eb9a <__gethex+0x45a>
 800eb82:	2101      	movs	r1, #1
 800eb84:	4620      	mov	r0, r4
 800eb86:	f7ff fd73 	bl	800e670 <rshift>
 800eb8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eb8e:	3501      	adds	r5, #1
 800eb90:	42ab      	cmp	r3, r5
 800eb92:	f6ff aed4 	blt.w	800e93e <__gethex+0x1fe>
 800eb96:	2701      	movs	r7, #1
 800eb98:	e7c2      	b.n	800eb20 <__gethex+0x3e0>
 800eb9a:	f016 061f 	ands.w	r6, r6, #31
 800eb9e:	d0fa      	beq.n	800eb96 <__gethex+0x456>
 800eba0:	4453      	add	r3, sl
 800eba2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800eba6:	f000 f9cd 	bl	800ef44 <__hi0bits>
 800ebaa:	f1c6 0620 	rsb	r6, r6, #32
 800ebae:	42b0      	cmp	r0, r6
 800ebb0:	dbe7      	blt.n	800eb82 <__gethex+0x442>
 800ebb2:	e7f0      	b.n	800eb96 <__gethex+0x456>
 800ebb4:	08012948 	.word	0x08012948

0800ebb8 <L_shift>:
 800ebb8:	f1c2 0208 	rsb	r2, r2, #8
 800ebbc:	0092      	lsls	r2, r2, #2
 800ebbe:	b570      	push	{r4, r5, r6, lr}
 800ebc0:	f1c2 0620 	rsb	r6, r2, #32
 800ebc4:	6843      	ldr	r3, [r0, #4]
 800ebc6:	6804      	ldr	r4, [r0, #0]
 800ebc8:	fa03 f506 	lsl.w	r5, r3, r6
 800ebcc:	432c      	orrs	r4, r5
 800ebce:	40d3      	lsrs	r3, r2
 800ebd0:	6004      	str	r4, [r0, #0]
 800ebd2:	f840 3f04 	str.w	r3, [r0, #4]!
 800ebd6:	4288      	cmp	r0, r1
 800ebd8:	d3f4      	bcc.n	800ebc4 <L_shift+0xc>
 800ebda:	bd70      	pop	{r4, r5, r6, pc}

0800ebdc <__match>:
 800ebdc:	b530      	push	{r4, r5, lr}
 800ebde:	6803      	ldr	r3, [r0, #0]
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebe6:	b914      	cbnz	r4, 800ebee <__match+0x12>
 800ebe8:	6003      	str	r3, [r0, #0]
 800ebea:	2001      	movs	r0, #1
 800ebec:	bd30      	pop	{r4, r5, pc}
 800ebee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebf2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ebf6:	2d19      	cmp	r5, #25
 800ebf8:	bf98      	it	ls
 800ebfa:	3220      	addls	r2, #32
 800ebfc:	42a2      	cmp	r2, r4
 800ebfe:	d0f0      	beq.n	800ebe2 <__match+0x6>
 800ec00:	2000      	movs	r0, #0
 800ec02:	e7f3      	b.n	800ebec <__match+0x10>

0800ec04 <__hexnan>:
 800ec04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec08:	2500      	movs	r5, #0
 800ec0a:	680b      	ldr	r3, [r1, #0]
 800ec0c:	4682      	mov	sl, r0
 800ec0e:	115e      	asrs	r6, r3, #5
 800ec10:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ec14:	f013 031f 	ands.w	r3, r3, #31
 800ec18:	bf18      	it	ne
 800ec1a:	3604      	addne	r6, #4
 800ec1c:	1f37      	subs	r7, r6, #4
 800ec1e:	46b9      	mov	r9, r7
 800ec20:	463c      	mov	r4, r7
 800ec22:	46ab      	mov	fp, r5
 800ec24:	b087      	sub	sp, #28
 800ec26:	4690      	mov	r8, r2
 800ec28:	6802      	ldr	r2, [r0, #0]
 800ec2a:	9301      	str	r3, [sp, #4]
 800ec2c:	f846 5c04 	str.w	r5, [r6, #-4]
 800ec30:	9502      	str	r5, [sp, #8]
 800ec32:	7851      	ldrb	r1, [r2, #1]
 800ec34:	1c53      	adds	r3, r2, #1
 800ec36:	9303      	str	r3, [sp, #12]
 800ec38:	b341      	cbz	r1, 800ec8c <__hexnan+0x88>
 800ec3a:	4608      	mov	r0, r1
 800ec3c:	9205      	str	r2, [sp, #20]
 800ec3e:	9104      	str	r1, [sp, #16]
 800ec40:	f7ff fd69 	bl	800e716 <__hexdig_fun>
 800ec44:	2800      	cmp	r0, #0
 800ec46:	d14f      	bne.n	800ece8 <__hexnan+0xe4>
 800ec48:	9904      	ldr	r1, [sp, #16]
 800ec4a:	9a05      	ldr	r2, [sp, #20]
 800ec4c:	2920      	cmp	r1, #32
 800ec4e:	d818      	bhi.n	800ec82 <__hexnan+0x7e>
 800ec50:	9b02      	ldr	r3, [sp, #8]
 800ec52:	459b      	cmp	fp, r3
 800ec54:	dd13      	ble.n	800ec7e <__hexnan+0x7a>
 800ec56:	454c      	cmp	r4, r9
 800ec58:	d206      	bcs.n	800ec68 <__hexnan+0x64>
 800ec5a:	2d07      	cmp	r5, #7
 800ec5c:	dc04      	bgt.n	800ec68 <__hexnan+0x64>
 800ec5e:	462a      	mov	r2, r5
 800ec60:	4649      	mov	r1, r9
 800ec62:	4620      	mov	r0, r4
 800ec64:	f7ff ffa8 	bl	800ebb8 <L_shift>
 800ec68:	4544      	cmp	r4, r8
 800ec6a:	d950      	bls.n	800ed0e <__hexnan+0x10a>
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	f1a4 0904 	sub.w	r9, r4, #4
 800ec72:	f844 3c04 	str.w	r3, [r4, #-4]
 800ec76:	461d      	mov	r5, r3
 800ec78:	464c      	mov	r4, r9
 800ec7a:	f8cd b008 	str.w	fp, [sp, #8]
 800ec7e:	9a03      	ldr	r2, [sp, #12]
 800ec80:	e7d7      	b.n	800ec32 <__hexnan+0x2e>
 800ec82:	2929      	cmp	r1, #41	; 0x29
 800ec84:	d156      	bne.n	800ed34 <__hexnan+0x130>
 800ec86:	3202      	adds	r2, #2
 800ec88:	f8ca 2000 	str.w	r2, [sl]
 800ec8c:	f1bb 0f00 	cmp.w	fp, #0
 800ec90:	d050      	beq.n	800ed34 <__hexnan+0x130>
 800ec92:	454c      	cmp	r4, r9
 800ec94:	d206      	bcs.n	800eca4 <__hexnan+0xa0>
 800ec96:	2d07      	cmp	r5, #7
 800ec98:	dc04      	bgt.n	800eca4 <__hexnan+0xa0>
 800ec9a:	462a      	mov	r2, r5
 800ec9c:	4649      	mov	r1, r9
 800ec9e:	4620      	mov	r0, r4
 800eca0:	f7ff ff8a 	bl	800ebb8 <L_shift>
 800eca4:	4544      	cmp	r4, r8
 800eca6:	d934      	bls.n	800ed12 <__hexnan+0x10e>
 800eca8:	4623      	mov	r3, r4
 800ecaa:	f1a8 0204 	sub.w	r2, r8, #4
 800ecae:	f853 1b04 	ldr.w	r1, [r3], #4
 800ecb2:	429f      	cmp	r7, r3
 800ecb4:	f842 1f04 	str.w	r1, [r2, #4]!
 800ecb8:	d2f9      	bcs.n	800ecae <__hexnan+0xaa>
 800ecba:	1b3b      	subs	r3, r7, r4
 800ecbc:	f023 0303 	bic.w	r3, r3, #3
 800ecc0:	3304      	adds	r3, #4
 800ecc2:	3401      	adds	r4, #1
 800ecc4:	3e03      	subs	r6, #3
 800ecc6:	42b4      	cmp	r4, r6
 800ecc8:	bf88      	it	hi
 800ecca:	2304      	movhi	r3, #4
 800eccc:	2200      	movs	r2, #0
 800ecce:	4443      	add	r3, r8
 800ecd0:	f843 2b04 	str.w	r2, [r3], #4
 800ecd4:	429f      	cmp	r7, r3
 800ecd6:	d2fb      	bcs.n	800ecd0 <__hexnan+0xcc>
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	b91b      	cbnz	r3, 800ece4 <__hexnan+0xe0>
 800ecdc:	4547      	cmp	r7, r8
 800ecde:	d127      	bne.n	800ed30 <__hexnan+0x12c>
 800ece0:	2301      	movs	r3, #1
 800ece2:	603b      	str	r3, [r7, #0]
 800ece4:	2005      	movs	r0, #5
 800ece6:	e026      	b.n	800ed36 <__hexnan+0x132>
 800ece8:	3501      	adds	r5, #1
 800ecea:	2d08      	cmp	r5, #8
 800ecec:	f10b 0b01 	add.w	fp, fp, #1
 800ecf0:	dd06      	ble.n	800ed00 <__hexnan+0xfc>
 800ecf2:	4544      	cmp	r4, r8
 800ecf4:	d9c3      	bls.n	800ec7e <__hexnan+0x7a>
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	2501      	movs	r5, #1
 800ecfa:	f844 3c04 	str.w	r3, [r4, #-4]
 800ecfe:	3c04      	subs	r4, #4
 800ed00:	6822      	ldr	r2, [r4, #0]
 800ed02:	f000 000f 	and.w	r0, r0, #15
 800ed06:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ed0a:	6022      	str	r2, [r4, #0]
 800ed0c:	e7b7      	b.n	800ec7e <__hexnan+0x7a>
 800ed0e:	2508      	movs	r5, #8
 800ed10:	e7b5      	b.n	800ec7e <__hexnan+0x7a>
 800ed12:	9b01      	ldr	r3, [sp, #4]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d0df      	beq.n	800ecd8 <__hexnan+0xd4>
 800ed18:	f04f 32ff 	mov.w	r2, #4294967295
 800ed1c:	f1c3 0320 	rsb	r3, r3, #32
 800ed20:	fa22 f303 	lsr.w	r3, r2, r3
 800ed24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ed28:	401a      	ands	r2, r3
 800ed2a:	f846 2c04 	str.w	r2, [r6, #-4]
 800ed2e:	e7d3      	b.n	800ecd8 <__hexnan+0xd4>
 800ed30:	3f04      	subs	r7, #4
 800ed32:	e7d1      	b.n	800ecd8 <__hexnan+0xd4>
 800ed34:	2004      	movs	r0, #4
 800ed36:	b007      	add	sp, #28
 800ed38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed3c <__ascii_mbtowc>:
 800ed3c:	b082      	sub	sp, #8
 800ed3e:	b901      	cbnz	r1, 800ed42 <__ascii_mbtowc+0x6>
 800ed40:	a901      	add	r1, sp, #4
 800ed42:	b142      	cbz	r2, 800ed56 <__ascii_mbtowc+0x1a>
 800ed44:	b14b      	cbz	r3, 800ed5a <__ascii_mbtowc+0x1e>
 800ed46:	7813      	ldrb	r3, [r2, #0]
 800ed48:	600b      	str	r3, [r1, #0]
 800ed4a:	7812      	ldrb	r2, [r2, #0]
 800ed4c:	1e10      	subs	r0, r2, #0
 800ed4e:	bf18      	it	ne
 800ed50:	2001      	movne	r0, #1
 800ed52:	b002      	add	sp, #8
 800ed54:	4770      	bx	lr
 800ed56:	4610      	mov	r0, r2
 800ed58:	e7fb      	b.n	800ed52 <__ascii_mbtowc+0x16>
 800ed5a:	f06f 0001 	mvn.w	r0, #1
 800ed5e:	e7f8      	b.n	800ed52 <__ascii_mbtowc+0x16>

0800ed60 <_Balloc>:
 800ed60:	b570      	push	{r4, r5, r6, lr}
 800ed62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ed64:	4604      	mov	r4, r0
 800ed66:	460d      	mov	r5, r1
 800ed68:	b976      	cbnz	r6, 800ed88 <_Balloc+0x28>
 800ed6a:	2010      	movs	r0, #16
 800ed6c:	f000 fdb0 	bl	800f8d0 <malloc>
 800ed70:	4602      	mov	r2, r0
 800ed72:	6260      	str	r0, [r4, #36]	; 0x24
 800ed74:	b920      	cbnz	r0, 800ed80 <_Balloc+0x20>
 800ed76:	2166      	movs	r1, #102	; 0x66
 800ed78:	4b17      	ldr	r3, [pc, #92]	; (800edd8 <_Balloc+0x78>)
 800ed7a:	4818      	ldr	r0, [pc, #96]	; (800eddc <_Balloc+0x7c>)
 800ed7c:	f000 fd78 	bl	800f870 <__assert_func>
 800ed80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed84:	6006      	str	r6, [r0, #0]
 800ed86:	60c6      	str	r6, [r0, #12]
 800ed88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ed8a:	68f3      	ldr	r3, [r6, #12]
 800ed8c:	b183      	cbz	r3, 800edb0 <_Balloc+0x50>
 800ed8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed90:	68db      	ldr	r3, [r3, #12]
 800ed92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ed96:	b9b8      	cbnz	r0, 800edc8 <_Balloc+0x68>
 800ed98:	2101      	movs	r1, #1
 800ed9a:	fa01 f605 	lsl.w	r6, r1, r5
 800ed9e:	1d72      	adds	r2, r6, #5
 800eda0:	4620      	mov	r0, r4
 800eda2:	0092      	lsls	r2, r2, #2
 800eda4:	f000 fc94 	bl	800f6d0 <_calloc_r>
 800eda8:	b160      	cbz	r0, 800edc4 <_Balloc+0x64>
 800edaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800edae:	e00e      	b.n	800edce <_Balloc+0x6e>
 800edb0:	2221      	movs	r2, #33	; 0x21
 800edb2:	2104      	movs	r1, #4
 800edb4:	4620      	mov	r0, r4
 800edb6:	f000 fc8b 	bl	800f6d0 <_calloc_r>
 800edba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edbc:	60f0      	str	r0, [r6, #12]
 800edbe:	68db      	ldr	r3, [r3, #12]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d1e4      	bne.n	800ed8e <_Balloc+0x2e>
 800edc4:	2000      	movs	r0, #0
 800edc6:	bd70      	pop	{r4, r5, r6, pc}
 800edc8:	6802      	ldr	r2, [r0, #0]
 800edca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800edce:	2300      	movs	r3, #0
 800edd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800edd4:	e7f7      	b.n	800edc6 <_Balloc+0x66>
 800edd6:	bf00      	nop
 800edd8:	080129d4 	.word	0x080129d4
 800eddc:	080129eb 	.word	0x080129eb

0800ede0 <_Bfree>:
 800ede0:	b570      	push	{r4, r5, r6, lr}
 800ede2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ede4:	4605      	mov	r5, r0
 800ede6:	460c      	mov	r4, r1
 800ede8:	b976      	cbnz	r6, 800ee08 <_Bfree+0x28>
 800edea:	2010      	movs	r0, #16
 800edec:	f000 fd70 	bl	800f8d0 <malloc>
 800edf0:	4602      	mov	r2, r0
 800edf2:	6268      	str	r0, [r5, #36]	; 0x24
 800edf4:	b920      	cbnz	r0, 800ee00 <_Bfree+0x20>
 800edf6:	218a      	movs	r1, #138	; 0x8a
 800edf8:	4b08      	ldr	r3, [pc, #32]	; (800ee1c <_Bfree+0x3c>)
 800edfa:	4809      	ldr	r0, [pc, #36]	; (800ee20 <_Bfree+0x40>)
 800edfc:	f000 fd38 	bl	800f870 <__assert_func>
 800ee00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee04:	6006      	str	r6, [r0, #0]
 800ee06:	60c6      	str	r6, [r0, #12]
 800ee08:	b13c      	cbz	r4, 800ee1a <_Bfree+0x3a>
 800ee0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ee0c:	6862      	ldr	r2, [r4, #4]
 800ee0e:	68db      	ldr	r3, [r3, #12]
 800ee10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ee14:	6021      	str	r1, [r4, #0]
 800ee16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ee1a:	bd70      	pop	{r4, r5, r6, pc}
 800ee1c:	080129d4 	.word	0x080129d4
 800ee20:	080129eb 	.word	0x080129eb

0800ee24 <__multadd>:
 800ee24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee28:	4607      	mov	r7, r0
 800ee2a:	460c      	mov	r4, r1
 800ee2c:	461e      	mov	r6, r3
 800ee2e:	2000      	movs	r0, #0
 800ee30:	690d      	ldr	r5, [r1, #16]
 800ee32:	f101 0c14 	add.w	ip, r1, #20
 800ee36:	f8dc 3000 	ldr.w	r3, [ip]
 800ee3a:	3001      	adds	r0, #1
 800ee3c:	b299      	uxth	r1, r3
 800ee3e:	fb02 6101 	mla	r1, r2, r1, r6
 800ee42:	0c1e      	lsrs	r6, r3, #16
 800ee44:	0c0b      	lsrs	r3, r1, #16
 800ee46:	fb02 3306 	mla	r3, r2, r6, r3
 800ee4a:	b289      	uxth	r1, r1
 800ee4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ee50:	4285      	cmp	r5, r0
 800ee52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ee56:	f84c 1b04 	str.w	r1, [ip], #4
 800ee5a:	dcec      	bgt.n	800ee36 <__multadd+0x12>
 800ee5c:	b30e      	cbz	r6, 800eea2 <__multadd+0x7e>
 800ee5e:	68a3      	ldr	r3, [r4, #8]
 800ee60:	42ab      	cmp	r3, r5
 800ee62:	dc19      	bgt.n	800ee98 <__multadd+0x74>
 800ee64:	6861      	ldr	r1, [r4, #4]
 800ee66:	4638      	mov	r0, r7
 800ee68:	3101      	adds	r1, #1
 800ee6a:	f7ff ff79 	bl	800ed60 <_Balloc>
 800ee6e:	4680      	mov	r8, r0
 800ee70:	b928      	cbnz	r0, 800ee7e <__multadd+0x5a>
 800ee72:	4602      	mov	r2, r0
 800ee74:	21b5      	movs	r1, #181	; 0xb5
 800ee76:	4b0c      	ldr	r3, [pc, #48]	; (800eea8 <__multadd+0x84>)
 800ee78:	480c      	ldr	r0, [pc, #48]	; (800eeac <__multadd+0x88>)
 800ee7a:	f000 fcf9 	bl	800f870 <__assert_func>
 800ee7e:	6922      	ldr	r2, [r4, #16]
 800ee80:	f104 010c 	add.w	r1, r4, #12
 800ee84:	3202      	adds	r2, #2
 800ee86:	0092      	lsls	r2, r2, #2
 800ee88:	300c      	adds	r0, #12
 800ee8a:	f7fe fdaf 	bl	800d9ec <memcpy>
 800ee8e:	4621      	mov	r1, r4
 800ee90:	4638      	mov	r0, r7
 800ee92:	f7ff ffa5 	bl	800ede0 <_Bfree>
 800ee96:	4644      	mov	r4, r8
 800ee98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ee9c:	3501      	adds	r5, #1
 800ee9e:	615e      	str	r6, [r3, #20]
 800eea0:	6125      	str	r5, [r4, #16]
 800eea2:	4620      	mov	r0, r4
 800eea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eea8:	08012948 	.word	0x08012948
 800eeac:	080129eb 	.word	0x080129eb

0800eeb0 <__s2b>:
 800eeb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eeb4:	4615      	mov	r5, r2
 800eeb6:	2209      	movs	r2, #9
 800eeb8:	461f      	mov	r7, r3
 800eeba:	3308      	adds	r3, #8
 800eebc:	460c      	mov	r4, r1
 800eebe:	fb93 f3f2 	sdiv	r3, r3, r2
 800eec2:	4606      	mov	r6, r0
 800eec4:	2201      	movs	r2, #1
 800eec6:	2100      	movs	r1, #0
 800eec8:	429a      	cmp	r2, r3
 800eeca:	db09      	blt.n	800eee0 <__s2b+0x30>
 800eecc:	4630      	mov	r0, r6
 800eece:	f7ff ff47 	bl	800ed60 <_Balloc>
 800eed2:	b940      	cbnz	r0, 800eee6 <__s2b+0x36>
 800eed4:	4602      	mov	r2, r0
 800eed6:	21ce      	movs	r1, #206	; 0xce
 800eed8:	4b18      	ldr	r3, [pc, #96]	; (800ef3c <__s2b+0x8c>)
 800eeda:	4819      	ldr	r0, [pc, #100]	; (800ef40 <__s2b+0x90>)
 800eedc:	f000 fcc8 	bl	800f870 <__assert_func>
 800eee0:	0052      	lsls	r2, r2, #1
 800eee2:	3101      	adds	r1, #1
 800eee4:	e7f0      	b.n	800eec8 <__s2b+0x18>
 800eee6:	9b08      	ldr	r3, [sp, #32]
 800eee8:	2d09      	cmp	r5, #9
 800eeea:	6143      	str	r3, [r0, #20]
 800eeec:	f04f 0301 	mov.w	r3, #1
 800eef0:	6103      	str	r3, [r0, #16]
 800eef2:	dd16      	ble.n	800ef22 <__s2b+0x72>
 800eef4:	f104 0909 	add.w	r9, r4, #9
 800eef8:	46c8      	mov	r8, r9
 800eefa:	442c      	add	r4, r5
 800eefc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ef00:	4601      	mov	r1, r0
 800ef02:	220a      	movs	r2, #10
 800ef04:	4630      	mov	r0, r6
 800ef06:	3b30      	subs	r3, #48	; 0x30
 800ef08:	f7ff ff8c 	bl	800ee24 <__multadd>
 800ef0c:	45a0      	cmp	r8, r4
 800ef0e:	d1f5      	bne.n	800eefc <__s2b+0x4c>
 800ef10:	f1a5 0408 	sub.w	r4, r5, #8
 800ef14:	444c      	add	r4, r9
 800ef16:	1b2d      	subs	r5, r5, r4
 800ef18:	1963      	adds	r3, r4, r5
 800ef1a:	42bb      	cmp	r3, r7
 800ef1c:	db04      	blt.n	800ef28 <__s2b+0x78>
 800ef1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef22:	2509      	movs	r5, #9
 800ef24:	340a      	adds	r4, #10
 800ef26:	e7f6      	b.n	800ef16 <__s2b+0x66>
 800ef28:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ef2c:	4601      	mov	r1, r0
 800ef2e:	220a      	movs	r2, #10
 800ef30:	4630      	mov	r0, r6
 800ef32:	3b30      	subs	r3, #48	; 0x30
 800ef34:	f7ff ff76 	bl	800ee24 <__multadd>
 800ef38:	e7ee      	b.n	800ef18 <__s2b+0x68>
 800ef3a:	bf00      	nop
 800ef3c:	08012948 	.word	0x08012948
 800ef40:	080129eb 	.word	0x080129eb

0800ef44 <__hi0bits>:
 800ef44:	0c02      	lsrs	r2, r0, #16
 800ef46:	0412      	lsls	r2, r2, #16
 800ef48:	4603      	mov	r3, r0
 800ef4a:	b9ca      	cbnz	r2, 800ef80 <__hi0bits+0x3c>
 800ef4c:	0403      	lsls	r3, r0, #16
 800ef4e:	2010      	movs	r0, #16
 800ef50:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ef54:	bf04      	itt	eq
 800ef56:	021b      	lsleq	r3, r3, #8
 800ef58:	3008      	addeq	r0, #8
 800ef5a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ef5e:	bf04      	itt	eq
 800ef60:	011b      	lsleq	r3, r3, #4
 800ef62:	3004      	addeq	r0, #4
 800ef64:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ef68:	bf04      	itt	eq
 800ef6a:	009b      	lsleq	r3, r3, #2
 800ef6c:	3002      	addeq	r0, #2
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	db05      	blt.n	800ef7e <__hi0bits+0x3a>
 800ef72:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ef76:	f100 0001 	add.w	r0, r0, #1
 800ef7a:	bf08      	it	eq
 800ef7c:	2020      	moveq	r0, #32
 800ef7e:	4770      	bx	lr
 800ef80:	2000      	movs	r0, #0
 800ef82:	e7e5      	b.n	800ef50 <__hi0bits+0xc>

0800ef84 <__lo0bits>:
 800ef84:	6803      	ldr	r3, [r0, #0]
 800ef86:	4602      	mov	r2, r0
 800ef88:	f013 0007 	ands.w	r0, r3, #7
 800ef8c:	d00b      	beq.n	800efa6 <__lo0bits+0x22>
 800ef8e:	07d9      	lsls	r1, r3, #31
 800ef90:	d421      	bmi.n	800efd6 <__lo0bits+0x52>
 800ef92:	0798      	lsls	r0, r3, #30
 800ef94:	bf49      	itett	mi
 800ef96:	085b      	lsrmi	r3, r3, #1
 800ef98:	089b      	lsrpl	r3, r3, #2
 800ef9a:	2001      	movmi	r0, #1
 800ef9c:	6013      	strmi	r3, [r2, #0]
 800ef9e:	bf5c      	itt	pl
 800efa0:	2002      	movpl	r0, #2
 800efa2:	6013      	strpl	r3, [r2, #0]
 800efa4:	4770      	bx	lr
 800efa6:	b299      	uxth	r1, r3
 800efa8:	b909      	cbnz	r1, 800efae <__lo0bits+0x2a>
 800efaa:	2010      	movs	r0, #16
 800efac:	0c1b      	lsrs	r3, r3, #16
 800efae:	b2d9      	uxtb	r1, r3
 800efb0:	b909      	cbnz	r1, 800efb6 <__lo0bits+0x32>
 800efb2:	3008      	adds	r0, #8
 800efb4:	0a1b      	lsrs	r3, r3, #8
 800efb6:	0719      	lsls	r1, r3, #28
 800efb8:	bf04      	itt	eq
 800efba:	091b      	lsreq	r3, r3, #4
 800efbc:	3004      	addeq	r0, #4
 800efbe:	0799      	lsls	r1, r3, #30
 800efc0:	bf04      	itt	eq
 800efc2:	089b      	lsreq	r3, r3, #2
 800efc4:	3002      	addeq	r0, #2
 800efc6:	07d9      	lsls	r1, r3, #31
 800efc8:	d403      	bmi.n	800efd2 <__lo0bits+0x4e>
 800efca:	085b      	lsrs	r3, r3, #1
 800efcc:	f100 0001 	add.w	r0, r0, #1
 800efd0:	d003      	beq.n	800efda <__lo0bits+0x56>
 800efd2:	6013      	str	r3, [r2, #0]
 800efd4:	4770      	bx	lr
 800efd6:	2000      	movs	r0, #0
 800efd8:	4770      	bx	lr
 800efda:	2020      	movs	r0, #32
 800efdc:	4770      	bx	lr
	...

0800efe0 <__i2b>:
 800efe0:	b510      	push	{r4, lr}
 800efe2:	460c      	mov	r4, r1
 800efe4:	2101      	movs	r1, #1
 800efe6:	f7ff febb 	bl	800ed60 <_Balloc>
 800efea:	4602      	mov	r2, r0
 800efec:	b928      	cbnz	r0, 800effa <__i2b+0x1a>
 800efee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800eff2:	4b04      	ldr	r3, [pc, #16]	; (800f004 <__i2b+0x24>)
 800eff4:	4804      	ldr	r0, [pc, #16]	; (800f008 <__i2b+0x28>)
 800eff6:	f000 fc3b 	bl	800f870 <__assert_func>
 800effa:	2301      	movs	r3, #1
 800effc:	6144      	str	r4, [r0, #20]
 800effe:	6103      	str	r3, [r0, #16]
 800f000:	bd10      	pop	{r4, pc}
 800f002:	bf00      	nop
 800f004:	08012948 	.word	0x08012948
 800f008:	080129eb 	.word	0x080129eb

0800f00c <__multiply>:
 800f00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f010:	4691      	mov	r9, r2
 800f012:	690a      	ldr	r2, [r1, #16]
 800f014:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f018:	460c      	mov	r4, r1
 800f01a:	429a      	cmp	r2, r3
 800f01c:	bfbe      	ittt	lt
 800f01e:	460b      	movlt	r3, r1
 800f020:	464c      	movlt	r4, r9
 800f022:	4699      	movlt	r9, r3
 800f024:	6927      	ldr	r7, [r4, #16]
 800f026:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f02a:	68a3      	ldr	r3, [r4, #8]
 800f02c:	6861      	ldr	r1, [r4, #4]
 800f02e:	eb07 060a 	add.w	r6, r7, sl
 800f032:	42b3      	cmp	r3, r6
 800f034:	b085      	sub	sp, #20
 800f036:	bfb8      	it	lt
 800f038:	3101      	addlt	r1, #1
 800f03a:	f7ff fe91 	bl	800ed60 <_Balloc>
 800f03e:	b930      	cbnz	r0, 800f04e <__multiply+0x42>
 800f040:	4602      	mov	r2, r0
 800f042:	f240 115d 	movw	r1, #349	; 0x15d
 800f046:	4b43      	ldr	r3, [pc, #268]	; (800f154 <__multiply+0x148>)
 800f048:	4843      	ldr	r0, [pc, #268]	; (800f158 <__multiply+0x14c>)
 800f04a:	f000 fc11 	bl	800f870 <__assert_func>
 800f04e:	f100 0514 	add.w	r5, r0, #20
 800f052:	462b      	mov	r3, r5
 800f054:	2200      	movs	r2, #0
 800f056:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f05a:	4543      	cmp	r3, r8
 800f05c:	d321      	bcc.n	800f0a2 <__multiply+0x96>
 800f05e:	f104 0314 	add.w	r3, r4, #20
 800f062:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f066:	f109 0314 	add.w	r3, r9, #20
 800f06a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f06e:	9202      	str	r2, [sp, #8]
 800f070:	1b3a      	subs	r2, r7, r4
 800f072:	3a15      	subs	r2, #21
 800f074:	f022 0203 	bic.w	r2, r2, #3
 800f078:	3204      	adds	r2, #4
 800f07a:	f104 0115 	add.w	r1, r4, #21
 800f07e:	428f      	cmp	r7, r1
 800f080:	bf38      	it	cc
 800f082:	2204      	movcc	r2, #4
 800f084:	9201      	str	r2, [sp, #4]
 800f086:	9a02      	ldr	r2, [sp, #8]
 800f088:	9303      	str	r3, [sp, #12]
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d80c      	bhi.n	800f0a8 <__multiply+0x9c>
 800f08e:	2e00      	cmp	r6, #0
 800f090:	dd03      	ble.n	800f09a <__multiply+0x8e>
 800f092:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f096:	2b00      	cmp	r3, #0
 800f098:	d059      	beq.n	800f14e <__multiply+0x142>
 800f09a:	6106      	str	r6, [r0, #16]
 800f09c:	b005      	add	sp, #20
 800f09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0a2:	f843 2b04 	str.w	r2, [r3], #4
 800f0a6:	e7d8      	b.n	800f05a <__multiply+0x4e>
 800f0a8:	f8b3 a000 	ldrh.w	sl, [r3]
 800f0ac:	f1ba 0f00 	cmp.w	sl, #0
 800f0b0:	d023      	beq.n	800f0fa <__multiply+0xee>
 800f0b2:	46a9      	mov	r9, r5
 800f0b4:	f04f 0c00 	mov.w	ip, #0
 800f0b8:	f104 0e14 	add.w	lr, r4, #20
 800f0bc:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f0c0:	f8d9 1000 	ldr.w	r1, [r9]
 800f0c4:	fa1f fb82 	uxth.w	fp, r2
 800f0c8:	b289      	uxth	r1, r1
 800f0ca:	fb0a 110b 	mla	r1, sl, fp, r1
 800f0ce:	4461      	add	r1, ip
 800f0d0:	f8d9 c000 	ldr.w	ip, [r9]
 800f0d4:	0c12      	lsrs	r2, r2, #16
 800f0d6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800f0da:	fb0a c202 	mla	r2, sl, r2, ip
 800f0de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f0e2:	b289      	uxth	r1, r1
 800f0e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f0e8:	4577      	cmp	r7, lr
 800f0ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f0ee:	f849 1b04 	str.w	r1, [r9], #4
 800f0f2:	d8e3      	bhi.n	800f0bc <__multiply+0xb0>
 800f0f4:	9a01      	ldr	r2, [sp, #4]
 800f0f6:	f845 c002 	str.w	ip, [r5, r2]
 800f0fa:	9a03      	ldr	r2, [sp, #12]
 800f0fc:	3304      	adds	r3, #4
 800f0fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f102:	f1b9 0f00 	cmp.w	r9, #0
 800f106:	d020      	beq.n	800f14a <__multiply+0x13e>
 800f108:	46ae      	mov	lr, r5
 800f10a:	f04f 0a00 	mov.w	sl, #0
 800f10e:	6829      	ldr	r1, [r5, #0]
 800f110:	f104 0c14 	add.w	ip, r4, #20
 800f114:	f8bc b000 	ldrh.w	fp, [ip]
 800f118:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f11c:	b289      	uxth	r1, r1
 800f11e:	fb09 220b 	mla	r2, r9, fp, r2
 800f122:	4492      	add	sl, r2
 800f124:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f128:	f84e 1b04 	str.w	r1, [lr], #4
 800f12c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f130:	f8be 1000 	ldrh.w	r1, [lr]
 800f134:	0c12      	lsrs	r2, r2, #16
 800f136:	fb09 1102 	mla	r1, r9, r2, r1
 800f13a:	4567      	cmp	r7, ip
 800f13c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f140:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f144:	d8e6      	bhi.n	800f114 <__multiply+0x108>
 800f146:	9a01      	ldr	r2, [sp, #4]
 800f148:	50a9      	str	r1, [r5, r2]
 800f14a:	3504      	adds	r5, #4
 800f14c:	e79b      	b.n	800f086 <__multiply+0x7a>
 800f14e:	3e01      	subs	r6, #1
 800f150:	e79d      	b.n	800f08e <__multiply+0x82>
 800f152:	bf00      	nop
 800f154:	08012948 	.word	0x08012948
 800f158:	080129eb 	.word	0x080129eb

0800f15c <__pow5mult>:
 800f15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f160:	4615      	mov	r5, r2
 800f162:	f012 0203 	ands.w	r2, r2, #3
 800f166:	4606      	mov	r6, r0
 800f168:	460f      	mov	r7, r1
 800f16a:	d007      	beq.n	800f17c <__pow5mult+0x20>
 800f16c:	4c25      	ldr	r4, [pc, #148]	; (800f204 <__pow5mult+0xa8>)
 800f16e:	3a01      	subs	r2, #1
 800f170:	2300      	movs	r3, #0
 800f172:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f176:	f7ff fe55 	bl	800ee24 <__multadd>
 800f17a:	4607      	mov	r7, r0
 800f17c:	10ad      	asrs	r5, r5, #2
 800f17e:	d03d      	beq.n	800f1fc <__pow5mult+0xa0>
 800f180:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f182:	b97c      	cbnz	r4, 800f1a4 <__pow5mult+0x48>
 800f184:	2010      	movs	r0, #16
 800f186:	f000 fba3 	bl	800f8d0 <malloc>
 800f18a:	4602      	mov	r2, r0
 800f18c:	6270      	str	r0, [r6, #36]	; 0x24
 800f18e:	b928      	cbnz	r0, 800f19c <__pow5mult+0x40>
 800f190:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f194:	4b1c      	ldr	r3, [pc, #112]	; (800f208 <__pow5mult+0xac>)
 800f196:	481d      	ldr	r0, [pc, #116]	; (800f20c <__pow5mult+0xb0>)
 800f198:	f000 fb6a 	bl	800f870 <__assert_func>
 800f19c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f1a0:	6004      	str	r4, [r0, #0]
 800f1a2:	60c4      	str	r4, [r0, #12]
 800f1a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f1a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f1ac:	b94c      	cbnz	r4, 800f1c2 <__pow5mult+0x66>
 800f1ae:	f240 2171 	movw	r1, #625	; 0x271
 800f1b2:	4630      	mov	r0, r6
 800f1b4:	f7ff ff14 	bl	800efe0 <__i2b>
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	4604      	mov	r4, r0
 800f1bc:	f8c8 0008 	str.w	r0, [r8, #8]
 800f1c0:	6003      	str	r3, [r0, #0]
 800f1c2:	f04f 0900 	mov.w	r9, #0
 800f1c6:	07eb      	lsls	r3, r5, #31
 800f1c8:	d50a      	bpl.n	800f1e0 <__pow5mult+0x84>
 800f1ca:	4639      	mov	r1, r7
 800f1cc:	4622      	mov	r2, r4
 800f1ce:	4630      	mov	r0, r6
 800f1d0:	f7ff ff1c 	bl	800f00c <__multiply>
 800f1d4:	4680      	mov	r8, r0
 800f1d6:	4639      	mov	r1, r7
 800f1d8:	4630      	mov	r0, r6
 800f1da:	f7ff fe01 	bl	800ede0 <_Bfree>
 800f1de:	4647      	mov	r7, r8
 800f1e0:	106d      	asrs	r5, r5, #1
 800f1e2:	d00b      	beq.n	800f1fc <__pow5mult+0xa0>
 800f1e4:	6820      	ldr	r0, [r4, #0]
 800f1e6:	b938      	cbnz	r0, 800f1f8 <__pow5mult+0x9c>
 800f1e8:	4622      	mov	r2, r4
 800f1ea:	4621      	mov	r1, r4
 800f1ec:	4630      	mov	r0, r6
 800f1ee:	f7ff ff0d 	bl	800f00c <__multiply>
 800f1f2:	6020      	str	r0, [r4, #0]
 800f1f4:	f8c0 9000 	str.w	r9, [r0]
 800f1f8:	4604      	mov	r4, r0
 800f1fa:	e7e4      	b.n	800f1c6 <__pow5mult+0x6a>
 800f1fc:	4638      	mov	r0, r7
 800f1fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f202:	bf00      	nop
 800f204:	08012b38 	.word	0x08012b38
 800f208:	080129d4 	.word	0x080129d4
 800f20c:	080129eb 	.word	0x080129eb

0800f210 <__lshift>:
 800f210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f214:	460c      	mov	r4, r1
 800f216:	4607      	mov	r7, r0
 800f218:	4691      	mov	r9, r2
 800f21a:	6923      	ldr	r3, [r4, #16]
 800f21c:	6849      	ldr	r1, [r1, #4]
 800f21e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f222:	68a3      	ldr	r3, [r4, #8]
 800f224:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f228:	f108 0601 	add.w	r6, r8, #1
 800f22c:	42b3      	cmp	r3, r6
 800f22e:	db0b      	blt.n	800f248 <__lshift+0x38>
 800f230:	4638      	mov	r0, r7
 800f232:	f7ff fd95 	bl	800ed60 <_Balloc>
 800f236:	4605      	mov	r5, r0
 800f238:	b948      	cbnz	r0, 800f24e <__lshift+0x3e>
 800f23a:	4602      	mov	r2, r0
 800f23c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f240:	4b29      	ldr	r3, [pc, #164]	; (800f2e8 <__lshift+0xd8>)
 800f242:	482a      	ldr	r0, [pc, #168]	; (800f2ec <__lshift+0xdc>)
 800f244:	f000 fb14 	bl	800f870 <__assert_func>
 800f248:	3101      	adds	r1, #1
 800f24a:	005b      	lsls	r3, r3, #1
 800f24c:	e7ee      	b.n	800f22c <__lshift+0x1c>
 800f24e:	2300      	movs	r3, #0
 800f250:	f100 0114 	add.w	r1, r0, #20
 800f254:	f100 0210 	add.w	r2, r0, #16
 800f258:	4618      	mov	r0, r3
 800f25a:	4553      	cmp	r3, sl
 800f25c:	db37      	blt.n	800f2ce <__lshift+0xbe>
 800f25e:	6920      	ldr	r0, [r4, #16]
 800f260:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f264:	f104 0314 	add.w	r3, r4, #20
 800f268:	f019 091f 	ands.w	r9, r9, #31
 800f26c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f270:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f274:	d02f      	beq.n	800f2d6 <__lshift+0xc6>
 800f276:	468a      	mov	sl, r1
 800f278:	f04f 0c00 	mov.w	ip, #0
 800f27c:	f1c9 0e20 	rsb	lr, r9, #32
 800f280:	681a      	ldr	r2, [r3, #0]
 800f282:	fa02 f209 	lsl.w	r2, r2, r9
 800f286:	ea42 020c 	orr.w	r2, r2, ip
 800f28a:	f84a 2b04 	str.w	r2, [sl], #4
 800f28e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f292:	4298      	cmp	r0, r3
 800f294:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f298:	d8f2      	bhi.n	800f280 <__lshift+0x70>
 800f29a:	1b03      	subs	r3, r0, r4
 800f29c:	3b15      	subs	r3, #21
 800f29e:	f023 0303 	bic.w	r3, r3, #3
 800f2a2:	3304      	adds	r3, #4
 800f2a4:	f104 0215 	add.w	r2, r4, #21
 800f2a8:	4290      	cmp	r0, r2
 800f2aa:	bf38      	it	cc
 800f2ac:	2304      	movcc	r3, #4
 800f2ae:	f841 c003 	str.w	ip, [r1, r3]
 800f2b2:	f1bc 0f00 	cmp.w	ip, #0
 800f2b6:	d001      	beq.n	800f2bc <__lshift+0xac>
 800f2b8:	f108 0602 	add.w	r6, r8, #2
 800f2bc:	3e01      	subs	r6, #1
 800f2be:	4638      	mov	r0, r7
 800f2c0:	4621      	mov	r1, r4
 800f2c2:	612e      	str	r6, [r5, #16]
 800f2c4:	f7ff fd8c 	bl	800ede0 <_Bfree>
 800f2c8:	4628      	mov	r0, r5
 800f2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800f2d2:	3301      	adds	r3, #1
 800f2d4:	e7c1      	b.n	800f25a <__lshift+0x4a>
 800f2d6:	3904      	subs	r1, #4
 800f2d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2dc:	4298      	cmp	r0, r3
 800f2de:	f841 2f04 	str.w	r2, [r1, #4]!
 800f2e2:	d8f9      	bhi.n	800f2d8 <__lshift+0xc8>
 800f2e4:	e7ea      	b.n	800f2bc <__lshift+0xac>
 800f2e6:	bf00      	nop
 800f2e8:	08012948 	.word	0x08012948
 800f2ec:	080129eb 	.word	0x080129eb

0800f2f0 <__mcmp>:
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	690a      	ldr	r2, [r1, #16]
 800f2f4:	6900      	ldr	r0, [r0, #16]
 800f2f6:	b530      	push	{r4, r5, lr}
 800f2f8:	1a80      	subs	r0, r0, r2
 800f2fa:	d10d      	bne.n	800f318 <__mcmp+0x28>
 800f2fc:	3314      	adds	r3, #20
 800f2fe:	3114      	adds	r1, #20
 800f300:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f304:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f308:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f30c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f310:	4295      	cmp	r5, r2
 800f312:	d002      	beq.n	800f31a <__mcmp+0x2a>
 800f314:	d304      	bcc.n	800f320 <__mcmp+0x30>
 800f316:	2001      	movs	r0, #1
 800f318:	bd30      	pop	{r4, r5, pc}
 800f31a:	42a3      	cmp	r3, r4
 800f31c:	d3f4      	bcc.n	800f308 <__mcmp+0x18>
 800f31e:	e7fb      	b.n	800f318 <__mcmp+0x28>
 800f320:	f04f 30ff 	mov.w	r0, #4294967295
 800f324:	e7f8      	b.n	800f318 <__mcmp+0x28>
	...

0800f328 <__mdiff>:
 800f328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f32c:	460d      	mov	r5, r1
 800f32e:	4607      	mov	r7, r0
 800f330:	4611      	mov	r1, r2
 800f332:	4628      	mov	r0, r5
 800f334:	4614      	mov	r4, r2
 800f336:	f7ff ffdb 	bl	800f2f0 <__mcmp>
 800f33a:	1e06      	subs	r6, r0, #0
 800f33c:	d111      	bne.n	800f362 <__mdiff+0x3a>
 800f33e:	4631      	mov	r1, r6
 800f340:	4638      	mov	r0, r7
 800f342:	f7ff fd0d 	bl	800ed60 <_Balloc>
 800f346:	4602      	mov	r2, r0
 800f348:	b928      	cbnz	r0, 800f356 <__mdiff+0x2e>
 800f34a:	f240 2132 	movw	r1, #562	; 0x232
 800f34e:	4b3a      	ldr	r3, [pc, #232]	; (800f438 <__mdiff+0x110>)
 800f350:	483a      	ldr	r0, [pc, #232]	; (800f43c <__mdiff+0x114>)
 800f352:	f000 fa8d 	bl	800f870 <__assert_func>
 800f356:	2301      	movs	r3, #1
 800f358:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f35c:	4610      	mov	r0, r2
 800f35e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f362:	bfa4      	itt	ge
 800f364:	4623      	movge	r3, r4
 800f366:	462c      	movge	r4, r5
 800f368:	4638      	mov	r0, r7
 800f36a:	6861      	ldr	r1, [r4, #4]
 800f36c:	bfa6      	itte	ge
 800f36e:	461d      	movge	r5, r3
 800f370:	2600      	movge	r6, #0
 800f372:	2601      	movlt	r6, #1
 800f374:	f7ff fcf4 	bl	800ed60 <_Balloc>
 800f378:	4602      	mov	r2, r0
 800f37a:	b918      	cbnz	r0, 800f384 <__mdiff+0x5c>
 800f37c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f380:	4b2d      	ldr	r3, [pc, #180]	; (800f438 <__mdiff+0x110>)
 800f382:	e7e5      	b.n	800f350 <__mdiff+0x28>
 800f384:	f102 0814 	add.w	r8, r2, #20
 800f388:	46c2      	mov	sl, r8
 800f38a:	f04f 0c00 	mov.w	ip, #0
 800f38e:	6927      	ldr	r7, [r4, #16]
 800f390:	60c6      	str	r6, [r0, #12]
 800f392:	692e      	ldr	r6, [r5, #16]
 800f394:	f104 0014 	add.w	r0, r4, #20
 800f398:	f105 0914 	add.w	r9, r5, #20
 800f39c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800f3a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f3a4:	3410      	adds	r4, #16
 800f3a6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800f3aa:	f859 3b04 	ldr.w	r3, [r9], #4
 800f3ae:	fa1f f18b 	uxth.w	r1, fp
 800f3b2:	448c      	add	ip, r1
 800f3b4:	b299      	uxth	r1, r3
 800f3b6:	0c1b      	lsrs	r3, r3, #16
 800f3b8:	ebac 0101 	sub.w	r1, ip, r1
 800f3bc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f3c0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f3c4:	b289      	uxth	r1, r1
 800f3c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800f3ca:	454e      	cmp	r6, r9
 800f3cc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f3d0:	f84a 3b04 	str.w	r3, [sl], #4
 800f3d4:	d8e7      	bhi.n	800f3a6 <__mdiff+0x7e>
 800f3d6:	1b73      	subs	r3, r6, r5
 800f3d8:	3b15      	subs	r3, #21
 800f3da:	f023 0303 	bic.w	r3, r3, #3
 800f3de:	3515      	adds	r5, #21
 800f3e0:	3304      	adds	r3, #4
 800f3e2:	42ae      	cmp	r6, r5
 800f3e4:	bf38      	it	cc
 800f3e6:	2304      	movcc	r3, #4
 800f3e8:	4418      	add	r0, r3
 800f3ea:	4443      	add	r3, r8
 800f3ec:	461e      	mov	r6, r3
 800f3ee:	4605      	mov	r5, r0
 800f3f0:	4575      	cmp	r5, lr
 800f3f2:	d30e      	bcc.n	800f412 <__mdiff+0xea>
 800f3f4:	f10e 0103 	add.w	r1, lr, #3
 800f3f8:	1a09      	subs	r1, r1, r0
 800f3fa:	f021 0103 	bic.w	r1, r1, #3
 800f3fe:	3803      	subs	r0, #3
 800f400:	4586      	cmp	lr, r0
 800f402:	bf38      	it	cc
 800f404:	2100      	movcc	r1, #0
 800f406:	4419      	add	r1, r3
 800f408:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800f40c:	b18b      	cbz	r3, 800f432 <__mdiff+0x10a>
 800f40e:	6117      	str	r7, [r2, #16]
 800f410:	e7a4      	b.n	800f35c <__mdiff+0x34>
 800f412:	f855 8b04 	ldr.w	r8, [r5], #4
 800f416:	fa1f f188 	uxth.w	r1, r8
 800f41a:	4461      	add	r1, ip
 800f41c:	140c      	asrs	r4, r1, #16
 800f41e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f422:	b289      	uxth	r1, r1
 800f424:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f428:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800f42c:	f846 1b04 	str.w	r1, [r6], #4
 800f430:	e7de      	b.n	800f3f0 <__mdiff+0xc8>
 800f432:	3f01      	subs	r7, #1
 800f434:	e7e8      	b.n	800f408 <__mdiff+0xe0>
 800f436:	bf00      	nop
 800f438:	08012948 	.word	0x08012948
 800f43c:	080129eb 	.word	0x080129eb

0800f440 <__ulp>:
 800f440:	4b11      	ldr	r3, [pc, #68]	; (800f488 <__ulp+0x48>)
 800f442:	400b      	ands	r3, r1
 800f444:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800f448:	2b00      	cmp	r3, #0
 800f44a:	dd02      	ble.n	800f452 <__ulp+0x12>
 800f44c:	2000      	movs	r0, #0
 800f44e:	4619      	mov	r1, r3
 800f450:	4770      	bx	lr
 800f452:	425b      	negs	r3, r3
 800f454:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800f458:	f04f 0000 	mov.w	r0, #0
 800f45c:	f04f 0100 	mov.w	r1, #0
 800f460:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f464:	da04      	bge.n	800f470 <__ulp+0x30>
 800f466:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f46a:	fa43 f102 	asr.w	r1, r3, r2
 800f46e:	4770      	bx	lr
 800f470:	f1a2 0314 	sub.w	r3, r2, #20
 800f474:	2b1e      	cmp	r3, #30
 800f476:	bfd6      	itet	le
 800f478:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800f47c:	2301      	movgt	r3, #1
 800f47e:	fa22 f303 	lsrle.w	r3, r2, r3
 800f482:	4618      	mov	r0, r3
 800f484:	4770      	bx	lr
 800f486:	bf00      	nop
 800f488:	7ff00000 	.word	0x7ff00000

0800f48c <__b2d>:
 800f48c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f490:	6907      	ldr	r7, [r0, #16]
 800f492:	f100 0914 	add.w	r9, r0, #20
 800f496:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800f49a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800f49e:	f1a7 0804 	sub.w	r8, r7, #4
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	f7ff fd4e 	bl	800ef44 <__hi0bits>
 800f4a8:	f1c0 0320 	rsb	r3, r0, #32
 800f4ac:	280a      	cmp	r0, #10
 800f4ae:	600b      	str	r3, [r1, #0]
 800f4b0:	491f      	ldr	r1, [pc, #124]	; (800f530 <__b2d+0xa4>)
 800f4b2:	dc17      	bgt.n	800f4e4 <__b2d+0x58>
 800f4b4:	45c1      	cmp	r9, r8
 800f4b6:	bf28      	it	cs
 800f4b8:	2200      	movcs	r2, #0
 800f4ba:	f1c0 0c0b 	rsb	ip, r0, #11
 800f4be:	fa26 f30c 	lsr.w	r3, r6, ip
 800f4c2:	bf38      	it	cc
 800f4c4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800f4c8:	ea43 0501 	orr.w	r5, r3, r1
 800f4cc:	f100 0315 	add.w	r3, r0, #21
 800f4d0:	fa06 f303 	lsl.w	r3, r6, r3
 800f4d4:	fa22 f20c 	lsr.w	r2, r2, ip
 800f4d8:	ea43 0402 	orr.w	r4, r3, r2
 800f4dc:	4620      	mov	r0, r4
 800f4de:	4629      	mov	r1, r5
 800f4e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4e4:	45c1      	cmp	r9, r8
 800f4e6:	bf2e      	itee	cs
 800f4e8:	2200      	movcs	r2, #0
 800f4ea:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800f4ee:	f1a7 0808 	subcc.w	r8, r7, #8
 800f4f2:	f1b0 030b 	subs.w	r3, r0, #11
 800f4f6:	d016      	beq.n	800f526 <__b2d+0x9a>
 800f4f8:	f1c3 0720 	rsb	r7, r3, #32
 800f4fc:	fa22 f107 	lsr.w	r1, r2, r7
 800f500:	45c8      	cmp	r8, r9
 800f502:	fa06 f603 	lsl.w	r6, r6, r3
 800f506:	ea46 0601 	orr.w	r6, r6, r1
 800f50a:	bf94      	ite	ls
 800f50c:	2100      	movls	r1, #0
 800f50e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800f512:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800f516:	fa02 f003 	lsl.w	r0, r2, r3
 800f51a:	40f9      	lsrs	r1, r7
 800f51c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f520:	ea40 0401 	orr.w	r4, r0, r1
 800f524:	e7da      	b.n	800f4dc <__b2d+0x50>
 800f526:	4614      	mov	r4, r2
 800f528:	ea46 0501 	orr.w	r5, r6, r1
 800f52c:	e7d6      	b.n	800f4dc <__b2d+0x50>
 800f52e:	bf00      	nop
 800f530:	3ff00000 	.word	0x3ff00000

0800f534 <__d2b>:
 800f534:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f538:	2101      	movs	r1, #1
 800f53a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800f53e:	4690      	mov	r8, r2
 800f540:	461d      	mov	r5, r3
 800f542:	f7ff fc0d 	bl	800ed60 <_Balloc>
 800f546:	4604      	mov	r4, r0
 800f548:	b930      	cbnz	r0, 800f558 <__d2b+0x24>
 800f54a:	4602      	mov	r2, r0
 800f54c:	f240 310a 	movw	r1, #778	; 0x30a
 800f550:	4b24      	ldr	r3, [pc, #144]	; (800f5e4 <__d2b+0xb0>)
 800f552:	4825      	ldr	r0, [pc, #148]	; (800f5e8 <__d2b+0xb4>)
 800f554:	f000 f98c 	bl	800f870 <__assert_func>
 800f558:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800f55c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800f560:	bb2d      	cbnz	r5, 800f5ae <__d2b+0x7a>
 800f562:	9301      	str	r3, [sp, #4]
 800f564:	f1b8 0300 	subs.w	r3, r8, #0
 800f568:	d026      	beq.n	800f5b8 <__d2b+0x84>
 800f56a:	4668      	mov	r0, sp
 800f56c:	9300      	str	r3, [sp, #0]
 800f56e:	f7ff fd09 	bl	800ef84 <__lo0bits>
 800f572:	9900      	ldr	r1, [sp, #0]
 800f574:	b1f0      	cbz	r0, 800f5b4 <__d2b+0x80>
 800f576:	9a01      	ldr	r2, [sp, #4]
 800f578:	f1c0 0320 	rsb	r3, r0, #32
 800f57c:	fa02 f303 	lsl.w	r3, r2, r3
 800f580:	430b      	orrs	r3, r1
 800f582:	40c2      	lsrs	r2, r0
 800f584:	6163      	str	r3, [r4, #20]
 800f586:	9201      	str	r2, [sp, #4]
 800f588:	9b01      	ldr	r3, [sp, #4]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	bf14      	ite	ne
 800f58e:	2102      	movne	r1, #2
 800f590:	2101      	moveq	r1, #1
 800f592:	61a3      	str	r3, [r4, #24]
 800f594:	6121      	str	r1, [r4, #16]
 800f596:	b1c5      	cbz	r5, 800f5ca <__d2b+0x96>
 800f598:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f59c:	4405      	add	r5, r0
 800f59e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f5a2:	603d      	str	r5, [r7, #0]
 800f5a4:	6030      	str	r0, [r6, #0]
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	b002      	add	sp, #8
 800f5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f5b2:	e7d6      	b.n	800f562 <__d2b+0x2e>
 800f5b4:	6161      	str	r1, [r4, #20]
 800f5b6:	e7e7      	b.n	800f588 <__d2b+0x54>
 800f5b8:	a801      	add	r0, sp, #4
 800f5ba:	f7ff fce3 	bl	800ef84 <__lo0bits>
 800f5be:	2101      	movs	r1, #1
 800f5c0:	9b01      	ldr	r3, [sp, #4]
 800f5c2:	6121      	str	r1, [r4, #16]
 800f5c4:	6163      	str	r3, [r4, #20]
 800f5c6:	3020      	adds	r0, #32
 800f5c8:	e7e5      	b.n	800f596 <__d2b+0x62>
 800f5ca:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800f5ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f5d2:	6038      	str	r0, [r7, #0]
 800f5d4:	6918      	ldr	r0, [r3, #16]
 800f5d6:	f7ff fcb5 	bl	800ef44 <__hi0bits>
 800f5da:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800f5de:	6031      	str	r1, [r6, #0]
 800f5e0:	e7e1      	b.n	800f5a6 <__d2b+0x72>
 800f5e2:	bf00      	nop
 800f5e4:	08012948 	.word	0x08012948
 800f5e8:	080129eb 	.word	0x080129eb

0800f5ec <__ratio>:
 800f5ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5f0:	4688      	mov	r8, r1
 800f5f2:	4669      	mov	r1, sp
 800f5f4:	4681      	mov	r9, r0
 800f5f6:	f7ff ff49 	bl	800f48c <__b2d>
 800f5fa:	460f      	mov	r7, r1
 800f5fc:	4604      	mov	r4, r0
 800f5fe:	460d      	mov	r5, r1
 800f600:	4640      	mov	r0, r8
 800f602:	a901      	add	r1, sp, #4
 800f604:	f7ff ff42 	bl	800f48c <__b2d>
 800f608:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f60c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f610:	468b      	mov	fp, r1
 800f612:	eba3 0c02 	sub.w	ip, r3, r2
 800f616:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f61a:	1a9b      	subs	r3, r3, r2
 800f61c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f620:	2b00      	cmp	r3, #0
 800f622:	bfd5      	itete	le
 800f624:	460a      	movle	r2, r1
 800f626:	462a      	movgt	r2, r5
 800f628:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f62c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f630:	bfd8      	it	le
 800f632:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f636:	465b      	mov	r3, fp
 800f638:	4602      	mov	r2, r0
 800f63a:	4639      	mov	r1, r7
 800f63c:	4620      	mov	r0, r4
 800f63e:	f7f1 f875 	bl	800072c <__aeabi_ddiv>
 800f642:	b003      	add	sp, #12
 800f644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f648 <__copybits>:
 800f648:	3901      	subs	r1, #1
 800f64a:	b570      	push	{r4, r5, r6, lr}
 800f64c:	1149      	asrs	r1, r1, #5
 800f64e:	6914      	ldr	r4, [r2, #16]
 800f650:	3101      	adds	r1, #1
 800f652:	f102 0314 	add.w	r3, r2, #20
 800f656:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f65a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f65e:	1f05      	subs	r5, r0, #4
 800f660:	42a3      	cmp	r3, r4
 800f662:	d30c      	bcc.n	800f67e <__copybits+0x36>
 800f664:	1aa3      	subs	r3, r4, r2
 800f666:	3b11      	subs	r3, #17
 800f668:	f023 0303 	bic.w	r3, r3, #3
 800f66c:	3211      	adds	r2, #17
 800f66e:	42a2      	cmp	r2, r4
 800f670:	bf88      	it	hi
 800f672:	2300      	movhi	r3, #0
 800f674:	4418      	add	r0, r3
 800f676:	2300      	movs	r3, #0
 800f678:	4288      	cmp	r0, r1
 800f67a:	d305      	bcc.n	800f688 <__copybits+0x40>
 800f67c:	bd70      	pop	{r4, r5, r6, pc}
 800f67e:	f853 6b04 	ldr.w	r6, [r3], #4
 800f682:	f845 6f04 	str.w	r6, [r5, #4]!
 800f686:	e7eb      	b.n	800f660 <__copybits+0x18>
 800f688:	f840 3b04 	str.w	r3, [r0], #4
 800f68c:	e7f4      	b.n	800f678 <__copybits+0x30>

0800f68e <__any_on>:
 800f68e:	f100 0214 	add.w	r2, r0, #20
 800f692:	6900      	ldr	r0, [r0, #16]
 800f694:	114b      	asrs	r3, r1, #5
 800f696:	4298      	cmp	r0, r3
 800f698:	b510      	push	{r4, lr}
 800f69a:	db11      	blt.n	800f6c0 <__any_on+0x32>
 800f69c:	dd0a      	ble.n	800f6b4 <__any_on+0x26>
 800f69e:	f011 011f 	ands.w	r1, r1, #31
 800f6a2:	d007      	beq.n	800f6b4 <__any_on+0x26>
 800f6a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f6a8:	fa24 f001 	lsr.w	r0, r4, r1
 800f6ac:	fa00 f101 	lsl.w	r1, r0, r1
 800f6b0:	428c      	cmp	r4, r1
 800f6b2:	d10b      	bne.n	800f6cc <__any_on+0x3e>
 800f6b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d803      	bhi.n	800f6c4 <__any_on+0x36>
 800f6bc:	2000      	movs	r0, #0
 800f6be:	bd10      	pop	{r4, pc}
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	e7f7      	b.n	800f6b4 <__any_on+0x26>
 800f6c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f6c8:	2900      	cmp	r1, #0
 800f6ca:	d0f5      	beq.n	800f6b8 <__any_on+0x2a>
 800f6cc:	2001      	movs	r0, #1
 800f6ce:	e7f6      	b.n	800f6be <__any_on+0x30>

0800f6d0 <_calloc_r>:
 800f6d0:	b570      	push	{r4, r5, r6, lr}
 800f6d2:	fba1 5402 	umull	r5, r4, r1, r2
 800f6d6:	b934      	cbnz	r4, 800f6e6 <_calloc_r+0x16>
 800f6d8:	4629      	mov	r1, r5
 800f6da:	f000 f82d 	bl	800f738 <_malloc_r>
 800f6de:	4606      	mov	r6, r0
 800f6e0:	b928      	cbnz	r0, 800f6ee <_calloc_r+0x1e>
 800f6e2:	4630      	mov	r0, r6
 800f6e4:	bd70      	pop	{r4, r5, r6, pc}
 800f6e6:	220c      	movs	r2, #12
 800f6e8:	2600      	movs	r6, #0
 800f6ea:	6002      	str	r2, [r0, #0]
 800f6ec:	e7f9      	b.n	800f6e2 <_calloc_r+0x12>
 800f6ee:	462a      	mov	r2, r5
 800f6f0:	4621      	mov	r1, r4
 800f6f2:	f7fe f989 	bl	800da08 <memset>
 800f6f6:	e7f4      	b.n	800f6e2 <_calloc_r+0x12>

0800f6f8 <sbrk_aligned>:
 800f6f8:	b570      	push	{r4, r5, r6, lr}
 800f6fa:	4e0e      	ldr	r6, [pc, #56]	; (800f734 <sbrk_aligned+0x3c>)
 800f6fc:	460c      	mov	r4, r1
 800f6fe:	6831      	ldr	r1, [r6, #0]
 800f700:	4605      	mov	r5, r0
 800f702:	b911      	cbnz	r1, 800f70a <sbrk_aligned+0x12>
 800f704:	f000 f892 	bl	800f82c <_sbrk_r>
 800f708:	6030      	str	r0, [r6, #0]
 800f70a:	4621      	mov	r1, r4
 800f70c:	4628      	mov	r0, r5
 800f70e:	f000 f88d 	bl	800f82c <_sbrk_r>
 800f712:	1c43      	adds	r3, r0, #1
 800f714:	d00a      	beq.n	800f72c <sbrk_aligned+0x34>
 800f716:	1cc4      	adds	r4, r0, #3
 800f718:	f024 0403 	bic.w	r4, r4, #3
 800f71c:	42a0      	cmp	r0, r4
 800f71e:	d007      	beq.n	800f730 <sbrk_aligned+0x38>
 800f720:	1a21      	subs	r1, r4, r0
 800f722:	4628      	mov	r0, r5
 800f724:	f000 f882 	bl	800f82c <_sbrk_r>
 800f728:	3001      	adds	r0, #1
 800f72a:	d101      	bne.n	800f730 <sbrk_aligned+0x38>
 800f72c:	f04f 34ff 	mov.w	r4, #4294967295
 800f730:	4620      	mov	r0, r4
 800f732:	bd70      	pop	{r4, r5, r6, pc}
 800f734:	20000a84 	.word	0x20000a84

0800f738 <_malloc_r>:
 800f738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f73c:	1ccd      	adds	r5, r1, #3
 800f73e:	f025 0503 	bic.w	r5, r5, #3
 800f742:	3508      	adds	r5, #8
 800f744:	2d0c      	cmp	r5, #12
 800f746:	bf38      	it	cc
 800f748:	250c      	movcc	r5, #12
 800f74a:	2d00      	cmp	r5, #0
 800f74c:	4607      	mov	r7, r0
 800f74e:	db01      	blt.n	800f754 <_malloc_r+0x1c>
 800f750:	42a9      	cmp	r1, r5
 800f752:	d905      	bls.n	800f760 <_malloc_r+0x28>
 800f754:	230c      	movs	r3, #12
 800f756:	2600      	movs	r6, #0
 800f758:	603b      	str	r3, [r7, #0]
 800f75a:	4630      	mov	r0, r6
 800f75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f760:	4e2e      	ldr	r6, [pc, #184]	; (800f81c <_malloc_r+0xe4>)
 800f762:	f000 f8bd 	bl	800f8e0 <__malloc_lock>
 800f766:	6833      	ldr	r3, [r6, #0]
 800f768:	461c      	mov	r4, r3
 800f76a:	bb34      	cbnz	r4, 800f7ba <_malloc_r+0x82>
 800f76c:	4629      	mov	r1, r5
 800f76e:	4638      	mov	r0, r7
 800f770:	f7ff ffc2 	bl	800f6f8 <sbrk_aligned>
 800f774:	1c43      	adds	r3, r0, #1
 800f776:	4604      	mov	r4, r0
 800f778:	d14d      	bne.n	800f816 <_malloc_r+0xde>
 800f77a:	6834      	ldr	r4, [r6, #0]
 800f77c:	4626      	mov	r6, r4
 800f77e:	2e00      	cmp	r6, #0
 800f780:	d140      	bne.n	800f804 <_malloc_r+0xcc>
 800f782:	6823      	ldr	r3, [r4, #0]
 800f784:	4631      	mov	r1, r6
 800f786:	4638      	mov	r0, r7
 800f788:	eb04 0803 	add.w	r8, r4, r3
 800f78c:	f000 f84e 	bl	800f82c <_sbrk_r>
 800f790:	4580      	cmp	r8, r0
 800f792:	d13a      	bne.n	800f80a <_malloc_r+0xd2>
 800f794:	6821      	ldr	r1, [r4, #0]
 800f796:	3503      	adds	r5, #3
 800f798:	1a6d      	subs	r5, r5, r1
 800f79a:	f025 0503 	bic.w	r5, r5, #3
 800f79e:	3508      	adds	r5, #8
 800f7a0:	2d0c      	cmp	r5, #12
 800f7a2:	bf38      	it	cc
 800f7a4:	250c      	movcc	r5, #12
 800f7a6:	4638      	mov	r0, r7
 800f7a8:	4629      	mov	r1, r5
 800f7aa:	f7ff ffa5 	bl	800f6f8 <sbrk_aligned>
 800f7ae:	3001      	adds	r0, #1
 800f7b0:	d02b      	beq.n	800f80a <_malloc_r+0xd2>
 800f7b2:	6823      	ldr	r3, [r4, #0]
 800f7b4:	442b      	add	r3, r5
 800f7b6:	6023      	str	r3, [r4, #0]
 800f7b8:	e00e      	b.n	800f7d8 <_malloc_r+0xa0>
 800f7ba:	6822      	ldr	r2, [r4, #0]
 800f7bc:	1b52      	subs	r2, r2, r5
 800f7be:	d41e      	bmi.n	800f7fe <_malloc_r+0xc6>
 800f7c0:	2a0b      	cmp	r2, #11
 800f7c2:	d916      	bls.n	800f7f2 <_malloc_r+0xba>
 800f7c4:	1961      	adds	r1, r4, r5
 800f7c6:	42a3      	cmp	r3, r4
 800f7c8:	6025      	str	r5, [r4, #0]
 800f7ca:	bf18      	it	ne
 800f7cc:	6059      	strne	r1, [r3, #4]
 800f7ce:	6863      	ldr	r3, [r4, #4]
 800f7d0:	bf08      	it	eq
 800f7d2:	6031      	streq	r1, [r6, #0]
 800f7d4:	5162      	str	r2, [r4, r5]
 800f7d6:	604b      	str	r3, [r1, #4]
 800f7d8:	4638      	mov	r0, r7
 800f7da:	f104 060b 	add.w	r6, r4, #11
 800f7de:	f000 f885 	bl	800f8ec <__malloc_unlock>
 800f7e2:	f026 0607 	bic.w	r6, r6, #7
 800f7e6:	1d23      	adds	r3, r4, #4
 800f7e8:	1af2      	subs	r2, r6, r3
 800f7ea:	d0b6      	beq.n	800f75a <_malloc_r+0x22>
 800f7ec:	1b9b      	subs	r3, r3, r6
 800f7ee:	50a3      	str	r3, [r4, r2]
 800f7f0:	e7b3      	b.n	800f75a <_malloc_r+0x22>
 800f7f2:	6862      	ldr	r2, [r4, #4]
 800f7f4:	42a3      	cmp	r3, r4
 800f7f6:	bf0c      	ite	eq
 800f7f8:	6032      	streq	r2, [r6, #0]
 800f7fa:	605a      	strne	r2, [r3, #4]
 800f7fc:	e7ec      	b.n	800f7d8 <_malloc_r+0xa0>
 800f7fe:	4623      	mov	r3, r4
 800f800:	6864      	ldr	r4, [r4, #4]
 800f802:	e7b2      	b.n	800f76a <_malloc_r+0x32>
 800f804:	4634      	mov	r4, r6
 800f806:	6876      	ldr	r6, [r6, #4]
 800f808:	e7b9      	b.n	800f77e <_malloc_r+0x46>
 800f80a:	230c      	movs	r3, #12
 800f80c:	4638      	mov	r0, r7
 800f80e:	603b      	str	r3, [r7, #0]
 800f810:	f000 f86c 	bl	800f8ec <__malloc_unlock>
 800f814:	e7a1      	b.n	800f75a <_malloc_r+0x22>
 800f816:	6025      	str	r5, [r4, #0]
 800f818:	e7de      	b.n	800f7d8 <_malloc_r+0xa0>
 800f81a:	bf00      	nop
 800f81c:	20000a80 	.word	0x20000a80

0800f820 <nan>:
 800f820:	2000      	movs	r0, #0
 800f822:	4901      	ldr	r1, [pc, #4]	; (800f828 <nan+0x8>)
 800f824:	4770      	bx	lr
 800f826:	bf00      	nop
 800f828:	7ff80000 	.word	0x7ff80000

0800f82c <_sbrk_r>:
 800f82c:	b538      	push	{r3, r4, r5, lr}
 800f82e:	2300      	movs	r3, #0
 800f830:	4d05      	ldr	r5, [pc, #20]	; (800f848 <_sbrk_r+0x1c>)
 800f832:	4604      	mov	r4, r0
 800f834:	4608      	mov	r0, r1
 800f836:	602b      	str	r3, [r5, #0]
 800f838:	f7fa fa78 	bl	8009d2c <_sbrk>
 800f83c:	1c43      	adds	r3, r0, #1
 800f83e:	d102      	bne.n	800f846 <_sbrk_r+0x1a>
 800f840:	682b      	ldr	r3, [r5, #0]
 800f842:	b103      	cbz	r3, 800f846 <_sbrk_r+0x1a>
 800f844:	6023      	str	r3, [r4, #0]
 800f846:	bd38      	pop	{r3, r4, r5, pc}
 800f848:	20000a88 	.word	0x20000a88

0800f84c <nanf>:
 800f84c:	4800      	ldr	r0, [pc, #0]	; (800f850 <nanf+0x4>)
 800f84e:	4770      	bx	lr
 800f850:	7fc00000 	.word	0x7fc00000

0800f854 <__ascii_wctomb>:
 800f854:	4603      	mov	r3, r0
 800f856:	4608      	mov	r0, r1
 800f858:	b141      	cbz	r1, 800f86c <__ascii_wctomb+0x18>
 800f85a:	2aff      	cmp	r2, #255	; 0xff
 800f85c:	d904      	bls.n	800f868 <__ascii_wctomb+0x14>
 800f85e:	228a      	movs	r2, #138	; 0x8a
 800f860:	f04f 30ff 	mov.w	r0, #4294967295
 800f864:	601a      	str	r2, [r3, #0]
 800f866:	4770      	bx	lr
 800f868:	2001      	movs	r0, #1
 800f86a:	700a      	strb	r2, [r1, #0]
 800f86c:	4770      	bx	lr
	...

0800f870 <__assert_func>:
 800f870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f872:	4614      	mov	r4, r2
 800f874:	461a      	mov	r2, r3
 800f876:	4b09      	ldr	r3, [pc, #36]	; (800f89c <__assert_func+0x2c>)
 800f878:	4605      	mov	r5, r0
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	68d8      	ldr	r0, [r3, #12]
 800f87e:	b14c      	cbz	r4, 800f894 <__assert_func+0x24>
 800f880:	4b07      	ldr	r3, [pc, #28]	; (800f8a0 <__assert_func+0x30>)
 800f882:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f886:	9100      	str	r1, [sp, #0]
 800f888:	462b      	mov	r3, r5
 800f88a:	4906      	ldr	r1, [pc, #24]	; (800f8a4 <__assert_func+0x34>)
 800f88c:	f000 f80e 	bl	800f8ac <fiprintf>
 800f890:	f000 fc28 	bl	80100e4 <abort>
 800f894:	4b04      	ldr	r3, [pc, #16]	; (800f8a8 <__assert_func+0x38>)
 800f896:	461c      	mov	r4, r3
 800f898:	e7f3      	b.n	800f882 <__assert_func+0x12>
 800f89a:	bf00      	nop
 800f89c:	2000011c 	.word	0x2000011c
 800f8a0:	08012b44 	.word	0x08012b44
 800f8a4:	08012b51 	.word	0x08012b51
 800f8a8:	08012b7f 	.word	0x08012b7f

0800f8ac <fiprintf>:
 800f8ac:	b40e      	push	{r1, r2, r3}
 800f8ae:	b503      	push	{r0, r1, lr}
 800f8b0:	4601      	mov	r1, r0
 800f8b2:	ab03      	add	r3, sp, #12
 800f8b4:	4805      	ldr	r0, [pc, #20]	; (800f8cc <fiprintf+0x20>)
 800f8b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8ba:	6800      	ldr	r0, [r0, #0]
 800f8bc:	9301      	str	r3, [sp, #4]
 800f8be:	f000 f88b 	bl	800f9d8 <_vfiprintf_r>
 800f8c2:	b002      	add	sp, #8
 800f8c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f8c8:	b003      	add	sp, #12
 800f8ca:	4770      	bx	lr
 800f8cc:	2000011c 	.word	0x2000011c

0800f8d0 <malloc>:
 800f8d0:	4b02      	ldr	r3, [pc, #8]	; (800f8dc <malloc+0xc>)
 800f8d2:	4601      	mov	r1, r0
 800f8d4:	6818      	ldr	r0, [r3, #0]
 800f8d6:	f7ff bf2f 	b.w	800f738 <_malloc_r>
 800f8da:	bf00      	nop
 800f8dc:	2000011c 	.word	0x2000011c

0800f8e0 <__malloc_lock>:
 800f8e0:	4801      	ldr	r0, [pc, #4]	; (800f8e8 <__malloc_lock+0x8>)
 800f8e2:	f000 bdbb 	b.w	801045c <__retarget_lock_acquire_recursive>
 800f8e6:	bf00      	nop
 800f8e8:	20000a8c 	.word	0x20000a8c

0800f8ec <__malloc_unlock>:
 800f8ec:	4801      	ldr	r0, [pc, #4]	; (800f8f4 <__malloc_unlock+0x8>)
 800f8ee:	f000 bdb6 	b.w	801045e <__retarget_lock_release_recursive>
 800f8f2:	bf00      	nop
 800f8f4:	20000a8c 	.word	0x20000a8c

0800f8f8 <_free_r>:
 800f8f8:	b538      	push	{r3, r4, r5, lr}
 800f8fa:	4605      	mov	r5, r0
 800f8fc:	2900      	cmp	r1, #0
 800f8fe:	d040      	beq.n	800f982 <_free_r+0x8a>
 800f900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f904:	1f0c      	subs	r4, r1, #4
 800f906:	2b00      	cmp	r3, #0
 800f908:	bfb8      	it	lt
 800f90a:	18e4      	addlt	r4, r4, r3
 800f90c:	f7ff ffe8 	bl	800f8e0 <__malloc_lock>
 800f910:	4a1c      	ldr	r2, [pc, #112]	; (800f984 <_free_r+0x8c>)
 800f912:	6813      	ldr	r3, [r2, #0]
 800f914:	b933      	cbnz	r3, 800f924 <_free_r+0x2c>
 800f916:	6063      	str	r3, [r4, #4]
 800f918:	6014      	str	r4, [r2, #0]
 800f91a:	4628      	mov	r0, r5
 800f91c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f920:	f7ff bfe4 	b.w	800f8ec <__malloc_unlock>
 800f924:	42a3      	cmp	r3, r4
 800f926:	d908      	bls.n	800f93a <_free_r+0x42>
 800f928:	6820      	ldr	r0, [r4, #0]
 800f92a:	1821      	adds	r1, r4, r0
 800f92c:	428b      	cmp	r3, r1
 800f92e:	bf01      	itttt	eq
 800f930:	6819      	ldreq	r1, [r3, #0]
 800f932:	685b      	ldreq	r3, [r3, #4]
 800f934:	1809      	addeq	r1, r1, r0
 800f936:	6021      	streq	r1, [r4, #0]
 800f938:	e7ed      	b.n	800f916 <_free_r+0x1e>
 800f93a:	461a      	mov	r2, r3
 800f93c:	685b      	ldr	r3, [r3, #4]
 800f93e:	b10b      	cbz	r3, 800f944 <_free_r+0x4c>
 800f940:	42a3      	cmp	r3, r4
 800f942:	d9fa      	bls.n	800f93a <_free_r+0x42>
 800f944:	6811      	ldr	r1, [r2, #0]
 800f946:	1850      	adds	r0, r2, r1
 800f948:	42a0      	cmp	r0, r4
 800f94a:	d10b      	bne.n	800f964 <_free_r+0x6c>
 800f94c:	6820      	ldr	r0, [r4, #0]
 800f94e:	4401      	add	r1, r0
 800f950:	1850      	adds	r0, r2, r1
 800f952:	4283      	cmp	r3, r0
 800f954:	6011      	str	r1, [r2, #0]
 800f956:	d1e0      	bne.n	800f91a <_free_r+0x22>
 800f958:	6818      	ldr	r0, [r3, #0]
 800f95a:	685b      	ldr	r3, [r3, #4]
 800f95c:	4401      	add	r1, r0
 800f95e:	6011      	str	r1, [r2, #0]
 800f960:	6053      	str	r3, [r2, #4]
 800f962:	e7da      	b.n	800f91a <_free_r+0x22>
 800f964:	d902      	bls.n	800f96c <_free_r+0x74>
 800f966:	230c      	movs	r3, #12
 800f968:	602b      	str	r3, [r5, #0]
 800f96a:	e7d6      	b.n	800f91a <_free_r+0x22>
 800f96c:	6820      	ldr	r0, [r4, #0]
 800f96e:	1821      	adds	r1, r4, r0
 800f970:	428b      	cmp	r3, r1
 800f972:	bf01      	itttt	eq
 800f974:	6819      	ldreq	r1, [r3, #0]
 800f976:	685b      	ldreq	r3, [r3, #4]
 800f978:	1809      	addeq	r1, r1, r0
 800f97a:	6021      	streq	r1, [r4, #0]
 800f97c:	6063      	str	r3, [r4, #4]
 800f97e:	6054      	str	r4, [r2, #4]
 800f980:	e7cb      	b.n	800f91a <_free_r+0x22>
 800f982:	bd38      	pop	{r3, r4, r5, pc}
 800f984:	20000a80 	.word	0x20000a80

0800f988 <__sfputc_r>:
 800f988:	6893      	ldr	r3, [r2, #8]
 800f98a:	b410      	push	{r4}
 800f98c:	3b01      	subs	r3, #1
 800f98e:	2b00      	cmp	r3, #0
 800f990:	6093      	str	r3, [r2, #8]
 800f992:	da07      	bge.n	800f9a4 <__sfputc_r+0x1c>
 800f994:	6994      	ldr	r4, [r2, #24]
 800f996:	42a3      	cmp	r3, r4
 800f998:	db01      	blt.n	800f99e <__sfputc_r+0x16>
 800f99a:	290a      	cmp	r1, #10
 800f99c:	d102      	bne.n	800f9a4 <__sfputc_r+0x1c>
 800f99e:	bc10      	pop	{r4}
 800f9a0:	f000 bae0 	b.w	800ff64 <__swbuf_r>
 800f9a4:	6813      	ldr	r3, [r2, #0]
 800f9a6:	1c58      	adds	r0, r3, #1
 800f9a8:	6010      	str	r0, [r2, #0]
 800f9aa:	7019      	strb	r1, [r3, #0]
 800f9ac:	4608      	mov	r0, r1
 800f9ae:	bc10      	pop	{r4}
 800f9b0:	4770      	bx	lr

0800f9b2 <__sfputs_r>:
 800f9b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9b4:	4606      	mov	r6, r0
 800f9b6:	460f      	mov	r7, r1
 800f9b8:	4614      	mov	r4, r2
 800f9ba:	18d5      	adds	r5, r2, r3
 800f9bc:	42ac      	cmp	r4, r5
 800f9be:	d101      	bne.n	800f9c4 <__sfputs_r+0x12>
 800f9c0:	2000      	movs	r0, #0
 800f9c2:	e007      	b.n	800f9d4 <__sfputs_r+0x22>
 800f9c4:	463a      	mov	r2, r7
 800f9c6:	4630      	mov	r0, r6
 800f9c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9cc:	f7ff ffdc 	bl	800f988 <__sfputc_r>
 800f9d0:	1c43      	adds	r3, r0, #1
 800f9d2:	d1f3      	bne.n	800f9bc <__sfputs_r+0xa>
 800f9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f9d8 <_vfiprintf_r>:
 800f9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9dc:	460d      	mov	r5, r1
 800f9de:	4614      	mov	r4, r2
 800f9e0:	4698      	mov	r8, r3
 800f9e2:	4606      	mov	r6, r0
 800f9e4:	b09d      	sub	sp, #116	; 0x74
 800f9e6:	b118      	cbz	r0, 800f9f0 <_vfiprintf_r+0x18>
 800f9e8:	6983      	ldr	r3, [r0, #24]
 800f9ea:	b90b      	cbnz	r3, 800f9f0 <_vfiprintf_r+0x18>
 800f9ec:	f000 fc98 	bl	8010320 <__sinit>
 800f9f0:	4b89      	ldr	r3, [pc, #548]	; (800fc18 <_vfiprintf_r+0x240>)
 800f9f2:	429d      	cmp	r5, r3
 800f9f4:	d11b      	bne.n	800fa2e <_vfiprintf_r+0x56>
 800f9f6:	6875      	ldr	r5, [r6, #4]
 800f9f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9fa:	07d9      	lsls	r1, r3, #31
 800f9fc:	d405      	bmi.n	800fa0a <_vfiprintf_r+0x32>
 800f9fe:	89ab      	ldrh	r3, [r5, #12]
 800fa00:	059a      	lsls	r2, r3, #22
 800fa02:	d402      	bmi.n	800fa0a <_vfiprintf_r+0x32>
 800fa04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa06:	f000 fd29 	bl	801045c <__retarget_lock_acquire_recursive>
 800fa0a:	89ab      	ldrh	r3, [r5, #12]
 800fa0c:	071b      	lsls	r3, r3, #28
 800fa0e:	d501      	bpl.n	800fa14 <_vfiprintf_r+0x3c>
 800fa10:	692b      	ldr	r3, [r5, #16]
 800fa12:	b9eb      	cbnz	r3, 800fa50 <_vfiprintf_r+0x78>
 800fa14:	4629      	mov	r1, r5
 800fa16:	4630      	mov	r0, r6
 800fa18:	f000 faf6 	bl	8010008 <__swsetup_r>
 800fa1c:	b1c0      	cbz	r0, 800fa50 <_vfiprintf_r+0x78>
 800fa1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa20:	07dc      	lsls	r4, r3, #31
 800fa22:	d50e      	bpl.n	800fa42 <_vfiprintf_r+0x6a>
 800fa24:	f04f 30ff 	mov.w	r0, #4294967295
 800fa28:	b01d      	add	sp, #116	; 0x74
 800fa2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa2e:	4b7b      	ldr	r3, [pc, #492]	; (800fc1c <_vfiprintf_r+0x244>)
 800fa30:	429d      	cmp	r5, r3
 800fa32:	d101      	bne.n	800fa38 <_vfiprintf_r+0x60>
 800fa34:	68b5      	ldr	r5, [r6, #8]
 800fa36:	e7df      	b.n	800f9f8 <_vfiprintf_r+0x20>
 800fa38:	4b79      	ldr	r3, [pc, #484]	; (800fc20 <_vfiprintf_r+0x248>)
 800fa3a:	429d      	cmp	r5, r3
 800fa3c:	bf08      	it	eq
 800fa3e:	68f5      	ldreq	r5, [r6, #12]
 800fa40:	e7da      	b.n	800f9f8 <_vfiprintf_r+0x20>
 800fa42:	89ab      	ldrh	r3, [r5, #12]
 800fa44:	0598      	lsls	r0, r3, #22
 800fa46:	d4ed      	bmi.n	800fa24 <_vfiprintf_r+0x4c>
 800fa48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa4a:	f000 fd08 	bl	801045e <__retarget_lock_release_recursive>
 800fa4e:	e7e9      	b.n	800fa24 <_vfiprintf_r+0x4c>
 800fa50:	2300      	movs	r3, #0
 800fa52:	9309      	str	r3, [sp, #36]	; 0x24
 800fa54:	2320      	movs	r3, #32
 800fa56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa5a:	2330      	movs	r3, #48	; 0x30
 800fa5c:	f04f 0901 	mov.w	r9, #1
 800fa60:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa64:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800fc24 <_vfiprintf_r+0x24c>
 800fa68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa6c:	4623      	mov	r3, r4
 800fa6e:	469a      	mov	sl, r3
 800fa70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa74:	b10a      	cbz	r2, 800fa7a <_vfiprintf_r+0xa2>
 800fa76:	2a25      	cmp	r2, #37	; 0x25
 800fa78:	d1f9      	bne.n	800fa6e <_vfiprintf_r+0x96>
 800fa7a:	ebba 0b04 	subs.w	fp, sl, r4
 800fa7e:	d00b      	beq.n	800fa98 <_vfiprintf_r+0xc0>
 800fa80:	465b      	mov	r3, fp
 800fa82:	4622      	mov	r2, r4
 800fa84:	4629      	mov	r1, r5
 800fa86:	4630      	mov	r0, r6
 800fa88:	f7ff ff93 	bl	800f9b2 <__sfputs_r>
 800fa8c:	3001      	adds	r0, #1
 800fa8e:	f000 80aa 	beq.w	800fbe6 <_vfiprintf_r+0x20e>
 800fa92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa94:	445a      	add	r2, fp
 800fa96:	9209      	str	r2, [sp, #36]	; 0x24
 800fa98:	f89a 3000 	ldrb.w	r3, [sl]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	f000 80a2 	beq.w	800fbe6 <_vfiprintf_r+0x20e>
 800faa2:	2300      	movs	r3, #0
 800faa4:	f04f 32ff 	mov.w	r2, #4294967295
 800faa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800faac:	f10a 0a01 	add.w	sl, sl, #1
 800fab0:	9304      	str	r3, [sp, #16]
 800fab2:	9307      	str	r3, [sp, #28]
 800fab4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fab8:	931a      	str	r3, [sp, #104]	; 0x68
 800faba:	4654      	mov	r4, sl
 800fabc:	2205      	movs	r2, #5
 800fabe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fac2:	4858      	ldr	r0, [pc, #352]	; (800fc24 <_vfiprintf_r+0x24c>)
 800fac4:	f000 fd32 	bl	801052c <memchr>
 800fac8:	9a04      	ldr	r2, [sp, #16]
 800faca:	b9d8      	cbnz	r0, 800fb04 <_vfiprintf_r+0x12c>
 800facc:	06d1      	lsls	r1, r2, #27
 800face:	bf44      	itt	mi
 800fad0:	2320      	movmi	r3, #32
 800fad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fad6:	0713      	lsls	r3, r2, #28
 800fad8:	bf44      	itt	mi
 800fada:	232b      	movmi	r3, #43	; 0x2b
 800fadc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fae0:	f89a 3000 	ldrb.w	r3, [sl]
 800fae4:	2b2a      	cmp	r3, #42	; 0x2a
 800fae6:	d015      	beq.n	800fb14 <_vfiprintf_r+0x13c>
 800fae8:	4654      	mov	r4, sl
 800faea:	2000      	movs	r0, #0
 800faec:	f04f 0c0a 	mov.w	ip, #10
 800faf0:	9a07      	ldr	r2, [sp, #28]
 800faf2:	4621      	mov	r1, r4
 800faf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800faf8:	3b30      	subs	r3, #48	; 0x30
 800fafa:	2b09      	cmp	r3, #9
 800fafc:	d94e      	bls.n	800fb9c <_vfiprintf_r+0x1c4>
 800fafe:	b1b0      	cbz	r0, 800fb2e <_vfiprintf_r+0x156>
 800fb00:	9207      	str	r2, [sp, #28]
 800fb02:	e014      	b.n	800fb2e <_vfiprintf_r+0x156>
 800fb04:	eba0 0308 	sub.w	r3, r0, r8
 800fb08:	fa09 f303 	lsl.w	r3, r9, r3
 800fb0c:	4313      	orrs	r3, r2
 800fb0e:	46a2      	mov	sl, r4
 800fb10:	9304      	str	r3, [sp, #16]
 800fb12:	e7d2      	b.n	800faba <_vfiprintf_r+0xe2>
 800fb14:	9b03      	ldr	r3, [sp, #12]
 800fb16:	1d19      	adds	r1, r3, #4
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	9103      	str	r1, [sp, #12]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	bfbb      	ittet	lt
 800fb20:	425b      	neglt	r3, r3
 800fb22:	f042 0202 	orrlt.w	r2, r2, #2
 800fb26:	9307      	strge	r3, [sp, #28]
 800fb28:	9307      	strlt	r3, [sp, #28]
 800fb2a:	bfb8      	it	lt
 800fb2c:	9204      	strlt	r2, [sp, #16]
 800fb2e:	7823      	ldrb	r3, [r4, #0]
 800fb30:	2b2e      	cmp	r3, #46	; 0x2e
 800fb32:	d10c      	bne.n	800fb4e <_vfiprintf_r+0x176>
 800fb34:	7863      	ldrb	r3, [r4, #1]
 800fb36:	2b2a      	cmp	r3, #42	; 0x2a
 800fb38:	d135      	bne.n	800fba6 <_vfiprintf_r+0x1ce>
 800fb3a:	9b03      	ldr	r3, [sp, #12]
 800fb3c:	3402      	adds	r4, #2
 800fb3e:	1d1a      	adds	r2, r3, #4
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	9203      	str	r2, [sp, #12]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	bfb8      	it	lt
 800fb48:	f04f 33ff 	movlt.w	r3, #4294967295
 800fb4c:	9305      	str	r3, [sp, #20]
 800fb4e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800fc28 <_vfiprintf_r+0x250>
 800fb52:	2203      	movs	r2, #3
 800fb54:	4650      	mov	r0, sl
 800fb56:	7821      	ldrb	r1, [r4, #0]
 800fb58:	f000 fce8 	bl	801052c <memchr>
 800fb5c:	b140      	cbz	r0, 800fb70 <_vfiprintf_r+0x198>
 800fb5e:	2340      	movs	r3, #64	; 0x40
 800fb60:	eba0 000a 	sub.w	r0, r0, sl
 800fb64:	fa03 f000 	lsl.w	r0, r3, r0
 800fb68:	9b04      	ldr	r3, [sp, #16]
 800fb6a:	3401      	adds	r4, #1
 800fb6c:	4303      	orrs	r3, r0
 800fb6e:	9304      	str	r3, [sp, #16]
 800fb70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb74:	2206      	movs	r2, #6
 800fb76:	482d      	ldr	r0, [pc, #180]	; (800fc2c <_vfiprintf_r+0x254>)
 800fb78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb7c:	f000 fcd6 	bl	801052c <memchr>
 800fb80:	2800      	cmp	r0, #0
 800fb82:	d03f      	beq.n	800fc04 <_vfiprintf_r+0x22c>
 800fb84:	4b2a      	ldr	r3, [pc, #168]	; (800fc30 <_vfiprintf_r+0x258>)
 800fb86:	bb1b      	cbnz	r3, 800fbd0 <_vfiprintf_r+0x1f8>
 800fb88:	9b03      	ldr	r3, [sp, #12]
 800fb8a:	3307      	adds	r3, #7
 800fb8c:	f023 0307 	bic.w	r3, r3, #7
 800fb90:	3308      	adds	r3, #8
 800fb92:	9303      	str	r3, [sp, #12]
 800fb94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb96:	443b      	add	r3, r7
 800fb98:	9309      	str	r3, [sp, #36]	; 0x24
 800fb9a:	e767      	b.n	800fa6c <_vfiprintf_r+0x94>
 800fb9c:	460c      	mov	r4, r1
 800fb9e:	2001      	movs	r0, #1
 800fba0:	fb0c 3202 	mla	r2, ip, r2, r3
 800fba4:	e7a5      	b.n	800faf2 <_vfiprintf_r+0x11a>
 800fba6:	2300      	movs	r3, #0
 800fba8:	f04f 0c0a 	mov.w	ip, #10
 800fbac:	4619      	mov	r1, r3
 800fbae:	3401      	adds	r4, #1
 800fbb0:	9305      	str	r3, [sp, #20]
 800fbb2:	4620      	mov	r0, r4
 800fbb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbb8:	3a30      	subs	r2, #48	; 0x30
 800fbba:	2a09      	cmp	r2, #9
 800fbbc:	d903      	bls.n	800fbc6 <_vfiprintf_r+0x1ee>
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d0c5      	beq.n	800fb4e <_vfiprintf_r+0x176>
 800fbc2:	9105      	str	r1, [sp, #20]
 800fbc4:	e7c3      	b.n	800fb4e <_vfiprintf_r+0x176>
 800fbc6:	4604      	mov	r4, r0
 800fbc8:	2301      	movs	r3, #1
 800fbca:	fb0c 2101 	mla	r1, ip, r1, r2
 800fbce:	e7f0      	b.n	800fbb2 <_vfiprintf_r+0x1da>
 800fbd0:	ab03      	add	r3, sp, #12
 800fbd2:	9300      	str	r3, [sp, #0]
 800fbd4:	462a      	mov	r2, r5
 800fbd6:	4630      	mov	r0, r6
 800fbd8:	4b16      	ldr	r3, [pc, #88]	; (800fc34 <_vfiprintf_r+0x25c>)
 800fbda:	a904      	add	r1, sp, #16
 800fbdc:	f3af 8000 	nop.w
 800fbe0:	4607      	mov	r7, r0
 800fbe2:	1c78      	adds	r0, r7, #1
 800fbe4:	d1d6      	bne.n	800fb94 <_vfiprintf_r+0x1bc>
 800fbe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fbe8:	07d9      	lsls	r1, r3, #31
 800fbea:	d405      	bmi.n	800fbf8 <_vfiprintf_r+0x220>
 800fbec:	89ab      	ldrh	r3, [r5, #12]
 800fbee:	059a      	lsls	r2, r3, #22
 800fbf0:	d402      	bmi.n	800fbf8 <_vfiprintf_r+0x220>
 800fbf2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fbf4:	f000 fc33 	bl	801045e <__retarget_lock_release_recursive>
 800fbf8:	89ab      	ldrh	r3, [r5, #12]
 800fbfa:	065b      	lsls	r3, r3, #25
 800fbfc:	f53f af12 	bmi.w	800fa24 <_vfiprintf_r+0x4c>
 800fc00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc02:	e711      	b.n	800fa28 <_vfiprintf_r+0x50>
 800fc04:	ab03      	add	r3, sp, #12
 800fc06:	9300      	str	r3, [sp, #0]
 800fc08:	462a      	mov	r2, r5
 800fc0a:	4630      	mov	r0, r6
 800fc0c:	4b09      	ldr	r3, [pc, #36]	; (800fc34 <_vfiprintf_r+0x25c>)
 800fc0e:	a904      	add	r1, sp, #16
 800fc10:	f000 f882 	bl	800fd18 <_printf_i>
 800fc14:	e7e4      	b.n	800fbe0 <_vfiprintf_r+0x208>
 800fc16:	bf00      	nop
 800fc18:	08012cd4 	.word	0x08012cd4
 800fc1c:	08012cf4 	.word	0x08012cf4
 800fc20:	08012cb4 	.word	0x08012cb4
 800fc24:	08012c81 	.word	0x08012c81
 800fc28:	08012c87 	.word	0x08012c87
 800fc2c:	08012c8b 	.word	0x08012c8b
 800fc30:	00000000 	.word	0x00000000
 800fc34:	0800f9b3 	.word	0x0800f9b3

0800fc38 <_printf_common>:
 800fc38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc3c:	4616      	mov	r6, r2
 800fc3e:	4699      	mov	r9, r3
 800fc40:	688a      	ldr	r2, [r1, #8]
 800fc42:	690b      	ldr	r3, [r1, #16]
 800fc44:	4607      	mov	r7, r0
 800fc46:	4293      	cmp	r3, r2
 800fc48:	bfb8      	it	lt
 800fc4a:	4613      	movlt	r3, r2
 800fc4c:	6033      	str	r3, [r6, #0]
 800fc4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fc52:	460c      	mov	r4, r1
 800fc54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fc58:	b10a      	cbz	r2, 800fc5e <_printf_common+0x26>
 800fc5a:	3301      	adds	r3, #1
 800fc5c:	6033      	str	r3, [r6, #0]
 800fc5e:	6823      	ldr	r3, [r4, #0]
 800fc60:	0699      	lsls	r1, r3, #26
 800fc62:	bf42      	ittt	mi
 800fc64:	6833      	ldrmi	r3, [r6, #0]
 800fc66:	3302      	addmi	r3, #2
 800fc68:	6033      	strmi	r3, [r6, #0]
 800fc6a:	6825      	ldr	r5, [r4, #0]
 800fc6c:	f015 0506 	ands.w	r5, r5, #6
 800fc70:	d106      	bne.n	800fc80 <_printf_common+0x48>
 800fc72:	f104 0a19 	add.w	sl, r4, #25
 800fc76:	68e3      	ldr	r3, [r4, #12]
 800fc78:	6832      	ldr	r2, [r6, #0]
 800fc7a:	1a9b      	subs	r3, r3, r2
 800fc7c:	42ab      	cmp	r3, r5
 800fc7e:	dc28      	bgt.n	800fcd2 <_printf_common+0x9a>
 800fc80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fc84:	1e13      	subs	r3, r2, #0
 800fc86:	6822      	ldr	r2, [r4, #0]
 800fc88:	bf18      	it	ne
 800fc8a:	2301      	movne	r3, #1
 800fc8c:	0692      	lsls	r2, r2, #26
 800fc8e:	d42d      	bmi.n	800fcec <_printf_common+0xb4>
 800fc90:	4649      	mov	r1, r9
 800fc92:	4638      	mov	r0, r7
 800fc94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fc98:	47c0      	blx	r8
 800fc9a:	3001      	adds	r0, #1
 800fc9c:	d020      	beq.n	800fce0 <_printf_common+0xa8>
 800fc9e:	6823      	ldr	r3, [r4, #0]
 800fca0:	68e5      	ldr	r5, [r4, #12]
 800fca2:	f003 0306 	and.w	r3, r3, #6
 800fca6:	2b04      	cmp	r3, #4
 800fca8:	bf18      	it	ne
 800fcaa:	2500      	movne	r5, #0
 800fcac:	6832      	ldr	r2, [r6, #0]
 800fcae:	f04f 0600 	mov.w	r6, #0
 800fcb2:	68a3      	ldr	r3, [r4, #8]
 800fcb4:	bf08      	it	eq
 800fcb6:	1aad      	subeq	r5, r5, r2
 800fcb8:	6922      	ldr	r2, [r4, #16]
 800fcba:	bf08      	it	eq
 800fcbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fcc0:	4293      	cmp	r3, r2
 800fcc2:	bfc4      	itt	gt
 800fcc4:	1a9b      	subgt	r3, r3, r2
 800fcc6:	18ed      	addgt	r5, r5, r3
 800fcc8:	341a      	adds	r4, #26
 800fcca:	42b5      	cmp	r5, r6
 800fccc:	d11a      	bne.n	800fd04 <_printf_common+0xcc>
 800fcce:	2000      	movs	r0, #0
 800fcd0:	e008      	b.n	800fce4 <_printf_common+0xac>
 800fcd2:	2301      	movs	r3, #1
 800fcd4:	4652      	mov	r2, sl
 800fcd6:	4649      	mov	r1, r9
 800fcd8:	4638      	mov	r0, r7
 800fcda:	47c0      	blx	r8
 800fcdc:	3001      	adds	r0, #1
 800fcde:	d103      	bne.n	800fce8 <_printf_common+0xb0>
 800fce0:	f04f 30ff 	mov.w	r0, #4294967295
 800fce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fce8:	3501      	adds	r5, #1
 800fcea:	e7c4      	b.n	800fc76 <_printf_common+0x3e>
 800fcec:	2030      	movs	r0, #48	; 0x30
 800fcee:	18e1      	adds	r1, r4, r3
 800fcf0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fcf4:	1c5a      	adds	r2, r3, #1
 800fcf6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fcfa:	4422      	add	r2, r4
 800fcfc:	3302      	adds	r3, #2
 800fcfe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fd02:	e7c5      	b.n	800fc90 <_printf_common+0x58>
 800fd04:	2301      	movs	r3, #1
 800fd06:	4622      	mov	r2, r4
 800fd08:	4649      	mov	r1, r9
 800fd0a:	4638      	mov	r0, r7
 800fd0c:	47c0      	blx	r8
 800fd0e:	3001      	adds	r0, #1
 800fd10:	d0e6      	beq.n	800fce0 <_printf_common+0xa8>
 800fd12:	3601      	adds	r6, #1
 800fd14:	e7d9      	b.n	800fcca <_printf_common+0x92>
	...

0800fd18 <_printf_i>:
 800fd18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd1c:	7e0f      	ldrb	r7, [r1, #24]
 800fd1e:	4691      	mov	r9, r2
 800fd20:	2f78      	cmp	r7, #120	; 0x78
 800fd22:	4680      	mov	r8, r0
 800fd24:	460c      	mov	r4, r1
 800fd26:	469a      	mov	sl, r3
 800fd28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fd2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fd2e:	d807      	bhi.n	800fd40 <_printf_i+0x28>
 800fd30:	2f62      	cmp	r7, #98	; 0x62
 800fd32:	d80a      	bhi.n	800fd4a <_printf_i+0x32>
 800fd34:	2f00      	cmp	r7, #0
 800fd36:	f000 80d9 	beq.w	800feec <_printf_i+0x1d4>
 800fd3a:	2f58      	cmp	r7, #88	; 0x58
 800fd3c:	f000 80a4 	beq.w	800fe88 <_printf_i+0x170>
 800fd40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fd48:	e03a      	b.n	800fdc0 <_printf_i+0xa8>
 800fd4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fd4e:	2b15      	cmp	r3, #21
 800fd50:	d8f6      	bhi.n	800fd40 <_printf_i+0x28>
 800fd52:	a101      	add	r1, pc, #4	; (adr r1, 800fd58 <_printf_i+0x40>)
 800fd54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fd58:	0800fdb1 	.word	0x0800fdb1
 800fd5c:	0800fdc5 	.word	0x0800fdc5
 800fd60:	0800fd41 	.word	0x0800fd41
 800fd64:	0800fd41 	.word	0x0800fd41
 800fd68:	0800fd41 	.word	0x0800fd41
 800fd6c:	0800fd41 	.word	0x0800fd41
 800fd70:	0800fdc5 	.word	0x0800fdc5
 800fd74:	0800fd41 	.word	0x0800fd41
 800fd78:	0800fd41 	.word	0x0800fd41
 800fd7c:	0800fd41 	.word	0x0800fd41
 800fd80:	0800fd41 	.word	0x0800fd41
 800fd84:	0800fed3 	.word	0x0800fed3
 800fd88:	0800fdf5 	.word	0x0800fdf5
 800fd8c:	0800feb5 	.word	0x0800feb5
 800fd90:	0800fd41 	.word	0x0800fd41
 800fd94:	0800fd41 	.word	0x0800fd41
 800fd98:	0800fef5 	.word	0x0800fef5
 800fd9c:	0800fd41 	.word	0x0800fd41
 800fda0:	0800fdf5 	.word	0x0800fdf5
 800fda4:	0800fd41 	.word	0x0800fd41
 800fda8:	0800fd41 	.word	0x0800fd41
 800fdac:	0800febd 	.word	0x0800febd
 800fdb0:	682b      	ldr	r3, [r5, #0]
 800fdb2:	1d1a      	adds	r2, r3, #4
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	602a      	str	r2, [r5, #0]
 800fdb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fdbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fdc0:	2301      	movs	r3, #1
 800fdc2:	e0a4      	b.n	800ff0e <_printf_i+0x1f6>
 800fdc4:	6820      	ldr	r0, [r4, #0]
 800fdc6:	6829      	ldr	r1, [r5, #0]
 800fdc8:	0606      	lsls	r6, r0, #24
 800fdca:	f101 0304 	add.w	r3, r1, #4
 800fdce:	d50a      	bpl.n	800fde6 <_printf_i+0xce>
 800fdd0:	680e      	ldr	r6, [r1, #0]
 800fdd2:	602b      	str	r3, [r5, #0]
 800fdd4:	2e00      	cmp	r6, #0
 800fdd6:	da03      	bge.n	800fde0 <_printf_i+0xc8>
 800fdd8:	232d      	movs	r3, #45	; 0x2d
 800fdda:	4276      	negs	r6, r6
 800fddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fde0:	230a      	movs	r3, #10
 800fde2:	485e      	ldr	r0, [pc, #376]	; (800ff5c <_printf_i+0x244>)
 800fde4:	e019      	b.n	800fe1a <_printf_i+0x102>
 800fde6:	680e      	ldr	r6, [r1, #0]
 800fde8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fdec:	602b      	str	r3, [r5, #0]
 800fdee:	bf18      	it	ne
 800fdf0:	b236      	sxthne	r6, r6
 800fdf2:	e7ef      	b.n	800fdd4 <_printf_i+0xbc>
 800fdf4:	682b      	ldr	r3, [r5, #0]
 800fdf6:	6820      	ldr	r0, [r4, #0]
 800fdf8:	1d19      	adds	r1, r3, #4
 800fdfa:	6029      	str	r1, [r5, #0]
 800fdfc:	0601      	lsls	r1, r0, #24
 800fdfe:	d501      	bpl.n	800fe04 <_printf_i+0xec>
 800fe00:	681e      	ldr	r6, [r3, #0]
 800fe02:	e002      	b.n	800fe0a <_printf_i+0xf2>
 800fe04:	0646      	lsls	r6, r0, #25
 800fe06:	d5fb      	bpl.n	800fe00 <_printf_i+0xe8>
 800fe08:	881e      	ldrh	r6, [r3, #0]
 800fe0a:	2f6f      	cmp	r7, #111	; 0x6f
 800fe0c:	bf0c      	ite	eq
 800fe0e:	2308      	moveq	r3, #8
 800fe10:	230a      	movne	r3, #10
 800fe12:	4852      	ldr	r0, [pc, #328]	; (800ff5c <_printf_i+0x244>)
 800fe14:	2100      	movs	r1, #0
 800fe16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fe1a:	6865      	ldr	r5, [r4, #4]
 800fe1c:	2d00      	cmp	r5, #0
 800fe1e:	bfa8      	it	ge
 800fe20:	6821      	ldrge	r1, [r4, #0]
 800fe22:	60a5      	str	r5, [r4, #8]
 800fe24:	bfa4      	itt	ge
 800fe26:	f021 0104 	bicge.w	r1, r1, #4
 800fe2a:	6021      	strge	r1, [r4, #0]
 800fe2c:	b90e      	cbnz	r6, 800fe32 <_printf_i+0x11a>
 800fe2e:	2d00      	cmp	r5, #0
 800fe30:	d04d      	beq.n	800fece <_printf_i+0x1b6>
 800fe32:	4615      	mov	r5, r2
 800fe34:	fbb6 f1f3 	udiv	r1, r6, r3
 800fe38:	fb03 6711 	mls	r7, r3, r1, r6
 800fe3c:	5dc7      	ldrb	r7, [r0, r7]
 800fe3e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fe42:	4637      	mov	r7, r6
 800fe44:	42bb      	cmp	r3, r7
 800fe46:	460e      	mov	r6, r1
 800fe48:	d9f4      	bls.n	800fe34 <_printf_i+0x11c>
 800fe4a:	2b08      	cmp	r3, #8
 800fe4c:	d10b      	bne.n	800fe66 <_printf_i+0x14e>
 800fe4e:	6823      	ldr	r3, [r4, #0]
 800fe50:	07de      	lsls	r6, r3, #31
 800fe52:	d508      	bpl.n	800fe66 <_printf_i+0x14e>
 800fe54:	6923      	ldr	r3, [r4, #16]
 800fe56:	6861      	ldr	r1, [r4, #4]
 800fe58:	4299      	cmp	r1, r3
 800fe5a:	bfde      	ittt	le
 800fe5c:	2330      	movle	r3, #48	; 0x30
 800fe5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fe62:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fe66:	1b52      	subs	r2, r2, r5
 800fe68:	6122      	str	r2, [r4, #16]
 800fe6a:	464b      	mov	r3, r9
 800fe6c:	4621      	mov	r1, r4
 800fe6e:	4640      	mov	r0, r8
 800fe70:	f8cd a000 	str.w	sl, [sp]
 800fe74:	aa03      	add	r2, sp, #12
 800fe76:	f7ff fedf 	bl	800fc38 <_printf_common>
 800fe7a:	3001      	adds	r0, #1
 800fe7c:	d14c      	bne.n	800ff18 <_printf_i+0x200>
 800fe7e:	f04f 30ff 	mov.w	r0, #4294967295
 800fe82:	b004      	add	sp, #16
 800fe84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe88:	4834      	ldr	r0, [pc, #208]	; (800ff5c <_printf_i+0x244>)
 800fe8a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fe8e:	6829      	ldr	r1, [r5, #0]
 800fe90:	6823      	ldr	r3, [r4, #0]
 800fe92:	f851 6b04 	ldr.w	r6, [r1], #4
 800fe96:	6029      	str	r1, [r5, #0]
 800fe98:	061d      	lsls	r5, r3, #24
 800fe9a:	d514      	bpl.n	800fec6 <_printf_i+0x1ae>
 800fe9c:	07df      	lsls	r7, r3, #31
 800fe9e:	bf44      	itt	mi
 800fea0:	f043 0320 	orrmi.w	r3, r3, #32
 800fea4:	6023      	strmi	r3, [r4, #0]
 800fea6:	b91e      	cbnz	r6, 800feb0 <_printf_i+0x198>
 800fea8:	6823      	ldr	r3, [r4, #0]
 800feaa:	f023 0320 	bic.w	r3, r3, #32
 800feae:	6023      	str	r3, [r4, #0]
 800feb0:	2310      	movs	r3, #16
 800feb2:	e7af      	b.n	800fe14 <_printf_i+0xfc>
 800feb4:	6823      	ldr	r3, [r4, #0]
 800feb6:	f043 0320 	orr.w	r3, r3, #32
 800feba:	6023      	str	r3, [r4, #0]
 800febc:	2378      	movs	r3, #120	; 0x78
 800febe:	4828      	ldr	r0, [pc, #160]	; (800ff60 <_printf_i+0x248>)
 800fec0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fec4:	e7e3      	b.n	800fe8e <_printf_i+0x176>
 800fec6:	0659      	lsls	r1, r3, #25
 800fec8:	bf48      	it	mi
 800feca:	b2b6      	uxthmi	r6, r6
 800fecc:	e7e6      	b.n	800fe9c <_printf_i+0x184>
 800fece:	4615      	mov	r5, r2
 800fed0:	e7bb      	b.n	800fe4a <_printf_i+0x132>
 800fed2:	682b      	ldr	r3, [r5, #0]
 800fed4:	6826      	ldr	r6, [r4, #0]
 800fed6:	1d18      	adds	r0, r3, #4
 800fed8:	6961      	ldr	r1, [r4, #20]
 800feda:	6028      	str	r0, [r5, #0]
 800fedc:	0635      	lsls	r5, r6, #24
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	d501      	bpl.n	800fee6 <_printf_i+0x1ce>
 800fee2:	6019      	str	r1, [r3, #0]
 800fee4:	e002      	b.n	800feec <_printf_i+0x1d4>
 800fee6:	0670      	lsls	r0, r6, #25
 800fee8:	d5fb      	bpl.n	800fee2 <_printf_i+0x1ca>
 800feea:	8019      	strh	r1, [r3, #0]
 800feec:	2300      	movs	r3, #0
 800feee:	4615      	mov	r5, r2
 800fef0:	6123      	str	r3, [r4, #16]
 800fef2:	e7ba      	b.n	800fe6a <_printf_i+0x152>
 800fef4:	682b      	ldr	r3, [r5, #0]
 800fef6:	2100      	movs	r1, #0
 800fef8:	1d1a      	adds	r2, r3, #4
 800fefa:	602a      	str	r2, [r5, #0]
 800fefc:	681d      	ldr	r5, [r3, #0]
 800fefe:	6862      	ldr	r2, [r4, #4]
 800ff00:	4628      	mov	r0, r5
 800ff02:	f000 fb13 	bl	801052c <memchr>
 800ff06:	b108      	cbz	r0, 800ff0c <_printf_i+0x1f4>
 800ff08:	1b40      	subs	r0, r0, r5
 800ff0a:	6060      	str	r0, [r4, #4]
 800ff0c:	6863      	ldr	r3, [r4, #4]
 800ff0e:	6123      	str	r3, [r4, #16]
 800ff10:	2300      	movs	r3, #0
 800ff12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff16:	e7a8      	b.n	800fe6a <_printf_i+0x152>
 800ff18:	462a      	mov	r2, r5
 800ff1a:	4649      	mov	r1, r9
 800ff1c:	4640      	mov	r0, r8
 800ff1e:	6923      	ldr	r3, [r4, #16]
 800ff20:	47d0      	blx	sl
 800ff22:	3001      	adds	r0, #1
 800ff24:	d0ab      	beq.n	800fe7e <_printf_i+0x166>
 800ff26:	6823      	ldr	r3, [r4, #0]
 800ff28:	079b      	lsls	r3, r3, #30
 800ff2a:	d413      	bmi.n	800ff54 <_printf_i+0x23c>
 800ff2c:	68e0      	ldr	r0, [r4, #12]
 800ff2e:	9b03      	ldr	r3, [sp, #12]
 800ff30:	4298      	cmp	r0, r3
 800ff32:	bfb8      	it	lt
 800ff34:	4618      	movlt	r0, r3
 800ff36:	e7a4      	b.n	800fe82 <_printf_i+0x16a>
 800ff38:	2301      	movs	r3, #1
 800ff3a:	4632      	mov	r2, r6
 800ff3c:	4649      	mov	r1, r9
 800ff3e:	4640      	mov	r0, r8
 800ff40:	47d0      	blx	sl
 800ff42:	3001      	adds	r0, #1
 800ff44:	d09b      	beq.n	800fe7e <_printf_i+0x166>
 800ff46:	3501      	adds	r5, #1
 800ff48:	68e3      	ldr	r3, [r4, #12]
 800ff4a:	9903      	ldr	r1, [sp, #12]
 800ff4c:	1a5b      	subs	r3, r3, r1
 800ff4e:	42ab      	cmp	r3, r5
 800ff50:	dcf2      	bgt.n	800ff38 <_printf_i+0x220>
 800ff52:	e7eb      	b.n	800ff2c <_printf_i+0x214>
 800ff54:	2500      	movs	r5, #0
 800ff56:	f104 0619 	add.w	r6, r4, #25
 800ff5a:	e7f5      	b.n	800ff48 <_printf_i+0x230>
 800ff5c:	08012c92 	.word	0x08012c92
 800ff60:	08012ca3 	.word	0x08012ca3

0800ff64 <__swbuf_r>:
 800ff64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff66:	460e      	mov	r6, r1
 800ff68:	4614      	mov	r4, r2
 800ff6a:	4605      	mov	r5, r0
 800ff6c:	b118      	cbz	r0, 800ff76 <__swbuf_r+0x12>
 800ff6e:	6983      	ldr	r3, [r0, #24]
 800ff70:	b90b      	cbnz	r3, 800ff76 <__swbuf_r+0x12>
 800ff72:	f000 f9d5 	bl	8010320 <__sinit>
 800ff76:	4b21      	ldr	r3, [pc, #132]	; (800fffc <__swbuf_r+0x98>)
 800ff78:	429c      	cmp	r4, r3
 800ff7a:	d12b      	bne.n	800ffd4 <__swbuf_r+0x70>
 800ff7c:	686c      	ldr	r4, [r5, #4]
 800ff7e:	69a3      	ldr	r3, [r4, #24]
 800ff80:	60a3      	str	r3, [r4, #8]
 800ff82:	89a3      	ldrh	r3, [r4, #12]
 800ff84:	071a      	lsls	r2, r3, #28
 800ff86:	d52f      	bpl.n	800ffe8 <__swbuf_r+0x84>
 800ff88:	6923      	ldr	r3, [r4, #16]
 800ff8a:	b36b      	cbz	r3, 800ffe8 <__swbuf_r+0x84>
 800ff8c:	6923      	ldr	r3, [r4, #16]
 800ff8e:	6820      	ldr	r0, [r4, #0]
 800ff90:	b2f6      	uxtb	r6, r6
 800ff92:	1ac0      	subs	r0, r0, r3
 800ff94:	6963      	ldr	r3, [r4, #20]
 800ff96:	4637      	mov	r7, r6
 800ff98:	4283      	cmp	r3, r0
 800ff9a:	dc04      	bgt.n	800ffa6 <__swbuf_r+0x42>
 800ff9c:	4621      	mov	r1, r4
 800ff9e:	4628      	mov	r0, r5
 800ffa0:	f000 f92a 	bl	80101f8 <_fflush_r>
 800ffa4:	bb30      	cbnz	r0, 800fff4 <__swbuf_r+0x90>
 800ffa6:	68a3      	ldr	r3, [r4, #8]
 800ffa8:	3001      	adds	r0, #1
 800ffaa:	3b01      	subs	r3, #1
 800ffac:	60a3      	str	r3, [r4, #8]
 800ffae:	6823      	ldr	r3, [r4, #0]
 800ffb0:	1c5a      	adds	r2, r3, #1
 800ffb2:	6022      	str	r2, [r4, #0]
 800ffb4:	701e      	strb	r6, [r3, #0]
 800ffb6:	6963      	ldr	r3, [r4, #20]
 800ffb8:	4283      	cmp	r3, r0
 800ffba:	d004      	beq.n	800ffc6 <__swbuf_r+0x62>
 800ffbc:	89a3      	ldrh	r3, [r4, #12]
 800ffbe:	07db      	lsls	r3, r3, #31
 800ffc0:	d506      	bpl.n	800ffd0 <__swbuf_r+0x6c>
 800ffc2:	2e0a      	cmp	r6, #10
 800ffc4:	d104      	bne.n	800ffd0 <__swbuf_r+0x6c>
 800ffc6:	4621      	mov	r1, r4
 800ffc8:	4628      	mov	r0, r5
 800ffca:	f000 f915 	bl	80101f8 <_fflush_r>
 800ffce:	b988      	cbnz	r0, 800fff4 <__swbuf_r+0x90>
 800ffd0:	4638      	mov	r0, r7
 800ffd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffd4:	4b0a      	ldr	r3, [pc, #40]	; (8010000 <__swbuf_r+0x9c>)
 800ffd6:	429c      	cmp	r4, r3
 800ffd8:	d101      	bne.n	800ffde <__swbuf_r+0x7a>
 800ffda:	68ac      	ldr	r4, [r5, #8]
 800ffdc:	e7cf      	b.n	800ff7e <__swbuf_r+0x1a>
 800ffde:	4b09      	ldr	r3, [pc, #36]	; (8010004 <__swbuf_r+0xa0>)
 800ffe0:	429c      	cmp	r4, r3
 800ffe2:	bf08      	it	eq
 800ffe4:	68ec      	ldreq	r4, [r5, #12]
 800ffe6:	e7ca      	b.n	800ff7e <__swbuf_r+0x1a>
 800ffe8:	4621      	mov	r1, r4
 800ffea:	4628      	mov	r0, r5
 800ffec:	f000 f80c 	bl	8010008 <__swsetup_r>
 800fff0:	2800      	cmp	r0, #0
 800fff2:	d0cb      	beq.n	800ff8c <__swbuf_r+0x28>
 800fff4:	f04f 37ff 	mov.w	r7, #4294967295
 800fff8:	e7ea      	b.n	800ffd0 <__swbuf_r+0x6c>
 800fffa:	bf00      	nop
 800fffc:	08012cd4 	.word	0x08012cd4
 8010000:	08012cf4 	.word	0x08012cf4
 8010004:	08012cb4 	.word	0x08012cb4

08010008 <__swsetup_r>:
 8010008:	4b32      	ldr	r3, [pc, #200]	; (80100d4 <__swsetup_r+0xcc>)
 801000a:	b570      	push	{r4, r5, r6, lr}
 801000c:	681d      	ldr	r5, [r3, #0]
 801000e:	4606      	mov	r6, r0
 8010010:	460c      	mov	r4, r1
 8010012:	b125      	cbz	r5, 801001e <__swsetup_r+0x16>
 8010014:	69ab      	ldr	r3, [r5, #24]
 8010016:	b913      	cbnz	r3, 801001e <__swsetup_r+0x16>
 8010018:	4628      	mov	r0, r5
 801001a:	f000 f981 	bl	8010320 <__sinit>
 801001e:	4b2e      	ldr	r3, [pc, #184]	; (80100d8 <__swsetup_r+0xd0>)
 8010020:	429c      	cmp	r4, r3
 8010022:	d10f      	bne.n	8010044 <__swsetup_r+0x3c>
 8010024:	686c      	ldr	r4, [r5, #4]
 8010026:	89a3      	ldrh	r3, [r4, #12]
 8010028:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801002c:	0719      	lsls	r1, r3, #28
 801002e:	d42c      	bmi.n	801008a <__swsetup_r+0x82>
 8010030:	06dd      	lsls	r5, r3, #27
 8010032:	d411      	bmi.n	8010058 <__swsetup_r+0x50>
 8010034:	2309      	movs	r3, #9
 8010036:	6033      	str	r3, [r6, #0]
 8010038:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801003c:	f04f 30ff 	mov.w	r0, #4294967295
 8010040:	81a3      	strh	r3, [r4, #12]
 8010042:	e03e      	b.n	80100c2 <__swsetup_r+0xba>
 8010044:	4b25      	ldr	r3, [pc, #148]	; (80100dc <__swsetup_r+0xd4>)
 8010046:	429c      	cmp	r4, r3
 8010048:	d101      	bne.n	801004e <__swsetup_r+0x46>
 801004a:	68ac      	ldr	r4, [r5, #8]
 801004c:	e7eb      	b.n	8010026 <__swsetup_r+0x1e>
 801004e:	4b24      	ldr	r3, [pc, #144]	; (80100e0 <__swsetup_r+0xd8>)
 8010050:	429c      	cmp	r4, r3
 8010052:	bf08      	it	eq
 8010054:	68ec      	ldreq	r4, [r5, #12]
 8010056:	e7e6      	b.n	8010026 <__swsetup_r+0x1e>
 8010058:	0758      	lsls	r0, r3, #29
 801005a:	d512      	bpl.n	8010082 <__swsetup_r+0x7a>
 801005c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801005e:	b141      	cbz	r1, 8010072 <__swsetup_r+0x6a>
 8010060:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010064:	4299      	cmp	r1, r3
 8010066:	d002      	beq.n	801006e <__swsetup_r+0x66>
 8010068:	4630      	mov	r0, r6
 801006a:	f7ff fc45 	bl	800f8f8 <_free_r>
 801006e:	2300      	movs	r3, #0
 8010070:	6363      	str	r3, [r4, #52]	; 0x34
 8010072:	89a3      	ldrh	r3, [r4, #12]
 8010074:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010078:	81a3      	strh	r3, [r4, #12]
 801007a:	2300      	movs	r3, #0
 801007c:	6063      	str	r3, [r4, #4]
 801007e:	6923      	ldr	r3, [r4, #16]
 8010080:	6023      	str	r3, [r4, #0]
 8010082:	89a3      	ldrh	r3, [r4, #12]
 8010084:	f043 0308 	orr.w	r3, r3, #8
 8010088:	81a3      	strh	r3, [r4, #12]
 801008a:	6923      	ldr	r3, [r4, #16]
 801008c:	b94b      	cbnz	r3, 80100a2 <__swsetup_r+0x9a>
 801008e:	89a3      	ldrh	r3, [r4, #12]
 8010090:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010098:	d003      	beq.n	80100a2 <__swsetup_r+0x9a>
 801009a:	4621      	mov	r1, r4
 801009c:	4630      	mov	r0, r6
 801009e:	f000 fa05 	bl	80104ac <__smakebuf_r>
 80100a2:	89a0      	ldrh	r0, [r4, #12]
 80100a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80100a8:	f010 0301 	ands.w	r3, r0, #1
 80100ac:	d00a      	beq.n	80100c4 <__swsetup_r+0xbc>
 80100ae:	2300      	movs	r3, #0
 80100b0:	60a3      	str	r3, [r4, #8]
 80100b2:	6963      	ldr	r3, [r4, #20]
 80100b4:	425b      	negs	r3, r3
 80100b6:	61a3      	str	r3, [r4, #24]
 80100b8:	6923      	ldr	r3, [r4, #16]
 80100ba:	b943      	cbnz	r3, 80100ce <__swsetup_r+0xc6>
 80100bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80100c0:	d1ba      	bne.n	8010038 <__swsetup_r+0x30>
 80100c2:	bd70      	pop	{r4, r5, r6, pc}
 80100c4:	0781      	lsls	r1, r0, #30
 80100c6:	bf58      	it	pl
 80100c8:	6963      	ldrpl	r3, [r4, #20]
 80100ca:	60a3      	str	r3, [r4, #8]
 80100cc:	e7f4      	b.n	80100b8 <__swsetup_r+0xb0>
 80100ce:	2000      	movs	r0, #0
 80100d0:	e7f7      	b.n	80100c2 <__swsetup_r+0xba>
 80100d2:	bf00      	nop
 80100d4:	2000011c 	.word	0x2000011c
 80100d8:	08012cd4 	.word	0x08012cd4
 80100dc:	08012cf4 	.word	0x08012cf4
 80100e0:	08012cb4 	.word	0x08012cb4

080100e4 <abort>:
 80100e4:	2006      	movs	r0, #6
 80100e6:	b508      	push	{r3, lr}
 80100e8:	f000 fa56 	bl	8010598 <raise>
 80100ec:	2001      	movs	r0, #1
 80100ee:	f7f9 fdaa 	bl	8009c46 <_exit>
	...

080100f4 <__sflush_r>:
 80100f4:	898a      	ldrh	r2, [r1, #12]
 80100f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100f8:	4605      	mov	r5, r0
 80100fa:	0710      	lsls	r0, r2, #28
 80100fc:	460c      	mov	r4, r1
 80100fe:	d457      	bmi.n	80101b0 <__sflush_r+0xbc>
 8010100:	684b      	ldr	r3, [r1, #4]
 8010102:	2b00      	cmp	r3, #0
 8010104:	dc04      	bgt.n	8010110 <__sflush_r+0x1c>
 8010106:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010108:	2b00      	cmp	r3, #0
 801010a:	dc01      	bgt.n	8010110 <__sflush_r+0x1c>
 801010c:	2000      	movs	r0, #0
 801010e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010110:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010112:	2e00      	cmp	r6, #0
 8010114:	d0fa      	beq.n	801010c <__sflush_r+0x18>
 8010116:	2300      	movs	r3, #0
 8010118:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801011c:	682f      	ldr	r7, [r5, #0]
 801011e:	602b      	str	r3, [r5, #0]
 8010120:	d032      	beq.n	8010188 <__sflush_r+0x94>
 8010122:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010124:	89a3      	ldrh	r3, [r4, #12]
 8010126:	075a      	lsls	r2, r3, #29
 8010128:	d505      	bpl.n	8010136 <__sflush_r+0x42>
 801012a:	6863      	ldr	r3, [r4, #4]
 801012c:	1ac0      	subs	r0, r0, r3
 801012e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010130:	b10b      	cbz	r3, 8010136 <__sflush_r+0x42>
 8010132:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010134:	1ac0      	subs	r0, r0, r3
 8010136:	2300      	movs	r3, #0
 8010138:	4602      	mov	r2, r0
 801013a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801013c:	4628      	mov	r0, r5
 801013e:	6a21      	ldr	r1, [r4, #32]
 8010140:	47b0      	blx	r6
 8010142:	1c43      	adds	r3, r0, #1
 8010144:	89a3      	ldrh	r3, [r4, #12]
 8010146:	d106      	bne.n	8010156 <__sflush_r+0x62>
 8010148:	6829      	ldr	r1, [r5, #0]
 801014a:	291d      	cmp	r1, #29
 801014c:	d82c      	bhi.n	80101a8 <__sflush_r+0xb4>
 801014e:	4a29      	ldr	r2, [pc, #164]	; (80101f4 <__sflush_r+0x100>)
 8010150:	40ca      	lsrs	r2, r1
 8010152:	07d6      	lsls	r6, r2, #31
 8010154:	d528      	bpl.n	80101a8 <__sflush_r+0xb4>
 8010156:	2200      	movs	r2, #0
 8010158:	6062      	str	r2, [r4, #4]
 801015a:	6922      	ldr	r2, [r4, #16]
 801015c:	04d9      	lsls	r1, r3, #19
 801015e:	6022      	str	r2, [r4, #0]
 8010160:	d504      	bpl.n	801016c <__sflush_r+0x78>
 8010162:	1c42      	adds	r2, r0, #1
 8010164:	d101      	bne.n	801016a <__sflush_r+0x76>
 8010166:	682b      	ldr	r3, [r5, #0]
 8010168:	b903      	cbnz	r3, 801016c <__sflush_r+0x78>
 801016a:	6560      	str	r0, [r4, #84]	; 0x54
 801016c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801016e:	602f      	str	r7, [r5, #0]
 8010170:	2900      	cmp	r1, #0
 8010172:	d0cb      	beq.n	801010c <__sflush_r+0x18>
 8010174:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010178:	4299      	cmp	r1, r3
 801017a:	d002      	beq.n	8010182 <__sflush_r+0x8e>
 801017c:	4628      	mov	r0, r5
 801017e:	f7ff fbbb 	bl	800f8f8 <_free_r>
 8010182:	2000      	movs	r0, #0
 8010184:	6360      	str	r0, [r4, #52]	; 0x34
 8010186:	e7c2      	b.n	801010e <__sflush_r+0x1a>
 8010188:	6a21      	ldr	r1, [r4, #32]
 801018a:	2301      	movs	r3, #1
 801018c:	4628      	mov	r0, r5
 801018e:	47b0      	blx	r6
 8010190:	1c41      	adds	r1, r0, #1
 8010192:	d1c7      	bne.n	8010124 <__sflush_r+0x30>
 8010194:	682b      	ldr	r3, [r5, #0]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d0c4      	beq.n	8010124 <__sflush_r+0x30>
 801019a:	2b1d      	cmp	r3, #29
 801019c:	d001      	beq.n	80101a2 <__sflush_r+0xae>
 801019e:	2b16      	cmp	r3, #22
 80101a0:	d101      	bne.n	80101a6 <__sflush_r+0xb2>
 80101a2:	602f      	str	r7, [r5, #0]
 80101a4:	e7b2      	b.n	801010c <__sflush_r+0x18>
 80101a6:	89a3      	ldrh	r3, [r4, #12]
 80101a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101ac:	81a3      	strh	r3, [r4, #12]
 80101ae:	e7ae      	b.n	801010e <__sflush_r+0x1a>
 80101b0:	690f      	ldr	r7, [r1, #16]
 80101b2:	2f00      	cmp	r7, #0
 80101b4:	d0aa      	beq.n	801010c <__sflush_r+0x18>
 80101b6:	0793      	lsls	r3, r2, #30
 80101b8:	bf18      	it	ne
 80101ba:	2300      	movne	r3, #0
 80101bc:	680e      	ldr	r6, [r1, #0]
 80101be:	bf08      	it	eq
 80101c0:	694b      	ldreq	r3, [r1, #20]
 80101c2:	1bf6      	subs	r6, r6, r7
 80101c4:	600f      	str	r7, [r1, #0]
 80101c6:	608b      	str	r3, [r1, #8]
 80101c8:	2e00      	cmp	r6, #0
 80101ca:	dd9f      	ble.n	801010c <__sflush_r+0x18>
 80101cc:	4633      	mov	r3, r6
 80101ce:	463a      	mov	r2, r7
 80101d0:	4628      	mov	r0, r5
 80101d2:	6a21      	ldr	r1, [r4, #32]
 80101d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80101d8:	47e0      	blx	ip
 80101da:	2800      	cmp	r0, #0
 80101dc:	dc06      	bgt.n	80101ec <__sflush_r+0xf8>
 80101de:	89a3      	ldrh	r3, [r4, #12]
 80101e0:	f04f 30ff 	mov.w	r0, #4294967295
 80101e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101e8:	81a3      	strh	r3, [r4, #12]
 80101ea:	e790      	b.n	801010e <__sflush_r+0x1a>
 80101ec:	4407      	add	r7, r0
 80101ee:	1a36      	subs	r6, r6, r0
 80101f0:	e7ea      	b.n	80101c8 <__sflush_r+0xd4>
 80101f2:	bf00      	nop
 80101f4:	20400001 	.word	0x20400001

080101f8 <_fflush_r>:
 80101f8:	b538      	push	{r3, r4, r5, lr}
 80101fa:	690b      	ldr	r3, [r1, #16]
 80101fc:	4605      	mov	r5, r0
 80101fe:	460c      	mov	r4, r1
 8010200:	b913      	cbnz	r3, 8010208 <_fflush_r+0x10>
 8010202:	2500      	movs	r5, #0
 8010204:	4628      	mov	r0, r5
 8010206:	bd38      	pop	{r3, r4, r5, pc}
 8010208:	b118      	cbz	r0, 8010212 <_fflush_r+0x1a>
 801020a:	6983      	ldr	r3, [r0, #24]
 801020c:	b90b      	cbnz	r3, 8010212 <_fflush_r+0x1a>
 801020e:	f000 f887 	bl	8010320 <__sinit>
 8010212:	4b14      	ldr	r3, [pc, #80]	; (8010264 <_fflush_r+0x6c>)
 8010214:	429c      	cmp	r4, r3
 8010216:	d11b      	bne.n	8010250 <_fflush_r+0x58>
 8010218:	686c      	ldr	r4, [r5, #4]
 801021a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d0ef      	beq.n	8010202 <_fflush_r+0xa>
 8010222:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010224:	07d0      	lsls	r0, r2, #31
 8010226:	d404      	bmi.n	8010232 <_fflush_r+0x3a>
 8010228:	0599      	lsls	r1, r3, #22
 801022a:	d402      	bmi.n	8010232 <_fflush_r+0x3a>
 801022c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801022e:	f000 f915 	bl	801045c <__retarget_lock_acquire_recursive>
 8010232:	4628      	mov	r0, r5
 8010234:	4621      	mov	r1, r4
 8010236:	f7ff ff5d 	bl	80100f4 <__sflush_r>
 801023a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801023c:	4605      	mov	r5, r0
 801023e:	07da      	lsls	r2, r3, #31
 8010240:	d4e0      	bmi.n	8010204 <_fflush_r+0xc>
 8010242:	89a3      	ldrh	r3, [r4, #12]
 8010244:	059b      	lsls	r3, r3, #22
 8010246:	d4dd      	bmi.n	8010204 <_fflush_r+0xc>
 8010248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801024a:	f000 f908 	bl	801045e <__retarget_lock_release_recursive>
 801024e:	e7d9      	b.n	8010204 <_fflush_r+0xc>
 8010250:	4b05      	ldr	r3, [pc, #20]	; (8010268 <_fflush_r+0x70>)
 8010252:	429c      	cmp	r4, r3
 8010254:	d101      	bne.n	801025a <_fflush_r+0x62>
 8010256:	68ac      	ldr	r4, [r5, #8]
 8010258:	e7df      	b.n	801021a <_fflush_r+0x22>
 801025a:	4b04      	ldr	r3, [pc, #16]	; (801026c <_fflush_r+0x74>)
 801025c:	429c      	cmp	r4, r3
 801025e:	bf08      	it	eq
 8010260:	68ec      	ldreq	r4, [r5, #12]
 8010262:	e7da      	b.n	801021a <_fflush_r+0x22>
 8010264:	08012cd4 	.word	0x08012cd4
 8010268:	08012cf4 	.word	0x08012cf4
 801026c:	08012cb4 	.word	0x08012cb4

08010270 <std>:
 8010270:	2300      	movs	r3, #0
 8010272:	b510      	push	{r4, lr}
 8010274:	4604      	mov	r4, r0
 8010276:	e9c0 3300 	strd	r3, r3, [r0]
 801027a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801027e:	6083      	str	r3, [r0, #8]
 8010280:	8181      	strh	r1, [r0, #12]
 8010282:	6643      	str	r3, [r0, #100]	; 0x64
 8010284:	81c2      	strh	r2, [r0, #14]
 8010286:	6183      	str	r3, [r0, #24]
 8010288:	4619      	mov	r1, r3
 801028a:	2208      	movs	r2, #8
 801028c:	305c      	adds	r0, #92	; 0x5c
 801028e:	f7fd fbbb 	bl	800da08 <memset>
 8010292:	4b05      	ldr	r3, [pc, #20]	; (80102a8 <std+0x38>)
 8010294:	6224      	str	r4, [r4, #32]
 8010296:	6263      	str	r3, [r4, #36]	; 0x24
 8010298:	4b04      	ldr	r3, [pc, #16]	; (80102ac <std+0x3c>)
 801029a:	62a3      	str	r3, [r4, #40]	; 0x28
 801029c:	4b04      	ldr	r3, [pc, #16]	; (80102b0 <std+0x40>)
 801029e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80102a0:	4b04      	ldr	r3, [pc, #16]	; (80102b4 <std+0x44>)
 80102a2:	6323      	str	r3, [r4, #48]	; 0x30
 80102a4:	bd10      	pop	{r4, pc}
 80102a6:	bf00      	nop
 80102a8:	080105d1 	.word	0x080105d1
 80102ac:	080105f3 	.word	0x080105f3
 80102b0:	0801062b 	.word	0x0801062b
 80102b4:	0801064f 	.word	0x0801064f

080102b8 <_cleanup_r>:
 80102b8:	4901      	ldr	r1, [pc, #4]	; (80102c0 <_cleanup_r+0x8>)
 80102ba:	f000 b8af 	b.w	801041c <_fwalk_reent>
 80102be:	bf00      	nop
 80102c0:	080101f9 	.word	0x080101f9

080102c4 <__sfmoreglue>:
 80102c4:	2268      	movs	r2, #104	; 0x68
 80102c6:	b570      	push	{r4, r5, r6, lr}
 80102c8:	1e4d      	subs	r5, r1, #1
 80102ca:	4355      	muls	r5, r2
 80102cc:	460e      	mov	r6, r1
 80102ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80102d2:	f7ff fa31 	bl	800f738 <_malloc_r>
 80102d6:	4604      	mov	r4, r0
 80102d8:	b140      	cbz	r0, 80102ec <__sfmoreglue+0x28>
 80102da:	2100      	movs	r1, #0
 80102dc:	e9c0 1600 	strd	r1, r6, [r0]
 80102e0:	300c      	adds	r0, #12
 80102e2:	60a0      	str	r0, [r4, #8]
 80102e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80102e8:	f7fd fb8e 	bl	800da08 <memset>
 80102ec:	4620      	mov	r0, r4
 80102ee:	bd70      	pop	{r4, r5, r6, pc}

080102f0 <__sfp_lock_acquire>:
 80102f0:	4801      	ldr	r0, [pc, #4]	; (80102f8 <__sfp_lock_acquire+0x8>)
 80102f2:	f000 b8b3 	b.w	801045c <__retarget_lock_acquire_recursive>
 80102f6:	bf00      	nop
 80102f8:	20000a8d 	.word	0x20000a8d

080102fc <__sfp_lock_release>:
 80102fc:	4801      	ldr	r0, [pc, #4]	; (8010304 <__sfp_lock_release+0x8>)
 80102fe:	f000 b8ae 	b.w	801045e <__retarget_lock_release_recursive>
 8010302:	bf00      	nop
 8010304:	20000a8d 	.word	0x20000a8d

08010308 <__sinit_lock_acquire>:
 8010308:	4801      	ldr	r0, [pc, #4]	; (8010310 <__sinit_lock_acquire+0x8>)
 801030a:	f000 b8a7 	b.w	801045c <__retarget_lock_acquire_recursive>
 801030e:	bf00      	nop
 8010310:	20000a8e 	.word	0x20000a8e

08010314 <__sinit_lock_release>:
 8010314:	4801      	ldr	r0, [pc, #4]	; (801031c <__sinit_lock_release+0x8>)
 8010316:	f000 b8a2 	b.w	801045e <__retarget_lock_release_recursive>
 801031a:	bf00      	nop
 801031c:	20000a8e 	.word	0x20000a8e

08010320 <__sinit>:
 8010320:	b510      	push	{r4, lr}
 8010322:	4604      	mov	r4, r0
 8010324:	f7ff fff0 	bl	8010308 <__sinit_lock_acquire>
 8010328:	69a3      	ldr	r3, [r4, #24]
 801032a:	b11b      	cbz	r3, 8010334 <__sinit+0x14>
 801032c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010330:	f7ff bff0 	b.w	8010314 <__sinit_lock_release>
 8010334:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010338:	6523      	str	r3, [r4, #80]	; 0x50
 801033a:	4b13      	ldr	r3, [pc, #76]	; (8010388 <__sinit+0x68>)
 801033c:	4a13      	ldr	r2, [pc, #76]	; (801038c <__sinit+0x6c>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	62a2      	str	r2, [r4, #40]	; 0x28
 8010342:	42a3      	cmp	r3, r4
 8010344:	bf08      	it	eq
 8010346:	2301      	moveq	r3, #1
 8010348:	4620      	mov	r0, r4
 801034a:	bf08      	it	eq
 801034c:	61a3      	streq	r3, [r4, #24]
 801034e:	f000 f81f 	bl	8010390 <__sfp>
 8010352:	6060      	str	r0, [r4, #4]
 8010354:	4620      	mov	r0, r4
 8010356:	f000 f81b 	bl	8010390 <__sfp>
 801035a:	60a0      	str	r0, [r4, #8]
 801035c:	4620      	mov	r0, r4
 801035e:	f000 f817 	bl	8010390 <__sfp>
 8010362:	2200      	movs	r2, #0
 8010364:	2104      	movs	r1, #4
 8010366:	60e0      	str	r0, [r4, #12]
 8010368:	6860      	ldr	r0, [r4, #4]
 801036a:	f7ff ff81 	bl	8010270 <std>
 801036e:	2201      	movs	r2, #1
 8010370:	2109      	movs	r1, #9
 8010372:	68a0      	ldr	r0, [r4, #8]
 8010374:	f7ff ff7c 	bl	8010270 <std>
 8010378:	2202      	movs	r2, #2
 801037a:	2112      	movs	r1, #18
 801037c:	68e0      	ldr	r0, [r4, #12]
 801037e:	f7ff ff77 	bl	8010270 <std>
 8010382:	2301      	movs	r3, #1
 8010384:	61a3      	str	r3, [r4, #24]
 8010386:	e7d1      	b.n	801032c <__sinit+0xc>
 8010388:	080128e4 	.word	0x080128e4
 801038c:	080102b9 	.word	0x080102b9

08010390 <__sfp>:
 8010390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010392:	4607      	mov	r7, r0
 8010394:	f7ff ffac 	bl	80102f0 <__sfp_lock_acquire>
 8010398:	4b1e      	ldr	r3, [pc, #120]	; (8010414 <__sfp+0x84>)
 801039a:	681e      	ldr	r6, [r3, #0]
 801039c:	69b3      	ldr	r3, [r6, #24]
 801039e:	b913      	cbnz	r3, 80103a6 <__sfp+0x16>
 80103a0:	4630      	mov	r0, r6
 80103a2:	f7ff ffbd 	bl	8010320 <__sinit>
 80103a6:	3648      	adds	r6, #72	; 0x48
 80103a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80103ac:	3b01      	subs	r3, #1
 80103ae:	d503      	bpl.n	80103b8 <__sfp+0x28>
 80103b0:	6833      	ldr	r3, [r6, #0]
 80103b2:	b30b      	cbz	r3, 80103f8 <__sfp+0x68>
 80103b4:	6836      	ldr	r6, [r6, #0]
 80103b6:	e7f7      	b.n	80103a8 <__sfp+0x18>
 80103b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80103bc:	b9d5      	cbnz	r5, 80103f4 <__sfp+0x64>
 80103be:	4b16      	ldr	r3, [pc, #88]	; (8010418 <__sfp+0x88>)
 80103c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80103c4:	60e3      	str	r3, [r4, #12]
 80103c6:	6665      	str	r5, [r4, #100]	; 0x64
 80103c8:	f000 f847 	bl	801045a <__retarget_lock_init_recursive>
 80103cc:	f7ff ff96 	bl	80102fc <__sfp_lock_release>
 80103d0:	2208      	movs	r2, #8
 80103d2:	4629      	mov	r1, r5
 80103d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80103d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80103dc:	6025      	str	r5, [r4, #0]
 80103de:	61a5      	str	r5, [r4, #24]
 80103e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80103e4:	f7fd fb10 	bl	800da08 <memset>
 80103e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80103ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80103f0:	4620      	mov	r0, r4
 80103f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103f4:	3468      	adds	r4, #104	; 0x68
 80103f6:	e7d9      	b.n	80103ac <__sfp+0x1c>
 80103f8:	2104      	movs	r1, #4
 80103fa:	4638      	mov	r0, r7
 80103fc:	f7ff ff62 	bl	80102c4 <__sfmoreglue>
 8010400:	4604      	mov	r4, r0
 8010402:	6030      	str	r0, [r6, #0]
 8010404:	2800      	cmp	r0, #0
 8010406:	d1d5      	bne.n	80103b4 <__sfp+0x24>
 8010408:	f7ff ff78 	bl	80102fc <__sfp_lock_release>
 801040c:	230c      	movs	r3, #12
 801040e:	603b      	str	r3, [r7, #0]
 8010410:	e7ee      	b.n	80103f0 <__sfp+0x60>
 8010412:	bf00      	nop
 8010414:	080128e4 	.word	0x080128e4
 8010418:	ffff0001 	.word	0xffff0001

0801041c <_fwalk_reent>:
 801041c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010420:	4606      	mov	r6, r0
 8010422:	4688      	mov	r8, r1
 8010424:	2700      	movs	r7, #0
 8010426:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801042a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801042e:	f1b9 0901 	subs.w	r9, r9, #1
 8010432:	d505      	bpl.n	8010440 <_fwalk_reent+0x24>
 8010434:	6824      	ldr	r4, [r4, #0]
 8010436:	2c00      	cmp	r4, #0
 8010438:	d1f7      	bne.n	801042a <_fwalk_reent+0xe>
 801043a:	4638      	mov	r0, r7
 801043c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010440:	89ab      	ldrh	r3, [r5, #12]
 8010442:	2b01      	cmp	r3, #1
 8010444:	d907      	bls.n	8010456 <_fwalk_reent+0x3a>
 8010446:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801044a:	3301      	adds	r3, #1
 801044c:	d003      	beq.n	8010456 <_fwalk_reent+0x3a>
 801044e:	4629      	mov	r1, r5
 8010450:	4630      	mov	r0, r6
 8010452:	47c0      	blx	r8
 8010454:	4307      	orrs	r7, r0
 8010456:	3568      	adds	r5, #104	; 0x68
 8010458:	e7e9      	b.n	801042e <_fwalk_reent+0x12>

0801045a <__retarget_lock_init_recursive>:
 801045a:	4770      	bx	lr

0801045c <__retarget_lock_acquire_recursive>:
 801045c:	4770      	bx	lr

0801045e <__retarget_lock_release_recursive>:
 801045e:	4770      	bx	lr

08010460 <__swhatbuf_r>:
 8010460:	b570      	push	{r4, r5, r6, lr}
 8010462:	460e      	mov	r6, r1
 8010464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010468:	4614      	mov	r4, r2
 801046a:	2900      	cmp	r1, #0
 801046c:	461d      	mov	r5, r3
 801046e:	b096      	sub	sp, #88	; 0x58
 8010470:	da08      	bge.n	8010484 <__swhatbuf_r+0x24>
 8010472:	2200      	movs	r2, #0
 8010474:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010478:	602a      	str	r2, [r5, #0]
 801047a:	061a      	lsls	r2, r3, #24
 801047c:	d410      	bmi.n	80104a0 <__swhatbuf_r+0x40>
 801047e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010482:	e00e      	b.n	80104a2 <__swhatbuf_r+0x42>
 8010484:	466a      	mov	r2, sp
 8010486:	f000 f909 	bl	801069c <_fstat_r>
 801048a:	2800      	cmp	r0, #0
 801048c:	dbf1      	blt.n	8010472 <__swhatbuf_r+0x12>
 801048e:	9a01      	ldr	r2, [sp, #4]
 8010490:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010494:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010498:	425a      	negs	r2, r3
 801049a:	415a      	adcs	r2, r3
 801049c:	602a      	str	r2, [r5, #0]
 801049e:	e7ee      	b.n	801047e <__swhatbuf_r+0x1e>
 80104a0:	2340      	movs	r3, #64	; 0x40
 80104a2:	2000      	movs	r0, #0
 80104a4:	6023      	str	r3, [r4, #0]
 80104a6:	b016      	add	sp, #88	; 0x58
 80104a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080104ac <__smakebuf_r>:
 80104ac:	898b      	ldrh	r3, [r1, #12]
 80104ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80104b0:	079d      	lsls	r5, r3, #30
 80104b2:	4606      	mov	r6, r0
 80104b4:	460c      	mov	r4, r1
 80104b6:	d507      	bpl.n	80104c8 <__smakebuf_r+0x1c>
 80104b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80104bc:	6023      	str	r3, [r4, #0]
 80104be:	6123      	str	r3, [r4, #16]
 80104c0:	2301      	movs	r3, #1
 80104c2:	6163      	str	r3, [r4, #20]
 80104c4:	b002      	add	sp, #8
 80104c6:	bd70      	pop	{r4, r5, r6, pc}
 80104c8:	466a      	mov	r2, sp
 80104ca:	ab01      	add	r3, sp, #4
 80104cc:	f7ff ffc8 	bl	8010460 <__swhatbuf_r>
 80104d0:	9900      	ldr	r1, [sp, #0]
 80104d2:	4605      	mov	r5, r0
 80104d4:	4630      	mov	r0, r6
 80104d6:	f7ff f92f 	bl	800f738 <_malloc_r>
 80104da:	b948      	cbnz	r0, 80104f0 <__smakebuf_r+0x44>
 80104dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104e0:	059a      	lsls	r2, r3, #22
 80104e2:	d4ef      	bmi.n	80104c4 <__smakebuf_r+0x18>
 80104e4:	f023 0303 	bic.w	r3, r3, #3
 80104e8:	f043 0302 	orr.w	r3, r3, #2
 80104ec:	81a3      	strh	r3, [r4, #12]
 80104ee:	e7e3      	b.n	80104b8 <__smakebuf_r+0xc>
 80104f0:	4b0d      	ldr	r3, [pc, #52]	; (8010528 <__smakebuf_r+0x7c>)
 80104f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80104f4:	89a3      	ldrh	r3, [r4, #12]
 80104f6:	6020      	str	r0, [r4, #0]
 80104f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104fc:	81a3      	strh	r3, [r4, #12]
 80104fe:	9b00      	ldr	r3, [sp, #0]
 8010500:	6120      	str	r0, [r4, #16]
 8010502:	6163      	str	r3, [r4, #20]
 8010504:	9b01      	ldr	r3, [sp, #4]
 8010506:	b15b      	cbz	r3, 8010520 <__smakebuf_r+0x74>
 8010508:	4630      	mov	r0, r6
 801050a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801050e:	f000 f8d7 	bl	80106c0 <_isatty_r>
 8010512:	b128      	cbz	r0, 8010520 <__smakebuf_r+0x74>
 8010514:	89a3      	ldrh	r3, [r4, #12]
 8010516:	f023 0303 	bic.w	r3, r3, #3
 801051a:	f043 0301 	orr.w	r3, r3, #1
 801051e:	81a3      	strh	r3, [r4, #12]
 8010520:	89a0      	ldrh	r0, [r4, #12]
 8010522:	4305      	orrs	r5, r0
 8010524:	81a5      	strh	r5, [r4, #12]
 8010526:	e7cd      	b.n	80104c4 <__smakebuf_r+0x18>
 8010528:	080102b9 	.word	0x080102b9

0801052c <memchr>:
 801052c:	4603      	mov	r3, r0
 801052e:	b510      	push	{r4, lr}
 8010530:	b2c9      	uxtb	r1, r1
 8010532:	4402      	add	r2, r0
 8010534:	4293      	cmp	r3, r2
 8010536:	4618      	mov	r0, r3
 8010538:	d101      	bne.n	801053e <memchr+0x12>
 801053a:	2000      	movs	r0, #0
 801053c:	e003      	b.n	8010546 <memchr+0x1a>
 801053e:	7804      	ldrb	r4, [r0, #0]
 8010540:	3301      	adds	r3, #1
 8010542:	428c      	cmp	r4, r1
 8010544:	d1f6      	bne.n	8010534 <memchr+0x8>
 8010546:	bd10      	pop	{r4, pc}

08010548 <_raise_r>:
 8010548:	291f      	cmp	r1, #31
 801054a:	b538      	push	{r3, r4, r5, lr}
 801054c:	4604      	mov	r4, r0
 801054e:	460d      	mov	r5, r1
 8010550:	d904      	bls.n	801055c <_raise_r+0x14>
 8010552:	2316      	movs	r3, #22
 8010554:	6003      	str	r3, [r0, #0]
 8010556:	f04f 30ff 	mov.w	r0, #4294967295
 801055a:	bd38      	pop	{r3, r4, r5, pc}
 801055c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801055e:	b112      	cbz	r2, 8010566 <_raise_r+0x1e>
 8010560:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010564:	b94b      	cbnz	r3, 801057a <_raise_r+0x32>
 8010566:	4620      	mov	r0, r4
 8010568:	f000 f830 	bl	80105cc <_getpid_r>
 801056c:	462a      	mov	r2, r5
 801056e:	4601      	mov	r1, r0
 8010570:	4620      	mov	r0, r4
 8010572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010576:	f000 b817 	b.w	80105a8 <_kill_r>
 801057a:	2b01      	cmp	r3, #1
 801057c:	d00a      	beq.n	8010594 <_raise_r+0x4c>
 801057e:	1c59      	adds	r1, r3, #1
 8010580:	d103      	bne.n	801058a <_raise_r+0x42>
 8010582:	2316      	movs	r3, #22
 8010584:	6003      	str	r3, [r0, #0]
 8010586:	2001      	movs	r0, #1
 8010588:	e7e7      	b.n	801055a <_raise_r+0x12>
 801058a:	2400      	movs	r4, #0
 801058c:	4628      	mov	r0, r5
 801058e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010592:	4798      	blx	r3
 8010594:	2000      	movs	r0, #0
 8010596:	e7e0      	b.n	801055a <_raise_r+0x12>

08010598 <raise>:
 8010598:	4b02      	ldr	r3, [pc, #8]	; (80105a4 <raise+0xc>)
 801059a:	4601      	mov	r1, r0
 801059c:	6818      	ldr	r0, [r3, #0]
 801059e:	f7ff bfd3 	b.w	8010548 <_raise_r>
 80105a2:	bf00      	nop
 80105a4:	2000011c 	.word	0x2000011c

080105a8 <_kill_r>:
 80105a8:	b538      	push	{r3, r4, r5, lr}
 80105aa:	2300      	movs	r3, #0
 80105ac:	4d06      	ldr	r5, [pc, #24]	; (80105c8 <_kill_r+0x20>)
 80105ae:	4604      	mov	r4, r0
 80105b0:	4608      	mov	r0, r1
 80105b2:	4611      	mov	r1, r2
 80105b4:	602b      	str	r3, [r5, #0]
 80105b6:	f7f9 fb36 	bl	8009c26 <_kill>
 80105ba:	1c43      	adds	r3, r0, #1
 80105bc:	d102      	bne.n	80105c4 <_kill_r+0x1c>
 80105be:	682b      	ldr	r3, [r5, #0]
 80105c0:	b103      	cbz	r3, 80105c4 <_kill_r+0x1c>
 80105c2:	6023      	str	r3, [r4, #0]
 80105c4:	bd38      	pop	{r3, r4, r5, pc}
 80105c6:	bf00      	nop
 80105c8:	20000a88 	.word	0x20000a88

080105cc <_getpid_r>:
 80105cc:	f7f9 bb24 	b.w	8009c18 <_getpid>

080105d0 <__sread>:
 80105d0:	b510      	push	{r4, lr}
 80105d2:	460c      	mov	r4, r1
 80105d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105d8:	f000 f894 	bl	8010704 <_read_r>
 80105dc:	2800      	cmp	r0, #0
 80105de:	bfab      	itete	ge
 80105e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80105e2:	89a3      	ldrhlt	r3, [r4, #12]
 80105e4:	181b      	addge	r3, r3, r0
 80105e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80105ea:	bfac      	ite	ge
 80105ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80105ee:	81a3      	strhlt	r3, [r4, #12]
 80105f0:	bd10      	pop	{r4, pc}

080105f2 <__swrite>:
 80105f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105f6:	461f      	mov	r7, r3
 80105f8:	898b      	ldrh	r3, [r1, #12]
 80105fa:	4605      	mov	r5, r0
 80105fc:	05db      	lsls	r3, r3, #23
 80105fe:	460c      	mov	r4, r1
 8010600:	4616      	mov	r6, r2
 8010602:	d505      	bpl.n	8010610 <__swrite+0x1e>
 8010604:	2302      	movs	r3, #2
 8010606:	2200      	movs	r2, #0
 8010608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801060c:	f000 f868 	bl	80106e0 <_lseek_r>
 8010610:	89a3      	ldrh	r3, [r4, #12]
 8010612:	4632      	mov	r2, r6
 8010614:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010618:	81a3      	strh	r3, [r4, #12]
 801061a:	4628      	mov	r0, r5
 801061c:	463b      	mov	r3, r7
 801061e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010626:	f000 b817 	b.w	8010658 <_write_r>

0801062a <__sseek>:
 801062a:	b510      	push	{r4, lr}
 801062c:	460c      	mov	r4, r1
 801062e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010632:	f000 f855 	bl	80106e0 <_lseek_r>
 8010636:	1c43      	adds	r3, r0, #1
 8010638:	89a3      	ldrh	r3, [r4, #12]
 801063a:	bf15      	itete	ne
 801063c:	6560      	strne	r0, [r4, #84]	; 0x54
 801063e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010642:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010646:	81a3      	strheq	r3, [r4, #12]
 8010648:	bf18      	it	ne
 801064a:	81a3      	strhne	r3, [r4, #12]
 801064c:	bd10      	pop	{r4, pc}

0801064e <__sclose>:
 801064e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010652:	f000 b813 	b.w	801067c <_close_r>
	...

08010658 <_write_r>:
 8010658:	b538      	push	{r3, r4, r5, lr}
 801065a:	4604      	mov	r4, r0
 801065c:	4608      	mov	r0, r1
 801065e:	4611      	mov	r1, r2
 8010660:	2200      	movs	r2, #0
 8010662:	4d05      	ldr	r5, [pc, #20]	; (8010678 <_write_r+0x20>)
 8010664:	602a      	str	r2, [r5, #0]
 8010666:	461a      	mov	r2, r3
 8010668:	f7f9 fb14 	bl	8009c94 <_write>
 801066c:	1c43      	adds	r3, r0, #1
 801066e:	d102      	bne.n	8010676 <_write_r+0x1e>
 8010670:	682b      	ldr	r3, [r5, #0]
 8010672:	b103      	cbz	r3, 8010676 <_write_r+0x1e>
 8010674:	6023      	str	r3, [r4, #0]
 8010676:	bd38      	pop	{r3, r4, r5, pc}
 8010678:	20000a88 	.word	0x20000a88

0801067c <_close_r>:
 801067c:	b538      	push	{r3, r4, r5, lr}
 801067e:	2300      	movs	r3, #0
 8010680:	4d05      	ldr	r5, [pc, #20]	; (8010698 <_close_r+0x1c>)
 8010682:	4604      	mov	r4, r0
 8010684:	4608      	mov	r0, r1
 8010686:	602b      	str	r3, [r5, #0]
 8010688:	f7f9 fb20 	bl	8009ccc <_close>
 801068c:	1c43      	adds	r3, r0, #1
 801068e:	d102      	bne.n	8010696 <_close_r+0x1a>
 8010690:	682b      	ldr	r3, [r5, #0]
 8010692:	b103      	cbz	r3, 8010696 <_close_r+0x1a>
 8010694:	6023      	str	r3, [r4, #0]
 8010696:	bd38      	pop	{r3, r4, r5, pc}
 8010698:	20000a88 	.word	0x20000a88

0801069c <_fstat_r>:
 801069c:	b538      	push	{r3, r4, r5, lr}
 801069e:	2300      	movs	r3, #0
 80106a0:	4d06      	ldr	r5, [pc, #24]	; (80106bc <_fstat_r+0x20>)
 80106a2:	4604      	mov	r4, r0
 80106a4:	4608      	mov	r0, r1
 80106a6:	4611      	mov	r1, r2
 80106a8:	602b      	str	r3, [r5, #0]
 80106aa:	f7f9 fb1a 	bl	8009ce2 <_fstat>
 80106ae:	1c43      	adds	r3, r0, #1
 80106b0:	d102      	bne.n	80106b8 <_fstat_r+0x1c>
 80106b2:	682b      	ldr	r3, [r5, #0]
 80106b4:	b103      	cbz	r3, 80106b8 <_fstat_r+0x1c>
 80106b6:	6023      	str	r3, [r4, #0]
 80106b8:	bd38      	pop	{r3, r4, r5, pc}
 80106ba:	bf00      	nop
 80106bc:	20000a88 	.word	0x20000a88

080106c0 <_isatty_r>:
 80106c0:	b538      	push	{r3, r4, r5, lr}
 80106c2:	2300      	movs	r3, #0
 80106c4:	4d05      	ldr	r5, [pc, #20]	; (80106dc <_isatty_r+0x1c>)
 80106c6:	4604      	mov	r4, r0
 80106c8:	4608      	mov	r0, r1
 80106ca:	602b      	str	r3, [r5, #0]
 80106cc:	f7f9 fb18 	bl	8009d00 <_isatty>
 80106d0:	1c43      	adds	r3, r0, #1
 80106d2:	d102      	bne.n	80106da <_isatty_r+0x1a>
 80106d4:	682b      	ldr	r3, [r5, #0]
 80106d6:	b103      	cbz	r3, 80106da <_isatty_r+0x1a>
 80106d8:	6023      	str	r3, [r4, #0]
 80106da:	bd38      	pop	{r3, r4, r5, pc}
 80106dc:	20000a88 	.word	0x20000a88

080106e0 <_lseek_r>:
 80106e0:	b538      	push	{r3, r4, r5, lr}
 80106e2:	4604      	mov	r4, r0
 80106e4:	4608      	mov	r0, r1
 80106e6:	4611      	mov	r1, r2
 80106e8:	2200      	movs	r2, #0
 80106ea:	4d05      	ldr	r5, [pc, #20]	; (8010700 <_lseek_r+0x20>)
 80106ec:	602a      	str	r2, [r5, #0]
 80106ee:	461a      	mov	r2, r3
 80106f0:	f7f9 fb10 	bl	8009d14 <_lseek>
 80106f4:	1c43      	adds	r3, r0, #1
 80106f6:	d102      	bne.n	80106fe <_lseek_r+0x1e>
 80106f8:	682b      	ldr	r3, [r5, #0]
 80106fa:	b103      	cbz	r3, 80106fe <_lseek_r+0x1e>
 80106fc:	6023      	str	r3, [r4, #0]
 80106fe:	bd38      	pop	{r3, r4, r5, pc}
 8010700:	20000a88 	.word	0x20000a88

08010704 <_read_r>:
 8010704:	b538      	push	{r3, r4, r5, lr}
 8010706:	4604      	mov	r4, r0
 8010708:	4608      	mov	r0, r1
 801070a:	4611      	mov	r1, r2
 801070c:	2200      	movs	r2, #0
 801070e:	4d05      	ldr	r5, [pc, #20]	; (8010724 <_read_r+0x20>)
 8010710:	602a      	str	r2, [r5, #0]
 8010712:	461a      	mov	r2, r3
 8010714:	f7f9 faa1 	bl	8009c5a <_read>
 8010718:	1c43      	adds	r3, r0, #1
 801071a:	d102      	bne.n	8010722 <_read_r+0x1e>
 801071c:	682b      	ldr	r3, [r5, #0]
 801071e:	b103      	cbz	r3, 8010722 <_read_r+0x1e>
 8010720:	6023      	str	r3, [r4, #0]
 8010722:	bd38      	pop	{r3, r4, r5, pc}
 8010724:	20000a88 	.word	0x20000a88

08010728 <cosf>:
 8010728:	b507      	push	{r0, r1, r2, lr}
 801072a:	4a1a      	ldr	r2, [pc, #104]	; (8010794 <cosf+0x6c>)
 801072c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8010730:	4293      	cmp	r3, r2
 8010732:	4601      	mov	r1, r0
 8010734:	dc05      	bgt.n	8010742 <cosf+0x1a>
 8010736:	2100      	movs	r1, #0
 8010738:	b003      	add	sp, #12
 801073a:	f85d eb04 	ldr.w	lr, [sp], #4
 801073e:	f001 ba4b 	b.w	8011bd8 <__kernel_cosf>
 8010742:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010746:	db04      	blt.n	8010752 <cosf+0x2a>
 8010748:	f7f0 fa12 	bl	8000b70 <__aeabi_fsub>
 801074c:	b003      	add	sp, #12
 801074e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010752:	4669      	mov	r1, sp
 8010754:	f001 f890 	bl	8011878 <__ieee754_rem_pio2f>
 8010758:	f000 0203 	and.w	r2, r0, #3
 801075c:	2a01      	cmp	r2, #1
 801075e:	d007      	beq.n	8010770 <cosf+0x48>
 8010760:	2a02      	cmp	r2, #2
 8010762:	d00c      	beq.n	801077e <cosf+0x56>
 8010764:	b982      	cbnz	r2, 8010788 <cosf+0x60>
 8010766:	9901      	ldr	r1, [sp, #4]
 8010768:	9800      	ldr	r0, [sp, #0]
 801076a:	f001 fa35 	bl	8011bd8 <__kernel_cosf>
 801076e:	e7ed      	b.n	801074c <cosf+0x24>
 8010770:	9901      	ldr	r1, [sp, #4]
 8010772:	9800      	ldr	r0, [sp, #0]
 8010774:	f001 fd62 	bl	801223c <__kernel_sinf>
 8010778:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801077c:	e7e6      	b.n	801074c <cosf+0x24>
 801077e:	9901      	ldr	r1, [sp, #4]
 8010780:	9800      	ldr	r0, [sp, #0]
 8010782:	f001 fa29 	bl	8011bd8 <__kernel_cosf>
 8010786:	e7f7      	b.n	8010778 <cosf+0x50>
 8010788:	2201      	movs	r2, #1
 801078a:	9901      	ldr	r1, [sp, #4]
 801078c:	9800      	ldr	r0, [sp, #0]
 801078e:	f001 fd55 	bl	801223c <__kernel_sinf>
 8010792:	e7db      	b.n	801074c <cosf+0x24>
 8010794:	3f490fd8 	.word	0x3f490fd8

08010798 <sinf>:
 8010798:	b507      	push	{r0, r1, r2, lr}
 801079a:	4a1b      	ldr	r2, [pc, #108]	; (8010808 <sinf+0x70>)
 801079c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80107a0:	4293      	cmp	r3, r2
 80107a2:	4601      	mov	r1, r0
 80107a4:	dc06      	bgt.n	80107b4 <sinf+0x1c>
 80107a6:	2200      	movs	r2, #0
 80107a8:	2100      	movs	r1, #0
 80107aa:	b003      	add	sp, #12
 80107ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80107b0:	f001 bd44 	b.w	801223c <__kernel_sinf>
 80107b4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80107b8:	db04      	blt.n	80107c4 <sinf+0x2c>
 80107ba:	f7f0 f9d9 	bl	8000b70 <__aeabi_fsub>
 80107be:	b003      	add	sp, #12
 80107c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80107c4:	4669      	mov	r1, sp
 80107c6:	f001 f857 	bl	8011878 <__ieee754_rem_pio2f>
 80107ca:	f000 0003 	and.w	r0, r0, #3
 80107ce:	2801      	cmp	r0, #1
 80107d0:	d008      	beq.n	80107e4 <sinf+0x4c>
 80107d2:	2802      	cmp	r0, #2
 80107d4:	d00b      	beq.n	80107ee <sinf+0x56>
 80107d6:	b990      	cbnz	r0, 80107fe <sinf+0x66>
 80107d8:	2201      	movs	r2, #1
 80107da:	9901      	ldr	r1, [sp, #4]
 80107dc:	9800      	ldr	r0, [sp, #0]
 80107de:	f001 fd2d 	bl	801223c <__kernel_sinf>
 80107e2:	e7ec      	b.n	80107be <sinf+0x26>
 80107e4:	9901      	ldr	r1, [sp, #4]
 80107e6:	9800      	ldr	r0, [sp, #0]
 80107e8:	f001 f9f6 	bl	8011bd8 <__kernel_cosf>
 80107ec:	e7e7      	b.n	80107be <sinf+0x26>
 80107ee:	2201      	movs	r2, #1
 80107f0:	9901      	ldr	r1, [sp, #4]
 80107f2:	9800      	ldr	r0, [sp, #0]
 80107f4:	f001 fd22 	bl	801223c <__kernel_sinf>
 80107f8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80107fc:	e7df      	b.n	80107be <sinf+0x26>
 80107fe:	9901      	ldr	r1, [sp, #4]
 8010800:	9800      	ldr	r0, [sp, #0]
 8010802:	f001 f9e9 	bl	8011bd8 <__kernel_cosf>
 8010806:	e7f7      	b.n	80107f8 <sinf+0x60>
 8010808:	3f490fd8 	.word	0x3f490fd8

0801080c <pow>:
 801080c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010810:	4614      	mov	r4, r2
 8010812:	461d      	mov	r5, r3
 8010814:	4680      	mov	r8, r0
 8010816:	4689      	mov	r9, r1
 8010818:	f000 f89e 	bl	8010958 <__ieee754_pow>
 801081c:	4622      	mov	r2, r4
 801081e:	4606      	mov	r6, r0
 8010820:	460f      	mov	r7, r1
 8010822:	462b      	mov	r3, r5
 8010824:	4620      	mov	r0, r4
 8010826:	4629      	mov	r1, r5
 8010828:	f7f0 f8f0 	bl	8000a0c <__aeabi_dcmpun>
 801082c:	bbc8      	cbnz	r0, 80108a2 <pow+0x96>
 801082e:	2200      	movs	r2, #0
 8010830:	2300      	movs	r3, #0
 8010832:	4640      	mov	r0, r8
 8010834:	4649      	mov	r1, r9
 8010836:	f7f0 f8b7 	bl	80009a8 <__aeabi_dcmpeq>
 801083a:	b1b8      	cbz	r0, 801086c <pow+0x60>
 801083c:	2200      	movs	r2, #0
 801083e:	2300      	movs	r3, #0
 8010840:	4620      	mov	r0, r4
 8010842:	4629      	mov	r1, r5
 8010844:	f7f0 f8b0 	bl	80009a8 <__aeabi_dcmpeq>
 8010848:	2800      	cmp	r0, #0
 801084a:	d141      	bne.n	80108d0 <pow+0xc4>
 801084c:	4620      	mov	r0, r4
 801084e:	4629      	mov	r1, r5
 8010850:	f001 fd99 	bl	8012386 <finite>
 8010854:	b328      	cbz	r0, 80108a2 <pow+0x96>
 8010856:	2200      	movs	r2, #0
 8010858:	2300      	movs	r3, #0
 801085a:	4620      	mov	r0, r4
 801085c:	4629      	mov	r1, r5
 801085e:	f7f0 f8ad 	bl	80009bc <__aeabi_dcmplt>
 8010862:	b1f0      	cbz	r0, 80108a2 <pow+0x96>
 8010864:	f7fd f898 	bl	800d998 <__errno>
 8010868:	2322      	movs	r3, #34	; 0x22
 801086a:	e019      	b.n	80108a0 <pow+0x94>
 801086c:	4630      	mov	r0, r6
 801086e:	4639      	mov	r1, r7
 8010870:	f001 fd89 	bl	8012386 <finite>
 8010874:	b9c8      	cbnz	r0, 80108aa <pow+0x9e>
 8010876:	4640      	mov	r0, r8
 8010878:	4649      	mov	r1, r9
 801087a:	f001 fd84 	bl	8012386 <finite>
 801087e:	b1a0      	cbz	r0, 80108aa <pow+0x9e>
 8010880:	4620      	mov	r0, r4
 8010882:	4629      	mov	r1, r5
 8010884:	f001 fd7f 	bl	8012386 <finite>
 8010888:	b178      	cbz	r0, 80108aa <pow+0x9e>
 801088a:	4632      	mov	r2, r6
 801088c:	463b      	mov	r3, r7
 801088e:	4630      	mov	r0, r6
 8010890:	4639      	mov	r1, r7
 8010892:	f7f0 f8bb 	bl	8000a0c <__aeabi_dcmpun>
 8010896:	2800      	cmp	r0, #0
 8010898:	d0e4      	beq.n	8010864 <pow+0x58>
 801089a:	f7fd f87d 	bl	800d998 <__errno>
 801089e:	2321      	movs	r3, #33	; 0x21
 80108a0:	6003      	str	r3, [r0, #0]
 80108a2:	4630      	mov	r0, r6
 80108a4:	4639      	mov	r1, r7
 80108a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108aa:	2200      	movs	r2, #0
 80108ac:	2300      	movs	r3, #0
 80108ae:	4630      	mov	r0, r6
 80108b0:	4639      	mov	r1, r7
 80108b2:	f7f0 f879 	bl	80009a8 <__aeabi_dcmpeq>
 80108b6:	2800      	cmp	r0, #0
 80108b8:	d0f3      	beq.n	80108a2 <pow+0x96>
 80108ba:	4640      	mov	r0, r8
 80108bc:	4649      	mov	r1, r9
 80108be:	f001 fd62 	bl	8012386 <finite>
 80108c2:	2800      	cmp	r0, #0
 80108c4:	d0ed      	beq.n	80108a2 <pow+0x96>
 80108c6:	4620      	mov	r0, r4
 80108c8:	4629      	mov	r1, r5
 80108ca:	f001 fd5c 	bl	8012386 <finite>
 80108ce:	e7c8      	b.n	8010862 <pow+0x56>
 80108d0:	2600      	movs	r6, #0
 80108d2:	4f01      	ldr	r7, [pc, #4]	; (80108d8 <pow+0xcc>)
 80108d4:	e7e5      	b.n	80108a2 <pow+0x96>
 80108d6:	bf00      	nop
 80108d8:	3ff00000 	.word	0x3ff00000

080108dc <asinf>:
 80108dc:	b538      	push	{r3, r4, r5, lr}
 80108de:	4604      	mov	r4, r0
 80108e0:	f000 fe00 	bl	80114e4 <__ieee754_asinf>
 80108e4:	4621      	mov	r1, r4
 80108e6:	4605      	mov	r5, r0
 80108e8:	4620      	mov	r0, r4
 80108ea:	f7f0 fc11 	bl	8001110 <__aeabi_fcmpun>
 80108ee:	b980      	cbnz	r0, 8010912 <asinf+0x36>
 80108f0:	4620      	mov	r0, r4
 80108f2:	f001 fedb 	bl	80126ac <fabsf>
 80108f6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80108fa:	f7f0 fbff 	bl	80010fc <__aeabi_fcmpgt>
 80108fe:	b140      	cbz	r0, 8010912 <asinf+0x36>
 8010900:	f7fd f84a 	bl	800d998 <__errno>
 8010904:	2321      	movs	r3, #33	; 0x21
 8010906:	6003      	str	r3, [r0, #0]
 8010908:	4803      	ldr	r0, [pc, #12]	; (8010918 <asinf+0x3c>)
 801090a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801090e:	f7fe bf9d 	b.w	800f84c <nanf>
 8010912:	4628      	mov	r0, r5
 8010914:	bd38      	pop	{r3, r4, r5, pc}
 8010916:	bf00      	nop
 8010918:	08012b7f 	.word	0x08012b7f

0801091c <atan2f>:
 801091c:	f000 bf26 	b.w	801176c <__ieee754_atan2f>

08010920 <sqrtf>:
 8010920:	b538      	push	{r3, r4, r5, lr}
 8010922:	4605      	mov	r5, r0
 8010924:	f001 f906 	bl	8011b34 <__ieee754_sqrtf>
 8010928:	4629      	mov	r1, r5
 801092a:	4604      	mov	r4, r0
 801092c:	4628      	mov	r0, r5
 801092e:	f7f0 fbef 	bl	8001110 <__aeabi_fcmpun>
 8010932:	b968      	cbnz	r0, 8010950 <sqrtf+0x30>
 8010934:	2100      	movs	r1, #0
 8010936:	4628      	mov	r0, r5
 8010938:	f7f0 fbc2 	bl	80010c0 <__aeabi_fcmplt>
 801093c:	b140      	cbz	r0, 8010950 <sqrtf+0x30>
 801093e:	f7fd f82b 	bl	800d998 <__errno>
 8010942:	2321      	movs	r3, #33	; 0x21
 8010944:	2100      	movs	r1, #0
 8010946:	6003      	str	r3, [r0, #0]
 8010948:	4608      	mov	r0, r1
 801094a:	f7f0 facf 	bl	8000eec <__aeabi_fdiv>
 801094e:	4604      	mov	r4, r0
 8010950:	4620      	mov	r0, r4
 8010952:	bd38      	pop	{r3, r4, r5, pc}
 8010954:	0000      	movs	r0, r0
	...

08010958 <__ieee754_pow>:
 8010958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801095c:	b093      	sub	sp, #76	; 0x4c
 801095e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010962:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8010966:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801096a:	4689      	mov	r9, r1
 801096c:	ea56 0102 	orrs.w	r1, r6, r2
 8010970:	4680      	mov	r8, r0
 8010972:	d111      	bne.n	8010998 <__ieee754_pow+0x40>
 8010974:	1803      	adds	r3, r0, r0
 8010976:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 801097a:	4152      	adcs	r2, r2
 801097c:	4299      	cmp	r1, r3
 801097e:	4b82      	ldr	r3, [pc, #520]	; (8010b88 <__ieee754_pow+0x230>)
 8010980:	4193      	sbcs	r3, r2
 8010982:	f080 84b9 	bcs.w	80112f8 <__ieee754_pow+0x9a0>
 8010986:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801098a:	4640      	mov	r0, r8
 801098c:	4649      	mov	r1, r9
 801098e:	f7ef fbed 	bl	800016c <__adddf3>
 8010992:	4683      	mov	fp, r0
 8010994:	468c      	mov	ip, r1
 8010996:	e06f      	b.n	8010a78 <__ieee754_pow+0x120>
 8010998:	4b7c      	ldr	r3, [pc, #496]	; (8010b8c <__ieee754_pow+0x234>)
 801099a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 801099e:	429c      	cmp	r4, r3
 80109a0:	464d      	mov	r5, r9
 80109a2:	4682      	mov	sl, r0
 80109a4:	dc06      	bgt.n	80109b4 <__ieee754_pow+0x5c>
 80109a6:	d101      	bne.n	80109ac <__ieee754_pow+0x54>
 80109a8:	2800      	cmp	r0, #0
 80109aa:	d1ec      	bne.n	8010986 <__ieee754_pow+0x2e>
 80109ac:	429e      	cmp	r6, r3
 80109ae:	dc01      	bgt.n	80109b4 <__ieee754_pow+0x5c>
 80109b0:	d10f      	bne.n	80109d2 <__ieee754_pow+0x7a>
 80109b2:	b172      	cbz	r2, 80109d2 <__ieee754_pow+0x7a>
 80109b4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80109b8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80109bc:	ea55 050a 	orrs.w	r5, r5, sl
 80109c0:	d1e1      	bne.n	8010986 <__ieee754_pow+0x2e>
 80109c2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80109c6:	18db      	adds	r3, r3, r3
 80109c8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80109cc:	4152      	adcs	r2, r2
 80109ce:	429d      	cmp	r5, r3
 80109d0:	e7d5      	b.n	801097e <__ieee754_pow+0x26>
 80109d2:	2d00      	cmp	r5, #0
 80109d4:	da39      	bge.n	8010a4a <__ieee754_pow+0xf2>
 80109d6:	4b6e      	ldr	r3, [pc, #440]	; (8010b90 <__ieee754_pow+0x238>)
 80109d8:	429e      	cmp	r6, r3
 80109da:	dc52      	bgt.n	8010a82 <__ieee754_pow+0x12a>
 80109dc:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80109e0:	429e      	cmp	r6, r3
 80109e2:	f340 849c 	ble.w	801131e <__ieee754_pow+0x9c6>
 80109e6:	1533      	asrs	r3, r6, #20
 80109e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80109ec:	2b14      	cmp	r3, #20
 80109ee:	dd0f      	ble.n	8010a10 <__ieee754_pow+0xb8>
 80109f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80109f4:	fa22 f103 	lsr.w	r1, r2, r3
 80109f8:	fa01 f303 	lsl.w	r3, r1, r3
 80109fc:	4293      	cmp	r3, r2
 80109fe:	f040 848e 	bne.w	801131e <__ieee754_pow+0x9c6>
 8010a02:	f001 0101 	and.w	r1, r1, #1
 8010a06:	f1c1 0302 	rsb	r3, r1, #2
 8010a0a:	9300      	str	r3, [sp, #0]
 8010a0c:	b182      	cbz	r2, 8010a30 <__ieee754_pow+0xd8>
 8010a0e:	e05d      	b.n	8010acc <__ieee754_pow+0x174>
 8010a10:	2a00      	cmp	r2, #0
 8010a12:	d159      	bne.n	8010ac8 <__ieee754_pow+0x170>
 8010a14:	f1c3 0314 	rsb	r3, r3, #20
 8010a18:	fa46 f103 	asr.w	r1, r6, r3
 8010a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8010a20:	42b3      	cmp	r3, r6
 8010a22:	f040 8479 	bne.w	8011318 <__ieee754_pow+0x9c0>
 8010a26:	f001 0101 	and.w	r1, r1, #1
 8010a2a:	f1c1 0302 	rsb	r3, r1, #2
 8010a2e:	9300      	str	r3, [sp, #0]
 8010a30:	4b58      	ldr	r3, [pc, #352]	; (8010b94 <__ieee754_pow+0x23c>)
 8010a32:	429e      	cmp	r6, r3
 8010a34:	d132      	bne.n	8010a9c <__ieee754_pow+0x144>
 8010a36:	2f00      	cmp	r7, #0
 8010a38:	f280 846a 	bge.w	8011310 <__ieee754_pow+0x9b8>
 8010a3c:	4642      	mov	r2, r8
 8010a3e:	464b      	mov	r3, r9
 8010a40:	2000      	movs	r0, #0
 8010a42:	4954      	ldr	r1, [pc, #336]	; (8010b94 <__ieee754_pow+0x23c>)
 8010a44:	f7ef fe72 	bl	800072c <__aeabi_ddiv>
 8010a48:	e7a3      	b.n	8010992 <__ieee754_pow+0x3a>
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	9300      	str	r3, [sp, #0]
 8010a4e:	2a00      	cmp	r2, #0
 8010a50:	d13c      	bne.n	8010acc <__ieee754_pow+0x174>
 8010a52:	4b4e      	ldr	r3, [pc, #312]	; (8010b8c <__ieee754_pow+0x234>)
 8010a54:	429e      	cmp	r6, r3
 8010a56:	d1eb      	bne.n	8010a30 <__ieee754_pow+0xd8>
 8010a58:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010a5c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010a60:	ea53 030a 	orrs.w	r3, r3, sl
 8010a64:	f000 8448 	beq.w	80112f8 <__ieee754_pow+0x9a0>
 8010a68:	4b4b      	ldr	r3, [pc, #300]	; (8010b98 <__ieee754_pow+0x240>)
 8010a6a:	429c      	cmp	r4, r3
 8010a6c:	dd0b      	ble.n	8010a86 <__ieee754_pow+0x12e>
 8010a6e:	2f00      	cmp	r7, #0
 8010a70:	f2c0 8448 	blt.w	8011304 <__ieee754_pow+0x9ac>
 8010a74:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8010a78:	4658      	mov	r0, fp
 8010a7a:	4661      	mov	r1, ip
 8010a7c:	b013      	add	sp, #76	; 0x4c
 8010a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a82:	2302      	movs	r3, #2
 8010a84:	e7e2      	b.n	8010a4c <__ieee754_pow+0xf4>
 8010a86:	2f00      	cmp	r7, #0
 8010a88:	f04f 0b00 	mov.w	fp, #0
 8010a8c:	f04f 0c00 	mov.w	ip, #0
 8010a90:	daf2      	bge.n	8010a78 <__ieee754_pow+0x120>
 8010a92:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8010a96:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8010a9a:	e7ed      	b.n	8010a78 <__ieee754_pow+0x120>
 8010a9c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8010aa0:	d106      	bne.n	8010ab0 <__ieee754_pow+0x158>
 8010aa2:	4642      	mov	r2, r8
 8010aa4:	464b      	mov	r3, r9
 8010aa6:	4640      	mov	r0, r8
 8010aa8:	4649      	mov	r1, r9
 8010aaa:	f7ef fd15 	bl	80004d8 <__aeabi_dmul>
 8010aae:	e770      	b.n	8010992 <__ieee754_pow+0x3a>
 8010ab0:	4b3a      	ldr	r3, [pc, #232]	; (8010b9c <__ieee754_pow+0x244>)
 8010ab2:	429f      	cmp	r7, r3
 8010ab4:	d10a      	bne.n	8010acc <__ieee754_pow+0x174>
 8010ab6:	2d00      	cmp	r5, #0
 8010ab8:	db08      	blt.n	8010acc <__ieee754_pow+0x174>
 8010aba:	4640      	mov	r0, r8
 8010abc:	4649      	mov	r1, r9
 8010abe:	b013      	add	sp, #76	; 0x4c
 8010ac0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ac4:	f000 bc5e 	b.w	8011384 <__ieee754_sqrt>
 8010ac8:	2300      	movs	r3, #0
 8010aca:	9300      	str	r3, [sp, #0]
 8010acc:	4640      	mov	r0, r8
 8010ace:	4649      	mov	r1, r9
 8010ad0:	f001 fc56 	bl	8012380 <fabs>
 8010ad4:	4683      	mov	fp, r0
 8010ad6:	468c      	mov	ip, r1
 8010ad8:	f1ba 0f00 	cmp.w	sl, #0
 8010adc:	d128      	bne.n	8010b30 <__ieee754_pow+0x1d8>
 8010ade:	b124      	cbz	r4, 8010aea <__ieee754_pow+0x192>
 8010ae0:	4b2c      	ldr	r3, [pc, #176]	; (8010b94 <__ieee754_pow+0x23c>)
 8010ae2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d122      	bne.n	8010b30 <__ieee754_pow+0x1d8>
 8010aea:	2f00      	cmp	r7, #0
 8010aec:	da07      	bge.n	8010afe <__ieee754_pow+0x1a6>
 8010aee:	465a      	mov	r2, fp
 8010af0:	4663      	mov	r3, ip
 8010af2:	2000      	movs	r0, #0
 8010af4:	4927      	ldr	r1, [pc, #156]	; (8010b94 <__ieee754_pow+0x23c>)
 8010af6:	f7ef fe19 	bl	800072c <__aeabi_ddiv>
 8010afa:	4683      	mov	fp, r0
 8010afc:	468c      	mov	ip, r1
 8010afe:	2d00      	cmp	r5, #0
 8010b00:	daba      	bge.n	8010a78 <__ieee754_pow+0x120>
 8010b02:	9b00      	ldr	r3, [sp, #0]
 8010b04:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010b08:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010b0c:	4323      	orrs	r3, r4
 8010b0e:	d108      	bne.n	8010b22 <__ieee754_pow+0x1ca>
 8010b10:	465a      	mov	r2, fp
 8010b12:	4663      	mov	r3, ip
 8010b14:	4658      	mov	r0, fp
 8010b16:	4661      	mov	r1, ip
 8010b18:	f7ef fb26 	bl	8000168 <__aeabi_dsub>
 8010b1c:	4602      	mov	r2, r0
 8010b1e:	460b      	mov	r3, r1
 8010b20:	e790      	b.n	8010a44 <__ieee754_pow+0xec>
 8010b22:	9b00      	ldr	r3, [sp, #0]
 8010b24:	2b01      	cmp	r3, #1
 8010b26:	d1a7      	bne.n	8010a78 <__ieee754_pow+0x120>
 8010b28:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8010b2c:	469c      	mov	ip, r3
 8010b2e:	e7a3      	b.n	8010a78 <__ieee754_pow+0x120>
 8010b30:	0feb      	lsrs	r3, r5, #31
 8010b32:	3b01      	subs	r3, #1
 8010b34:	930c      	str	r3, [sp, #48]	; 0x30
 8010b36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010b38:	9b00      	ldr	r3, [sp, #0]
 8010b3a:	4313      	orrs	r3, r2
 8010b3c:	d104      	bne.n	8010b48 <__ieee754_pow+0x1f0>
 8010b3e:	4642      	mov	r2, r8
 8010b40:	464b      	mov	r3, r9
 8010b42:	4640      	mov	r0, r8
 8010b44:	4649      	mov	r1, r9
 8010b46:	e7e7      	b.n	8010b18 <__ieee754_pow+0x1c0>
 8010b48:	4b15      	ldr	r3, [pc, #84]	; (8010ba0 <__ieee754_pow+0x248>)
 8010b4a:	429e      	cmp	r6, r3
 8010b4c:	f340 80f6 	ble.w	8010d3c <__ieee754_pow+0x3e4>
 8010b50:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010b54:	429e      	cmp	r6, r3
 8010b56:	4b10      	ldr	r3, [pc, #64]	; (8010b98 <__ieee754_pow+0x240>)
 8010b58:	dd09      	ble.n	8010b6e <__ieee754_pow+0x216>
 8010b5a:	429c      	cmp	r4, r3
 8010b5c:	dc0c      	bgt.n	8010b78 <__ieee754_pow+0x220>
 8010b5e:	2f00      	cmp	r7, #0
 8010b60:	da0c      	bge.n	8010b7c <__ieee754_pow+0x224>
 8010b62:	2000      	movs	r0, #0
 8010b64:	b013      	add	sp, #76	; 0x4c
 8010b66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b6a:	f001 bc04 	b.w	8012376 <__math_oflow>
 8010b6e:	429c      	cmp	r4, r3
 8010b70:	dbf5      	blt.n	8010b5e <__ieee754_pow+0x206>
 8010b72:	4b08      	ldr	r3, [pc, #32]	; (8010b94 <__ieee754_pow+0x23c>)
 8010b74:	429c      	cmp	r4, r3
 8010b76:	dd15      	ble.n	8010ba4 <__ieee754_pow+0x24c>
 8010b78:	2f00      	cmp	r7, #0
 8010b7a:	dcf2      	bgt.n	8010b62 <__ieee754_pow+0x20a>
 8010b7c:	2000      	movs	r0, #0
 8010b7e:	b013      	add	sp, #76	; 0x4c
 8010b80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b84:	f001 bbf2 	b.w	801236c <__math_uflow>
 8010b88:	fff00000 	.word	0xfff00000
 8010b8c:	7ff00000 	.word	0x7ff00000
 8010b90:	433fffff 	.word	0x433fffff
 8010b94:	3ff00000 	.word	0x3ff00000
 8010b98:	3fefffff 	.word	0x3fefffff
 8010b9c:	3fe00000 	.word	0x3fe00000
 8010ba0:	41e00000 	.word	0x41e00000
 8010ba4:	4661      	mov	r1, ip
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	4658      	mov	r0, fp
 8010baa:	4b5f      	ldr	r3, [pc, #380]	; (8010d28 <__ieee754_pow+0x3d0>)
 8010bac:	f7ef fadc 	bl	8000168 <__aeabi_dsub>
 8010bb0:	a355      	add	r3, pc, #340	; (adr r3, 8010d08 <__ieee754_pow+0x3b0>)
 8010bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb6:	4604      	mov	r4, r0
 8010bb8:	460d      	mov	r5, r1
 8010bba:	f7ef fc8d 	bl	80004d8 <__aeabi_dmul>
 8010bbe:	a354      	add	r3, pc, #336	; (adr r3, 8010d10 <__ieee754_pow+0x3b8>)
 8010bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc4:	4606      	mov	r6, r0
 8010bc6:	460f      	mov	r7, r1
 8010bc8:	4620      	mov	r0, r4
 8010bca:	4629      	mov	r1, r5
 8010bcc:	f7ef fc84 	bl	80004d8 <__aeabi_dmul>
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	4682      	mov	sl, r0
 8010bd4:	468b      	mov	fp, r1
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	4629      	mov	r1, r5
 8010bda:	4b54      	ldr	r3, [pc, #336]	; (8010d2c <__ieee754_pow+0x3d4>)
 8010bdc:	f7ef fc7c 	bl	80004d8 <__aeabi_dmul>
 8010be0:	4602      	mov	r2, r0
 8010be2:	460b      	mov	r3, r1
 8010be4:	a14c      	add	r1, pc, #304	; (adr r1, 8010d18 <__ieee754_pow+0x3c0>)
 8010be6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bea:	f7ef fabd 	bl	8000168 <__aeabi_dsub>
 8010bee:	4622      	mov	r2, r4
 8010bf0:	462b      	mov	r3, r5
 8010bf2:	f7ef fc71 	bl	80004d8 <__aeabi_dmul>
 8010bf6:	4602      	mov	r2, r0
 8010bf8:	460b      	mov	r3, r1
 8010bfa:	2000      	movs	r0, #0
 8010bfc:	494c      	ldr	r1, [pc, #304]	; (8010d30 <__ieee754_pow+0x3d8>)
 8010bfe:	f7ef fab3 	bl	8000168 <__aeabi_dsub>
 8010c02:	4622      	mov	r2, r4
 8010c04:	462b      	mov	r3, r5
 8010c06:	4680      	mov	r8, r0
 8010c08:	4689      	mov	r9, r1
 8010c0a:	4620      	mov	r0, r4
 8010c0c:	4629      	mov	r1, r5
 8010c0e:	f7ef fc63 	bl	80004d8 <__aeabi_dmul>
 8010c12:	4602      	mov	r2, r0
 8010c14:	460b      	mov	r3, r1
 8010c16:	4640      	mov	r0, r8
 8010c18:	4649      	mov	r1, r9
 8010c1a:	f7ef fc5d 	bl	80004d8 <__aeabi_dmul>
 8010c1e:	a340      	add	r3, pc, #256	; (adr r3, 8010d20 <__ieee754_pow+0x3c8>)
 8010c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c24:	f7ef fc58 	bl	80004d8 <__aeabi_dmul>
 8010c28:	4602      	mov	r2, r0
 8010c2a:	460b      	mov	r3, r1
 8010c2c:	4650      	mov	r0, sl
 8010c2e:	4659      	mov	r1, fp
 8010c30:	f7ef fa9a 	bl	8000168 <__aeabi_dsub>
 8010c34:	f04f 0a00 	mov.w	sl, #0
 8010c38:	4602      	mov	r2, r0
 8010c3a:	460b      	mov	r3, r1
 8010c3c:	4604      	mov	r4, r0
 8010c3e:	460d      	mov	r5, r1
 8010c40:	4630      	mov	r0, r6
 8010c42:	4639      	mov	r1, r7
 8010c44:	f7ef fa92 	bl	800016c <__adddf3>
 8010c48:	4632      	mov	r2, r6
 8010c4a:	463b      	mov	r3, r7
 8010c4c:	4650      	mov	r0, sl
 8010c4e:	468b      	mov	fp, r1
 8010c50:	f7ef fa8a 	bl	8000168 <__aeabi_dsub>
 8010c54:	4602      	mov	r2, r0
 8010c56:	460b      	mov	r3, r1
 8010c58:	4620      	mov	r0, r4
 8010c5a:	4629      	mov	r1, r5
 8010c5c:	f7ef fa84 	bl	8000168 <__aeabi_dsub>
 8010c60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010c64:	9b00      	ldr	r3, [sp, #0]
 8010c66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c68:	3b01      	subs	r3, #1
 8010c6a:	4313      	orrs	r3, r2
 8010c6c:	f04f 0600 	mov.w	r6, #0
 8010c70:	f04f 0200 	mov.w	r2, #0
 8010c74:	bf0c      	ite	eq
 8010c76:	4b2f      	ldreq	r3, [pc, #188]	; (8010d34 <__ieee754_pow+0x3dc>)
 8010c78:	4b2b      	ldrne	r3, [pc, #172]	; (8010d28 <__ieee754_pow+0x3d0>)
 8010c7a:	4604      	mov	r4, r0
 8010c7c:	460d      	mov	r5, r1
 8010c7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c82:	e9cd 2300 	strd	r2, r3, [sp]
 8010c86:	4632      	mov	r2, r6
 8010c88:	463b      	mov	r3, r7
 8010c8a:	f7ef fa6d 	bl	8000168 <__aeabi_dsub>
 8010c8e:	4652      	mov	r2, sl
 8010c90:	465b      	mov	r3, fp
 8010c92:	f7ef fc21 	bl	80004d8 <__aeabi_dmul>
 8010c96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010c9a:	4680      	mov	r8, r0
 8010c9c:	4689      	mov	r9, r1
 8010c9e:	4620      	mov	r0, r4
 8010ca0:	4629      	mov	r1, r5
 8010ca2:	f7ef fc19 	bl	80004d8 <__aeabi_dmul>
 8010ca6:	4602      	mov	r2, r0
 8010ca8:	460b      	mov	r3, r1
 8010caa:	4640      	mov	r0, r8
 8010cac:	4649      	mov	r1, r9
 8010cae:	f7ef fa5d 	bl	800016c <__adddf3>
 8010cb2:	4632      	mov	r2, r6
 8010cb4:	463b      	mov	r3, r7
 8010cb6:	4680      	mov	r8, r0
 8010cb8:	4689      	mov	r9, r1
 8010cba:	4650      	mov	r0, sl
 8010cbc:	4659      	mov	r1, fp
 8010cbe:	f7ef fc0b 	bl	80004d8 <__aeabi_dmul>
 8010cc2:	4604      	mov	r4, r0
 8010cc4:	460d      	mov	r5, r1
 8010cc6:	460b      	mov	r3, r1
 8010cc8:	4602      	mov	r2, r0
 8010cca:	4649      	mov	r1, r9
 8010ccc:	4640      	mov	r0, r8
 8010cce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8010cd2:	f7ef fa4b 	bl	800016c <__adddf3>
 8010cd6:	4b18      	ldr	r3, [pc, #96]	; (8010d38 <__ieee754_pow+0x3e0>)
 8010cd8:	4682      	mov	sl, r0
 8010cda:	4299      	cmp	r1, r3
 8010cdc:	460f      	mov	r7, r1
 8010cde:	460e      	mov	r6, r1
 8010ce0:	f340 82e5 	ble.w	80112ae <__ieee754_pow+0x956>
 8010ce4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010ce8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010cec:	4303      	orrs	r3, r0
 8010cee:	f000 81df 	beq.w	80110b0 <__ieee754_pow+0x758>
 8010cf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	f7ef fe5f 	bl	80009bc <__aeabi_dcmplt>
 8010cfe:	3800      	subs	r0, #0
 8010d00:	bf18      	it	ne
 8010d02:	2001      	movne	r0, #1
 8010d04:	e72e      	b.n	8010b64 <__ieee754_pow+0x20c>
 8010d06:	bf00      	nop
 8010d08:	60000000 	.word	0x60000000
 8010d0c:	3ff71547 	.word	0x3ff71547
 8010d10:	f85ddf44 	.word	0xf85ddf44
 8010d14:	3e54ae0b 	.word	0x3e54ae0b
 8010d18:	55555555 	.word	0x55555555
 8010d1c:	3fd55555 	.word	0x3fd55555
 8010d20:	652b82fe 	.word	0x652b82fe
 8010d24:	3ff71547 	.word	0x3ff71547
 8010d28:	3ff00000 	.word	0x3ff00000
 8010d2c:	3fd00000 	.word	0x3fd00000
 8010d30:	3fe00000 	.word	0x3fe00000
 8010d34:	bff00000 	.word	0xbff00000
 8010d38:	408fffff 	.word	0x408fffff
 8010d3c:	4bd2      	ldr	r3, [pc, #840]	; (8011088 <__ieee754_pow+0x730>)
 8010d3e:	2200      	movs	r2, #0
 8010d40:	402b      	ands	r3, r5
 8010d42:	b943      	cbnz	r3, 8010d56 <__ieee754_pow+0x3fe>
 8010d44:	4658      	mov	r0, fp
 8010d46:	4661      	mov	r1, ip
 8010d48:	4bd0      	ldr	r3, [pc, #832]	; (801108c <__ieee754_pow+0x734>)
 8010d4a:	f7ef fbc5 	bl	80004d8 <__aeabi_dmul>
 8010d4e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010d52:	4683      	mov	fp, r0
 8010d54:	460c      	mov	r4, r1
 8010d56:	1523      	asrs	r3, r4, #20
 8010d58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010d5c:	4413      	add	r3, r2
 8010d5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d60:	4bcb      	ldr	r3, [pc, #812]	; (8011090 <__ieee754_pow+0x738>)
 8010d62:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010d66:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010d6a:	429c      	cmp	r4, r3
 8010d6c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010d70:	dd08      	ble.n	8010d84 <__ieee754_pow+0x42c>
 8010d72:	4bc8      	ldr	r3, [pc, #800]	; (8011094 <__ieee754_pow+0x73c>)
 8010d74:	429c      	cmp	r4, r3
 8010d76:	f340 8199 	ble.w	80110ac <__ieee754_pow+0x754>
 8010d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d7c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010d80:	3301      	adds	r3, #1
 8010d82:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d84:	2600      	movs	r6, #0
 8010d86:	00f3      	lsls	r3, r6, #3
 8010d88:	930d      	str	r3, [sp, #52]	; 0x34
 8010d8a:	4bc3      	ldr	r3, [pc, #780]	; (8011098 <__ieee754_pow+0x740>)
 8010d8c:	4658      	mov	r0, fp
 8010d8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010d92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010d96:	4629      	mov	r1, r5
 8010d98:	461a      	mov	r2, r3
 8010d9a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8010d9e:	4623      	mov	r3, r4
 8010da0:	f7ef f9e2 	bl	8000168 <__aeabi_dsub>
 8010da4:	46da      	mov	sl, fp
 8010da6:	462b      	mov	r3, r5
 8010da8:	4652      	mov	r2, sl
 8010daa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010dae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010db2:	f7ef f9db 	bl	800016c <__adddf3>
 8010db6:	4602      	mov	r2, r0
 8010db8:	460b      	mov	r3, r1
 8010dba:	2000      	movs	r0, #0
 8010dbc:	49b7      	ldr	r1, [pc, #732]	; (801109c <__ieee754_pow+0x744>)
 8010dbe:	f7ef fcb5 	bl	800072c <__aeabi_ddiv>
 8010dc2:	4602      	mov	r2, r0
 8010dc4:	460b      	mov	r3, r1
 8010dc6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010dca:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010dce:	f7ef fb83 	bl	80004d8 <__aeabi_dmul>
 8010dd2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010dd6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8010dda:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010dde:	2300      	movs	r3, #0
 8010de0:	2200      	movs	r2, #0
 8010de2:	46ab      	mov	fp, r5
 8010de4:	106d      	asrs	r5, r5, #1
 8010de6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010dea:	9304      	str	r3, [sp, #16]
 8010dec:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010df0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8010df4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8010df8:	4640      	mov	r0, r8
 8010dfa:	4649      	mov	r1, r9
 8010dfc:	4614      	mov	r4, r2
 8010dfe:	461d      	mov	r5, r3
 8010e00:	f7ef fb6a 	bl	80004d8 <__aeabi_dmul>
 8010e04:	4602      	mov	r2, r0
 8010e06:	460b      	mov	r3, r1
 8010e08:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010e0c:	f7ef f9ac 	bl	8000168 <__aeabi_dsub>
 8010e10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010e14:	4606      	mov	r6, r0
 8010e16:	460f      	mov	r7, r1
 8010e18:	4620      	mov	r0, r4
 8010e1a:	4629      	mov	r1, r5
 8010e1c:	f7ef f9a4 	bl	8000168 <__aeabi_dsub>
 8010e20:	4602      	mov	r2, r0
 8010e22:	460b      	mov	r3, r1
 8010e24:	4650      	mov	r0, sl
 8010e26:	4659      	mov	r1, fp
 8010e28:	f7ef f99e 	bl	8000168 <__aeabi_dsub>
 8010e2c:	4642      	mov	r2, r8
 8010e2e:	464b      	mov	r3, r9
 8010e30:	f7ef fb52 	bl	80004d8 <__aeabi_dmul>
 8010e34:	4602      	mov	r2, r0
 8010e36:	460b      	mov	r3, r1
 8010e38:	4630      	mov	r0, r6
 8010e3a:	4639      	mov	r1, r7
 8010e3c:	f7ef f994 	bl	8000168 <__aeabi_dsub>
 8010e40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010e44:	f7ef fb48 	bl	80004d8 <__aeabi_dmul>
 8010e48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010e4c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010e50:	4610      	mov	r0, r2
 8010e52:	4619      	mov	r1, r3
 8010e54:	f7ef fb40 	bl	80004d8 <__aeabi_dmul>
 8010e58:	a379      	add	r3, pc, #484	; (adr r3, 8011040 <__ieee754_pow+0x6e8>)
 8010e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e5e:	4604      	mov	r4, r0
 8010e60:	460d      	mov	r5, r1
 8010e62:	f7ef fb39 	bl	80004d8 <__aeabi_dmul>
 8010e66:	a378      	add	r3, pc, #480	; (adr r3, 8011048 <__ieee754_pow+0x6f0>)
 8010e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e6c:	f7ef f97e 	bl	800016c <__adddf3>
 8010e70:	4622      	mov	r2, r4
 8010e72:	462b      	mov	r3, r5
 8010e74:	f7ef fb30 	bl	80004d8 <__aeabi_dmul>
 8010e78:	a375      	add	r3, pc, #468	; (adr r3, 8011050 <__ieee754_pow+0x6f8>)
 8010e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e7e:	f7ef f975 	bl	800016c <__adddf3>
 8010e82:	4622      	mov	r2, r4
 8010e84:	462b      	mov	r3, r5
 8010e86:	f7ef fb27 	bl	80004d8 <__aeabi_dmul>
 8010e8a:	a373      	add	r3, pc, #460	; (adr r3, 8011058 <__ieee754_pow+0x700>)
 8010e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e90:	f7ef f96c 	bl	800016c <__adddf3>
 8010e94:	4622      	mov	r2, r4
 8010e96:	462b      	mov	r3, r5
 8010e98:	f7ef fb1e 	bl	80004d8 <__aeabi_dmul>
 8010e9c:	a370      	add	r3, pc, #448	; (adr r3, 8011060 <__ieee754_pow+0x708>)
 8010e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea2:	f7ef f963 	bl	800016c <__adddf3>
 8010ea6:	4622      	mov	r2, r4
 8010ea8:	462b      	mov	r3, r5
 8010eaa:	f7ef fb15 	bl	80004d8 <__aeabi_dmul>
 8010eae:	a36e      	add	r3, pc, #440	; (adr r3, 8011068 <__ieee754_pow+0x710>)
 8010eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb4:	f7ef f95a 	bl	800016c <__adddf3>
 8010eb8:	4622      	mov	r2, r4
 8010eba:	4606      	mov	r6, r0
 8010ebc:	460f      	mov	r7, r1
 8010ebe:	462b      	mov	r3, r5
 8010ec0:	4620      	mov	r0, r4
 8010ec2:	4629      	mov	r1, r5
 8010ec4:	f7ef fb08 	bl	80004d8 <__aeabi_dmul>
 8010ec8:	4602      	mov	r2, r0
 8010eca:	460b      	mov	r3, r1
 8010ecc:	4630      	mov	r0, r6
 8010ece:	4639      	mov	r1, r7
 8010ed0:	f7ef fb02 	bl	80004d8 <__aeabi_dmul>
 8010ed4:	4604      	mov	r4, r0
 8010ed6:	460d      	mov	r5, r1
 8010ed8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010edc:	4642      	mov	r2, r8
 8010ede:	464b      	mov	r3, r9
 8010ee0:	f7ef f944 	bl	800016c <__adddf3>
 8010ee4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010ee8:	f7ef faf6 	bl	80004d8 <__aeabi_dmul>
 8010eec:	4622      	mov	r2, r4
 8010eee:	462b      	mov	r3, r5
 8010ef0:	f7ef f93c 	bl	800016c <__adddf3>
 8010ef4:	4642      	mov	r2, r8
 8010ef6:	4606      	mov	r6, r0
 8010ef8:	460f      	mov	r7, r1
 8010efa:	464b      	mov	r3, r9
 8010efc:	4640      	mov	r0, r8
 8010efe:	4649      	mov	r1, r9
 8010f00:	f7ef faea 	bl	80004d8 <__aeabi_dmul>
 8010f04:	2200      	movs	r2, #0
 8010f06:	4b66      	ldr	r3, [pc, #408]	; (80110a0 <__ieee754_pow+0x748>)
 8010f08:	4682      	mov	sl, r0
 8010f0a:	468b      	mov	fp, r1
 8010f0c:	f7ef f92e 	bl	800016c <__adddf3>
 8010f10:	4632      	mov	r2, r6
 8010f12:	463b      	mov	r3, r7
 8010f14:	f7ef f92a 	bl	800016c <__adddf3>
 8010f18:	2400      	movs	r4, #0
 8010f1a:	460d      	mov	r5, r1
 8010f1c:	4622      	mov	r2, r4
 8010f1e:	460b      	mov	r3, r1
 8010f20:	4640      	mov	r0, r8
 8010f22:	4649      	mov	r1, r9
 8010f24:	f7ef fad8 	bl	80004d8 <__aeabi_dmul>
 8010f28:	2200      	movs	r2, #0
 8010f2a:	4680      	mov	r8, r0
 8010f2c:	4689      	mov	r9, r1
 8010f2e:	4620      	mov	r0, r4
 8010f30:	4629      	mov	r1, r5
 8010f32:	4b5b      	ldr	r3, [pc, #364]	; (80110a0 <__ieee754_pow+0x748>)
 8010f34:	f7ef f918 	bl	8000168 <__aeabi_dsub>
 8010f38:	4652      	mov	r2, sl
 8010f3a:	465b      	mov	r3, fp
 8010f3c:	f7ef f914 	bl	8000168 <__aeabi_dsub>
 8010f40:	4602      	mov	r2, r0
 8010f42:	460b      	mov	r3, r1
 8010f44:	4630      	mov	r0, r6
 8010f46:	4639      	mov	r1, r7
 8010f48:	f7ef f90e 	bl	8000168 <__aeabi_dsub>
 8010f4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f50:	f7ef fac2 	bl	80004d8 <__aeabi_dmul>
 8010f54:	4622      	mov	r2, r4
 8010f56:	4606      	mov	r6, r0
 8010f58:	460f      	mov	r7, r1
 8010f5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010f5e:	462b      	mov	r3, r5
 8010f60:	f7ef faba 	bl	80004d8 <__aeabi_dmul>
 8010f64:	4602      	mov	r2, r0
 8010f66:	460b      	mov	r3, r1
 8010f68:	4630      	mov	r0, r6
 8010f6a:	4639      	mov	r1, r7
 8010f6c:	f7ef f8fe 	bl	800016c <__adddf3>
 8010f70:	2400      	movs	r4, #0
 8010f72:	4606      	mov	r6, r0
 8010f74:	460f      	mov	r7, r1
 8010f76:	4602      	mov	r2, r0
 8010f78:	460b      	mov	r3, r1
 8010f7a:	4640      	mov	r0, r8
 8010f7c:	4649      	mov	r1, r9
 8010f7e:	f7ef f8f5 	bl	800016c <__adddf3>
 8010f82:	a33b      	add	r3, pc, #236	; (adr r3, 8011070 <__ieee754_pow+0x718>)
 8010f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f88:	4620      	mov	r0, r4
 8010f8a:	460d      	mov	r5, r1
 8010f8c:	f7ef faa4 	bl	80004d8 <__aeabi_dmul>
 8010f90:	4642      	mov	r2, r8
 8010f92:	464b      	mov	r3, r9
 8010f94:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010f98:	4620      	mov	r0, r4
 8010f9a:	4629      	mov	r1, r5
 8010f9c:	f7ef f8e4 	bl	8000168 <__aeabi_dsub>
 8010fa0:	4602      	mov	r2, r0
 8010fa2:	460b      	mov	r3, r1
 8010fa4:	4630      	mov	r0, r6
 8010fa6:	4639      	mov	r1, r7
 8010fa8:	f7ef f8de 	bl	8000168 <__aeabi_dsub>
 8010fac:	a332      	add	r3, pc, #200	; (adr r3, 8011078 <__ieee754_pow+0x720>)
 8010fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb2:	f7ef fa91 	bl	80004d8 <__aeabi_dmul>
 8010fb6:	a332      	add	r3, pc, #200	; (adr r3, 8011080 <__ieee754_pow+0x728>)
 8010fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fbc:	4606      	mov	r6, r0
 8010fbe:	460f      	mov	r7, r1
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	4629      	mov	r1, r5
 8010fc4:	f7ef fa88 	bl	80004d8 <__aeabi_dmul>
 8010fc8:	4602      	mov	r2, r0
 8010fca:	460b      	mov	r3, r1
 8010fcc:	4630      	mov	r0, r6
 8010fce:	4639      	mov	r1, r7
 8010fd0:	f7ef f8cc 	bl	800016c <__adddf3>
 8010fd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010fd6:	4b33      	ldr	r3, [pc, #204]	; (80110a4 <__ieee754_pow+0x74c>)
 8010fd8:	f04f 0a00 	mov.w	sl, #0
 8010fdc:	4413      	add	r3, r2
 8010fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe2:	f7ef f8c3 	bl	800016c <__adddf3>
 8010fe6:	4680      	mov	r8, r0
 8010fe8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010fea:	4689      	mov	r9, r1
 8010fec:	f7ef fa0a 	bl	8000404 <__aeabi_i2d>
 8010ff0:	4604      	mov	r4, r0
 8010ff2:	460d      	mov	r5, r1
 8010ff4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010ff6:	4b2c      	ldr	r3, [pc, #176]	; (80110a8 <__ieee754_pow+0x750>)
 8010ff8:	4413      	add	r3, r2
 8010ffa:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010ffe:	4642      	mov	r2, r8
 8011000:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011004:	464b      	mov	r3, r9
 8011006:	f7ef f8b1 	bl	800016c <__adddf3>
 801100a:	4632      	mov	r2, r6
 801100c:	463b      	mov	r3, r7
 801100e:	f7ef f8ad 	bl	800016c <__adddf3>
 8011012:	4622      	mov	r2, r4
 8011014:	462b      	mov	r3, r5
 8011016:	f7ef f8a9 	bl	800016c <__adddf3>
 801101a:	4622      	mov	r2, r4
 801101c:	462b      	mov	r3, r5
 801101e:	4650      	mov	r0, sl
 8011020:	468b      	mov	fp, r1
 8011022:	f7ef f8a1 	bl	8000168 <__aeabi_dsub>
 8011026:	4632      	mov	r2, r6
 8011028:	463b      	mov	r3, r7
 801102a:	f7ef f89d 	bl	8000168 <__aeabi_dsub>
 801102e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011032:	f7ef f899 	bl	8000168 <__aeabi_dsub>
 8011036:	4602      	mov	r2, r0
 8011038:	460b      	mov	r3, r1
 801103a:	4640      	mov	r0, r8
 801103c:	4649      	mov	r1, r9
 801103e:	e60d      	b.n	8010c5c <__ieee754_pow+0x304>
 8011040:	4a454eef 	.word	0x4a454eef
 8011044:	3fca7e28 	.word	0x3fca7e28
 8011048:	93c9db65 	.word	0x93c9db65
 801104c:	3fcd864a 	.word	0x3fcd864a
 8011050:	a91d4101 	.word	0xa91d4101
 8011054:	3fd17460 	.word	0x3fd17460
 8011058:	518f264d 	.word	0x518f264d
 801105c:	3fd55555 	.word	0x3fd55555
 8011060:	db6fabff 	.word	0xdb6fabff
 8011064:	3fdb6db6 	.word	0x3fdb6db6
 8011068:	33333303 	.word	0x33333303
 801106c:	3fe33333 	.word	0x3fe33333
 8011070:	e0000000 	.word	0xe0000000
 8011074:	3feec709 	.word	0x3feec709
 8011078:	dc3a03fd 	.word	0xdc3a03fd
 801107c:	3feec709 	.word	0x3feec709
 8011080:	145b01f5 	.word	0x145b01f5
 8011084:	be3e2fe0 	.word	0xbe3e2fe0
 8011088:	7ff00000 	.word	0x7ff00000
 801108c:	43400000 	.word	0x43400000
 8011090:	0003988e 	.word	0x0003988e
 8011094:	000bb679 	.word	0x000bb679
 8011098:	08012d18 	.word	0x08012d18
 801109c:	3ff00000 	.word	0x3ff00000
 80110a0:	40080000 	.word	0x40080000
 80110a4:	08012d38 	.word	0x08012d38
 80110a8:	08012d28 	.word	0x08012d28
 80110ac:	2601      	movs	r6, #1
 80110ae:	e66a      	b.n	8010d86 <__ieee754_pow+0x42e>
 80110b0:	a39d      	add	r3, pc, #628	; (adr r3, 8011328 <__ieee754_pow+0x9d0>)
 80110b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b6:	4640      	mov	r0, r8
 80110b8:	4649      	mov	r1, r9
 80110ba:	f7ef f857 	bl	800016c <__adddf3>
 80110be:	4622      	mov	r2, r4
 80110c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80110c4:	462b      	mov	r3, r5
 80110c6:	4650      	mov	r0, sl
 80110c8:	4639      	mov	r1, r7
 80110ca:	f7ef f84d 	bl	8000168 <__aeabi_dsub>
 80110ce:	4602      	mov	r2, r0
 80110d0:	460b      	mov	r3, r1
 80110d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80110d6:	f7ef fc8f 	bl	80009f8 <__aeabi_dcmpgt>
 80110da:	2800      	cmp	r0, #0
 80110dc:	f47f ae09 	bne.w	8010cf2 <__ieee754_pow+0x39a>
 80110e0:	4aa3      	ldr	r2, [pc, #652]	; (8011370 <__ieee754_pow+0xa18>)
 80110e2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80110e6:	4293      	cmp	r3, r2
 80110e8:	f340 8101 	ble.w	80112ee <__ieee754_pow+0x996>
 80110ec:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80110f0:	2000      	movs	r0, #0
 80110f2:	151b      	asrs	r3, r3, #20
 80110f4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80110f8:	fa4a f303 	asr.w	r3, sl, r3
 80110fc:	4433      	add	r3, r6
 80110fe:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011102:	4f9c      	ldr	r7, [pc, #624]	; (8011374 <__ieee754_pow+0xa1c>)
 8011104:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011108:	4117      	asrs	r7, r2
 801110a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801110e:	ea23 0107 	bic.w	r1, r3, r7
 8011112:	f1c2 0214 	rsb	r2, r2, #20
 8011116:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801111a:	460b      	mov	r3, r1
 801111c:	fa4a fa02 	asr.w	sl, sl, r2
 8011120:	2e00      	cmp	r6, #0
 8011122:	4602      	mov	r2, r0
 8011124:	4629      	mov	r1, r5
 8011126:	4620      	mov	r0, r4
 8011128:	bfb8      	it	lt
 801112a:	f1ca 0a00 	rsblt	sl, sl, #0
 801112e:	f7ef f81b 	bl	8000168 <__aeabi_dsub>
 8011132:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801113a:	2400      	movs	r4, #0
 801113c:	4642      	mov	r2, r8
 801113e:	464b      	mov	r3, r9
 8011140:	f7ef f814 	bl	800016c <__adddf3>
 8011144:	a37a      	add	r3, pc, #488	; (adr r3, 8011330 <__ieee754_pow+0x9d8>)
 8011146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801114a:	4620      	mov	r0, r4
 801114c:	460d      	mov	r5, r1
 801114e:	f7ef f9c3 	bl	80004d8 <__aeabi_dmul>
 8011152:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011156:	4606      	mov	r6, r0
 8011158:	460f      	mov	r7, r1
 801115a:	4620      	mov	r0, r4
 801115c:	4629      	mov	r1, r5
 801115e:	f7ef f803 	bl	8000168 <__aeabi_dsub>
 8011162:	4602      	mov	r2, r0
 8011164:	460b      	mov	r3, r1
 8011166:	4640      	mov	r0, r8
 8011168:	4649      	mov	r1, r9
 801116a:	f7ee fffd 	bl	8000168 <__aeabi_dsub>
 801116e:	a372      	add	r3, pc, #456	; (adr r3, 8011338 <__ieee754_pow+0x9e0>)
 8011170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011174:	f7ef f9b0 	bl	80004d8 <__aeabi_dmul>
 8011178:	a371      	add	r3, pc, #452	; (adr r3, 8011340 <__ieee754_pow+0x9e8>)
 801117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801117e:	4680      	mov	r8, r0
 8011180:	4689      	mov	r9, r1
 8011182:	4620      	mov	r0, r4
 8011184:	4629      	mov	r1, r5
 8011186:	f7ef f9a7 	bl	80004d8 <__aeabi_dmul>
 801118a:	4602      	mov	r2, r0
 801118c:	460b      	mov	r3, r1
 801118e:	4640      	mov	r0, r8
 8011190:	4649      	mov	r1, r9
 8011192:	f7ee ffeb 	bl	800016c <__adddf3>
 8011196:	4604      	mov	r4, r0
 8011198:	460d      	mov	r5, r1
 801119a:	4602      	mov	r2, r0
 801119c:	460b      	mov	r3, r1
 801119e:	4630      	mov	r0, r6
 80111a0:	4639      	mov	r1, r7
 80111a2:	f7ee ffe3 	bl	800016c <__adddf3>
 80111a6:	4632      	mov	r2, r6
 80111a8:	463b      	mov	r3, r7
 80111aa:	4680      	mov	r8, r0
 80111ac:	4689      	mov	r9, r1
 80111ae:	f7ee ffdb 	bl	8000168 <__aeabi_dsub>
 80111b2:	4602      	mov	r2, r0
 80111b4:	460b      	mov	r3, r1
 80111b6:	4620      	mov	r0, r4
 80111b8:	4629      	mov	r1, r5
 80111ba:	f7ee ffd5 	bl	8000168 <__aeabi_dsub>
 80111be:	4642      	mov	r2, r8
 80111c0:	4606      	mov	r6, r0
 80111c2:	460f      	mov	r7, r1
 80111c4:	464b      	mov	r3, r9
 80111c6:	4640      	mov	r0, r8
 80111c8:	4649      	mov	r1, r9
 80111ca:	f7ef f985 	bl	80004d8 <__aeabi_dmul>
 80111ce:	a35e      	add	r3, pc, #376	; (adr r3, 8011348 <__ieee754_pow+0x9f0>)
 80111d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111d4:	4604      	mov	r4, r0
 80111d6:	460d      	mov	r5, r1
 80111d8:	f7ef f97e 	bl	80004d8 <__aeabi_dmul>
 80111dc:	a35c      	add	r3, pc, #368	; (adr r3, 8011350 <__ieee754_pow+0x9f8>)
 80111de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111e2:	f7ee ffc1 	bl	8000168 <__aeabi_dsub>
 80111e6:	4622      	mov	r2, r4
 80111e8:	462b      	mov	r3, r5
 80111ea:	f7ef f975 	bl	80004d8 <__aeabi_dmul>
 80111ee:	a35a      	add	r3, pc, #360	; (adr r3, 8011358 <__ieee754_pow+0xa00>)
 80111f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f4:	f7ee ffba 	bl	800016c <__adddf3>
 80111f8:	4622      	mov	r2, r4
 80111fa:	462b      	mov	r3, r5
 80111fc:	f7ef f96c 	bl	80004d8 <__aeabi_dmul>
 8011200:	a357      	add	r3, pc, #348	; (adr r3, 8011360 <__ieee754_pow+0xa08>)
 8011202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011206:	f7ee ffaf 	bl	8000168 <__aeabi_dsub>
 801120a:	4622      	mov	r2, r4
 801120c:	462b      	mov	r3, r5
 801120e:	f7ef f963 	bl	80004d8 <__aeabi_dmul>
 8011212:	a355      	add	r3, pc, #340	; (adr r3, 8011368 <__ieee754_pow+0xa10>)
 8011214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011218:	f7ee ffa8 	bl	800016c <__adddf3>
 801121c:	4622      	mov	r2, r4
 801121e:	462b      	mov	r3, r5
 8011220:	f7ef f95a 	bl	80004d8 <__aeabi_dmul>
 8011224:	4602      	mov	r2, r0
 8011226:	460b      	mov	r3, r1
 8011228:	4640      	mov	r0, r8
 801122a:	4649      	mov	r1, r9
 801122c:	f7ee ff9c 	bl	8000168 <__aeabi_dsub>
 8011230:	4604      	mov	r4, r0
 8011232:	460d      	mov	r5, r1
 8011234:	4602      	mov	r2, r0
 8011236:	460b      	mov	r3, r1
 8011238:	4640      	mov	r0, r8
 801123a:	4649      	mov	r1, r9
 801123c:	f7ef f94c 	bl	80004d8 <__aeabi_dmul>
 8011240:	2200      	movs	r2, #0
 8011242:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011246:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801124a:	4620      	mov	r0, r4
 801124c:	4629      	mov	r1, r5
 801124e:	f7ee ff8b 	bl	8000168 <__aeabi_dsub>
 8011252:	4602      	mov	r2, r0
 8011254:	460b      	mov	r3, r1
 8011256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801125a:	f7ef fa67 	bl	800072c <__aeabi_ddiv>
 801125e:	4632      	mov	r2, r6
 8011260:	4604      	mov	r4, r0
 8011262:	460d      	mov	r5, r1
 8011264:	463b      	mov	r3, r7
 8011266:	4640      	mov	r0, r8
 8011268:	4649      	mov	r1, r9
 801126a:	f7ef f935 	bl	80004d8 <__aeabi_dmul>
 801126e:	4632      	mov	r2, r6
 8011270:	463b      	mov	r3, r7
 8011272:	f7ee ff7b 	bl	800016c <__adddf3>
 8011276:	4602      	mov	r2, r0
 8011278:	460b      	mov	r3, r1
 801127a:	4620      	mov	r0, r4
 801127c:	4629      	mov	r1, r5
 801127e:	f7ee ff73 	bl	8000168 <__aeabi_dsub>
 8011282:	4642      	mov	r2, r8
 8011284:	464b      	mov	r3, r9
 8011286:	f7ee ff6f 	bl	8000168 <__aeabi_dsub>
 801128a:	4602      	mov	r2, r0
 801128c:	460b      	mov	r3, r1
 801128e:	2000      	movs	r0, #0
 8011290:	4939      	ldr	r1, [pc, #228]	; (8011378 <__ieee754_pow+0xa20>)
 8011292:	f7ee ff69 	bl	8000168 <__aeabi_dsub>
 8011296:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801129a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801129e:	da29      	bge.n	80112f4 <__ieee754_pow+0x99c>
 80112a0:	4652      	mov	r2, sl
 80112a2:	f001 f879 	bl	8012398 <scalbn>
 80112a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112aa:	f7ff bbfe 	b.w	8010aaa <__ieee754_pow+0x152>
 80112ae:	4b33      	ldr	r3, [pc, #204]	; (801137c <__ieee754_pow+0xa24>)
 80112b0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80112b4:	429f      	cmp	r7, r3
 80112b6:	f77f af13 	ble.w	80110e0 <__ieee754_pow+0x788>
 80112ba:	4b31      	ldr	r3, [pc, #196]	; (8011380 <__ieee754_pow+0xa28>)
 80112bc:	440b      	add	r3, r1
 80112be:	4303      	orrs	r3, r0
 80112c0:	d009      	beq.n	80112d6 <__ieee754_pow+0x97e>
 80112c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80112c6:	2200      	movs	r2, #0
 80112c8:	2300      	movs	r3, #0
 80112ca:	f7ef fb77 	bl	80009bc <__aeabi_dcmplt>
 80112ce:	3800      	subs	r0, #0
 80112d0:	bf18      	it	ne
 80112d2:	2001      	movne	r0, #1
 80112d4:	e453      	b.n	8010b7e <__ieee754_pow+0x226>
 80112d6:	4622      	mov	r2, r4
 80112d8:	462b      	mov	r3, r5
 80112da:	f7ee ff45 	bl	8000168 <__aeabi_dsub>
 80112de:	4642      	mov	r2, r8
 80112e0:	464b      	mov	r3, r9
 80112e2:	f7ef fb7f 	bl	80009e4 <__aeabi_dcmpge>
 80112e6:	2800      	cmp	r0, #0
 80112e8:	f43f aefa 	beq.w	80110e0 <__ieee754_pow+0x788>
 80112ec:	e7e9      	b.n	80112c2 <__ieee754_pow+0x96a>
 80112ee:	f04f 0a00 	mov.w	sl, #0
 80112f2:	e720      	b.n	8011136 <__ieee754_pow+0x7de>
 80112f4:	4621      	mov	r1, r4
 80112f6:	e7d6      	b.n	80112a6 <__ieee754_pow+0x94e>
 80112f8:	f04f 0b00 	mov.w	fp, #0
 80112fc:	f8df c078 	ldr.w	ip, [pc, #120]	; 8011378 <__ieee754_pow+0xa20>
 8011300:	f7ff bbba 	b.w	8010a78 <__ieee754_pow+0x120>
 8011304:	f04f 0b00 	mov.w	fp, #0
 8011308:	f04f 0c00 	mov.w	ip, #0
 801130c:	f7ff bbb4 	b.w	8010a78 <__ieee754_pow+0x120>
 8011310:	4640      	mov	r0, r8
 8011312:	4649      	mov	r1, r9
 8011314:	f7ff bb3d 	b.w	8010992 <__ieee754_pow+0x3a>
 8011318:	9200      	str	r2, [sp, #0]
 801131a:	f7ff bb89 	b.w	8010a30 <__ieee754_pow+0xd8>
 801131e:	2300      	movs	r3, #0
 8011320:	f7ff bb73 	b.w	8010a0a <__ieee754_pow+0xb2>
 8011324:	f3af 8000 	nop.w
 8011328:	652b82fe 	.word	0x652b82fe
 801132c:	3c971547 	.word	0x3c971547
 8011330:	00000000 	.word	0x00000000
 8011334:	3fe62e43 	.word	0x3fe62e43
 8011338:	fefa39ef 	.word	0xfefa39ef
 801133c:	3fe62e42 	.word	0x3fe62e42
 8011340:	0ca86c39 	.word	0x0ca86c39
 8011344:	be205c61 	.word	0xbe205c61
 8011348:	72bea4d0 	.word	0x72bea4d0
 801134c:	3e663769 	.word	0x3e663769
 8011350:	c5d26bf1 	.word	0xc5d26bf1
 8011354:	3ebbbd41 	.word	0x3ebbbd41
 8011358:	af25de2c 	.word	0xaf25de2c
 801135c:	3f11566a 	.word	0x3f11566a
 8011360:	16bebd93 	.word	0x16bebd93
 8011364:	3f66c16c 	.word	0x3f66c16c
 8011368:	5555553e 	.word	0x5555553e
 801136c:	3fc55555 	.word	0x3fc55555
 8011370:	3fe00000 	.word	0x3fe00000
 8011374:	000fffff 	.word	0x000fffff
 8011378:	3ff00000 	.word	0x3ff00000
 801137c:	4090cbff 	.word	0x4090cbff
 8011380:	3f6f3400 	.word	0x3f6f3400

08011384 <__ieee754_sqrt>:
 8011384:	f8df c158 	ldr.w	ip, [pc, #344]	; 80114e0 <__ieee754_sqrt+0x15c>
 8011388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801138c:	ea3c 0c01 	bics.w	ip, ip, r1
 8011390:	4606      	mov	r6, r0
 8011392:	460d      	mov	r5, r1
 8011394:	460c      	mov	r4, r1
 8011396:	460a      	mov	r2, r1
 8011398:	4607      	mov	r7, r0
 801139a:	4603      	mov	r3, r0
 801139c:	d10f      	bne.n	80113be <__ieee754_sqrt+0x3a>
 801139e:	4602      	mov	r2, r0
 80113a0:	460b      	mov	r3, r1
 80113a2:	f7ef f899 	bl	80004d8 <__aeabi_dmul>
 80113a6:	4602      	mov	r2, r0
 80113a8:	460b      	mov	r3, r1
 80113aa:	4630      	mov	r0, r6
 80113ac:	4629      	mov	r1, r5
 80113ae:	f7ee fedd 	bl	800016c <__adddf3>
 80113b2:	4606      	mov	r6, r0
 80113b4:	460d      	mov	r5, r1
 80113b6:	4630      	mov	r0, r6
 80113b8:	4629      	mov	r1, r5
 80113ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113be:	2900      	cmp	r1, #0
 80113c0:	dc0e      	bgt.n	80113e0 <__ieee754_sqrt+0x5c>
 80113c2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80113c6:	ea5c 0707 	orrs.w	r7, ip, r7
 80113ca:	d0f4      	beq.n	80113b6 <__ieee754_sqrt+0x32>
 80113cc:	b141      	cbz	r1, 80113e0 <__ieee754_sqrt+0x5c>
 80113ce:	4602      	mov	r2, r0
 80113d0:	460b      	mov	r3, r1
 80113d2:	f7ee fec9 	bl	8000168 <__aeabi_dsub>
 80113d6:	4602      	mov	r2, r0
 80113d8:	460b      	mov	r3, r1
 80113da:	f7ef f9a7 	bl	800072c <__aeabi_ddiv>
 80113de:	e7e8      	b.n	80113b2 <__ieee754_sqrt+0x2e>
 80113e0:	1521      	asrs	r1, r4, #20
 80113e2:	d075      	beq.n	80114d0 <__ieee754_sqrt+0x14c>
 80113e4:	07cc      	lsls	r4, r1, #31
 80113e6:	f04f 0400 	mov.w	r4, #0
 80113ea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80113ee:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80113f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80113f6:	bf5e      	ittt	pl
 80113f8:	0fd9      	lsrpl	r1, r3, #31
 80113fa:	005b      	lslpl	r3, r3, #1
 80113fc:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8011400:	0fd9      	lsrs	r1, r3, #31
 8011402:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8011406:	2516      	movs	r5, #22
 8011408:	4620      	mov	r0, r4
 801140a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801140e:	107f      	asrs	r7, r7, #1
 8011410:	005b      	lsls	r3, r3, #1
 8011412:	1846      	adds	r6, r0, r1
 8011414:	4296      	cmp	r6, r2
 8011416:	bfde      	ittt	le
 8011418:	1b92      	suble	r2, r2, r6
 801141a:	1870      	addle	r0, r6, r1
 801141c:	1864      	addle	r4, r4, r1
 801141e:	0052      	lsls	r2, r2, #1
 8011420:	3d01      	subs	r5, #1
 8011422:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8011426:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801142a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801142e:	d1f0      	bne.n	8011412 <__ieee754_sqrt+0x8e>
 8011430:	4629      	mov	r1, r5
 8011432:	f04f 0e20 	mov.w	lr, #32
 8011436:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801143a:	4282      	cmp	r2, r0
 801143c:	eb06 0c05 	add.w	ip, r6, r5
 8011440:	dc02      	bgt.n	8011448 <__ieee754_sqrt+0xc4>
 8011442:	d113      	bne.n	801146c <__ieee754_sqrt+0xe8>
 8011444:	459c      	cmp	ip, r3
 8011446:	d811      	bhi.n	801146c <__ieee754_sqrt+0xe8>
 8011448:	f1bc 0f00 	cmp.w	ip, #0
 801144c:	eb0c 0506 	add.w	r5, ip, r6
 8011450:	da43      	bge.n	80114da <__ieee754_sqrt+0x156>
 8011452:	2d00      	cmp	r5, #0
 8011454:	db41      	blt.n	80114da <__ieee754_sqrt+0x156>
 8011456:	f100 0801 	add.w	r8, r0, #1
 801145a:	1a12      	subs	r2, r2, r0
 801145c:	4640      	mov	r0, r8
 801145e:	459c      	cmp	ip, r3
 8011460:	bf88      	it	hi
 8011462:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011466:	eba3 030c 	sub.w	r3, r3, ip
 801146a:	4431      	add	r1, r6
 801146c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8011470:	f1be 0e01 	subs.w	lr, lr, #1
 8011474:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8011478:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801147c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011480:	d1db      	bne.n	801143a <__ieee754_sqrt+0xb6>
 8011482:	4313      	orrs	r3, r2
 8011484:	d006      	beq.n	8011494 <__ieee754_sqrt+0x110>
 8011486:	1c48      	adds	r0, r1, #1
 8011488:	bf0b      	itete	eq
 801148a:	4671      	moveq	r1, lr
 801148c:	3101      	addne	r1, #1
 801148e:	3401      	addeq	r4, #1
 8011490:	f021 0101 	bicne.w	r1, r1, #1
 8011494:	1063      	asrs	r3, r4, #1
 8011496:	0849      	lsrs	r1, r1, #1
 8011498:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801149c:	07e2      	lsls	r2, r4, #31
 801149e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80114a2:	bf48      	it	mi
 80114a4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80114a8:	460e      	mov	r6, r1
 80114aa:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80114ae:	e782      	b.n	80113b6 <__ieee754_sqrt+0x32>
 80114b0:	0ada      	lsrs	r2, r3, #11
 80114b2:	3815      	subs	r0, #21
 80114b4:	055b      	lsls	r3, r3, #21
 80114b6:	2a00      	cmp	r2, #0
 80114b8:	d0fa      	beq.n	80114b0 <__ieee754_sqrt+0x12c>
 80114ba:	02d5      	lsls	r5, r2, #11
 80114bc:	d50a      	bpl.n	80114d4 <__ieee754_sqrt+0x150>
 80114be:	f1c1 0420 	rsb	r4, r1, #32
 80114c2:	fa23 f404 	lsr.w	r4, r3, r4
 80114c6:	1e4d      	subs	r5, r1, #1
 80114c8:	408b      	lsls	r3, r1
 80114ca:	4322      	orrs	r2, r4
 80114cc:	1b41      	subs	r1, r0, r5
 80114ce:	e789      	b.n	80113e4 <__ieee754_sqrt+0x60>
 80114d0:	4608      	mov	r0, r1
 80114d2:	e7f0      	b.n	80114b6 <__ieee754_sqrt+0x132>
 80114d4:	0052      	lsls	r2, r2, #1
 80114d6:	3101      	adds	r1, #1
 80114d8:	e7ef      	b.n	80114ba <__ieee754_sqrt+0x136>
 80114da:	4680      	mov	r8, r0
 80114dc:	e7bd      	b.n	801145a <__ieee754_sqrt+0xd6>
 80114de:	bf00      	nop
 80114e0:	7ff00000 	.word	0x7ff00000

080114e4 <__ieee754_asinf>:
 80114e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114e8:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 80114ec:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80114f0:	4604      	mov	r4, r0
 80114f2:	4605      	mov	r5, r0
 80114f4:	d10c      	bne.n	8011510 <__ieee754_asinf+0x2c>
 80114f6:	498d      	ldr	r1, [pc, #564]	; (801172c <__ieee754_asinf+0x248>)
 80114f8:	f7ef fc44 	bl	8000d84 <__aeabi_fmul>
 80114fc:	498c      	ldr	r1, [pc, #560]	; (8011730 <__ieee754_asinf+0x24c>)
 80114fe:	4605      	mov	r5, r0
 8011500:	4620      	mov	r0, r4
 8011502:	f7ef fc3f 	bl	8000d84 <__aeabi_fmul>
 8011506:	4601      	mov	r1, r0
 8011508:	4628      	mov	r0, r5
 801150a:	f7ef fb33 	bl	8000b74 <__addsf3>
 801150e:	e006      	b.n	801151e <__ieee754_asinf+0x3a>
 8011510:	dd07      	ble.n	8011522 <__ieee754_asinf+0x3e>
 8011512:	4601      	mov	r1, r0
 8011514:	f7ef fb2c 	bl	8000b70 <__aeabi_fsub>
 8011518:	4601      	mov	r1, r0
 801151a:	f7ef fce7 	bl	8000eec <__aeabi_fdiv>
 801151e:	4604      	mov	r4, r0
 8011520:	e00e      	b.n	8011540 <__ieee754_asinf+0x5c>
 8011522:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 8011526:	da58      	bge.n	80115da <__ieee754_asinf+0xf6>
 8011528:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 801152c:	da0b      	bge.n	8011546 <__ieee754_asinf+0x62>
 801152e:	4981      	ldr	r1, [pc, #516]	; (8011734 <__ieee754_asinf+0x250>)
 8011530:	f7ef fb20 	bl	8000b74 <__addsf3>
 8011534:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8011538:	f7ef fde0 	bl	80010fc <__aeabi_fcmpgt>
 801153c:	2800      	cmp	r0, #0
 801153e:	d04c      	beq.n	80115da <__ieee754_asinf+0xf6>
 8011540:	4620      	mov	r0, r4
 8011542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011546:	4601      	mov	r1, r0
 8011548:	f7ef fc1c 	bl	8000d84 <__aeabi_fmul>
 801154c:	4605      	mov	r5, r0
 801154e:	497a      	ldr	r1, [pc, #488]	; (8011738 <__ieee754_asinf+0x254>)
 8011550:	f7ef fc18 	bl	8000d84 <__aeabi_fmul>
 8011554:	4979      	ldr	r1, [pc, #484]	; (801173c <__ieee754_asinf+0x258>)
 8011556:	f7ef fb0d 	bl	8000b74 <__addsf3>
 801155a:	4629      	mov	r1, r5
 801155c:	f7ef fc12 	bl	8000d84 <__aeabi_fmul>
 8011560:	4977      	ldr	r1, [pc, #476]	; (8011740 <__ieee754_asinf+0x25c>)
 8011562:	f7ef fb05 	bl	8000b70 <__aeabi_fsub>
 8011566:	4629      	mov	r1, r5
 8011568:	f7ef fc0c 	bl	8000d84 <__aeabi_fmul>
 801156c:	4975      	ldr	r1, [pc, #468]	; (8011744 <__ieee754_asinf+0x260>)
 801156e:	f7ef fb01 	bl	8000b74 <__addsf3>
 8011572:	4629      	mov	r1, r5
 8011574:	f7ef fc06 	bl	8000d84 <__aeabi_fmul>
 8011578:	4973      	ldr	r1, [pc, #460]	; (8011748 <__ieee754_asinf+0x264>)
 801157a:	f7ef faf9 	bl	8000b70 <__aeabi_fsub>
 801157e:	4629      	mov	r1, r5
 8011580:	f7ef fc00 	bl	8000d84 <__aeabi_fmul>
 8011584:	4971      	ldr	r1, [pc, #452]	; (801174c <__ieee754_asinf+0x268>)
 8011586:	f7ef faf5 	bl	8000b74 <__addsf3>
 801158a:	4629      	mov	r1, r5
 801158c:	f7ef fbfa 	bl	8000d84 <__aeabi_fmul>
 8011590:	496f      	ldr	r1, [pc, #444]	; (8011750 <__ieee754_asinf+0x26c>)
 8011592:	4606      	mov	r6, r0
 8011594:	4628      	mov	r0, r5
 8011596:	f7ef fbf5 	bl	8000d84 <__aeabi_fmul>
 801159a:	496e      	ldr	r1, [pc, #440]	; (8011754 <__ieee754_asinf+0x270>)
 801159c:	f7ef fae8 	bl	8000b70 <__aeabi_fsub>
 80115a0:	4629      	mov	r1, r5
 80115a2:	f7ef fbef 	bl	8000d84 <__aeabi_fmul>
 80115a6:	496c      	ldr	r1, [pc, #432]	; (8011758 <__ieee754_asinf+0x274>)
 80115a8:	f7ef fae4 	bl	8000b74 <__addsf3>
 80115ac:	4629      	mov	r1, r5
 80115ae:	f7ef fbe9 	bl	8000d84 <__aeabi_fmul>
 80115b2:	496a      	ldr	r1, [pc, #424]	; (801175c <__ieee754_asinf+0x278>)
 80115b4:	f7ef fadc 	bl	8000b70 <__aeabi_fsub>
 80115b8:	4629      	mov	r1, r5
 80115ba:	f7ef fbe3 	bl	8000d84 <__aeabi_fmul>
 80115be:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80115c2:	f7ef fad7 	bl	8000b74 <__addsf3>
 80115c6:	4601      	mov	r1, r0
 80115c8:	4630      	mov	r0, r6
 80115ca:	f7ef fc8f 	bl	8000eec <__aeabi_fdiv>
 80115ce:	4621      	mov	r1, r4
 80115d0:	f7ef fbd8 	bl	8000d84 <__aeabi_fmul>
 80115d4:	4601      	mov	r1, r0
 80115d6:	4620      	mov	r0, r4
 80115d8:	e797      	b.n	801150a <__ieee754_asinf+0x26>
 80115da:	4620      	mov	r0, r4
 80115dc:	f001 f866 	bl	80126ac <fabsf>
 80115e0:	4601      	mov	r1, r0
 80115e2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80115e6:	f7ef fac3 	bl	8000b70 <__aeabi_fsub>
 80115ea:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80115ee:	f7ef fbc9 	bl	8000d84 <__aeabi_fmul>
 80115f2:	4606      	mov	r6, r0
 80115f4:	4950      	ldr	r1, [pc, #320]	; (8011738 <__ieee754_asinf+0x254>)
 80115f6:	f7ef fbc5 	bl	8000d84 <__aeabi_fmul>
 80115fa:	4950      	ldr	r1, [pc, #320]	; (801173c <__ieee754_asinf+0x258>)
 80115fc:	f7ef faba 	bl	8000b74 <__addsf3>
 8011600:	4631      	mov	r1, r6
 8011602:	f7ef fbbf 	bl	8000d84 <__aeabi_fmul>
 8011606:	494e      	ldr	r1, [pc, #312]	; (8011740 <__ieee754_asinf+0x25c>)
 8011608:	f7ef fab2 	bl	8000b70 <__aeabi_fsub>
 801160c:	4631      	mov	r1, r6
 801160e:	f7ef fbb9 	bl	8000d84 <__aeabi_fmul>
 8011612:	494c      	ldr	r1, [pc, #304]	; (8011744 <__ieee754_asinf+0x260>)
 8011614:	f7ef faae 	bl	8000b74 <__addsf3>
 8011618:	4631      	mov	r1, r6
 801161a:	f7ef fbb3 	bl	8000d84 <__aeabi_fmul>
 801161e:	494a      	ldr	r1, [pc, #296]	; (8011748 <__ieee754_asinf+0x264>)
 8011620:	f7ef faa6 	bl	8000b70 <__aeabi_fsub>
 8011624:	4631      	mov	r1, r6
 8011626:	f7ef fbad 	bl	8000d84 <__aeabi_fmul>
 801162a:	4948      	ldr	r1, [pc, #288]	; (801174c <__ieee754_asinf+0x268>)
 801162c:	f7ef faa2 	bl	8000b74 <__addsf3>
 8011630:	4631      	mov	r1, r6
 8011632:	f7ef fba7 	bl	8000d84 <__aeabi_fmul>
 8011636:	4946      	ldr	r1, [pc, #280]	; (8011750 <__ieee754_asinf+0x26c>)
 8011638:	4681      	mov	r9, r0
 801163a:	4630      	mov	r0, r6
 801163c:	f7ef fba2 	bl	8000d84 <__aeabi_fmul>
 8011640:	4944      	ldr	r1, [pc, #272]	; (8011754 <__ieee754_asinf+0x270>)
 8011642:	f7ef fa95 	bl	8000b70 <__aeabi_fsub>
 8011646:	4631      	mov	r1, r6
 8011648:	f7ef fb9c 	bl	8000d84 <__aeabi_fmul>
 801164c:	4942      	ldr	r1, [pc, #264]	; (8011758 <__ieee754_asinf+0x274>)
 801164e:	f7ef fa91 	bl	8000b74 <__addsf3>
 8011652:	4631      	mov	r1, r6
 8011654:	f7ef fb96 	bl	8000d84 <__aeabi_fmul>
 8011658:	4940      	ldr	r1, [pc, #256]	; (801175c <__ieee754_asinf+0x278>)
 801165a:	f7ef fa89 	bl	8000b70 <__aeabi_fsub>
 801165e:	4631      	mov	r1, r6
 8011660:	f7ef fb90 	bl	8000d84 <__aeabi_fmul>
 8011664:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8011668:	f7ef fa84 	bl	8000b74 <__addsf3>
 801166c:	4682      	mov	sl, r0
 801166e:	4630      	mov	r0, r6
 8011670:	f000 fa60 	bl	8011b34 <__ieee754_sqrtf>
 8011674:	4b3a      	ldr	r3, [pc, #232]	; (8011760 <__ieee754_asinf+0x27c>)
 8011676:	4607      	mov	r7, r0
 8011678:	4598      	cmp	r8, r3
 801167a:	dd1a      	ble.n	80116b2 <__ieee754_asinf+0x1ce>
 801167c:	4651      	mov	r1, sl
 801167e:	4648      	mov	r0, r9
 8011680:	f7ef fc34 	bl	8000eec <__aeabi_fdiv>
 8011684:	4639      	mov	r1, r7
 8011686:	f7ef fb7d 	bl	8000d84 <__aeabi_fmul>
 801168a:	4639      	mov	r1, r7
 801168c:	f7ef fa72 	bl	8000b74 <__addsf3>
 8011690:	4601      	mov	r1, r0
 8011692:	f7ef fa6f 	bl	8000b74 <__addsf3>
 8011696:	4933      	ldr	r1, [pc, #204]	; (8011764 <__ieee754_asinf+0x280>)
 8011698:	f7ef fa6c 	bl	8000b74 <__addsf3>
 801169c:	4601      	mov	r1, r0
 801169e:	4823      	ldr	r0, [pc, #140]	; (801172c <__ieee754_asinf+0x248>)
 80116a0:	f7ef fa66 	bl	8000b70 <__aeabi_fsub>
 80116a4:	2d00      	cmp	r5, #0
 80116a6:	4604      	mov	r4, r0
 80116a8:	f73f af4a 	bgt.w	8011540 <__ieee754_asinf+0x5c>
 80116ac:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80116b0:	e735      	b.n	801151e <__ieee754_asinf+0x3a>
 80116b2:	4601      	mov	r1, r0
 80116b4:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 80116b8:	f7ef fa5c 	bl	8000b74 <__addsf3>
 80116bc:	4651      	mov	r1, sl
 80116be:	4604      	mov	r4, r0
 80116c0:	4648      	mov	r0, r9
 80116c2:	f7ef fc13 	bl	8000eec <__aeabi_fdiv>
 80116c6:	4601      	mov	r1, r0
 80116c8:	4620      	mov	r0, r4
 80116ca:	f7ef fb5b 	bl	8000d84 <__aeabi_fmul>
 80116ce:	f028 080f 	bic.w	r8, r8, #15
 80116d2:	4681      	mov	r9, r0
 80116d4:	4641      	mov	r1, r8
 80116d6:	4640      	mov	r0, r8
 80116d8:	f7ef fb54 	bl	8000d84 <__aeabi_fmul>
 80116dc:	4601      	mov	r1, r0
 80116de:	4630      	mov	r0, r6
 80116e0:	f7ef fa46 	bl	8000b70 <__aeabi_fsub>
 80116e4:	4641      	mov	r1, r8
 80116e6:	4604      	mov	r4, r0
 80116e8:	4638      	mov	r0, r7
 80116ea:	f7ef fa43 	bl	8000b74 <__addsf3>
 80116ee:	4601      	mov	r1, r0
 80116f0:	4620      	mov	r0, r4
 80116f2:	f7ef fbfb 	bl	8000eec <__aeabi_fdiv>
 80116f6:	4601      	mov	r1, r0
 80116f8:	f7ef fa3c 	bl	8000b74 <__addsf3>
 80116fc:	4601      	mov	r1, r0
 80116fe:	480c      	ldr	r0, [pc, #48]	; (8011730 <__ieee754_asinf+0x24c>)
 8011700:	f7ef fa36 	bl	8000b70 <__aeabi_fsub>
 8011704:	4601      	mov	r1, r0
 8011706:	4648      	mov	r0, r9
 8011708:	f7ef fa32 	bl	8000b70 <__aeabi_fsub>
 801170c:	4641      	mov	r1, r8
 801170e:	4604      	mov	r4, r0
 8011710:	4640      	mov	r0, r8
 8011712:	f7ef fa2f 	bl	8000b74 <__addsf3>
 8011716:	4601      	mov	r1, r0
 8011718:	4813      	ldr	r0, [pc, #76]	; (8011768 <__ieee754_asinf+0x284>)
 801171a:	f7ef fa29 	bl	8000b70 <__aeabi_fsub>
 801171e:	4601      	mov	r1, r0
 8011720:	4620      	mov	r0, r4
 8011722:	f7ef fa25 	bl	8000b70 <__aeabi_fsub>
 8011726:	4601      	mov	r1, r0
 8011728:	480f      	ldr	r0, [pc, #60]	; (8011768 <__ieee754_asinf+0x284>)
 801172a:	e7b9      	b.n	80116a0 <__ieee754_asinf+0x1bc>
 801172c:	3fc90fdb 	.word	0x3fc90fdb
 8011730:	b33bbd2e 	.word	0xb33bbd2e
 8011734:	7149f2ca 	.word	0x7149f2ca
 8011738:	3811ef08 	.word	0x3811ef08
 801173c:	3a4f7f04 	.word	0x3a4f7f04
 8011740:	3d241146 	.word	0x3d241146
 8011744:	3e4e0aa8 	.word	0x3e4e0aa8
 8011748:	3ea6b090 	.word	0x3ea6b090
 801174c:	3e2aaaab 	.word	0x3e2aaaab
 8011750:	3d9dc62e 	.word	0x3d9dc62e
 8011754:	3f303361 	.word	0x3f303361
 8011758:	4001572d 	.word	0x4001572d
 801175c:	4019d139 	.word	0x4019d139
 8011760:	3f799999 	.word	0x3f799999
 8011764:	333bbd2e 	.word	0x333bbd2e
 8011768:	3f490fdb 	.word	0x3f490fdb

0801176c <__ieee754_atan2f>:
 801176c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801176e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011772:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8011776:	4603      	mov	r3, r0
 8011778:	dc05      	bgt.n	8011786 <__ieee754_atan2f+0x1a>
 801177a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 801177e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8011782:	4607      	mov	r7, r0
 8011784:	dd04      	ble.n	8011790 <__ieee754_atan2f+0x24>
 8011786:	4618      	mov	r0, r3
 8011788:	f7ef f9f4 	bl	8000b74 <__addsf3>
 801178c:	4603      	mov	r3, r0
 801178e:	e011      	b.n	80117b4 <__ieee754_atan2f+0x48>
 8011790:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8011794:	d103      	bne.n	801179e <__ieee754_atan2f+0x32>
 8011796:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801179a:	f000 be7b 	b.w	8012494 <atanf>
 801179e:	178c      	asrs	r4, r1, #30
 80117a0:	f004 0402 	and.w	r4, r4, #2
 80117a4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80117a8:	b932      	cbnz	r2, 80117b8 <__ieee754_atan2f+0x4c>
 80117aa:	2c02      	cmp	r4, #2
 80117ac:	d04c      	beq.n	8011848 <__ieee754_atan2f+0xdc>
 80117ae:	2c03      	cmp	r4, #3
 80117b0:	d100      	bne.n	80117b4 <__ieee754_atan2f+0x48>
 80117b2:	4b29      	ldr	r3, [pc, #164]	; (8011858 <__ieee754_atan2f+0xec>)
 80117b4:	4618      	mov	r0, r3
 80117b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117b8:	b91e      	cbnz	r6, 80117c2 <__ieee754_atan2f+0x56>
 80117ba:	2f00      	cmp	r7, #0
 80117bc:	da4a      	bge.n	8011854 <__ieee754_atan2f+0xe8>
 80117be:	4b27      	ldr	r3, [pc, #156]	; (801185c <__ieee754_atan2f+0xf0>)
 80117c0:	e7f8      	b.n	80117b4 <__ieee754_atan2f+0x48>
 80117c2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80117c6:	d10e      	bne.n	80117e6 <__ieee754_atan2f+0x7a>
 80117c8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80117cc:	f104 34ff 	add.w	r4, r4, #4294967295
 80117d0:	d105      	bne.n	80117de <__ieee754_atan2f+0x72>
 80117d2:	2c02      	cmp	r4, #2
 80117d4:	d83a      	bhi.n	801184c <__ieee754_atan2f+0xe0>
 80117d6:	4b22      	ldr	r3, [pc, #136]	; (8011860 <__ieee754_atan2f+0xf4>)
 80117d8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80117dc:	e7ea      	b.n	80117b4 <__ieee754_atan2f+0x48>
 80117de:	2c02      	cmp	r4, #2
 80117e0:	d836      	bhi.n	8011850 <__ieee754_atan2f+0xe4>
 80117e2:	4b20      	ldr	r3, [pc, #128]	; (8011864 <__ieee754_atan2f+0xf8>)
 80117e4:	e7f8      	b.n	80117d8 <__ieee754_atan2f+0x6c>
 80117e6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80117ea:	d0e6      	beq.n	80117ba <__ieee754_atan2f+0x4e>
 80117ec:	1b92      	subs	r2, r2, r6
 80117ee:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 80117f2:	ea4f 50e2 	mov.w	r0, r2, asr #23
 80117f6:	da17      	bge.n	8011828 <__ieee754_atan2f+0xbc>
 80117f8:	2900      	cmp	r1, #0
 80117fa:	da01      	bge.n	8011800 <__ieee754_atan2f+0x94>
 80117fc:	303c      	adds	r0, #60	; 0x3c
 80117fe:	db15      	blt.n	801182c <__ieee754_atan2f+0xc0>
 8011800:	4618      	mov	r0, r3
 8011802:	f7ef fb73 	bl	8000eec <__aeabi_fdiv>
 8011806:	f000 ff51 	bl	80126ac <fabsf>
 801180a:	f000 fe43 	bl	8012494 <atanf>
 801180e:	4603      	mov	r3, r0
 8011810:	2c01      	cmp	r4, #1
 8011812:	d00d      	beq.n	8011830 <__ieee754_atan2f+0xc4>
 8011814:	2c02      	cmp	r4, #2
 8011816:	d00e      	beq.n	8011836 <__ieee754_atan2f+0xca>
 8011818:	2c00      	cmp	r4, #0
 801181a:	d0cb      	beq.n	80117b4 <__ieee754_atan2f+0x48>
 801181c:	4912      	ldr	r1, [pc, #72]	; (8011868 <__ieee754_atan2f+0xfc>)
 801181e:	4618      	mov	r0, r3
 8011820:	f7ef f9a8 	bl	8000b74 <__addsf3>
 8011824:	4911      	ldr	r1, [pc, #68]	; (801186c <__ieee754_atan2f+0x100>)
 8011826:	e00c      	b.n	8011842 <__ieee754_atan2f+0xd6>
 8011828:	4b11      	ldr	r3, [pc, #68]	; (8011870 <__ieee754_atan2f+0x104>)
 801182a:	e7f1      	b.n	8011810 <__ieee754_atan2f+0xa4>
 801182c:	2300      	movs	r3, #0
 801182e:	e7ef      	b.n	8011810 <__ieee754_atan2f+0xa4>
 8011830:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011834:	e7be      	b.n	80117b4 <__ieee754_atan2f+0x48>
 8011836:	490c      	ldr	r1, [pc, #48]	; (8011868 <__ieee754_atan2f+0xfc>)
 8011838:	4618      	mov	r0, r3
 801183a:	f7ef f99b 	bl	8000b74 <__addsf3>
 801183e:	4601      	mov	r1, r0
 8011840:	480a      	ldr	r0, [pc, #40]	; (801186c <__ieee754_atan2f+0x100>)
 8011842:	f7ef f995 	bl	8000b70 <__aeabi_fsub>
 8011846:	e7a1      	b.n	801178c <__ieee754_atan2f+0x20>
 8011848:	4b08      	ldr	r3, [pc, #32]	; (801186c <__ieee754_atan2f+0x100>)
 801184a:	e7b3      	b.n	80117b4 <__ieee754_atan2f+0x48>
 801184c:	4b09      	ldr	r3, [pc, #36]	; (8011874 <__ieee754_atan2f+0x108>)
 801184e:	e7b1      	b.n	80117b4 <__ieee754_atan2f+0x48>
 8011850:	2300      	movs	r3, #0
 8011852:	e7af      	b.n	80117b4 <__ieee754_atan2f+0x48>
 8011854:	4b06      	ldr	r3, [pc, #24]	; (8011870 <__ieee754_atan2f+0x104>)
 8011856:	e7ad      	b.n	80117b4 <__ieee754_atan2f+0x48>
 8011858:	c0490fdb 	.word	0xc0490fdb
 801185c:	bfc90fdb 	.word	0xbfc90fdb
 8011860:	08012d48 	.word	0x08012d48
 8011864:	08012d54 	.word	0x08012d54
 8011868:	33bbbd2e 	.word	0x33bbbd2e
 801186c:	40490fdb 	.word	0x40490fdb
 8011870:	3fc90fdb 	.word	0x3fc90fdb
 8011874:	3f490fdb 	.word	0x3f490fdb

08011878 <__ieee754_rem_pio2f>:
 8011878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801187c:	4aa0      	ldr	r2, [pc, #640]	; (8011b00 <__ieee754_rem_pio2f+0x288>)
 801187e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8011882:	4296      	cmp	r6, r2
 8011884:	460c      	mov	r4, r1
 8011886:	4682      	mov	sl, r0
 8011888:	b087      	sub	sp, #28
 801188a:	dc04      	bgt.n	8011896 <__ieee754_rem_pio2f+0x1e>
 801188c:	2300      	movs	r3, #0
 801188e:	6008      	str	r0, [r1, #0]
 8011890:	604b      	str	r3, [r1, #4]
 8011892:	2500      	movs	r5, #0
 8011894:	e01a      	b.n	80118cc <__ieee754_rem_pio2f+0x54>
 8011896:	4a9b      	ldr	r2, [pc, #620]	; (8011b04 <__ieee754_rem_pio2f+0x28c>)
 8011898:	4296      	cmp	r6, r2
 801189a:	dc4b      	bgt.n	8011934 <__ieee754_rem_pio2f+0xbc>
 801189c:	2800      	cmp	r0, #0
 801189e:	499a      	ldr	r1, [pc, #616]	; (8011b08 <__ieee754_rem_pio2f+0x290>)
 80118a0:	4f9a      	ldr	r7, [pc, #616]	; (8011b0c <__ieee754_rem_pio2f+0x294>)
 80118a2:	f026 060f 	bic.w	r6, r6, #15
 80118a6:	dd23      	ble.n	80118f0 <__ieee754_rem_pio2f+0x78>
 80118a8:	f7ef f962 	bl	8000b70 <__aeabi_fsub>
 80118ac:	42be      	cmp	r6, r7
 80118ae:	4605      	mov	r5, r0
 80118b0:	d010      	beq.n	80118d4 <__ieee754_rem_pio2f+0x5c>
 80118b2:	4997      	ldr	r1, [pc, #604]	; (8011b10 <__ieee754_rem_pio2f+0x298>)
 80118b4:	f7ef f95c 	bl	8000b70 <__aeabi_fsub>
 80118b8:	4601      	mov	r1, r0
 80118ba:	6020      	str	r0, [r4, #0]
 80118bc:	4628      	mov	r0, r5
 80118be:	f7ef f957 	bl	8000b70 <__aeabi_fsub>
 80118c2:	4993      	ldr	r1, [pc, #588]	; (8011b10 <__ieee754_rem_pio2f+0x298>)
 80118c4:	f7ef f954 	bl	8000b70 <__aeabi_fsub>
 80118c8:	2501      	movs	r5, #1
 80118ca:	6060      	str	r0, [r4, #4]
 80118cc:	4628      	mov	r0, r5
 80118ce:	b007      	add	sp, #28
 80118d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118d4:	498f      	ldr	r1, [pc, #572]	; (8011b14 <__ieee754_rem_pio2f+0x29c>)
 80118d6:	f7ef f94b 	bl	8000b70 <__aeabi_fsub>
 80118da:	498f      	ldr	r1, [pc, #572]	; (8011b18 <__ieee754_rem_pio2f+0x2a0>)
 80118dc:	4605      	mov	r5, r0
 80118de:	f7ef f947 	bl	8000b70 <__aeabi_fsub>
 80118e2:	4601      	mov	r1, r0
 80118e4:	6020      	str	r0, [r4, #0]
 80118e6:	4628      	mov	r0, r5
 80118e8:	f7ef f942 	bl	8000b70 <__aeabi_fsub>
 80118ec:	498a      	ldr	r1, [pc, #552]	; (8011b18 <__ieee754_rem_pio2f+0x2a0>)
 80118ee:	e7e9      	b.n	80118c4 <__ieee754_rem_pio2f+0x4c>
 80118f0:	f7ef f940 	bl	8000b74 <__addsf3>
 80118f4:	42be      	cmp	r6, r7
 80118f6:	4605      	mov	r5, r0
 80118f8:	d00e      	beq.n	8011918 <__ieee754_rem_pio2f+0xa0>
 80118fa:	4985      	ldr	r1, [pc, #532]	; (8011b10 <__ieee754_rem_pio2f+0x298>)
 80118fc:	f7ef f93a 	bl	8000b74 <__addsf3>
 8011900:	4601      	mov	r1, r0
 8011902:	6020      	str	r0, [r4, #0]
 8011904:	4628      	mov	r0, r5
 8011906:	f7ef f933 	bl	8000b70 <__aeabi_fsub>
 801190a:	4981      	ldr	r1, [pc, #516]	; (8011b10 <__ieee754_rem_pio2f+0x298>)
 801190c:	f7ef f932 	bl	8000b74 <__addsf3>
 8011910:	f04f 35ff 	mov.w	r5, #4294967295
 8011914:	6060      	str	r0, [r4, #4]
 8011916:	e7d9      	b.n	80118cc <__ieee754_rem_pio2f+0x54>
 8011918:	497e      	ldr	r1, [pc, #504]	; (8011b14 <__ieee754_rem_pio2f+0x29c>)
 801191a:	f7ef f92b 	bl	8000b74 <__addsf3>
 801191e:	497e      	ldr	r1, [pc, #504]	; (8011b18 <__ieee754_rem_pio2f+0x2a0>)
 8011920:	4605      	mov	r5, r0
 8011922:	f7ef f927 	bl	8000b74 <__addsf3>
 8011926:	4601      	mov	r1, r0
 8011928:	6020      	str	r0, [r4, #0]
 801192a:	4628      	mov	r0, r5
 801192c:	f7ef f920 	bl	8000b70 <__aeabi_fsub>
 8011930:	4979      	ldr	r1, [pc, #484]	; (8011b18 <__ieee754_rem_pio2f+0x2a0>)
 8011932:	e7eb      	b.n	801190c <__ieee754_rem_pio2f+0x94>
 8011934:	4a79      	ldr	r2, [pc, #484]	; (8011b1c <__ieee754_rem_pio2f+0x2a4>)
 8011936:	4296      	cmp	r6, r2
 8011938:	f300 8091 	bgt.w	8011a5e <__ieee754_rem_pio2f+0x1e6>
 801193c:	f000 feb6 	bl	80126ac <fabsf>
 8011940:	4977      	ldr	r1, [pc, #476]	; (8011b20 <__ieee754_rem_pio2f+0x2a8>)
 8011942:	4607      	mov	r7, r0
 8011944:	f7ef fa1e 	bl	8000d84 <__aeabi_fmul>
 8011948:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801194c:	f7ef f912 	bl	8000b74 <__addsf3>
 8011950:	f7ef fbf4 	bl	800113c <__aeabi_f2iz>
 8011954:	4605      	mov	r5, r0
 8011956:	f7ef f9c1 	bl	8000cdc <__aeabi_i2f>
 801195a:	496b      	ldr	r1, [pc, #428]	; (8011b08 <__ieee754_rem_pio2f+0x290>)
 801195c:	4681      	mov	r9, r0
 801195e:	f7ef fa11 	bl	8000d84 <__aeabi_fmul>
 8011962:	4601      	mov	r1, r0
 8011964:	4638      	mov	r0, r7
 8011966:	f7ef f903 	bl	8000b70 <__aeabi_fsub>
 801196a:	4969      	ldr	r1, [pc, #420]	; (8011b10 <__ieee754_rem_pio2f+0x298>)
 801196c:	4680      	mov	r8, r0
 801196e:	4648      	mov	r0, r9
 8011970:	f7ef fa08 	bl	8000d84 <__aeabi_fmul>
 8011974:	2d1f      	cmp	r5, #31
 8011976:	4607      	mov	r7, r0
 8011978:	dc0c      	bgt.n	8011994 <__ieee754_rem_pio2f+0x11c>
 801197a:	4a6a      	ldr	r2, [pc, #424]	; (8011b24 <__ieee754_rem_pio2f+0x2ac>)
 801197c:	1e69      	subs	r1, r5, #1
 801197e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8011982:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 8011986:	4293      	cmp	r3, r2
 8011988:	d004      	beq.n	8011994 <__ieee754_rem_pio2f+0x11c>
 801198a:	4639      	mov	r1, r7
 801198c:	4640      	mov	r0, r8
 801198e:	f7ef f8ef 	bl	8000b70 <__aeabi_fsub>
 8011992:	e00b      	b.n	80119ac <__ieee754_rem_pio2f+0x134>
 8011994:	4639      	mov	r1, r7
 8011996:	4640      	mov	r0, r8
 8011998:	f7ef f8ea 	bl	8000b70 <__aeabi_fsub>
 801199c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80119a0:	ea4f 5be6 	mov.w	fp, r6, asr #23
 80119a4:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 80119a8:	2e08      	cmp	r6, #8
 80119aa:	dc01      	bgt.n	80119b0 <__ieee754_rem_pio2f+0x138>
 80119ac:	6020      	str	r0, [r4, #0]
 80119ae:	e026      	b.n	80119fe <__ieee754_rem_pio2f+0x186>
 80119b0:	4958      	ldr	r1, [pc, #352]	; (8011b14 <__ieee754_rem_pio2f+0x29c>)
 80119b2:	4648      	mov	r0, r9
 80119b4:	f7ef f9e6 	bl	8000d84 <__aeabi_fmul>
 80119b8:	4607      	mov	r7, r0
 80119ba:	4601      	mov	r1, r0
 80119bc:	4640      	mov	r0, r8
 80119be:	f7ef f8d7 	bl	8000b70 <__aeabi_fsub>
 80119c2:	4601      	mov	r1, r0
 80119c4:	4606      	mov	r6, r0
 80119c6:	4640      	mov	r0, r8
 80119c8:	f7ef f8d2 	bl	8000b70 <__aeabi_fsub>
 80119cc:	4639      	mov	r1, r7
 80119ce:	f7ef f8cf 	bl	8000b70 <__aeabi_fsub>
 80119d2:	4607      	mov	r7, r0
 80119d4:	4950      	ldr	r1, [pc, #320]	; (8011b18 <__ieee754_rem_pio2f+0x2a0>)
 80119d6:	4648      	mov	r0, r9
 80119d8:	f7ef f9d4 	bl	8000d84 <__aeabi_fmul>
 80119dc:	4639      	mov	r1, r7
 80119de:	f7ef f8c7 	bl	8000b70 <__aeabi_fsub>
 80119e2:	4601      	mov	r1, r0
 80119e4:	4607      	mov	r7, r0
 80119e6:	4630      	mov	r0, r6
 80119e8:	f7ef f8c2 	bl	8000b70 <__aeabi_fsub>
 80119ec:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80119f0:	ebab 0b03 	sub.w	fp, fp, r3
 80119f4:	f1bb 0f19 	cmp.w	fp, #25
 80119f8:	dc16      	bgt.n	8011a28 <__ieee754_rem_pio2f+0x1b0>
 80119fa:	46b0      	mov	r8, r6
 80119fc:	6020      	str	r0, [r4, #0]
 80119fe:	6826      	ldr	r6, [r4, #0]
 8011a00:	4640      	mov	r0, r8
 8011a02:	4631      	mov	r1, r6
 8011a04:	f7ef f8b4 	bl	8000b70 <__aeabi_fsub>
 8011a08:	4639      	mov	r1, r7
 8011a0a:	f7ef f8b1 	bl	8000b70 <__aeabi_fsub>
 8011a0e:	f1ba 0f00 	cmp.w	sl, #0
 8011a12:	6060      	str	r0, [r4, #4]
 8011a14:	f6bf af5a 	bge.w	80118cc <__ieee754_rem_pio2f+0x54>
 8011a18:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8011a1c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8011a20:	6026      	str	r6, [r4, #0]
 8011a22:	6060      	str	r0, [r4, #4]
 8011a24:	426d      	negs	r5, r5
 8011a26:	e751      	b.n	80118cc <__ieee754_rem_pio2f+0x54>
 8011a28:	493f      	ldr	r1, [pc, #252]	; (8011b28 <__ieee754_rem_pio2f+0x2b0>)
 8011a2a:	4648      	mov	r0, r9
 8011a2c:	f7ef f9aa 	bl	8000d84 <__aeabi_fmul>
 8011a30:	4607      	mov	r7, r0
 8011a32:	4601      	mov	r1, r0
 8011a34:	4630      	mov	r0, r6
 8011a36:	f7ef f89b 	bl	8000b70 <__aeabi_fsub>
 8011a3a:	4601      	mov	r1, r0
 8011a3c:	4680      	mov	r8, r0
 8011a3e:	4630      	mov	r0, r6
 8011a40:	f7ef f896 	bl	8000b70 <__aeabi_fsub>
 8011a44:	4639      	mov	r1, r7
 8011a46:	f7ef f893 	bl	8000b70 <__aeabi_fsub>
 8011a4a:	4606      	mov	r6, r0
 8011a4c:	4937      	ldr	r1, [pc, #220]	; (8011b2c <__ieee754_rem_pio2f+0x2b4>)
 8011a4e:	4648      	mov	r0, r9
 8011a50:	f7ef f998 	bl	8000d84 <__aeabi_fmul>
 8011a54:	4631      	mov	r1, r6
 8011a56:	f7ef f88b 	bl	8000b70 <__aeabi_fsub>
 8011a5a:	4607      	mov	r7, r0
 8011a5c:	e795      	b.n	801198a <__ieee754_rem_pio2f+0x112>
 8011a5e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8011a62:	db05      	blt.n	8011a70 <__ieee754_rem_pio2f+0x1f8>
 8011a64:	4601      	mov	r1, r0
 8011a66:	f7ef f883 	bl	8000b70 <__aeabi_fsub>
 8011a6a:	6060      	str	r0, [r4, #4]
 8011a6c:	6020      	str	r0, [r4, #0]
 8011a6e:	e710      	b.n	8011892 <__ieee754_rem_pio2f+0x1a>
 8011a70:	15f7      	asrs	r7, r6, #23
 8011a72:	3f86      	subs	r7, #134	; 0x86
 8011a74:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8011a78:	4630      	mov	r0, r6
 8011a7a:	f7ef fb5f 	bl	800113c <__aeabi_f2iz>
 8011a7e:	f7ef f92d 	bl	8000cdc <__aeabi_i2f>
 8011a82:	4601      	mov	r1, r0
 8011a84:	9003      	str	r0, [sp, #12]
 8011a86:	4630      	mov	r0, r6
 8011a88:	f7ef f872 	bl	8000b70 <__aeabi_fsub>
 8011a8c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8011a90:	f7ef f978 	bl	8000d84 <__aeabi_fmul>
 8011a94:	4606      	mov	r6, r0
 8011a96:	f7ef fb51 	bl	800113c <__aeabi_f2iz>
 8011a9a:	f7ef f91f 	bl	8000cdc <__aeabi_i2f>
 8011a9e:	4601      	mov	r1, r0
 8011aa0:	9004      	str	r0, [sp, #16]
 8011aa2:	4605      	mov	r5, r0
 8011aa4:	4630      	mov	r0, r6
 8011aa6:	f7ef f863 	bl	8000b70 <__aeabi_fsub>
 8011aaa:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8011aae:	f7ef f969 	bl	8000d84 <__aeabi_fmul>
 8011ab2:	2100      	movs	r1, #0
 8011ab4:	9005      	str	r0, [sp, #20]
 8011ab6:	f7ef faf9 	bl	80010ac <__aeabi_fcmpeq>
 8011aba:	b1f0      	cbz	r0, 8011afa <__ieee754_rem_pio2f+0x282>
 8011abc:	2100      	movs	r1, #0
 8011abe:	4628      	mov	r0, r5
 8011ac0:	f7ef faf4 	bl	80010ac <__aeabi_fcmpeq>
 8011ac4:	2800      	cmp	r0, #0
 8011ac6:	bf14      	ite	ne
 8011ac8:	2301      	movne	r3, #1
 8011aca:	2302      	moveq	r3, #2
 8011acc:	4a18      	ldr	r2, [pc, #96]	; (8011b30 <__ieee754_rem_pio2f+0x2b8>)
 8011ace:	4621      	mov	r1, r4
 8011ad0:	9201      	str	r2, [sp, #4]
 8011ad2:	2202      	movs	r2, #2
 8011ad4:	a803      	add	r0, sp, #12
 8011ad6:	9200      	str	r2, [sp, #0]
 8011ad8:	463a      	mov	r2, r7
 8011ada:	f000 f8fd 	bl	8011cd8 <__kernel_rem_pio2f>
 8011ade:	f1ba 0f00 	cmp.w	sl, #0
 8011ae2:	4605      	mov	r5, r0
 8011ae4:	f6bf aef2 	bge.w	80118cc <__ieee754_rem_pio2f+0x54>
 8011ae8:	6823      	ldr	r3, [r4, #0]
 8011aea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011aee:	6023      	str	r3, [r4, #0]
 8011af0:	6863      	ldr	r3, [r4, #4]
 8011af2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011af6:	6063      	str	r3, [r4, #4]
 8011af8:	e794      	b.n	8011a24 <__ieee754_rem_pio2f+0x1ac>
 8011afa:	2303      	movs	r3, #3
 8011afc:	e7e6      	b.n	8011acc <__ieee754_rem_pio2f+0x254>
 8011afe:	bf00      	nop
 8011b00:	3f490fd8 	.word	0x3f490fd8
 8011b04:	4016cbe3 	.word	0x4016cbe3
 8011b08:	3fc90f80 	.word	0x3fc90f80
 8011b0c:	3fc90fd0 	.word	0x3fc90fd0
 8011b10:	37354443 	.word	0x37354443
 8011b14:	37354400 	.word	0x37354400
 8011b18:	2e85a308 	.word	0x2e85a308
 8011b1c:	43490f80 	.word	0x43490f80
 8011b20:	3f22f984 	.word	0x3f22f984
 8011b24:	08012d60 	.word	0x08012d60
 8011b28:	2e85a300 	.word	0x2e85a300
 8011b2c:	248d3132 	.word	0x248d3132
 8011b30:	08012de0 	.word	0x08012de0

08011b34 <__ieee754_sqrtf>:
 8011b34:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8011b38:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8011b3c:	b570      	push	{r4, r5, r6, lr}
 8011b3e:	4603      	mov	r3, r0
 8011b40:	4604      	mov	r4, r0
 8011b42:	d309      	bcc.n	8011b58 <__ieee754_sqrtf+0x24>
 8011b44:	4601      	mov	r1, r0
 8011b46:	f7ef f91d 	bl	8000d84 <__aeabi_fmul>
 8011b4a:	4601      	mov	r1, r0
 8011b4c:	4620      	mov	r0, r4
 8011b4e:	f7ef f811 	bl	8000b74 <__addsf3>
 8011b52:	4604      	mov	r4, r0
 8011b54:	4620      	mov	r0, r4
 8011b56:	bd70      	pop	{r4, r5, r6, pc}
 8011b58:	2a00      	cmp	r2, #0
 8011b5a:	d0fb      	beq.n	8011b54 <__ieee754_sqrtf+0x20>
 8011b5c:	2800      	cmp	r0, #0
 8011b5e:	da06      	bge.n	8011b6e <__ieee754_sqrtf+0x3a>
 8011b60:	4601      	mov	r1, r0
 8011b62:	f7ef f805 	bl	8000b70 <__aeabi_fsub>
 8011b66:	4601      	mov	r1, r0
 8011b68:	f7ef f9c0 	bl	8000eec <__aeabi_fdiv>
 8011b6c:	e7f1      	b.n	8011b52 <__ieee754_sqrtf+0x1e>
 8011b6e:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8011b72:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8011b76:	d029      	beq.n	8011bcc <__ieee754_sqrtf+0x98>
 8011b78:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8011b7c:	07cb      	lsls	r3, r1, #31
 8011b7e:	f04f 0300 	mov.w	r3, #0
 8011b82:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8011b86:	f04f 0419 	mov.w	r4, #25
 8011b8a:	461e      	mov	r6, r3
 8011b8c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8011b90:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8011b94:	bf58      	it	pl
 8011b96:	0052      	lslpl	r2, r2, #1
 8011b98:	1040      	asrs	r0, r0, #1
 8011b9a:	0052      	lsls	r2, r2, #1
 8011b9c:	1875      	adds	r5, r6, r1
 8011b9e:	4295      	cmp	r5, r2
 8011ba0:	bfde      	ittt	le
 8011ba2:	186e      	addle	r6, r5, r1
 8011ba4:	1b52      	suble	r2, r2, r5
 8011ba6:	185b      	addle	r3, r3, r1
 8011ba8:	3c01      	subs	r4, #1
 8011baa:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011bae:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011bb2:	d1f3      	bne.n	8011b9c <__ieee754_sqrtf+0x68>
 8011bb4:	b112      	cbz	r2, 8011bbc <__ieee754_sqrtf+0x88>
 8011bb6:	3301      	adds	r3, #1
 8011bb8:	f023 0301 	bic.w	r3, r3, #1
 8011bbc:	105c      	asrs	r4, r3, #1
 8011bbe:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8011bc2:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8011bc6:	e7c5      	b.n	8011b54 <__ieee754_sqrtf+0x20>
 8011bc8:	005b      	lsls	r3, r3, #1
 8011bca:	3201      	adds	r2, #1
 8011bcc:	0218      	lsls	r0, r3, #8
 8011bce:	d5fb      	bpl.n	8011bc8 <__ieee754_sqrtf+0x94>
 8011bd0:	3a01      	subs	r2, #1
 8011bd2:	1a89      	subs	r1, r1, r2
 8011bd4:	e7d0      	b.n	8011b78 <__ieee754_sqrtf+0x44>
	...

08011bd8 <__kernel_cosf>:
 8011bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bdc:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8011be0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8011be4:	4606      	mov	r6, r0
 8011be6:	4688      	mov	r8, r1
 8011be8:	da03      	bge.n	8011bf2 <__kernel_cosf+0x1a>
 8011bea:	f7ef faa7 	bl	800113c <__aeabi_f2iz>
 8011bee:	2800      	cmp	r0, #0
 8011bf0:	d05c      	beq.n	8011cac <__kernel_cosf+0xd4>
 8011bf2:	4631      	mov	r1, r6
 8011bf4:	4630      	mov	r0, r6
 8011bf6:	f7ef f8c5 	bl	8000d84 <__aeabi_fmul>
 8011bfa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8011bfe:	4605      	mov	r5, r0
 8011c00:	f7ef f8c0 	bl	8000d84 <__aeabi_fmul>
 8011c04:	492b      	ldr	r1, [pc, #172]	; (8011cb4 <__kernel_cosf+0xdc>)
 8011c06:	4607      	mov	r7, r0
 8011c08:	4628      	mov	r0, r5
 8011c0a:	f7ef f8bb 	bl	8000d84 <__aeabi_fmul>
 8011c0e:	492a      	ldr	r1, [pc, #168]	; (8011cb8 <__kernel_cosf+0xe0>)
 8011c10:	f7ee ffb0 	bl	8000b74 <__addsf3>
 8011c14:	4629      	mov	r1, r5
 8011c16:	f7ef f8b5 	bl	8000d84 <__aeabi_fmul>
 8011c1a:	4928      	ldr	r1, [pc, #160]	; (8011cbc <__kernel_cosf+0xe4>)
 8011c1c:	f7ee ffa8 	bl	8000b70 <__aeabi_fsub>
 8011c20:	4629      	mov	r1, r5
 8011c22:	f7ef f8af 	bl	8000d84 <__aeabi_fmul>
 8011c26:	4926      	ldr	r1, [pc, #152]	; (8011cc0 <__kernel_cosf+0xe8>)
 8011c28:	f7ee ffa4 	bl	8000b74 <__addsf3>
 8011c2c:	4629      	mov	r1, r5
 8011c2e:	f7ef f8a9 	bl	8000d84 <__aeabi_fmul>
 8011c32:	4924      	ldr	r1, [pc, #144]	; (8011cc4 <__kernel_cosf+0xec>)
 8011c34:	f7ee ff9c 	bl	8000b70 <__aeabi_fsub>
 8011c38:	4629      	mov	r1, r5
 8011c3a:	f7ef f8a3 	bl	8000d84 <__aeabi_fmul>
 8011c3e:	4922      	ldr	r1, [pc, #136]	; (8011cc8 <__kernel_cosf+0xf0>)
 8011c40:	f7ee ff98 	bl	8000b74 <__addsf3>
 8011c44:	4629      	mov	r1, r5
 8011c46:	f7ef f89d 	bl	8000d84 <__aeabi_fmul>
 8011c4a:	4629      	mov	r1, r5
 8011c4c:	f7ef f89a 	bl	8000d84 <__aeabi_fmul>
 8011c50:	4641      	mov	r1, r8
 8011c52:	4605      	mov	r5, r0
 8011c54:	4630      	mov	r0, r6
 8011c56:	f7ef f895 	bl	8000d84 <__aeabi_fmul>
 8011c5a:	4601      	mov	r1, r0
 8011c5c:	4628      	mov	r0, r5
 8011c5e:	f7ee ff87 	bl	8000b70 <__aeabi_fsub>
 8011c62:	4b1a      	ldr	r3, [pc, #104]	; (8011ccc <__kernel_cosf+0xf4>)
 8011c64:	4605      	mov	r5, r0
 8011c66:	429c      	cmp	r4, r3
 8011c68:	dc0a      	bgt.n	8011c80 <__kernel_cosf+0xa8>
 8011c6a:	4601      	mov	r1, r0
 8011c6c:	4638      	mov	r0, r7
 8011c6e:	f7ee ff7f 	bl	8000b70 <__aeabi_fsub>
 8011c72:	4601      	mov	r1, r0
 8011c74:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8011c78:	f7ee ff7a 	bl	8000b70 <__aeabi_fsub>
 8011c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c80:	4b13      	ldr	r3, [pc, #76]	; (8011cd0 <__kernel_cosf+0xf8>)
 8011c82:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8011c86:	429c      	cmp	r4, r3
 8011c88:	bfcc      	ite	gt
 8011c8a:	4c12      	ldrgt	r4, [pc, #72]	; (8011cd4 <__kernel_cosf+0xfc>)
 8011c8c:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8011c90:	4621      	mov	r1, r4
 8011c92:	f7ee ff6d 	bl	8000b70 <__aeabi_fsub>
 8011c96:	4621      	mov	r1, r4
 8011c98:	4606      	mov	r6, r0
 8011c9a:	4638      	mov	r0, r7
 8011c9c:	f7ee ff68 	bl	8000b70 <__aeabi_fsub>
 8011ca0:	4629      	mov	r1, r5
 8011ca2:	f7ee ff65 	bl	8000b70 <__aeabi_fsub>
 8011ca6:	4601      	mov	r1, r0
 8011ca8:	4630      	mov	r0, r6
 8011caa:	e7e5      	b.n	8011c78 <__kernel_cosf+0xa0>
 8011cac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8011cb0:	e7e4      	b.n	8011c7c <__kernel_cosf+0xa4>
 8011cb2:	bf00      	nop
 8011cb4:	ad47d74e 	.word	0xad47d74e
 8011cb8:	310f74f6 	.word	0x310f74f6
 8011cbc:	3493f27c 	.word	0x3493f27c
 8011cc0:	37d00d01 	.word	0x37d00d01
 8011cc4:	3ab60b61 	.word	0x3ab60b61
 8011cc8:	3d2aaaab 	.word	0x3d2aaaab
 8011ccc:	3e999999 	.word	0x3e999999
 8011cd0:	3f480000 	.word	0x3f480000
 8011cd4:	3e900000 	.word	0x3e900000

08011cd8 <__kernel_rem_pio2f>:
 8011cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cdc:	b0db      	sub	sp, #364	; 0x16c
 8011cde:	9202      	str	r2, [sp, #8]
 8011ce0:	9304      	str	r3, [sp, #16]
 8011ce2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8011ce4:	4bb2      	ldr	r3, [pc, #712]	; (8011fb0 <__kernel_rem_pio2f+0x2d8>)
 8011ce6:	9005      	str	r0, [sp, #20]
 8011ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cec:	9100      	str	r1, [sp, #0]
 8011cee:	9301      	str	r3, [sp, #4]
 8011cf0:	9b04      	ldr	r3, [sp, #16]
 8011cf2:	3b01      	subs	r3, #1
 8011cf4:	9303      	str	r3, [sp, #12]
 8011cf6:	9b02      	ldr	r3, [sp, #8]
 8011cf8:	1d1a      	adds	r2, r3, #4
 8011cfa:	f2c0 809b 	blt.w	8011e34 <__kernel_rem_pio2f+0x15c>
 8011cfe:	1edc      	subs	r4, r3, #3
 8011d00:	bf48      	it	mi
 8011d02:	1d1c      	addmi	r4, r3, #4
 8011d04:	10e4      	asrs	r4, r4, #3
 8011d06:	2500      	movs	r5, #0
 8011d08:	f04f 0b00 	mov.w	fp, #0
 8011d0c:	1c67      	adds	r7, r4, #1
 8011d0e:	00fb      	lsls	r3, r7, #3
 8011d10:	9306      	str	r3, [sp, #24]
 8011d12:	9b02      	ldr	r3, [sp, #8]
 8011d14:	9a03      	ldr	r2, [sp, #12]
 8011d16:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8011d1a:	9b01      	ldr	r3, [sp, #4]
 8011d1c:	eba4 0802 	sub.w	r8, r4, r2
 8011d20:	eb03 0902 	add.w	r9, r3, r2
 8011d24:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8011d26:	ae1e      	add	r6, sp, #120	; 0x78
 8011d28:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8011d2c:	454d      	cmp	r5, r9
 8011d2e:	f340 8083 	ble.w	8011e38 <__kernel_rem_pio2f+0x160>
 8011d32:	9a04      	ldr	r2, [sp, #16]
 8011d34:	ab1e      	add	r3, sp, #120	; 0x78
 8011d36:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8011d3a:	f04f 0900 	mov.w	r9, #0
 8011d3e:	2300      	movs	r3, #0
 8011d40:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 8011d44:	9a01      	ldr	r2, [sp, #4]
 8011d46:	4591      	cmp	r9, r2
 8011d48:	f340 809e 	ble.w	8011e88 <__kernel_rem_pio2f+0x1b0>
 8011d4c:	4613      	mov	r3, r2
 8011d4e:	aa0a      	add	r2, sp, #40	; 0x28
 8011d50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011d54:	9308      	str	r3, [sp, #32]
 8011d56:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8011d58:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011d5c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011d60:	9307      	str	r3, [sp, #28]
 8011d62:	ac0a      	add	r4, sp, #40	; 0x28
 8011d64:	4626      	mov	r6, r4
 8011d66:	46c3      	mov	fp, r8
 8011d68:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 8011d6c:	ab5a      	add	r3, sp, #360	; 0x168
 8011d6e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8011d72:	f853 5c50 	ldr.w	r5, [r3, #-80]
 8011d76:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 8011d7a:	f1bb 0f00 	cmp.w	fp, #0
 8011d7e:	f300 8088 	bgt.w	8011e92 <__kernel_rem_pio2f+0x1ba>
 8011d82:	4639      	mov	r1, r7
 8011d84:	4628      	mov	r0, r5
 8011d86:	f000 fcd7 	bl	8012738 <scalbnf>
 8011d8a:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8011d8e:	4605      	mov	r5, r0
 8011d90:	f7ee fff8 	bl	8000d84 <__aeabi_fmul>
 8011d94:	f000 fc8e 	bl	80126b4 <floorf>
 8011d98:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8011d9c:	f7ee fff2 	bl	8000d84 <__aeabi_fmul>
 8011da0:	4601      	mov	r1, r0
 8011da2:	4628      	mov	r0, r5
 8011da4:	f7ee fee4 	bl	8000b70 <__aeabi_fsub>
 8011da8:	4605      	mov	r5, r0
 8011daa:	f7ef f9c7 	bl	800113c <__aeabi_f2iz>
 8011dae:	4606      	mov	r6, r0
 8011db0:	f7ee ff94 	bl	8000cdc <__aeabi_i2f>
 8011db4:	4601      	mov	r1, r0
 8011db6:	4628      	mov	r0, r5
 8011db8:	f7ee feda 	bl	8000b70 <__aeabi_fsub>
 8011dbc:	2f00      	cmp	r7, #0
 8011dbe:	4681      	mov	r9, r0
 8011dc0:	f340 8086 	ble.w	8011ed0 <__kernel_rem_pio2f+0x1f8>
 8011dc4:	f108 32ff 	add.w	r2, r8, #4294967295
 8011dc8:	ab0a      	add	r3, sp, #40	; 0x28
 8011dca:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8011dce:	f1c7 0108 	rsb	r1, r7, #8
 8011dd2:	fa45 f301 	asr.w	r3, r5, r1
 8011dd6:	441e      	add	r6, r3
 8011dd8:	408b      	lsls	r3, r1
 8011dda:	1aed      	subs	r5, r5, r3
 8011ddc:	f1c7 0007 	rsb	r0, r7, #7
 8011de0:	ab0a      	add	r3, sp, #40	; 0x28
 8011de2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011de6:	4105      	asrs	r5, r0
 8011de8:	2d00      	cmp	r5, #0
 8011dea:	dd7f      	ble.n	8011eec <__kernel_rem_pio2f+0x214>
 8011dec:	2200      	movs	r2, #0
 8011dee:	4692      	mov	sl, r2
 8011df0:	3601      	adds	r6, #1
 8011df2:	4590      	cmp	r8, r2
 8011df4:	f300 80b0 	bgt.w	8011f58 <__kernel_rem_pio2f+0x280>
 8011df8:	2f00      	cmp	r7, #0
 8011dfa:	dd05      	ble.n	8011e08 <__kernel_rem_pio2f+0x130>
 8011dfc:	2f01      	cmp	r7, #1
 8011dfe:	f000 80bd 	beq.w	8011f7c <__kernel_rem_pio2f+0x2a4>
 8011e02:	2f02      	cmp	r7, #2
 8011e04:	f000 80c5 	beq.w	8011f92 <__kernel_rem_pio2f+0x2ba>
 8011e08:	2d02      	cmp	r5, #2
 8011e0a:	d16f      	bne.n	8011eec <__kernel_rem_pio2f+0x214>
 8011e0c:	4649      	mov	r1, r9
 8011e0e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8011e12:	f7ee fead 	bl	8000b70 <__aeabi_fsub>
 8011e16:	4681      	mov	r9, r0
 8011e18:	f1ba 0f00 	cmp.w	sl, #0
 8011e1c:	d066      	beq.n	8011eec <__kernel_rem_pio2f+0x214>
 8011e1e:	4639      	mov	r1, r7
 8011e20:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8011e24:	f000 fc88 	bl	8012738 <scalbnf>
 8011e28:	4601      	mov	r1, r0
 8011e2a:	4648      	mov	r0, r9
 8011e2c:	f7ee fea0 	bl	8000b70 <__aeabi_fsub>
 8011e30:	4681      	mov	r9, r0
 8011e32:	e05b      	b.n	8011eec <__kernel_rem_pio2f+0x214>
 8011e34:	2400      	movs	r4, #0
 8011e36:	e766      	b.n	8011d06 <__kernel_rem_pio2f+0x2e>
 8011e38:	eb18 0f05 	cmn.w	r8, r5
 8011e3c:	d407      	bmi.n	8011e4e <__kernel_rem_pio2f+0x176>
 8011e3e:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8011e42:	f7ee ff4b 	bl	8000cdc <__aeabi_i2f>
 8011e46:	f846 0b04 	str.w	r0, [r6], #4
 8011e4a:	3501      	adds	r5, #1
 8011e4c:	e76e      	b.n	8011d2c <__kernel_rem_pio2f+0x54>
 8011e4e:	4658      	mov	r0, fp
 8011e50:	e7f9      	b.n	8011e46 <__kernel_rem_pio2f+0x16e>
 8011e52:	9307      	str	r3, [sp, #28]
 8011e54:	9b05      	ldr	r3, [sp, #20]
 8011e56:	f8da 1000 	ldr.w	r1, [sl]
 8011e5a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011e5e:	f7ee ff91 	bl	8000d84 <__aeabi_fmul>
 8011e62:	4601      	mov	r1, r0
 8011e64:	4630      	mov	r0, r6
 8011e66:	f7ee fe85 	bl	8000b74 <__addsf3>
 8011e6a:	4606      	mov	r6, r0
 8011e6c:	9b07      	ldr	r3, [sp, #28]
 8011e6e:	f108 0801 	add.w	r8, r8, #1
 8011e72:	9a03      	ldr	r2, [sp, #12]
 8011e74:	f1aa 0a04 	sub.w	sl, sl, #4
 8011e78:	4590      	cmp	r8, r2
 8011e7a:	ddea      	ble.n	8011e52 <__kernel_rem_pio2f+0x17a>
 8011e7c:	f84b 6b04 	str.w	r6, [fp], #4
 8011e80:	f109 0901 	add.w	r9, r9, #1
 8011e84:	3504      	adds	r5, #4
 8011e86:	e75d      	b.n	8011d44 <__kernel_rem_pio2f+0x6c>
 8011e88:	46aa      	mov	sl, r5
 8011e8a:	461e      	mov	r6, r3
 8011e8c:	f04f 0800 	mov.w	r8, #0
 8011e90:	e7ef      	b.n	8011e72 <__kernel_rem_pio2f+0x19a>
 8011e92:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8011e96:	4628      	mov	r0, r5
 8011e98:	f7ee ff74 	bl	8000d84 <__aeabi_fmul>
 8011e9c:	f7ef f94e 	bl	800113c <__aeabi_f2iz>
 8011ea0:	f7ee ff1c 	bl	8000cdc <__aeabi_i2f>
 8011ea4:	4649      	mov	r1, r9
 8011ea6:	9009      	str	r0, [sp, #36]	; 0x24
 8011ea8:	f7ee ff6c 	bl	8000d84 <__aeabi_fmul>
 8011eac:	4601      	mov	r1, r0
 8011eae:	4628      	mov	r0, r5
 8011eb0:	f7ee fe5e 	bl	8000b70 <__aeabi_fsub>
 8011eb4:	f7ef f942 	bl	800113c <__aeabi_f2iz>
 8011eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011ebe:	f846 0b04 	str.w	r0, [r6], #4
 8011ec2:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f7ee fe54 	bl	8000b74 <__addsf3>
 8011ecc:	4605      	mov	r5, r0
 8011ece:	e754      	b.n	8011d7a <__kernel_rem_pio2f+0xa2>
 8011ed0:	d106      	bne.n	8011ee0 <__kernel_rem_pio2f+0x208>
 8011ed2:	f108 33ff 	add.w	r3, r8, #4294967295
 8011ed6:	aa0a      	add	r2, sp, #40	; 0x28
 8011ed8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8011edc:	11ed      	asrs	r5, r5, #7
 8011ede:	e783      	b.n	8011de8 <__kernel_rem_pio2f+0x110>
 8011ee0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8011ee4:	f7ef f900 	bl	80010e8 <__aeabi_fcmpge>
 8011ee8:	4605      	mov	r5, r0
 8011eea:	bb98      	cbnz	r0, 8011f54 <__kernel_rem_pio2f+0x27c>
 8011eec:	2100      	movs	r1, #0
 8011eee:	4648      	mov	r0, r9
 8011ef0:	f7ef f8dc 	bl	80010ac <__aeabi_fcmpeq>
 8011ef4:	2800      	cmp	r0, #0
 8011ef6:	f000 8098 	beq.w	801202a <__kernel_rem_pio2f+0x352>
 8011efa:	f108 34ff 	add.w	r4, r8, #4294967295
 8011efe:	4623      	mov	r3, r4
 8011f00:	2200      	movs	r2, #0
 8011f02:	9901      	ldr	r1, [sp, #4]
 8011f04:	428b      	cmp	r3, r1
 8011f06:	da4c      	bge.n	8011fa2 <__kernel_rem_pio2f+0x2ca>
 8011f08:	2a00      	cmp	r2, #0
 8011f0a:	d07a      	beq.n	8012002 <__kernel_rem_pio2f+0x32a>
 8011f0c:	ab0a      	add	r3, sp, #40	; 0x28
 8011f0e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011f12:	3f08      	subs	r7, #8
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	f000 8086 	beq.w	8012026 <__kernel_rem_pio2f+0x34e>
 8011f1a:	4639      	mov	r1, r7
 8011f1c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8011f20:	f000 fc0a 	bl	8012738 <scalbnf>
 8011f24:	46a2      	mov	sl, r4
 8011f26:	4681      	mov	r9, r0
 8011f28:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 8011f2c:	af46      	add	r7, sp, #280	; 0x118
 8011f2e:	f1ba 0f00 	cmp.w	sl, #0
 8011f32:	f280 80af 	bge.w	8012094 <__kernel_rem_pio2f+0x3bc>
 8011f36:	4627      	mov	r7, r4
 8011f38:	2200      	movs	r2, #0
 8011f3a:	2f00      	cmp	r7, #0
 8011f3c:	f2c0 80d9 	blt.w	80120f2 <__kernel_rem_pio2f+0x41a>
 8011f40:	a946      	add	r1, sp, #280	; 0x118
 8011f42:	4690      	mov	r8, r2
 8011f44:	f04f 0a00 	mov.w	sl, #0
 8011f48:	4b1a      	ldr	r3, [pc, #104]	; (8011fb4 <__kernel_rem_pio2f+0x2dc>)
 8011f4a:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8011f4e:	eba4 0907 	sub.w	r9, r4, r7
 8011f52:	e0c2      	b.n	80120da <__kernel_rem_pio2f+0x402>
 8011f54:	2502      	movs	r5, #2
 8011f56:	e749      	b.n	8011dec <__kernel_rem_pio2f+0x114>
 8011f58:	6823      	ldr	r3, [r4, #0]
 8011f5a:	f1ba 0f00 	cmp.w	sl, #0
 8011f5e:	d108      	bne.n	8011f72 <__kernel_rem_pio2f+0x29a>
 8011f60:	b11b      	cbz	r3, 8011f6a <__kernel_rem_pio2f+0x292>
 8011f62:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8011f66:	6023      	str	r3, [r4, #0]
 8011f68:	2301      	movs	r3, #1
 8011f6a:	469a      	mov	sl, r3
 8011f6c:	3201      	adds	r2, #1
 8011f6e:	3404      	adds	r4, #4
 8011f70:	e73f      	b.n	8011df2 <__kernel_rem_pio2f+0x11a>
 8011f72:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8011f76:	6023      	str	r3, [r4, #0]
 8011f78:	4653      	mov	r3, sl
 8011f7a:	e7f6      	b.n	8011f6a <__kernel_rem_pio2f+0x292>
 8011f7c:	f108 32ff 	add.w	r2, r8, #4294967295
 8011f80:	ab0a      	add	r3, sp, #40	; 0x28
 8011f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f8a:	a90a      	add	r1, sp, #40	; 0x28
 8011f8c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011f90:	e73a      	b.n	8011e08 <__kernel_rem_pio2f+0x130>
 8011f92:	f108 32ff 	add.w	r2, r8, #4294967295
 8011f96:	ab0a      	add	r3, sp, #40	; 0x28
 8011f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011fa0:	e7f3      	b.n	8011f8a <__kernel_rem_pio2f+0x2b2>
 8011fa2:	a90a      	add	r1, sp, #40	; 0x28
 8011fa4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011fa8:	3b01      	subs	r3, #1
 8011faa:	430a      	orrs	r2, r1
 8011fac:	e7a9      	b.n	8011f02 <__kernel_rem_pio2f+0x22a>
 8011fae:	bf00      	nop
 8011fb0:	08013124 	.word	0x08013124
 8011fb4:	080130f8 	.word	0x080130f8
 8011fb8:	3301      	adds	r3, #1
 8011fba:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011fbe:	2900      	cmp	r1, #0
 8011fc0:	d0fa      	beq.n	8011fb8 <__kernel_rem_pio2f+0x2e0>
 8011fc2:	9a04      	ldr	r2, [sp, #16]
 8011fc4:	f108 0501 	add.w	r5, r8, #1
 8011fc8:	eb08 0402 	add.w	r4, r8, r2
 8011fcc:	aa1e      	add	r2, sp, #120	; 0x78
 8011fce:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8011fd2:	4498      	add	r8, r3
 8011fd4:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8011fd8:	45a8      	cmp	r8, r5
 8011fda:	f6ff aec2 	blt.w	8011d62 <__kernel_rem_pio2f+0x8a>
 8011fde:	9b07      	ldr	r3, [sp, #28]
 8011fe0:	46a3      	mov	fp, r4
 8011fe2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011fe6:	f7ee fe79 	bl	8000cdc <__aeabi_i2f>
 8011fea:	f04f 0a00 	mov.w	sl, #0
 8011fee:	2600      	movs	r6, #0
 8011ff0:	6020      	str	r0, [r4, #0]
 8011ff2:	9b03      	ldr	r3, [sp, #12]
 8011ff4:	459a      	cmp	sl, r3
 8011ff6:	dd07      	ble.n	8012008 <__kernel_rem_pio2f+0x330>
 8011ff8:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 8011ffc:	3404      	adds	r4, #4
 8011ffe:	3501      	adds	r5, #1
 8012000:	e7ea      	b.n	8011fd8 <__kernel_rem_pio2f+0x300>
 8012002:	2301      	movs	r3, #1
 8012004:	9a08      	ldr	r2, [sp, #32]
 8012006:	e7d8      	b.n	8011fba <__kernel_rem_pio2f+0x2e2>
 8012008:	9b05      	ldr	r3, [sp, #20]
 801200a:	f85b 0904 	ldr.w	r0, [fp], #-4
 801200e:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8012012:	f7ee feb7 	bl	8000d84 <__aeabi_fmul>
 8012016:	4601      	mov	r1, r0
 8012018:	4630      	mov	r0, r6
 801201a:	f7ee fdab 	bl	8000b74 <__addsf3>
 801201e:	f10a 0a01 	add.w	sl, sl, #1
 8012022:	4606      	mov	r6, r0
 8012024:	e7e5      	b.n	8011ff2 <__kernel_rem_pio2f+0x31a>
 8012026:	3c01      	subs	r4, #1
 8012028:	e770      	b.n	8011f0c <__kernel_rem_pio2f+0x234>
 801202a:	9b06      	ldr	r3, [sp, #24]
 801202c:	9a02      	ldr	r2, [sp, #8]
 801202e:	4648      	mov	r0, r9
 8012030:	1a99      	subs	r1, r3, r2
 8012032:	f000 fb81 	bl	8012738 <scalbnf>
 8012036:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 801203a:	4604      	mov	r4, r0
 801203c:	f7ef f854 	bl	80010e8 <__aeabi_fcmpge>
 8012040:	b300      	cbz	r0, 8012084 <__kernel_rem_pio2f+0x3ac>
 8012042:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8012046:	4620      	mov	r0, r4
 8012048:	f7ee fe9c 	bl	8000d84 <__aeabi_fmul>
 801204c:	f7ef f876 	bl	800113c <__aeabi_f2iz>
 8012050:	f7ee fe44 	bl	8000cdc <__aeabi_i2f>
 8012054:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8012058:	4681      	mov	r9, r0
 801205a:	f7ee fe93 	bl	8000d84 <__aeabi_fmul>
 801205e:	4601      	mov	r1, r0
 8012060:	4620      	mov	r0, r4
 8012062:	f7ee fd85 	bl	8000b70 <__aeabi_fsub>
 8012066:	f7ef f869 	bl	800113c <__aeabi_f2iz>
 801206a:	ab0a      	add	r3, sp, #40	; 0x28
 801206c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8012070:	4648      	mov	r0, r9
 8012072:	f7ef f863 	bl	800113c <__aeabi_f2iz>
 8012076:	f108 0401 	add.w	r4, r8, #1
 801207a:	ab0a      	add	r3, sp, #40	; 0x28
 801207c:	3708      	adds	r7, #8
 801207e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012082:	e74a      	b.n	8011f1a <__kernel_rem_pio2f+0x242>
 8012084:	4620      	mov	r0, r4
 8012086:	f7ef f859 	bl	800113c <__aeabi_f2iz>
 801208a:	ab0a      	add	r3, sp, #40	; 0x28
 801208c:	4644      	mov	r4, r8
 801208e:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8012092:	e742      	b.n	8011f1a <__kernel_rem_pio2f+0x242>
 8012094:	ab0a      	add	r3, sp, #40	; 0x28
 8012096:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 801209a:	f7ee fe1f 	bl	8000cdc <__aeabi_i2f>
 801209e:	4649      	mov	r1, r9
 80120a0:	f7ee fe70 	bl	8000d84 <__aeabi_fmul>
 80120a4:	4641      	mov	r1, r8
 80120a6:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 80120aa:	4648      	mov	r0, r9
 80120ac:	f7ee fe6a 	bl	8000d84 <__aeabi_fmul>
 80120b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80120b4:	4681      	mov	r9, r0
 80120b6:	e73a      	b.n	8011f2e <__kernel_rem_pio2f+0x256>
 80120b8:	f853 0b04 	ldr.w	r0, [r3], #4
 80120bc:	f85b 1b04 	ldr.w	r1, [fp], #4
 80120c0:	9203      	str	r2, [sp, #12]
 80120c2:	9302      	str	r3, [sp, #8]
 80120c4:	f7ee fe5e 	bl	8000d84 <__aeabi_fmul>
 80120c8:	4601      	mov	r1, r0
 80120ca:	4640      	mov	r0, r8
 80120cc:	f7ee fd52 	bl	8000b74 <__addsf3>
 80120d0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80120d4:	4680      	mov	r8, r0
 80120d6:	f10a 0a01 	add.w	sl, sl, #1
 80120da:	9901      	ldr	r1, [sp, #4]
 80120dc:	458a      	cmp	sl, r1
 80120de:	dc01      	bgt.n	80120e4 <__kernel_rem_pio2f+0x40c>
 80120e0:	45ca      	cmp	sl, r9
 80120e2:	dde9      	ble.n	80120b8 <__kernel_rem_pio2f+0x3e0>
 80120e4:	ab5a      	add	r3, sp, #360	; 0x168
 80120e6:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 80120ea:	f849 8ca0 	str.w	r8, [r9, #-160]
 80120ee:	3f01      	subs	r7, #1
 80120f0:	e723      	b.n	8011f3a <__kernel_rem_pio2f+0x262>
 80120f2:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80120f4:	2b02      	cmp	r3, #2
 80120f6:	dc07      	bgt.n	8012108 <__kernel_rem_pio2f+0x430>
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	dc4d      	bgt.n	8012198 <__kernel_rem_pio2f+0x4c0>
 80120fc:	d02e      	beq.n	801215c <__kernel_rem_pio2f+0x484>
 80120fe:	f006 0007 	and.w	r0, r6, #7
 8012102:	b05b      	add	sp, #364	; 0x16c
 8012104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012108:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801210a:	2b03      	cmp	r3, #3
 801210c:	d1f7      	bne.n	80120fe <__kernel_rem_pio2f+0x426>
 801210e:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 8012112:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8012116:	46b8      	mov	r8, r7
 8012118:	46a2      	mov	sl, r4
 801211a:	f1ba 0f00 	cmp.w	sl, #0
 801211e:	dc48      	bgt.n	80121b2 <__kernel_rem_pio2f+0x4da>
 8012120:	46a1      	mov	r9, r4
 8012122:	f1b9 0f01 	cmp.w	r9, #1
 8012126:	dc5f      	bgt.n	80121e8 <__kernel_rem_pio2f+0x510>
 8012128:	2000      	movs	r0, #0
 801212a:	2c01      	cmp	r4, #1
 801212c:	dc75      	bgt.n	801221a <__kernel_rem_pio2f+0x542>
 801212e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8012130:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8012132:	2d00      	cmp	r5, #0
 8012134:	d177      	bne.n	8012226 <__kernel_rem_pio2f+0x54e>
 8012136:	9900      	ldr	r1, [sp, #0]
 8012138:	600a      	str	r2, [r1, #0]
 801213a:	460a      	mov	r2, r1
 801213c:	604b      	str	r3, [r1, #4]
 801213e:	6090      	str	r0, [r2, #8]
 8012140:	e7dd      	b.n	80120fe <__kernel_rem_pio2f+0x426>
 8012142:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8012146:	f7ee fd15 	bl	8000b74 <__addsf3>
 801214a:	3c01      	subs	r4, #1
 801214c:	2c00      	cmp	r4, #0
 801214e:	daf8      	bge.n	8012142 <__kernel_rem_pio2f+0x46a>
 8012150:	b10d      	cbz	r5, 8012156 <__kernel_rem_pio2f+0x47e>
 8012152:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8012156:	9b00      	ldr	r3, [sp, #0]
 8012158:	6018      	str	r0, [r3, #0]
 801215a:	e7d0      	b.n	80120fe <__kernel_rem_pio2f+0x426>
 801215c:	2000      	movs	r0, #0
 801215e:	af32      	add	r7, sp, #200	; 0xc8
 8012160:	e7f4      	b.n	801214c <__kernel_rem_pio2f+0x474>
 8012162:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8012166:	f7ee fd05 	bl	8000b74 <__addsf3>
 801216a:	3f01      	subs	r7, #1
 801216c:	2f00      	cmp	r7, #0
 801216e:	daf8      	bge.n	8012162 <__kernel_rem_pio2f+0x48a>
 8012170:	b1bd      	cbz	r5, 80121a2 <__kernel_rem_pio2f+0x4ca>
 8012172:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8012176:	9a00      	ldr	r2, [sp, #0]
 8012178:	4601      	mov	r1, r0
 801217a:	6013      	str	r3, [r2, #0]
 801217c:	9832      	ldr	r0, [sp, #200]	; 0xc8
 801217e:	f7ee fcf7 	bl	8000b70 <__aeabi_fsub>
 8012182:	2701      	movs	r7, #1
 8012184:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8012188:	42bc      	cmp	r4, r7
 801218a:	da0c      	bge.n	80121a6 <__kernel_rem_pio2f+0x4ce>
 801218c:	b10d      	cbz	r5, 8012192 <__kernel_rem_pio2f+0x4ba>
 801218e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8012192:	9b00      	ldr	r3, [sp, #0]
 8012194:	6058      	str	r0, [r3, #4]
 8012196:	e7b2      	b.n	80120fe <__kernel_rem_pio2f+0x426>
 8012198:	4627      	mov	r7, r4
 801219a:	2000      	movs	r0, #0
 801219c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 80121a0:	e7e4      	b.n	801216c <__kernel_rem_pio2f+0x494>
 80121a2:	4603      	mov	r3, r0
 80121a4:	e7e7      	b.n	8012176 <__kernel_rem_pio2f+0x49e>
 80121a6:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 80121aa:	f7ee fce3 	bl	8000b74 <__addsf3>
 80121ae:	3701      	adds	r7, #1
 80121b0:	e7ea      	b.n	8012188 <__kernel_rem_pio2f+0x4b0>
 80121b2:	f8d8 3000 	ldr.w	r3, [r8]
 80121b6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80121ba:	4619      	mov	r1, r3
 80121bc:	4610      	mov	r0, r2
 80121be:	9302      	str	r3, [sp, #8]
 80121c0:	9201      	str	r2, [sp, #4]
 80121c2:	f7ee fcd7 	bl	8000b74 <__addsf3>
 80121c6:	9a01      	ldr	r2, [sp, #4]
 80121c8:	4601      	mov	r1, r0
 80121ca:	4681      	mov	r9, r0
 80121cc:	4610      	mov	r0, r2
 80121ce:	f7ee fccf 	bl	8000b70 <__aeabi_fsub>
 80121d2:	9b02      	ldr	r3, [sp, #8]
 80121d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80121d8:	4619      	mov	r1, r3
 80121da:	f7ee fccb 	bl	8000b74 <__addsf3>
 80121de:	f848 0904 	str.w	r0, [r8], #-4
 80121e2:	f8c8 9000 	str.w	r9, [r8]
 80121e6:	e798      	b.n	801211a <__kernel_rem_pio2f+0x442>
 80121e8:	f857 3c04 	ldr.w	r3, [r7, #-4]
 80121ec:	f8d7 a000 	ldr.w	sl, [r7]
 80121f0:	4618      	mov	r0, r3
 80121f2:	4651      	mov	r1, sl
 80121f4:	9301      	str	r3, [sp, #4]
 80121f6:	f7ee fcbd 	bl	8000b74 <__addsf3>
 80121fa:	9b01      	ldr	r3, [sp, #4]
 80121fc:	4601      	mov	r1, r0
 80121fe:	4680      	mov	r8, r0
 8012200:	4618      	mov	r0, r3
 8012202:	f7ee fcb5 	bl	8000b70 <__aeabi_fsub>
 8012206:	4651      	mov	r1, sl
 8012208:	f7ee fcb4 	bl	8000b74 <__addsf3>
 801220c:	f847 0904 	str.w	r0, [r7], #-4
 8012210:	f109 39ff 	add.w	r9, r9, #4294967295
 8012214:	f8c7 8000 	str.w	r8, [r7]
 8012218:	e783      	b.n	8012122 <__kernel_rem_pio2f+0x44a>
 801221a:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 801221e:	f7ee fca9 	bl	8000b74 <__addsf3>
 8012222:	3c01      	subs	r4, #1
 8012224:	e781      	b.n	801212a <__kernel_rem_pio2f+0x452>
 8012226:	9900      	ldr	r1, [sp, #0]
 8012228:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801222c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012230:	600a      	str	r2, [r1, #0]
 8012232:	604b      	str	r3, [r1, #4]
 8012234:	460a      	mov	r2, r1
 8012236:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801223a:	e780      	b.n	801213e <__kernel_rem_pio2f+0x466>

0801223c <__kernel_sinf>:
 801223c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012240:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8012244:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8012248:	4604      	mov	r4, r0
 801224a:	460f      	mov	r7, r1
 801224c:	4691      	mov	r9, r2
 801224e:	da03      	bge.n	8012258 <__kernel_sinf+0x1c>
 8012250:	f7ee ff74 	bl	800113c <__aeabi_f2iz>
 8012254:	2800      	cmp	r0, #0
 8012256:	d035      	beq.n	80122c4 <__kernel_sinf+0x88>
 8012258:	4621      	mov	r1, r4
 801225a:	4620      	mov	r0, r4
 801225c:	f7ee fd92 	bl	8000d84 <__aeabi_fmul>
 8012260:	4605      	mov	r5, r0
 8012262:	4601      	mov	r1, r0
 8012264:	4620      	mov	r0, r4
 8012266:	f7ee fd8d 	bl	8000d84 <__aeabi_fmul>
 801226a:	4929      	ldr	r1, [pc, #164]	; (8012310 <__kernel_sinf+0xd4>)
 801226c:	4606      	mov	r6, r0
 801226e:	4628      	mov	r0, r5
 8012270:	f7ee fd88 	bl	8000d84 <__aeabi_fmul>
 8012274:	4927      	ldr	r1, [pc, #156]	; (8012314 <__kernel_sinf+0xd8>)
 8012276:	f7ee fc7b 	bl	8000b70 <__aeabi_fsub>
 801227a:	4629      	mov	r1, r5
 801227c:	f7ee fd82 	bl	8000d84 <__aeabi_fmul>
 8012280:	4925      	ldr	r1, [pc, #148]	; (8012318 <__kernel_sinf+0xdc>)
 8012282:	f7ee fc77 	bl	8000b74 <__addsf3>
 8012286:	4629      	mov	r1, r5
 8012288:	f7ee fd7c 	bl	8000d84 <__aeabi_fmul>
 801228c:	4923      	ldr	r1, [pc, #140]	; (801231c <__kernel_sinf+0xe0>)
 801228e:	f7ee fc6f 	bl	8000b70 <__aeabi_fsub>
 8012292:	4629      	mov	r1, r5
 8012294:	f7ee fd76 	bl	8000d84 <__aeabi_fmul>
 8012298:	4921      	ldr	r1, [pc, #132]	; (8012320 <__kernel_sinf+0xe4>)
 801229a:	f7ee fc6b 	bl	8000b74 <__addsf3>
 801229e:	4680      	mov	r8, r0
 80122a0:	f1b9 0f00 	cmp.w	r9, #0
 80122a4:	d111      	bne.n	80122ca <__kernel_sinf+0x8e>
 80122a6:	4601      	mov	r1, r0
 80122a8:	4628      	mov	r0, r5
 80122aa:	f7ee fd6b 	bl	8000d84 <__aeabi_fmul>
 80122ae:	491d      	ldr	r1, [pc, #116]	; (8012324 <__kernel_sinf+0xe8>)
 80122b0:	f7ee fc5e 	bl	8000b70 <__aeabi_fsub>
 80122b4:	4631      	mov	r1, r6
 80122b6:	f7ee fd65 	bl	8000d84 <__aeabi_fmul>
 80122ba:	4601      	mov	r1, r0
 80122bc:	4620      	mov	r0, r4
 80122be:	f7ee fc59 	bl	8000b74 <__addsf3>
 80122c2:	4604      	mov	r4, r0
 80122c4:	4620      	mov	r0, r4
 80122c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122ca:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80122ce:	4638      	mov	r0, r7
 80122d0:	f7ee fd58 	bl	8000d84 <__aeabi_fmul>
 80122d4:	4641      	mov	r1, r8
 80122d6:	4681      	mov	r9, r0
 80122d8:	4630      	mov	r0, r6
 80122da:	f7ee fd53 	bl	8000d84 <__aeabi_fmul>
 80122de:	4601      	mov	r1, r0
 80122e0:	4648      	mov	r0, r9
 80122e2:	f7ee fc45 	bl	8000b70 <__aeabi_fsub>
 80122e6:	4629      	mov	r1, r5
 80122e8:	f7ee fd4c 	bl	8000d84 <__aeabi_fmul>
 80122ec:	4639      	mov	r1, r7
 80122ee:	f7ee fc3f 	bl	8000b70 <__aeabi_fsub>
 80122f2:	490c      	ldr	r1, [pc, #48]	; (8012324 <__kernel_sinf+0xe8>)
 80122f4:	4605      	mov	r5, r0
 80122f6:	4630      	mov	r0, r6
 80122f8:	f7ee fd44 	bl	8000d84 <__aeabi_fmul>
 80122fc:	4601      	mov	r1, r0
 80122fe:	4628      	mov	r0, r5
 8012300:	f7ee fc38 	bl	8000b74 <__addsf3>
 8012304:	4601      	mov	r1, r0
 8012306:	4620      	mov	r0, r4
 8012308:	f7ee fc32 	bl	8000b70 <__aeabi_fsub>
 801230c:	e7d9      	b.n	80122c2 <__kernel_sinf+0x86>
 801230e:	bf00      	nop
 8012310:	2f2ec9d3 	.word	0x2f2ec9d3
 8012314:	32d72f34 	.word	0x32d72f34
 8012318:	3638ef1b 	.word	0x3638ef1b
 801231c:	39500d01 	.word	0x39500d01
 8012320:	3c088889 	.word	0x3c088889
 8012324:	3e2aaaab 	.word	0x3e2aaaab

08012328 <with_errno>:
 8012328:	b570      	push	{r4, r5, r6, lr}
 801232a:	4604      	mov	r4, r0
 801232c:	460d      	mov	r5, r1
 801232e:	4616      	mov	r6, r2
 8012330:	f7fb fb32 	bl	800d998 <__errno>
 8012334:	4629      	mov	r1, r5
 8012336:	6006      	str	r6, [r0, #0]
 8012338:	4620      	mov	r0, r4
 801233a:	bd70      	pop	{r4, r5, r6, pc}

0801233c <xflow>:
 801233c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801233e:	4615      	mov	r5, r2
 8012340:	461c      	mov	r4, r3
 8012342:	b180      	cbz	r0, 8012366 <xflow+0x2a>
 8012344:	4610      	mov	r0, r2
 8012346:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801234a:	e9cd 0100 	strd	r0, r1, [sp]
 801234e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012352:	4628      	mov	r0, r5
 8012354:	4621      	mov	r1, r4
 8012356:	f7ee f8bf 	bl	80004d8 <__aeabi_dmul>
 801235a:	2222      	movs	r2, #34	; 0x22
 801235c:	b003      	add	sp, #12
 801235e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012362:	f7ff bfe1 	b.w	8012328 <with_errno>
 8012366:	4610      	mov	r0, r2
 8012368:	4619      	mov	r1, r3
 801236a:	e7ee      	b.n	801234a <xflow+0xe>

0801236c <__math_uflow>:
 801236c:	2200      	movs	r2, #0
 801236e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012372:	f7ff bfe3 	b.w	801233c <xflow>

08012376 <__math_oflow>:
 8012376:	2200      	movs	r2, #0
 8012378:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801237c:	f7ff bfde 	b.w	801233c <xflow>

08012380 <fabs>:
 8012380:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012384:	4770      	bx	lr

08012386 <finite>:
 8012386:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 801238a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801238e:	0fc0      	lsrs	r0, r0, #31
 8012390:	4770      	bx	lr
 8012392:	0000      	movs	r0, r0
 8012394:	0000      	movs	r0, r0
	...

08012398 <scalbn>:
 8012398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801239a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 801239e:	4604      	mov	r4, r0
 80123a0:	460d      	mov	r5, r1
 80123a2:	4617      	mov	r7, r2
 80123a4:	460b      	mov	r3, r1
 80123a6:	b996      	cbnz	r6, 80123ce <scalbn+0x36>
 80123a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80123ac:	4303      	orrs	r3, r0
 80123ae:	d039      	beq.n	8012424 <scalbn+0x8c>
 80123b0:	4b33      	ldr	r3, [pc, #204]	; (8012480 <scalbn+0xe8>)
 80123b2:	2200      	movs	r2, #0
 80123b4:	f7ee f890 	bl	80004d8 <__aeabi_dmul>
 80123b8:	4b32      	ldr	r3, [pc, #200]	; (8012484 <scalbn+0xec>)
 80123ba:	4604      	mov	r4, r0
 80123bc:	429f      	cmp	r7, r3
 80123be:	460d      	mov	r5, r1
 80123c0:	da0f      	bge.n	80123e2 <scalbn+0x4a>
 80123c2:	a32b      	add	r3, pc, #172	; (adr r3, 8012470 <scalbn+0xd8>)
 80123c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c8:	f7ee f886 	bl	80004d8 <__aeabi_dmul>
 80123cc:	e006      	b.n	80123dc <scalbn+0x44>
 80123ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80123d2:	4296      	cmp	r6, r2
 80123d4:	d10a      	bne.n	80123ec <scalbn+0x54>
 80123d6:	4602      	mov	r2, r0
 80123d8:	f7ed fec8 	bl	800016c <__adddf3>
 80123dc:	4604      	mov	r4, r0
 80123de:	460d      	mov	r5, r1
 80123e0:	e020      	b.n	8012424 <scalbn+0x8c>
 80123e2:	460b      	mov	r3, r1
 80123e4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80123e8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80123ec:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80123f0:	19b9      	adds	r1, r7, r6
 80123f2:	4291      	cmp	r1, r2
 80123f4:	dd0e      	ble.n	8012414 <scalbn+0x7c>
 80123f6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80123fa:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80123fe:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8012402:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8012406:	4820      	ldr	r0, [pc, #128]	; (8012488 <scalbn+0xf0>)
 8012408:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 801240c:	a31a      	add	r3, pc, #104	; (adr r3, 8012478 <scalbn+0xe0>)
 801240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012412:	e7d9      	b.n	80123c8 <scalbn+0x30>
 8012414:	2900      	cmp	r1, #0
 8012416:	dd08      	ble.n	801242a <scalbn+0x92>
 8012418:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801241c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012420:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8012424:	4620      	mov	r0, r4
 8012426:	4629      	mov	r1, r5
 8012428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801242a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 801242e:	da12      	bge.n	8012456 <scalbn+0xbe>
 8012430:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012434:	429f      	cmp	r7, r3
 8012436:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 801243a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 801243e:	dcdc      	bgt.n	80123fa <scalbn+0x62>
 8012440:	a30b      	add	r3, pc, #44	; (adr r3, 8012470 <scalbn+0xd8>)
 8012442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012446:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 801244a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 801244e:	480f      	ldr	r0, [pc, #60]	; (801248c <scalbn+0xf4>)
 8012450:	f041 011f 	orr.w	r1, r1, #31
 8012454:	e7b8      	b.n	80123c8 <scalbn+0x30>
 8012456:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801245a:	3136      	adds	r1, #54	; 0x36
 801245c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012460:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8012464:	4620      	mov	r0, r4
 8012466:	4629      	mov	r1, r5
 8012468:	2200      	movs	r2, #0
 801246a:	4b09      	ldr	r3, [pc, #36]	; (8012490 <scalbn+0xf8>)
 801246c:	e7ac      	b.n	80123c8 <scalbn+0x30>
 801246e:	bf00      	nop
 8012470:	c2f8f359 	.word	0xc2f8f359
 8012474:	01a56e1f 	.word	0x01a56e1f
 8012478:	8800759c 	.word	0x8800759c
 801247c:	7e37e43c 	.word	0x7e37e43c
 8012480:	43500000 	.word	0x43500000
 8012484:	ffff3cb0 	.word	0xffff3cb0
 8012488:	8800759c 	.word	0x8800759c
 801248c:	c2f8f359 	.word	0xc2f8f359
 8012490:	3c900000 	.word	0x3c900000

08012494 <atanf>:
 8012494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012498:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 801249c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 80124a0:	4604      	mov	r4, r0
 80124a2:	4680      	mov	r8, r0
 80124a4:	db0e      	blt.n	80124c4 <atanf+0x30>
 80124a6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80124aa:	dd04      	ble.n	80124b6 <atanf+0x22>
 80124ac:	4601      	mov	r1, r0
 80124ae:	f7ee fb61 	bl	8000b74 <__addsf3>
 80124b2:	4604      	mov	r4, r0
 80124b4:	e003      	b.n	80124be <atanf+0x2a>
 80124b6:	2800      	cmp	r0, #0
 80124b8:	f300 80ce 	bgt.w	8012658 <atanf+0x1c4>
 80124bc:	4c67      	ldr	r4, [pc, #412]	; (801265c <atanf+0x1c8>)
 80124be:	4620      	mov	r0, r4
 80124c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124c4:	4b66      	ldr	r3, [pc, #408]	; (8012660 <atanf+0x1cc>)
 80124c6:	429d      	cmp	r5, r3
 80124c8:	dc0e      	bgt.n	80124e8 <atanf+0x54>
 80124ca:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 80124ce:	da08      	bge.n	80124e2 <atanf+0x4e>
 80124d0:	4964      	ldr	r1, [pc, #400]	; (8012664 <atanf+0x1d0>)
 80124d2:	f7ee fb4f 	bl	8000b74 <__addsf3>
 80124d6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80124da:	f7ee fe0f 	bl	80010fc <__aeabi_fcmpgt>
 80124de:	2800      	cmp	r0, #0
 80124e0:	d1ed      	bne.n	80124be <atanf+0x2a>
 80124e2:	f04f 36ff 	mov.w	r6, #4294967295
 80124e6:	e01c      	b.n	8012522 <atanf+0x8e>
 80124e8:	f000 f8e0 	bl	80126ac <fabsf>
 80124ec:	4b5e      	ldr	r3, [pc, #376]	; (8012668 <atanf+0x1d4>)
 80124ee:	4604      	mov	r4, r0
 80124f0:	429d      	cmp	r5, r3
 80124f2:	dc7c      	bgt.n	80125ee <atanf+0x15a>
 80124f4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80124f8:	429d      	cmp	r5, r3
 80124fa:	dc67      	bgt.n	80125cc <atanf+0x138>
 80124fc:	4601      	mov	r1, r0
 80124fe:	f7ee fb39 	bl	8000b74 <__addsf3>
 8012502:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8012506:	f7ee fb33 	bl	8000b70 <__aeabi_fsub>
 801250a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801250e:	4605      	mov	r5, r0
 8012510:	4620      	mov	r0, r4
 8012512:	f7ee fb2f 	bl	8000b74 <__addsf3>
 8012516:	4601      	mov	r1, r0
 8012518:	4628      	mov	r0, r5
 801251a:	f7ee fce7 	bl	8000eec <__aeabi_fdiv>
 801251e:	2600      	movs	r6, #0
 8012520:	4604      	mov	r4, r0
 8012522:	4621      	mov	r1, r4
 8012524:	4620      	mov	r0, r4
 8012526:	f7ee fc2d 	bl	8000d84 <__aeabi_fmul>
 801252a:	4601      	mov	r1, r0
 801252c:	4607      	mov	r7, r0
 801252e:	f7ee fc29 	bl	8000d84 <__aeabi_fmul>
 8012532:	4605      	mov	r5, r0
 8012534:	494d      	ldr	r1, [pc, #308]	; (801266c <atanf+0x1d8>)
 8012536:	f7ee fc25 	bl	8000d84 <__aeabi_fmul>
 801253a:	494d      	ldr	r1, [pc, #308]	; (8012670 <atanf+0x1dc>)
 801253c:	f7ee fb1a 	bl	8000b74 <__addsf3>
 8012540:	4629      	mov	r1, r5
 8012542:	f7ee fc1f 	bl	8000d84 <__aeabi_fmul>
 8012546:	494b      	ldr	r1, [pc, #300]	; (8012674 <atanf+0x1e0>)
 8012548:	f7ee fb14 	bl	8000b74 <__addsf3>
 801254c:	4629      	mov	r1, r5
 801254e:	f7ee fc19 	bl	8000d84 <__aeabi_fmul>
 8012552:	4949      	ldr	r1, [pc, #292]	; (8012678 <atanf+0x1e4>)
 8012554:	f7ee fb0e 	bl	8000b74 <__addsf3>
 8012558:	4629      	mov	r1, r5
 801255a:	f7ee fc13 	bl	8000d84 <__aeabi_fmul>
 801255e:	4947      	ldr	r1, [pc, #284]	; (801267c <atanf+0x1e8>)
 8012560:	f7ee fb08 	bl	8000b74 <__addsf3>
 8012564:	4629      	mov	r1, r5
 8012566:	f7ee fc0d 	bl	8000d84 <__aeabi_fmul>
 801256a:	4945      	ldr	r1, [pc, #276]	; (8012680 <atanf+0x1ec>)
 801256c:	f7ee fb02 	bl	8000b74 <__addsf3>
 8012570:	4639      	mov	r1, r7
 8012572:	f7ee fc07 	bl	8000d84 <__aeabi_fmul>
 8012576:	4943      	ldr	r1, [pc, #268]	; (8012684 <atanf+0x1f0>)
 8012578:	4607      	mov	r7, r0
 801257a:	4628      	mov	r0, r5
 801257c:	f7ee fc02 	bl	8000d84 <__aeabi_fmul>
 8012580:	4941      	ldr	r1, [pc, #260]	; (8012688 <atanf+0x1f4>)
 8012582:	f7ee faf5 	bl	8000b70 <__aeabi_fsub>
 8012586:	4629      	mov	r1, r5
 8012588:	f7ee fbfc 	bl	8000d84 <__aeabi_fmul>
 801258c:	493f      	ldr	r1, [pc, #252]	; (801268c <atanf+0x1f8>)
 801258e:	f7ee faef 	bl	8000b70 <__aeabi_fsub>
 8012592:	4629      	mov	r1, r5
 8012594:	f7ee fbf6 	bl	8000d84 <__aeabi_fmul>
 8012598:	493d      	ldr	r1, [pc, #244]	; (8012690 <atanf+0x1fc>)
 801259a:	f7ee fae9 	bl	8000b70 <__aeabi_fsub>
 801259e:	4629      	mov	r1, r5
 80125a0:	f7ee fbf0 	bl	8000d84 <__aeabi_fmul>
 80125a4:	493b      	ldr	r1, [pc, #236]	; (8012694 <atanf+0x200>)
 80125a6:	f7ee fae3 	bl	8000b70 <__aeabi_fsub>
 80125aa:	4629      	mov	r1, r5
 80125ac:	f7ee fbea 	bl	8000d84 <__aeabi_fmul>
 80125b0:	4601      	mov	r1, r0
 80125b2:	4638      	mov	r0, r7
 80125b4:	f7ee fade 	bl	8000b74 <__addsf3>
 80125b8:	4621      	mov	r1, r4
 80125ba:	f7ee fbe3 	bl	8000d84 <__aeabi_fmul>
 80125be:	1c73      	adds	r3, r6, #1
 80125c0:	4601      	mov	r1, r0
 80125c2:	d133      	bne.n	801262c <atanf+0x198>
 80125c4:	4620      	mov	r0, r4
 80125c6:	f7ee fad3 	bl	8000b70 <__aeabi_fsub>
 80125ca:	e772      	b.n	80124b2 <atanf+0x1e>
 80125cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80125d0:	f7ee face 	bl	8000b70 <__aeabi_fsub>
 80125d4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80125d8:	4605      	mov	r5, r0
 80125da:	4620      	mov	r0, r4
 80125dc:	f7ee faca 	bl	8000b74 <__addsf3>
 80125e0:	4601      	mov	r1, r0
 80125e2:	4628      	mov	r0, r5
 80125e4:	f7ee fc82 	bl	8000eec <__aeabi_fdiv>
 80125e8:	2601      	movs	r6, #1
 80125ea:	4604      	mov	r4, r0
 80125ec:	e799      	b.n	8012522 <atanf+0x8e>
 80125ee:	4b2a      	ldr	r3, [pc, #168]	; (8012698 <atanf+0x204>)
 80125f0:	429d      	cmp	r5, r3
 80125f2:	dc14      	bgt.n	801261e <atanf+0x18a>
 80125f4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80125f8:	f7ee faba 	bl	8000b70 <__aeabi_fsub>
 80125fc:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8012600:	4605      	mov	r5, r0
 8012602:	4620      	mov	r0, r4
 8012604:	f7ee fbbe 	bl	8000d84 <__aeabi_fmul>
 8012608:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801260c:	f7ee fab2 	bl	8000b74 <__addsf3>
 8012610:	4601      	mov	r1, r0
 8012612:	4628      	mov	r0, r5
 8012614:	f7ee fc6a 	bl	8000eec <__aeabi_fdiv>
 8012618:	2602      	movs	r6, #2
 801261a:	4604      	mov	r4, r0
 801261c:	e781      	b.n	8012522 <atanf+0x8e>
 801261e:	4601      	mov	r1, r0
 8012620:	481e      	ldr	r0, [pc, #120]	; (801269c <atanf+0x208>)
 8012622:	f7ee fc63 	bl	8000eec <__aeabi_fdiv>
 8012626:	2603      	movs	r6, #3
 8012628:	4604      	mov	r4, r0
 801262a:	e77a      	b.n	8012522 <atanf+0x8e>
 801262c:	4b1c      	ldr	r3, [pc, #112]	; (80126a0 <atanf+0x20c>)
 801262e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8012632:	f7ee fa9d 	bl	8000b70 <__aeabi_fsub>
 8012636:	4621      	mov	r1, r4
 8012638:	f7ee fa9a 	bl	8000b70 <__aeabi_fsub>
 801263c:	4b19      	ldr	r3, [pc, #100]	; (80126a4 <atanf+0x210>)
 801263e:	4601      	mov	r1, r0
 8012640:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012644:	f7ee fa94 	bl	8000b70 <__aeabi_fsub>
 8012648:	f1b8 0f00 	cmp.w	r8, #0
 801264c:	4604      	mov	r4, r0
 801264e:	f6bf af36 	bge.w	80124be <atanf+0x2a>
 8012652:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8012656:	e72c      	b.n	80124b2 <atanf+0x1e>
 8012658:	4c13      	ldr	r4, [pc, #76]	; (80126a8 <atanf+0x214>)
 801265a:	e730      	b.n	80124be <atanf+0x2a>
 801265c:	bfc90fdb 	.word	0xbfc90fdb
 8012660:	3edfffff 	.word	0x3edfffff
 8012664:	7149f2ca 	.word	0x7149f2ca
 8012668:	3f97ffff 	.word	0x3f97ffff
 801266c:	3c8569d7 	.word	0x3c8569d7
 8012670:	3d4bda59 	.word	0x3d4bda59
 8012674:	3d886b35 	.word	0x3d886b35
 8012678:	3dba2e6e 	.word	0x3dba2e6e
 801267c:	3e124925 	.word	0x3e124925
 8012680:	3eaaaaab 	.word	0x3eaaaaab
 8012684:	bd15a221 	.word	0xbd15a221
 8012688:	3d6ef16b 	.word	0x3d6ef16b
 801268c:	3d9d8795 	.word	0x3d9d8795
 8012690:	3de38e38 	.word	0x3de38e38
 8012694:	3e4ccccd 	.word	0x3e4ccccd
 8012698:	401bffff 	.word	0x401bffff
 801269c:	bf800000 	.word	0xbf800000
 80126a0:	08013140 	.word	0x08013140
 80126a4:	08013130 	.word	0x08013130
 80126a8:	3fc90fdb 	.word	0x3fc90fdb

080126ac <fabsf>:
 80126ac:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80126b0:	4770      	bx	lr
	...

080126b4 <floorf>:
 80126b4:	b570      	push	{r4, r5, r6, lr}
 80126b6:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 80126ba:	3d7f      	subs	r5, #127	; 0x7f
 80126bc:	2d16      	cmp	r5, #22
 80126be:	4601      	mov	r1, r0
 80126c0:	4604      	mov	r4, r0
 80126c2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80126c6:	dc26      	bgt.n	8012716 <floorf+0x62>
 80126c8:	2d00      	cmp	r5, #0
 80126ca:	da0e      	bge.n	80126ea <floorf+0x36>
 80126cc:	4917      	ldr	r1, [pc, #92]	; (801272c <floorf+0x78>)
 80126ce:	f7ee fa51 	bl	8000b74 <__addsf3>
 80126d2:	2100      	movs	r1, #0
 80126d4:	f7ee fd12 	bl	80010fc <__aeabi_fcmpgt>
 80126d8:	b128      	cbz	r0, 80126e6 <floorf+0x32>
 80126da:	2c00      	cmp	r4, #0
 80126dc:	da23      	bge.n	8012726 <floorf+0x72>
 80126de:	4b14      	ldr	r3, [pc, #80]	; (8012730 <floorf+0x7c>)
 80126e0:	2e00      	cmp	r6, #0
 80126e2:	bf18      	it	ne
 80126e4:	461c      	movne	r4, r3
 80126e6:	4621      	mov	r1, r4
 80126e8:	e01b      	b.n	8012722 <floorf+0x6e>
 80126ea:	4e12      	ldr	r6, [pc, #72]	; (8012734 <floorf+0x80>)
 80126ec:	412e      	asrs	r6, r5
 80126ee:	4230      	tst	r0, r6
 80126f0:	d017      	beq.n	8012722 <floorf+0x6e>
 80126f2:	490e      	ldr	r1, [pc, #56]	; (801272c <floorf+0x78>)
 80126f4:	f7ee fa3e 	bl	8000b74 <__addsf3>
 80126f8:	2100      	movs	r1, #0
 80126fa:	f7ee fcff 	bl	80010fc <__aeabi_fcmpgt>
 80126fe:	2800      	cmp	r0, #0
 8012700:	d0f1      	beq.n	80126e6 <floorf+0x32>
 8012702:	2c00      	cmp	r4, #0
 8012704:	bfbe      	ittt	lt
 8012706:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 801270a:	fa43 f505 	asrlt.w	r5, r3, r5
 801270e:	1964      	addlt	r4, r4, r5
 8012710:	ea24 0406 	bic.w	r4, r4, r6
 8012714:	e7e7      	b.n	80126e6 <floorf+0x32>
 8012716:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 801271a:	d302      	bcc.n	8012722 <floorf+0x6e>
 801271c:	f7ee fa2a 	bl	8000b74 <__addsf3>
 8012720:	4601      	mov	r1, r0
 8012722:	4608      	mov	r0, r1
 8012724:	bd70      	pop	{r4, r5, r6, pc}
 8012726:	2400      	movs	r4, #0
 8012728:	e7dd      	b.n	80126e6 <floorf+0x32>
 801272a:	bf00      	nop
 801272c:	7149f2ca 	.word	0x7149f2ca
 8012730:	bf800000 	.word	0xbf800000
 8012734:	007fffff 	.word	0x007fffff

08012738 <scalbnf>:
 8012738:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 801273c:	b538      	push	{r3, r4, r5, lr}
 801273e:	4603      	mov	r3, r0
 8012740:	460d      	mov	r5, r1
 8012742:	4604      	mov	r4, r0
 8012744:	d02a      	beq.n	801279c <scalbnf+0x64>
 8012746:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801274a:	d304      	bcc.n	8012756 <scalbnf+0x1e>
 801274c:	4601      	mov	r1, r0
 801274e:	f7ee fa11 	bl	8000b74 <__addsf3>
 8012752:	4603      	mov	r3, r0
 8012754:	e022      	b.n	801279c <scalbnf+0x64>
 8012756:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 801275a:	d117      	bne.n	801278c <scalbnf+0x54>
 801275c:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8012760:	f7ee fb10 	bl	8000d84 <__aeabi_fmul>
 8012764:	4a17      	ldr	r2, [pc, #92]	; (80127c4 <scalbnf+0x8c>)
 8012766:	4603      	mov	r3, r0
 8012768:	4295      	cmp	r5, r2
 801276a:	db0b      	blt.n	8012784 <scalbnf+0x4c>
 801276c:	4604      	mov	r4, r0
 801276e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8012772:	3a19      	subs	r2, #25
 8012774:	442a      	add	r2, r5
 8012776:	2afe      	cmp	r2, #254	; 0xfe
 8012778:	dd0a      	ble.n	8012790 <scalbnf+0x58>
 801277a:	4913      	ldr	r1, [pc, #76]	; (80127c8 <scalbnf+0x90>)
 801277c:	4618      	mov	r0, r3
 801277e:	f361 001e 	bfi	r0, r1, #0, #31
 8012782:	e000      	b.n	8012786 <scalbnf+0x4e>
 8012784:	4911      	ldr	r1, [pc, #68]	; (80127cc <scalbnf+0x94>)
 8012786:	f7ee fafd 	bl	8000d84 <__aeabi_fmul>
 801278a:	e7e2      	b.n	8012752 <scalbnf+0x1a>
 801278c:	0dd2      	lsrs	r2, r2, #23
 801278e:	e7f1      	b.n	8012774 <scalbnf+0x3c>
 8012790:	2a00      	cmp	r2, #0
 8012792:	dd05      	ble.n	80127a0 <scalbnf+0x68>
 8012794:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8012798:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 801279c:	4618      	mov	r0, r3
 801279e:	bd38      	pop	{r3, r4, r5, pc}
 80127a0:	f112 0f16 	cmn.w	r2, #22
 80127a4:	da05      	bge.n	80127b2 <scalbnf+0x7a>
 80127a6:	f24c 3250 	movw	r2, #50000	; 0xc350
 80127aa:	4295      	cmp	r5, r2
 80127ac:	dce5      	bgt.n	801277a <scalbnf+0x42>
 80127ae:	4907      	ldr	r1, [pc, #28]	; (80127cc <scalbnf+0x94>)
 80127b0:	e7e4      	b.n	801277c <scalbnf+0x44>
 80127b2:	3219      	adds	r2, #25
 80127b4:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 80127b8:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80127bc:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 80127c0:	e7e1      	b.n	8012786 <scalbnf+0x4e>
 80127c2:	bf00      	nop
 80127c4:	ffff3cb0 	.word	0xffff3cb0
 80127c8:	7149f2ca 	.word	0x7149f2ca
 80127cc:	0da24260 	.word	0x0da24260

080127d0 <_init>:
 80127d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127d2:	bf00      	nop
 80127d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127d6:	bc08      	pop	{r3}
 80127d8:	469e      	mov	lr, r3
 80127da:	4770      	bx	lr

080127dc <_fini>:
 80127dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127de:	bf00      	nop
 80127e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127e2:	bc08      	pop	{r3}
 80127e4:	469e      	mov	lr, r3
 80127e6:	4770      	bx	lr
